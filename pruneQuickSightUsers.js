// This file is committed because Terraform needs it to be there. Source code is in src folder
/*! For license information please see pruneQuickSightUsers.js.LICENSE.txt */
(()=>{var e={446:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AwsCrc32=void 0;var r=n(717),s=n(658),o=n(79),i=function(){function e(){this.crc32=new o.Crc32}return e.prototype.update=function(e){(0,s.isEmptyData)(e)||this.crc32.update((0,s.convertToBuffer)(e))},e.prototype.digest=function(){return r.__awaiter(this,void 0,void 0,(function(){return r.__generator(this,(function(e){return[2,(0,s.numToUint8)(this.crc32.digest())]}))}))},e.prototype.reset=function(){this.crc32=new o.Crc32},e}();t.AwsCrc32=i},79:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AwsCrc32=t.Crc32=t.crc32=void 0;var r=n(717),s=n(658);t.crc32=function(e){return(new o).update(e).digest()};var o=function(){function e(){this.checksum=4294967295}return e.prototype.update=function(e){var t,n;try{for(var s=r.__values(e),o=s.next();!o.done;o=s.next()){var a=o.value;this.checksum=this.checksum>>>8^i[255&(this.checksum^a)]}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}return this},e.prototype.digest=function(){return(4294967295^this.checksum)>>>0},e}();t.Crc32=o;var i=(0,s.uint32ArrayFrom)([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117]),a=n(446);Object.defineProperty(t,"AwsCrc32",{enumerable:!0,get:function(){return a.AwsCrc32}})},717:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>o,__asyncDelegator:()=>v,__asyncGenerator:()=>b,__asyncValues:()=>S,__await:()=>w,__awaiter:()=>l,__classPrivateFieldGet:()=>I,__classPrivateFieldSet:()=>A,__createBinding:()=>p,__decorate:()=>a,__exportStar:()=>f,__extends:()=>s,__generator:()=>d,__importDefault:()=>P,__importStar:()=>x,__makeTemplateObject:()=>E,__metadata:()=>u,__param:()=>c,__read:()=>m,__rest:()=>i,__spread:()=>g,__spreadArrays:()=>y,__values:()=>h});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},r(e,t)};function s(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},o.apply(this,arguments)};function i(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n}function a(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}function c(e,t){return function(n,r){t(n,r,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))}function d(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&o[0]?r.return:o[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,o[1])).done)return s;switch(r=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){i.label=o[1];break}if(6===o[0]&&i.label<s[1]){i.label=s[1],s=o;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(o);break}s[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function p(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}function f(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||(t[n]=e[n])}function h(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,s,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(s)throw s.error}}return i}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),s=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,a=o.length;i<a;i++,s++)r[s]=o[i];return r}function w(e){return this instanceof w?(this.v=e,this):new w(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,s=n.apply(e,t||[]),o=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){s[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=s[e](t)).value instanceof w?Promise.resolve(n.value.v).then(c,u):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function c(e){a("next",e)}function u(e){a("throw",e)}function l(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}function v(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,s){t[r]=e[r]?function(t){return(n=!n)?{value:w(e[r](t)),done:"return"===r}:s?s(t):t}:s}}function S(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=h(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,s){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,s,(t=e[n](t)).done,t.value)}))}}}function E(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function x(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function P(e){return e&&e.__esModule?e:{default:e}}function I(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function A(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},106:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToBuffer=void 0;var r=n(84),s="undefined"!=typeof Buffer&&Buffer.from?function(e){return Buffer.from(e,"utf8")}:r.fromUtf8;t.convertToBuffer=function(e){return e instanceof Uint8Array?e:"string"==typeof e?s(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}},658:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=t.numToUint8=t.isEmptyData=t.convertToBuffer=void 0;var r=n(106);Object.defineProperty(t,"convertToBuffer",{enumerable:!0,get:function(){return r.convertToBuffer}});var s=n(304);Object.defineProperty(t,"isEmptyData",{enumerable:!0,get:function(){return s.isEmptyData}});var o=n(174);Object.defineProperty(t,"numToUint8",{enumerable:!0,get:function(){return o.numToUint8}});var i=n(558);Object.defineProperty(t,"uint32ArrayFrom",{enumerable:!0,get:function(){return i.uint32ArrayFrom}})},304:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmptyData=void 0,t.isEmptyData=function(e){return"string"==typeof e?0===e.length:0===e.byteLength}},174:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numToUint8=void 0,t.numToUint8=function(e){return new Uint8Array([(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e])}},558:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=void 0,t.uint32ArrayFrom=function(e){if(!Uint32Array.from){for(var t=new Uint32Array(e.length),n=0;n<e.length;)t[n]=e[n],n+=1;return t}return Uint32Array.from(e)}},84:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fromUtf8:()=>r,toUtf8:()=>s});const r=e=>"function"==typeof TextEncoder?function(e){return(new TextEncoder).encode(e)}(e):(e=>{const t=[];for(let n=0,r=e.length;n<r;n++){const r=e.charCodeAt(n);if(r<128)t.push(r);else if(r<2048)t.push(r>>6|192,63&r|128);else if(n+1<e.length&&55296==(64512&r)&&56320==(64512&e.charCodeAt(n+1))){const s=65536+((1023&r)<<10)+(1023&e.charCodeAt(++n));t.push(s>>18|240,s>>12&63|128,s>>6&63|128,63&s|128)}else t.push(r>>12|224,r>>6&63|128,63&r|128)}return Uint8Array.from(t)})(e),s=e=>"function"==typeof TextDecoder?function(e){return new TextDecoder("utf-8").decode(e)}(e):(e=>{let t="";for(let n=0,r=e.length;n<r;n++){const r=e[n];if(r<128)t+=String.fromCharCode(r);else if(192<=r&&r<224){const s=e[++n];t+=String.fromCharCode((31&r)<<6|63&s)}else if(240<=r&&r<365){const s="%"+[r,e[++n],e[++n],e[++n]].map((e=>e.toString(16))).join("%");t+=decodeURIComponent(s)}else t+=String.fromCharCode((15&r)<<12|(63&e[++n])<<6|63&e[++n])}return t})(e)},932:(e,t,n)=>{"use strict";const r=n(501),s=n(844),o=n(192);e.exports={XMLParser:s,XMLValidator:r,XMLBuilder:o}},849:(e,t)=>{"use strict";const n=":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",r="["+n+"]["+n+"\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*",s=new RegExp("^"+r+"$");t.isExist=function(e){return void 0!==e},t.isEmptyObject=function(e){return 0===Object.keys(e).length},t.merge=function(e,t,n){if(t){const r=Object.keys(t),s=r.length;for(let o=0;o<s;o++)e[r[o]]="strict"===n?[t[r[o]]]:t[r[o]]}},t.getValue=function(e){return t.isExist(e)?e:""},t.isName=function(e){return!(null==s.exec(e))},t.getAllMatches=function(e,t){const n=[];let r=t.exec(e);for(;r;){const s=[];s.startIndex=t.lastIndex-r[0].length;const o=r.length;for(let e=0;e<o;e++)s.push(r[e]);n.push(s),r=t.exec(e)}return n},t.nameRegexp=r},501:(e,t,n)=>{"use strict";const r=n(849),s={allowBooleanAttributes:!1,unpairedTags:[]};function o(e){return" "===e||"\t"===e||"\n"===e||"\r"===e}function i(e,t){const n=t;for(;t<e.length;t++)if("?"!=e[t]&&" "!=e[t]);else{const r=e.substr(n,t-n);if(t>5&&"xml"===r)return h("InvalidXml","XML declaration allowed only at the start of the document.",g(e,t));if("?"==e[t]&&">"==e[t+1]){t++;break}}return t}function a(e,t){if(e.length>t+5&&"-"===e[t+1]&&"-"===e[t+2]){for(t+=3;t<e.length;t++)if("-"===e[t]&&"-"===e[t+1]&&">"===e[t+2]){t+=2;break}}else if(e.length>t+8&&"D"===e[t+1]&&"O"===e[t+2]&&"C"===e[t+3]&&"T"===e[t+4]&&"Y"===e[t+5]&&"P"===e[t+6]&&"E"===e[t+7]){let n=1;for(t+=8;t<e.length;t++)if("<"===e[t])n++;else if(">"===e[t]&&(n--,0===n))break}else if(e.length>t+9&&"["===e[t+1]&&"C"===e[t+2]&&"D"===e[t+3]&&"A"===e[t+4]&&"T"===e[t+5]&&"A"===e[t+6]&&"["===e[t+7])for(t+=8;t<e.length;t++)if("]"===e[t]&&"]"===e[t+1]&&">"===e[t+2]){t+=2;break}return t}t.validate=function(e,t){t=Object.assign({},s,t);const n=[];let c=!1,u=!1;"\ufeff"===e[0]&&(e=e.substr(1));for(let s=0;s<e.length;s++)if("<"===e[s]&&"?"===e[s+1]){if(s+=2,s=i(e,s),s.err)return s}else{if("<"!==e[s]){if(o(e[s]))continue;return h("InvalidChar","char '"+e[s]+"' is not expected.",g(e,s))}{let m=s;if(s++,"!"===e[s]){s=a(e,s);continue}{let y=!1;"/"===e[s]&&(y=!0,s++);let w="";for(;s<e.length&&">"!==e[s]&&" "!==e[s]&&"\t"!==e[s]&&"\n"!==e[s]&&"\r"!==e[s];s++)w+=e[s];if(w=w.trim(),"/"===w[w.length-1]&&(w=w.substring(0,w.length-1),s--),d=w,!r.isName(d)){let t;return t=0===w.trim().length?"Invalid space after '<'.":"Tag '"+w+"' is an invalid name.",h("InvalidTag",t,g(e,s))}const b=l(e,s);if(!1===b)return h("InvalidAttr","Attributes for '"+w+"' have open quote.",g(e,s));let v=b.value;if(s=b.index,"/"===v[v.length-1]){const n=s-v.length;v=v.substring(0,v.length-1);const r=p(v,t);if(!0!==r)return h(r.err.code,r.err.msg,g(e,n+r.err.line));c=!0}else if(y){if(!b.tagClosed)return h("InvalidTag","Closing tag '"+w+"' doesn't have proper closing.",g(e,s));if(v.trim().length>0)return h("InvalidTag","Closing tag '"+w+"' can't have attributes or invalid starting.",g(e,m));{const t=n.pop();if(w!==t.tagName){let n=g(e,t.tagStartPos);return h("InvalidTag","Expected closing tag '"+t.tagName+"' (opened in line "+n.line+", col "+n.col+") instead of closing tag '"+w+"'.",g(e,m))}0==n.length&&(u=!0)}}else{const r=p(v,t);if(!0!==r)return h(r.err.code,r.err.msg,g(e,s-v.length+r.err.line));if(!0===u)return h("InvalidXml","Multiple possible root nodes found.",g(e,s));-1!==t.unpairedTags.indexOf(w)||n.push({tagName:w,tagStartPos:m}),c=!0}for(s++;s<e.length;s++)if("<"===e[s]){if("!"===e[s+1]){s++,s=a(e,s);continue}if("?"!==e[s+1])break;if(s=i(e,++s),s.err)return s}else if("&"===e[s]){const t=f(e,s);if(-1==t)return h("InvalidChar","char '&' is not expected.",g(e,s));s=t}else if(!0===u&&!o(e[s]))return h("InvalidXml","Extra text at the end",g(e,s));"<"===e[s]&&s--}}}var d;return c?1==n.length?h("InvalidTag","Unclosed tag '"+n[0].tagName+"'.",g(e,n[0].tagStartPos)):!(n.length>0)||h("InvalidXml","Invalid '"+JSON.stringify(n.map((e=>e.tagName)),null,4).replace(/\r?\n/g,"")+"' found.",{line:1,col:1}):h("InvalidXml","Start tag expected.",1)};const c='"',u="'";function l(e,t){let n="",r="",s=!1;for(;t<e.length;t++){if(e[t]===c||e[t]===u)""===r?r=e[t]:r!==e[t]||(r="");else if(">"===e[t]&&""===r){s=!0;break}n+=e[t]}return""===r&&{value:n,index:t,tagClosed:s}}const d=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function p(e,t){const n=r.getAllMatches(e,d),s={};for(let e=0;e<n.length;e++){if(0===n[e][1].length)return h("InvalidAttr","Attribute '"+n[e][2]+"' has no space in starting.",y(n[e]));if(void 0!==n[e][3]&&void 0===n[e][4])return h("InvalidAttr","Attribute '"+n[e][2]+"' is without value.",y(n[e]));if(void 0===n[e][3]&&!t.allowBooleanAttributes)return h("InvalidAttr","boolean attribute '"+n[e][2]+"' is not allowed.",y(n[e]));const r=n[e][2];if(!m(r))return h("InvalidAttr","Attribute '"+r+"' is an invalid name.",y(n[e]));if(s.hasOwnProperty(r))return h("InvalidAttr","Attribute '"+r+"' is repeated.",y(n[e]));s[r]=1}return!0}function f(e,t){if(";"===e[++t])return-1;if("#"===e[t])return function(e,t){let n=/\d/;for("x"===e[t]&&(t++,n=/[\da-fA-F]/);t<e.length;t++){if(";"===e[t])return t;if(!e[t].match(n))break}return-1}(e,++t);let n=0;for(;t<e.length;t++,n++)if(!(e[t].match(/\w/)&&n<20)){if(";"===e[t])break;return-1}return t}function h(e,t,n){return{err:{code:e,msg:t,line:n.line||n,col:n.col}}}function m(e){return r.isName(e)}function g(e,t){const n=e.substring(0,t).split(/\r?\n/);return{line:n.length,col:n[n.length-1].length+1}}function y(e){return e.startIndex+e[1].length}},192:(e,t,n)=>{"use strict";const r=n(592),s={attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,cdataPropName:!1,format:!1,indentBy:"  ",suppressEmptyNode:!1,suppressUnpairedNode:!0,suppressBooleanAttributes:!0,tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},preserveOrder:!1,commentPropName:!1,unpairedTags:[],entities:[{regex:new RegExp("&","g"),val:"&amp;"},{regex:new RegExp(">","g"),val:"&gt;"},{regex:new RegExp("<","g"),val:"&lt;"},{regex:new RegExp("'","g"),val:"&apos;"},{regex:new RegExp('"',"g"),val:"&quot;"}],processEntities:!0,stopNodes:[],oneListGroup:!1};function o(e){this.options=Object.assign({},s,e),this.options.ignoreAttributes||this.options.attributesGroupName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=c),this.processTextOrObjNode=i,this.options.format?(this.indentate=a,this.tagEndChar=">\n",this.newLine="\n"):(this.indentate=function(){return""},this.tagEndChar=">",this.newLine="")}function i(e,t,n){const r=this.j2x(e,n+1);return void 0!==e[this.options.textNodeName]&&1===Object.keys(e).length?this.buildTextValNode(e[this.options.textNodeName],t,r.attrStr,n):this.buildObjectNode(r.val,t,r.attrStr,n)}function a(e){return this.options.indentBy.repeat(e)}function c(e){return!!e.startsWith(this.options.attributeNamePrefix)&&e.substr(this.attrPrefixLen)}o.prototype.build=function(e){return this.options.preserveOrder?r(e,this.options):(Array.isArray(e)&&this.options.arrayNodeName&&this.options.arrayNodeName.length>1&&(e={[this.options.arrayNodeName]:e}),this.j2x(e,0).val)},o.prototype.j2x=function(e,t){let n="",r="";for(let s in e)if(void 0===e[s]);else if(null===e[s])"?"===s[0]?r+=this.indentate(t)+"<"+s+"?"+this.tagEndChar:r+=this.indentate(t)+"<"+s+"/"+this.tagEndChar;else if(e[s]instanceof Date)r+=this.buildTextValNode(e[s],s,"",t);else if("object"!=typeof e[s]){const o=this.isAttribute(s);if(o)n+=this.buildAttrPairStr(o,""+e[s]);else if(s===this.options.textNodeName){let t=this.options.tagValueProcessor(s,""+e[s]);r+=this.replaceEntitiesValue(t)}else r+=this.buildTextValNode(e[s],s,"",t)}else if(Array.isArray(e[s])){const n=e[s].length;let o="";for(let i=0;i<n;i++){const n=e[s][i];void 0===n||(null===n?"?"===s[0]?r+=this.indentate(t)+"<"+s+"?"+this.tagEndChar:r+=this.indentate(t)+"<"+s+"/"+this.tagEndChar:"object"==typeof n?this.options.oneListGroup?o+=this.j2x(n,t+1).val:o+=this.processTextOrObjNode(n,s,t):o+=this.buildTextValNode(n,s,"",t))}this.options.oneListGroup&&(o=this.buildObjectNode(o,s,"",t)),r+=o}else if(this.options.attributesGroupName&&s===this.options.attributesGroupName){const t=Object.keys(e[s]),r=t.length;for(let o=0;o<r;o++)n+=this.buildAttrPairStr(t[o],""+e[s][t[o]])}else r+=this.processTextOrObjNode(e[s],s,t);return{attrStr:n,val:r}},o.prototype.buildAttrPairStr=function(e,t){return t=this.options.attributeValueProcessor(e,""+t),t=this.replaceEntitiesValue(t),this.options.suppressBooleanAttributes&&"true"===t?" "+e:" "+e+'="'+t+'"'},o.prototype.buildObjectNode=function(e,t,n,r){if(""===e)return"?"===t[0]?this.indentate(r)+"<"+t+n+"?"+this.tagEndChar:this.indentate(r)+"<"+t+n+this.closeTag(t)+this.tagEndChar;{let s="</"+t+this.tagEndChar,o="";return"?"===t[0]&&(o="?",s=""),n&&-1===e.indexOf("<")?this.indentate(r)+"<"+t+n+o+">"+e+s:!1!==this.options.commentPropName&&t===this.options.commentPropName&&0===o.length?this.indentate(r)+`\x3c!--${e}--\x3e`+this.newLine:this.indentate(r)+"<"+t+n+o+this.tagEndChar+e+this.indentate(r)+s}},o.prototype.closeTag=function(e){let t="";return-1!==this.options.unpairedTags.indexOf(e)?this.options.suppressUnpairedNode||(t="/"):t=this.options.suppressEmptyNode?"/":`></${e}`,t},o.prototype.buildTextValNode=function(e,t,n,r){if(!1!==this.options.cdataPropName&&t===this.options.cdataPropName)return this.indentate(r)+`<![CDATA[${e}]]>`+this.newLine;if(!1!==this.options.commentPropName&&t===this.options.commentPropName)return this.indentate(r)+`\x3c!--${e}--\x3e`+this.newLine;if("?"===t[0])return this.indentate(r)+"<"+t+n+"?"+this.tagEndChar;{let s=this.options.tagValueProcessor(t,e);return s=this.replaceEntitiesValue(s),""===s?this.indentate(r)+"<"+t+n+this.closeTag(t)+this.tagEndChar:this.indentate(r)+"<"+t+n+">"+s+"</"+t+this.tagEndChar}},o.prototype.replaceEntitiesValue=function(e){if(e&&e.length>0&&this.options.processEntities)for(let t=0;t<this.options.entities.length;t++){const n=this.options.entities[t];e=e.replace(n.regex,n.val)}return e},e.exports=o},592:e=>{function t(e,i,a,c){let u="",l=!1;for(let d=0;d<e.length;d++){const p=e[d],f=n(p);let h="";if(h=0===a.length?f:`${a}.${f}`,f===i.textNodeName){let e=p[f];s(h,i)||(e=i.tagValueProcessor(f,e),e=o(e,i)),l&&(u+=c),u+=e,l=!1;continue}if(f===i.cdataPropName){l&&(u+=c),u+=`<![CDATA[${p[f][0][i.textNodeName]}]]>`,l=!1;continue}if(f===i.commentPropName){u+=c+`\x3c!--${p[f][0][i.textNodeName]}--\x3e`,l=!0;continue}if("?"===f[0]){const e=r(p[":@"],i),t="?xml"===f?"":c;let n=p[f][0][i.textNodeName];n=0!==n.length?" "+n:"",u+=t+`<${f}${n}${e}?>`,l=!0;continue}let m=c;""!==m&&(m+=i.indentBy);const g=c+`<${f}${r(p[":@"],i)}`,y=t(p[f],i,h,m);-1!==i.unpairedTags.indexOf(f)?i.suppressUnpairedNode?u+=g+">":u+=g+"/>":y&&0!==y.length||!i.suppressEmptyNode?y&&y.endsWith(">")?u+=g+`>${y}${c}</${f}>`:(u+=g+">",y&&""!==c&&(y.includes("/>")||y.includes("</"))?u+=c+i.indentBy+y+c:u+=y,u+=`</${f}>`):u+=g+"/>",l=!0}return u}function n(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function r(e,t){let n="";if(e&&!t.ignoreAttributes)for(let r in e){let s=t.attributeValueProcessor(r,e[r]);s=o(s,t),!0===s&&t.suppressBooleanAttributes?n+=` ${r.substr(t.attributeNamePrefix.length)}`:n+=` ${r.substr(t.attributeNamePrefix.length)}="${s}"`}return n}function s(e,t){let n=(e=e.substr(0,e.length-t.textNodeName.length-1)).substr(e.lastIndexOf(".")+1);for(let r in t.stopNodes)if(t.stopNodes[r]===e||t.stopNodes[r]==="*."+n)return!0;return!1}function o(e,t){if(e&&e.length>0&&t.processEntities)for(let n=0;n<t.entities.length;n++){const r=t.entities[n];e=e.replace(r.regex,r.val)}return e}e.exports=function(e,n){let r="";return n.format&&n.indentBy.length>0&&(r="\n"),t(e,n,"",r)}},780:(e,t,n)=>{const r=n(849);function s(e,t){let n="";for(;t<e.length&&"'"!==e[t]&&'"'!==e[t];t++)n+=e[t];if(n=n.trim(),-1!==n.indexOf(" "))throw new Error("External entites are not supported");const r=e[t++];let s="";for(;t<e.length&&e[t]!==r;t++)s+=e[t];return[n,s,t]}function o(e,t){return"!"===e[t+1]&&"-"===e[t+2]&&"-"===e[t+3]}function i(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"N"===e[t+3]&&"T"===e[t+4]&&"I"===e[t+5]&&"T"===e[t+6]&&"Y"===e[t+7]}function a(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"L"===e[t+3]&&"E"===e[t+4]&&"M"===e[t+5]&&"E"===e[t+6]&&"N"===e[t+7]&&"T"===e[t+8]}function c(e,t){return"!"===e[t+1]&&"A"===e[t+2]&&"T"===e[t+3]&&"T"===e[t+4]&&"L"===e[t+5]&&"I"===e[t+6]&&"S"===e[t+7]&&"T"===e[t+8]}function u(e,t){return"!"===e[t+1]&&"N"===e[t+2]&&"O"===e[t+3]&&"T"===e[t+4]&&"A"===e[t+5]&&"T"===e[t+6]&&"I"===e[t+7]&&"O"===e[t+8]&&"N"===e[t+9]}function l(e){if(r.isName(e))return e;throw new Error(`Invalid entity name ${e}`)}e.exports=function(e,t){const n={};if("O"!==e[t+3]||"C"!==e[t+4]||"T"!==e[t+5]||"Y"!==e[t+6]||"P"!==e[t+7]||"E"!==e[t+8])throw new Error("Invalid Tag instead of DOCTYPE");{t+=9;let r=1,d=!1,p=!1,f="";for(;t<e.length;t++)if("<"!==e[t]||p)if(">"===e[t]){if(p?"-"===e[t-1]&&"-"===e[t-2]&&(p=!1,r--):r--,0===r)break}else"["===e[t]?d=!0:f+=e[t];else{if(d&&i(e,t))t+=7,[entityName,val,t]=s(e,t+1),-1===val.indexOf("&")&&(n[l(entityName)]={regx:RegExp(`&${entityName};`,"g"),val});else if(d&&a(e,t))t+=8;else if(d&&c(e,t))t+=8;else if(d&&u(e,t))t+=9;else{if(!o)throw new Error("Invalid DOCTYPE");p=!0}r++,f=""}if(0!==r)throw new Error("Unclosed DOCTYPE")}return{entities:n,i:t}}},745:(e,t)=>{const n={preserveOrder:!1,attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0,eNotation:!0},tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1,transformTagName:!1,transformAttributeName:!1,updateTag:function(e,t,n){return e}};t.buildOptions=function(e){return Object.assign({},n,e)},t.defaultOptions=n},78:(e,t,n)=>{"use strict";const r=n(849),s=n(311),o=n(780),i=n(153);function a(e){const t=Object.keys(e);for(let n=0;n<t.length;n++){const r=t[n];this.lastEntities[r]={regex:new RegExp("&"+r+";","g"),val:e[r]}}}function c(e,t,n,r,s,o,i){if(void 0!==e&&(this.options.trimValues&&!r&&(e=e.trim()),e.length>0)){i||(e=this.replaceEntitiesValue(e));const r=this.options.tagValueProcessor(t,e,n,s,o);return null==r?e:typeof r!=typeof e||r!==e?r:this.options.trimValues||e.trim()===e?v(e,this.options.parseTagValue,this.options.numberParseOptions):e}}function u(e){if(this.options.removeNSPrefix){const t=e.split(":"),n="/"===e.charAt(0)?"/":"";if("xmlns"===t[0])return"";2===t.length&&(e=n+t[1])}return e}"<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g,r.nameRegexp);const l=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?","gm");function d(e,t,n){if(!this.options.ignoreAttributes&&"string"==typeof e){const n=r.getAllMatches(e,l),s=n.length,o={};for(let e=0;e<s;e++){const r=this.resolveNameSpace(n[e][1]);let s=n[e][4],i=this.options.attributeNamePrefix+r;if(r.length)if(this.options.transformAttributeName&&(i=this.options.transformAttributeName(i)),"__proto__"===i&&(i="#__proto__"),void 0!==s){this.options.trimValues&&(s=s.trim()),s=this.replaceEntitiesValue(s);const e=this.options.attributeValueProcessor(r,s,t);o[i]=null==e?s:typeof e!=typeof s||e!==s?e:v(s,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(o[i]=!0)}if(!Object.keys(o).length)return;if(this.options.attributesGroupName){const e={};return e[this.options.attributesGroupName]=o,e}return o}}const p=function(e){e=e.replace(/\r\n?/g,"\n");const t=new s("!xml");let n=t,r="",i="";for(let a=0;a<e.length;a++)if("<"===e[a])if("/"===e[a+1]){const t=y(e,">",a,"Closing Tag is not closed.");let s=e.substring(a+2,t).trim();if(this.options.removeNSPrefix){const e=s.indexOf(":");-1!==e&&(s=s.substr(e+1))}this.options.transformTagName&&(s=this.options.transformTagName(s)),n&&(r=this.saveTextToParentTag(r,n,i));const o=i.substring(i.lastIndexOf(".")+1);if(s&&-1!==this.options.unpairedTags.indexOf(s))throw new Error(`Unpaired tag can not be used as closing tag: </${s}>`);let c=0;o&&-1!==this.options.unpairedTags.indexOf(o)?(c=i.lastIndexOf(".",i.lastIndexOf(".")-1),this.tagsNodeStack.pop()):c=i.lastIndexOf("."),i=i.substring(0,c),n=this.tagsNodeStack.pop(),r="",a=t}else if("?"===e[a+1]){let t=w(e,a,!1,"?>");if(!t)throw new Error("Pi Tag is not closed.");if(r=this.saveTextToParentTag(r,n,i),this.options.ignoreDeclaration&&"?xml"===t.tagName||this.options.ignorePiTags);else{const e=new s(t.tagName);e.add(this.options.textNodeName,""),t.tagName!==t.tagExp&&t.attrExpPresent&&(e[":@"]=this.buildAttributesMap(t.tagExp,i,t.tagName)),this.addChild(n,e,i)}a=t.closeIndex+1}else if("!--"===e.substr(a+1,3)){const t=y(e,"--\x3e",a+4,"Comment is not closed.");if(this.options.commentPropName){const s=e.substring(a+4,t-2);r=this.saveTextToParentTag(r,n,i),n.add(this.options.commentPropName,[{[this.options.textNodeName]:s}])}a=t}else if("!D"===e.substr(a+1,2)){const t=o(e,a);this.docTypeEntities=t.entities,a=t.i}else if("!["===e.substr(a+1,2)){const t=y(e,"]]>",a,"CDATA is not closed.")-2,s=e.substring(a+9,t);if(r=this.saveTextToParentTag(r,n,i),this.options.cdataPropName)n.add(this.options.cdataPropName,[{[this.options.textNodeName]:s}]);else{let e=this.parseTextData(s,n.tagname,i,!0,!1,!0);null==e&&(e=""),n.add(this.options.textNodeName,e)}a=t+2}else{let o=w(e,a,this.options.removeNSPrefix),c=o.tagName,u=o.tagExp,l=o.attrExpPresent,d=o.closeIndex;this.options.transformTagName&&(c=this.options.transformTagName(c)),n&&r&&"!xml"!==n.tagname&&(r=this.saveTextToParentTag(r,n,i,!1));const p=n;if(p&&-1!==this.options.unpairedTags.indexOf(p.tagname)&&(n=this.tagsNodeStack.pop(),i=i.substring(0,i.lastIndexOf("."))),c!==t.tagname&&(i+=i?"."+c:c),this.isItStopNode(this.options.stopNodes,i,c)){let t="";if(u.length>0&&u.lastIndexOf("/")===u.length-1)a=o.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(c))a=o.closeIndex;else{const n=this.readStopNodeData(e,c,d+1);if(!n)throw new Error(`Unexpected end of ${c}`);a=n.i,t=n.tagContent}const r=new s(c);c!==u&&l&&(r[":@"]=this.buildAttributesMap(u,i,c)),t&&(t=this.parseTextData(t,c,i,!0,l,!0,!0)),i=i.substr(0,i.lastIndexOf(".")),r.add(this.options.textNodeName,t),this.addChild(n,r,i)}else{if(u.length>0&&u.lastIndexOf("/")===u.length-1){"/"===c[c.length-1]?(c=c.substr(0,c.length-1),u=c):u=u.substr(0,u.length-1),this.options.transformTagName&&(c=this.options.transformTagName(c));const e=new s(c);c!==u&&l&&(e[":@"]=this.buildAttributesMap(u,i,c)),this.addChild(n,e,i),i=i.substr(0,i.lastIndexOf("."))}else{const e=new s(c);this.tagsNodeStack.push(n),c!==u&&l&&(e[":@"]=this.buildAttributesMap(u,i,c)),this.addChild(n,e,i),n=e}r="",a=d}}else r+=e[a];return t.child};function f(e,t,n){const r=this.options.updateTag(t.tagname,n,t[":@"]);!1===r||("string"==typeof r?(t.tagname=r,e.addChild(t)):e.addChild(t))}const h=function(e){if(this.options.processEntities){for(let t in this.docTypeEntities){const n=this.docTypeEntities[t];e=e.replace(n.regx,n.val)}for(let t in this.lastEntities){const n=this.lastEntities[t];e=e.replace(n.regex,n.val)}if(this.options.htmlEntities)for(let t in this.htmlEntities){const n=this.htmlEntities[t];e=e.replace(n.regex,n.val)}e=e.replace(this.ampEntity.regex,this.ampEntity.val)}return e};function m(e,t,n,r){return e&&(void 0===r&&(r=0===Object.keys(t.child).length),void 0!==(e=this.parseTextData(e,t.tagname,n,!1,!!t[":@"]&&0!==Object.keys(t[":@"]).length,r))&&""!==e&&t.add(this.options.textNodeName,e),e=""),e}function g(e,t,n){const r="*."+n;for(const n in e){const s=e[n];if(r===s||t===s)return!0}return!1}function y(e,t,n,r){const s=e.indexOf(t,n);if(-1===s)throw new Error(r);return s+t.length-1}function w(e,t,n,r=">"){const s=function(e,t,n=">"){let r,s="";for(let o=t;o<e.length;o++){let t=e[o];if(r)t===r&&(r="");else if('"'===t||"'"===t)r=t;else if(t===n[0]){if(!n[1])return{data:s,index:o};if(e[o+1]===n[1])return{data:s,index:o}}else"\t"===t&&(t=" ");s+=t}}(e,t+1,r);if(!s)return;let o=s.data;const i=s.index,a=o.search(/\s/);let c=o,u=!0;if(-1!==a&&(c=o.substr(0,a).replace(/\s\s*$/,""),o=o.substr(a+1)),n){const e=c.indexOf(":");-1!==e&&(c=c.substr(e+1),u=c!==s.data.substr(e+1))}return{tagName:c,tagExp:o,closeIndex:i,attrExpPresent:u}}function b(e,t,n){const r=n;let s=1;for(;n<e.length;n++)if("<"===e[n])if("/"===e[n+1]){const o=y(e,">",n,`${t} is not closed`);if(e.substring(n+2,o).trim()===t&&(s--,0===s))return{tagContent:e.substring(r,n),i:o};n=o}else if("?"===e[n+1])n=y(e,"?>",n+1,"StopNode is not closed.");else if("!--"===e.substr(n+1,3))n=y(e,"--\x3e",n+3,"StopNode is not closed.");else if("!["===e.substr(n+1,2))n=y(e,"]]>",n,"StopNode is not closed.")-2;else{const r=w(e,n,">");r&&((r&&r.tagName)===t&&"/"!==r.tagExp[r.tagExp.length-1]&&s++,n=r.closeIndex)}}function v(e,t,n){if(t&&"string"==typeof e){const t=e.trim();return"true"===t||"false"!==t&&i(e,n)}return r.isExist(e)?e:""}e.exports=class{constructor(e){this.options=e,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={apos:{regex:/&(apos|#39|#x27);/g,val:"'"},gt:{regex:/&(gt|#62|#x3E);/g,val:">"},lt:{regex:/&(lt|#60|#x3C);/g,val:"<"},quot:{regex:/&(quot|#34|#x22);/g,val:'"'}},this.ampEntity={regex:/&(amp|#38|#x26);/g,val:"&"},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:" "},cent:{regex:/&(cent|#162);/g,val:"¢"},pound:{regex:/&(pound|#163);/g,val:"£"},yen:{regex:/&(yen|#165);/g,val:"¥"},euro:{regex:/&(euro|#8364);/g,val:"€"},copyright:{regex:/&(copy|#169);/g,val:"©"},reg:{regex:/&(reg|#174);/g,val:"®"},inr:{regex:/&(inr|#8377);/g,val:"₹"}},this.addExternalEntities=a,this.parseXml=p,this.parseTextData=c,this.resolveNameSpace=u,this.buildAttributesMap=d,this.isItStopNode=g,this.replaceEntitiesValue=h,this.readStopNodeData=b,this.saveTextToParentTag=m,this.addChild=f}}},844:(e,t,n)=>{const{buildOptions:r}=n(745),s=n(78),{prettify:o}=n(997),i=n(501);e.exports=class{constructor(e){this.externalEntities={},this.options=r(e)}parse(e,t){if("string"==typeof e);else{if(!e.toString)throw new Error("XML data is accepted in String or Bytes[] form.");e=e.toString()}if(t){!0===t&&(t={});const n=i.validate(e,t);if(!0!==n)throw Error(`${n.err.msg}:${n.err.line}:${n.err.col}`)}const n=new s(this.options);n.addExternalEntities(this.externalEntities);const r=n.parseXml(e);return this.options.preserveOrder||void 0===r?r:o(r,this.options)}addEntity(e,t){if(-1!==t.indexOf("&"))throw new Error("Entity value can't have '&'");if(-1!==e.indexOf("&")||-1!==e.indexOf(";"))throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");if("&"===t)throw new Error("An entity with value '&' is not permitted");this.externalEntities[e]=t}}},997:(e,t)=>{"use strict";function n(e,t,i){let a;const c={};for(let u=0;u<e.length;u++){const l=e[u],d=r(l);let p="";if(p=void 0===i?d:i+"."+d,d===t.textNodeName)void 0===a?a=l[d]:a+=""+l[d];else{if(void 0===d)continue;if(l[d]){let e=n(l[d],t,p);const r=o(e,t);l[":@"]?s(e,l[":@"],p,t):1!==Object.keys(e).length||void 0===e[t.textNodeName]||t.alwaysCreateTextNode?0===Object.keys(e).length&&(t.alwaysCreateTextNode?e[t.textNodeName]="":e=""):e=e[t.textNodeName],void 0!==c[d]&&c.hasOwnProperty(d)?(Array.isArray(c[d])||(c[d]=[c[d]]),c[d].push(e)):t.isArray(d,p,r)?c[d]=[e]:c[d]=e}}}return"string"==typeof a?a.length>0&&(c[t.textNodeName]=a):void 0!==a&&(c[t.textNodeName]=a),c}function r(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function s(e,t,n,r){if(t){const s=Object.keys(t),o=s.length;for(let i=0;i<o;i++){const o=s[i];r.isArray(o,n+"."+o,!0,!0)?e[o]=[t[o]]:e[o]=t[o]}}}function o(e,t){const{textNodeName:n}=t,r=Object.keys(e).length;return 0===r||!(1!==r||!e[n]&&"boolean"!=typeof e[n]&&0!==e[n])}t.prettify=function(e,t){return n(e,t)}},311:e=>{"use strict";e.exports=class{constructor(e){this.tagname=e,this.child=[],this[":@"]={}}add(e,t){"__proto__"===e&&(e="#__proto__"),this.child.push({[e]:t})}addChild(e){"__proto__"===e.tagname&&(e.tagname="#__proto__"),e[":@"]&&Object.keys(e[":@"]).length>0?this.child.push({[e.tagname]:e.child,":@":e[":@"]}):this.child.push({[e.tagname]:e.child})}}},153:e=>{const t=/^[-+]?0x[a-fA-F0-9]+$/,n=/^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const r={hex:!0,leadingZeros:!0,decimalPoint:".",eNotation:!0};e.exports=function(e,s={}){if(s=Object.assign({},r,s),!e||"string"!=typeof e)return e;let o=e.trim();if(void 0!==s.skipLike&&s.skipLike.test(o))return e;if(s.hex&&t.test(o))return Number.parseInt(o,16);{const t=n.exec(o);if(t){const n=t[1],r=t[2];let a=(i=t[3])&&-1!==i.indexOf(".")?("."===(i=i.replace(/0+$/,""))?i="0":"."===i[0]?i="0"+i:"."===i[i.length-1]&&(i=i.substr(0,i.length-1)),i):i;const c=t[4]||t[6];if(!s.leadingZeros&&r.length>0&&n&&"."!==o[2])return e;if(!s.leadingZeros&&r.length>0&&!n&&"."!==o[1])return e;{const t=Number(o),i=""+t;return-1!==i.search(/[eE]/)||c?s.eNotation?t:e:-1!==o.indexOf(".")?"0"===i&&""===a||i===a||n&&i==="-"+a?t:e:r?a===i||n+a===i?t:e:o===i||o===n+i?t:e}}return e}var i}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";n.r(r),n.d(r,{default:()=>nf});const e=e=>{let t=e.httpHandler;return{setHttpHandler(e){t=e},httpHandler:()=>t,updateHttpClientConfig(e,n){t.updateHttpClientConfig(e,n)},httpHandlerConfigs:()=>t.httpHandlerConfigs()}},t=e=>({httpHandler:e.httpHandler()});var s,o,i,a,c,u;!function(e){e.HEADER="header",e.QUERY="query"}(s||(s={})),function(e){e.HEADER="header",e.QUERY="query"}(o||(o={})),function(e){e.HTTP="http",e.HTTPS="https"}(i||(i={})),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(a||(a={})),(u=c||(c={}))[u.HEADER=0]="HEADER",u[u.TRAILER=1]="TRAILER";const l="__smithy_context";var d,p;!function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"}(d||(d={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(p||(p={}));class f{constructor(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.slice(-1)?`${e.protocol}:`:e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?`/${e.path}`:e.path:"/",this.username=e.username,this.password=e.password,this.fragment=e.fragment}static isInstance(e){if(!e)return!1;const t=e;return"method"in t&&"protocol"in t&&"hostname"in t&&"path"in t&&"object"==typeof t.query&&"object"==typeof t.headers}clone(){const e=new f({...this,headers:{...this.headers}});var t;return e.query&&(e.query=(t=e.query,Object.keys(t).reduce(((e,n)=>{const r=t[n];return{...e,[n]:Array.isArray(r)?[...r]:r}}),{}))),e}}class h{constructor(e){this.statusCode=e.statusCode,this.reason=e.reason,this.headers=e.headers||{},this.body=e.body}static isInstance(e){if(!e)return!1;const t=e;return"number"==typeof t.statusCode&&"object"==typeof t.headers}}const m={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},g=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{if(!f.isInstance(n.request))return t(n);const{request:r}=n,{handlerProtocol:s=""}=e.requestHandler.metadata||{};if(s.indexOf("h2")>=0&&!r.headers[":authority"])delete r.headers.host,r.headers[":authority"]=r.hostname+(r.port?":"+r.port:"");else if(!r.headers.host){let e=r.hostname;null!=r.port&&(e+=`:${r.port}`),r.headers.host=e}return t(n)})(e),m)}}),y={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},w=e=>({applyToStack:e=>{e.add(((e,t)=>async n=>{try{const r=await e(n),{clientName:s,commandName:o,logger:i,dynamoDbDocumentClientOptions:a={}}=t,{overrideInputFilterSensitiveLog:c,overrideOutputFilterSensitiveLog:u}=a,l=c??t.inputFilterSensitiveLog,d=u??t.outputFilterSensitiveLog,{$metadata:p,...f}=r.output;return i?.info?.({clientName:s,commandName:o,input:l(n.input),output:d(f),metadata:p}),r}catch(e){const{clientName:r,commandName:s,logger:o,dynamoDbDocumentClientOptions:i={}}=t,{overrideInputFilterSensitiveLog:a}=i,c=a??t.inputFilterSensitiveLog;throw o?.error?.({clientName:r,commandName:s,input:c(n.input),error:e,metadata:e.$metadata}),e}}),y)}}),b="X-Amzn-Trace-Id",v={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"},S=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{const{request:r}=n;if(!f.isInstance(r)||"node"!==e.runtime||r.headers.hasOwnProperty(b))return t(n);const s=process.env.AWS_LAMBDA_FUNCTION_NAME,o=process.env._X_AMZN_TRACE_ID,i=e=>"string"==typeof e&&e.length>0;return i(s)&&i(o)&&(r.headers[b]=o),t({...n,request:r})})(e),v)}}),E=(e,t,n)=>{let r,s,o,i=!1;const a=async()=>{s||(s=e());try{r=await s,o=!0,i=!1}finally{s=void 0}return r};return void 0===t?async e=>(o&&!e?.forceRefresh||(r=await a()),r):async e=>(o&&!e?.forceRefresh||(r=await a()),i?r:n&&!n(r)?(i=!0,r):t(r)?(await a(),r):r)};n(79);const x={},P={};for(let e=0;e<256;e++){let t=e.toString(16).toLowerCase();1===t.length&&(t=`0${t}`),x[e]=t,P[t]=e}function I(e){let t="";for(let n=0;n<e.byteLength;n++)t+=x[e[n]];return t}class A{constructor(e){if(this.bytes=e,8!==e.byteLength)throw new Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(`${e} is too large (or, if negative, too small) to represent as an Int64`);const t=new Uint8Array(8);for(let n=7,r=Math.abs(Math.round(e));n>-1&&r>0;n--,r/=256)t[n]=r;return e<0&&k(t),new A(t)}valueOf(){const e=this.bytes.slice(0),t=128&e[0];return t&&k(e),parseInt(I(e),16)*(t?-1:1)}toString(){return String(this.valueOf())}}function k(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,0===e[t]);t--);}class T{constructor(e,t){this.toUtf8=e,this.fromUtf8=t}format(e){const t=[];for(const n of Object.keys(e)){const r=this.fromUtf8(n);t.push(Uint8Array.from([r.byteLength]),r,this.formatHeaderValue(e[n]))}const n=new Uint8Array(t.reduce(((e,t)=>e+t.byteLength),0));let r=0;for(const e of t)n.set(e,r),r+=e.byteLength;return n}formatHeaderValue(e){switch(e.type){case"boolean":return Uint8Array.from([e.value?0:1]);case"byte":return Uint8Array.from([2,e.value]);case"short":const t=new DataView(new ArrayBuffer(3));return t.setUint8(0,3),t.setInt16(1,e.value,!1),new Uint8Array(t.buffer);case"integer":const n=new DataView(new ArrayBuffer(5));return n.setUint8(0,4),n.setInt32(1,e.value,!1),new Uint8Array(n.buffer);case"long":const r=new Uint8Array(9);return r[0]=5,r.set(e.value.bytes,1),r;case"binary":const s=new DataView(new ArrayBuffer(3+e.value.byteLength));s.setUint8(0,6),s.setUint16(1,e.value.byteLength,!1);const o=new Uint8Array(s.buffer);return o.set(e.value,3),o;case"string":const i=this.fromUtf8(e.value),a=new DataView(new ArrayBuffer(3+i.byteLength));a.setUint8(0,7),a.setUint16(1,i.byteLength,!1);const c=new Uint8Array(a.buffer);return c.set(i,3),c;case"timestamp":const u=new Uint8Array(9);return u[0]=8,u.set(A.fromNumber(e.value.valueOf()).bytes,1),u;case"uuid":if(!q.test(e.value))throw new Error(`Invalid UUID received: ${e.value}`);const l=new Uint8Array(17);return l[0]=9,l.set(function(e){if(e.length%2!=0)throw new Error("Hex encoded strings must have an even number length");const t=new Uint8Array(e.length/2);for(let n=0;n<e.length;n+=2){const r=e.slice(n,n+2).toLowerCase();if(!(r in P))throw new Error(`Cannot decode unrecognized sequence ${r} as hexadecimal`);t[n/2]=P[r]}return t}(e.value.replace(/\-/g,"")),1),l}}parse(e){const t={};let n=0;for(;n<e.byteLength;){const r=e.getUint8(n++),s=this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+n,r));switch(n+=r,e.getUint8(n++)){case 0:t[s]={type:O,value:!0};break;case 1:t[s]={type:O,value:!1};break;case 2:t[s]={type:R,value:e.getInt8(n++)};break;case 3:t[s]={type:N,value:e.getInt16(n,!1)},n+=2;break;case 4:t[s]={type:$,value:e.getInt32(n,!1)},n+=4;break;case 5:t[s]={type:D,value:new A(new Uint8Array(e.buffer,e.byteOffset+n,8))},n+=8;break;case 6:const r=e.getUint16(n,!1);n+=2,t[s]={type:_,value:new Uint8Array(e.buffer,e.byteOffset+n,r)},n+=r;break;case 7:const o=e.getUint16(n,!1);n+=2,t[s]={type:M,value:this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+n,o))},n+=o;break;case 8:t[s]={type:j,value:new Date(new A(new Uint8Array(e.buffer,e.byteOffset+n,8)).valueOf())},n+=8;break;case 9:const i=new Uint8Array(e.buffer,e.byteOffset+n,16);n+=16,t[s]={type:U,value:`${I(i.subarray(0,4))}-${I(i.subarray(4,6))}-${I(i.subarray(6,8))}-${I(i.subarray(8,10))}-${I(i.subarray(10))}`};break;default:throw new Error("Unrecognized header type tag")}}return t}}var C;!function(e){e[e.boolTrue=0]="boolTrue",e[e.boolFalse=1]="boolFalse",e[e.byte=2]="byte",e[e.short=3]="short",e[e.integer=4]="integer",e[e.long=5]="long",e[e.byteArray=6]="byteArray",e[e.string=7]="string",e[e.timestamp=8]="timestamp",e[e.uuid=9]="uuid"}(C||(C={}));const O="boolean",R="byte",N="short",$="integer",D="long",_="binary",M="string",j="timestamp",U="uuid",q=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;Symbol.asyncIterator,Symbol.asyncIterator,Symbol.asyncIterator,Symbol.asyncIterator;const F=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t},z=e=>"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||"[object ArrayBuffer]"===Object.prototype.toString.call(e),L=require("buffer"),V=(e,t=0,n=e.byteLength-t)=>{if(!z(e))throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof e} (${e})`);return L.Buffer.from(e,t,n)},B=(e,t)=>{if("string"!=typeof e)throw new TypeError(`The "input" argument must be of type string. Received type ${typeof e} (${e})`);return t?L.Buffer.from(e,t):L.Buffer.from(e)},W=e=>{const t=B(e,"utf8");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength/Uint8Array.BYTES_PER_ELEMENT)},H=e=>"string"==typeof e?W(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e),K=e=>V(e.buffer,e.byteOffset,e.byteLength).toString("utf8"),G="X-Amz-Date",J="X-Amz-Signature",X="X-Amz-Security-Token",Q="authorization",Y=G.toLowerCase(),Z=[Q,Y,"date"],ee=J.toLowerCase(),te="x-amz-content-sha256",ne=X.toLowerCase(),re={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},se=/^proxy-/,oe=/^sec-/,ie="AWS4-HMAC-SHA256",ae="AWS4-HMAC-SHA256-PAYLOAD",ce="aws4_request",ue={},le=[],de=(e,t,n)=>`${e}/${t}/${n}/${ce}`,pe=(e,t,n)=>{const r=new e(t);return r.update(H(n)),r.digest()},fe=({headers:e},t,n)=>{const r={};for(const s of Object.keys(e).sort()){if(null==e[s])continue;const o=s.toLowerCase();(o in re||t?.has(o)||se.test(o)||oe.test(o))&&(!n||n&&!n.has(o))||(r[o]=e[s].trim().replace(/\s+/g," "))}return r},he=e=>encodeURIComponent(e).replace(/[!'()*]/g,me),me=e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`,ge=async({headers:e,body:t},n)=>{for(const t of Object.keys(e))if(t.toLowerCase()===te)return e[t];if(null==t)return"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";if("string"==typeof t||ArrayBuffer.isView(t)||z(t)){const e=new n;return e.update(H(t)),I(await e.digest())}return"UNSIGNED-PAYLOAD"},ye=({headers:e,query:t,...n})=>({...n,headers:{...e},query:t?we(t):void 0}),we=e=>Object.keys(e).reduce(((t,n)=>{const r=e[n];return{...t,[n]:Array.isArray(r)?[...r]:r}}),{}),be=e=>{e="function"==typeof e.clone?e.clone():ye(e);for(const t of Object.keys(e.headers))Z.indexOf(t.toLowerCase())>-1&&delete e.headers[t];return e};class ve{constructor({applyChecksum:e,credentials:t,region:n,service:r,sha256:s,uriEscapePath:o=!0}){this.headerMarshaller=new T(K,W),this.service=r,this.sha256=s,this.uriEscapePath=o,this.applyChecksum="boolean"!=typeof e||e,this.regionProvider=F(n),this.credentialProvider=F(t)}async presign(e,t={}){const{signingDate:n=new Date,expiresIn:r=3600,unsignableHeaders:s,unhoistableHeaders:o,signableHeaders:i,signingRegion:a,signingService:c}=t,u=await this.credentialProvider();this.validateResolvedCredentials(u);const l=a??await this.regionProvider(),{longDate:d,shortDate:p}=Se(n);if(r>604800)return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");const f=de(p,l,c??this.service),h=((e,t={})=>{const{headers:n,query:r={}}="function"==typeof e.clone?e.clone():ye(e);for(const e of Object.keys(n)){const s=e.toLowerCase();"x-amz-"!==s.slice(0,6)||t.unhoistableHeaders?.has(s)||(r[e]=n[e],delete n[e])}return{...e,headers:n,query:r}})(be(e),{unhoistableHeaders:o});u.sessionToken&&(h.query[X]=u.sessionToken),h.query["X-Amz-Algorithm"]=ie,h.query["X-Amz-Credential"]=`${u.accessKeyId}/${f}`,h.query[G]=d,h.query["X-Amz-Expires"]=r.toString(10);const m=fe(h,s,i);return h.query["X-Amz-SignedHeaders"]=Ee(m),h.query[J]=await this.getSignature(d,f,this.getSigningKey(u,l,p,c),this.createCanonicalRequest(h,m,await ge(e,this.sha256))),h}async sign(e,t){return"string"==typeof e?this.signString(e,t):e.headers&&e.payload?this.signEvent(e,t):e.message?this.signMessage(e,t):this.signRequest(e,t)}async signEvent({headers:e,payload:t},{signingDate:n=new Date,priorSignature:r,signingRegion:s,signingService:o}){const i=s??await this.regionProvider(),{shortDate:a,longDate:c}=Se(n),u=de(a,i,o??this.service),l=await ge({headers:{},body:t},this.sha256),d=new this.sha256;d.update(e);const p=I(await d.digest()),f=[ae,c,u,r,p,l].join("\n");return this.signString(f,{signingDate:n,signingRegion:i,signingService:o})}async signMessage(e,{signingDate:t=new Date,signingRegion:n,signingService:r}){return this.signEvent({headers:this.headerMarshaller.format(e.message.headers),payload:e.message.body},{signingDate:t,signingRegion:n,signingService:r,priorSignature:e.priorSignature}).then((t=>({message:e.message,signature:t})))}async signString(e,{signingDate:t=new Date,signingRegion:n,signingService:r}={}){const s=await this.credentialProvider();this.validateResolvedCredentials(s);const o=n??await this.regionProvider(),{shortDate:i}=Se(t),a=new this.sha256(await this.getSigningKey(s,o,i,r));return a.update(H(e)),I(await a.digest())}async signRequest(e,{signingDate:t=new Date,signableHeaders:n,unsignableHeaders:r,signingRegion:s,signingService:o}={}){const i=await this.credentialProvider();this.validateResolvedCredentials(i);const a=s??await this.regionProvider(),c=be(e),{longDate:u,shortDate:l}=Se(t),d=de(l,a,o??this.service);c.headers[Y]=u,i.sessionToken&&(c.headers[ne]=i.sessionToken);const p=await ge(c,this.sha256);!((e,t)=>{e=e.toLowerCase();for(const n of Object.keys(t))if(e===n.toLowerCase())return!0;return!1})(te,c.headers)&&this.applyChecksum&&(c.headers[te]=p);const f=fe(c,r,n),h=await this.getSignature(u,d,this.getSigningKey(i,a,l,o),this.createCanonicalRequest(c,f,p));return c.headers[Q]=`${ie} Credential=${i.accessKeyId}/${d}, SignedHeaders=${Ee(f)}, Signature=${h}`,c}createCanonicalRequest(e,t,n){const r=Object.keys(t).sort();return`${e.method}\n${this.getCanonicalPath(e)}\n${(({query:e={}})=>{const t=[],n={};for(const r of Object.keys(e).sort()){if(r.toLowerCase()===ee)continue;t.push(r);const s=e[r];"string"==typeof s?n[r]=`${he(r)}=${he(s)}`:Array.isArray(s)&&(n[r]=s.slice(0).reduce(((e,t)=>e.concat([`${he(r)}=${he(t)}`])),[]).sort().join("&"))}return t.map((e=>n[e])).filter((e=>e)).join("&")})(e)}\n${r.map((e=>`${e}:${t[e]}`)).join("\n")}\n\n${r.join(";")}\n${n}`}async createStringToSign(e,t,n){const r=new this.sha256;r.update(H(n));const s=await r.digest();return`${ie}\n${e}\n${t}\n${I(s)}`}getCanonicalPath({path:e}){if(this.uriEscapePath){const t=[];for(const n of e.split("/"))0!==n?.length&&"."!==n&&(".."===n?t.pop():t.push(n));const n=`${e?.startsWith("/")?"/":""}${t.join("/")}${t.length>0&&e?.endsWith("/")?"/":""}`;return encodeURIComponent(n).replace(/%2F/g,"/")}return e}async getSignature(e,t,n,r){const s=await this.createStringToSign(e,t,r),o=new this.sha256(await n);return o.update(H(s)),I(await o.digest())}getSigningKey(e,t,n,r){return(async(e,t,n,r,s)=>{const o=`${n}:${r}:${s}:${I(await pe(e,t.secretAccessKey,t.accessKeyId))}:${t.sessionToken}`;if(o in ue)return ue[o];for(le.push(o);le.length>50;)delete ue[le.shift()];let i=`AWS4${t.secretAccessKey}`;for(const t of[n,r,s,ce])i=await pe(e,i,t);return ue[o]=i})(this.sha256,e,n,t,r||this.service)}validateResolvedCredentials(e){if("object"!=typeof e||"string"!=typeof e.accessKeyId||"string"!=typeof e.secretAccessKey)throw new Error("Resolved credential object is not valid")}}const Se=e=>{const t=(n=e,(e=>"number"==typeof e?new Date(1e3*e):"string"==typeof e?Number(e)?new Date(1e3*Number(e)):new Date(e):e)(n).toISOString().replace(/\.\d{3}Z$/,"Z")).replace(/[\-:]/g,"");var n;return{longDate:t,shortDate:t.slice(0,8)}},Ee=e=>Object.keys(e).sort().join(";"),xe=e=>{const t=e.credentials?Pe(e.credentials):e.credentialDefaultProvider(e),{signingEscapePath:n=!0,systemClockOffset:r=e.systemClockOffset||0,sha256:s}=e;let o;return o=e.signer?F(e.signer):e.regionInfoProvider?()=>F(e.region)().then((async t=>[await e.regionInfoProvider(t,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},t])).then((([r,o])=>{const{signingRegion:i,signingService:a}=r;e.signingRegion=e.signingRegion||i||o,e.signingName=e.signingName||a||e.serviceId;const c={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:s,uriEscapePath:n};return new(e.signerConstructor||ve)(c)})):async r=>{const o=(r=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await F(e.region)(),properties:{}},r)).signingRegion,i=r.signingName;e.signingRegion=e.signingRegion||o,e.signingName=e.signingName||i||e.serviceId;const a={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:s,uriEscapePath:n};return new(e.signerConstructor||ve)(a)},{...e,systemClockOffset:r,signingEscapePath:n,credentials:t,signer:o}},Pe=e=>"function"==typeof e?E(e,(e=>void 0!==e.expiration&&e.expiration.getTime()-Date.now()<3e5),(e=>void 0!==e.expiration)):F(e),Ie=e=>new Date(Date.now()+e),Ae=(e,t)=>{const n=Date.parse(e);return((e,t)=>Math.abs(Ie(t).getTime()-e)>=3e5)(n,t)?n-Date.now():t},ke=e=>h.isInstance(e)?e.headers?.date??e.headers?.Date:void 0,Te={name:"awsAuthMiddleware",tags:["SIGNATURE","AWSAUTH"],relation:"after",toMiddleware:"retryMiddleware",override:!0},Ce=e=>({applyToStack:t=>{t.addRelativeTo((e=>(t,n)=>async function(r){if(!f.isInstance(r.request))return t(r);const s=n.endpointV2?.properties?.authSchemes?.[0],o="sigv4a"===s?.name?s?.signingRegionSet?.join(","):void 0,i=await e.signer(s);let a;const c={signingDate:Ie(e.systemClockOffset),signingRegion:o||n.signing_region,signingService:n.signing_service};if(n.s3ExpressIdentity){const e=i;if(a=await e.signWithCredentials(r.request,n.s3ExpressIdentity,c),a.headers["X-Amz-Security-Token"]||a.headers["x-amz-security-token"])throw new Error("X-Amz-Security-Token must not be set for s3-express requests.")}else a=await i.sign(r.request,c);const u=await t({...r,request:a}).catch((t=>{const n=t.ServerTime??ke(t.$response);throw n&&(e.systemClockOffset=Ae(n,e.systemClockOffset)),t})),l=ke(u.response);return l&&(e.systemClockOffset=Ae(l,e.systemClockOffset)),u})(e),Te)}});function Oe(e){return{...e,customUserAgent:"string"==typeof e.customUserAgent?[[e.customUserAgent]]:e.customUserAgent}}const Re=new RegExp("^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$"),Ne=e=>Re.test(e)||e.startsWith("[")&&e.endsWith("]"),$e=new RegExp("^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$"),De=(e,t=!1)=>{if(!t)return $e.test(e);const n=e.split(".");for(const e of n)if(!De(e))return!1;return!0},_e={},Me="endpoints";function je(e){return"object"!=typeof e||null==e?e:"ref"in e?`$${je(e.ref)}`:"fn"in e?`${e.fn}(${(e.argv||[]).map(je).join(", ")})`:JSON.stringify(e,null,2)}class Ue extends Error{constructor(e){super(e),this.name="EndpointError"}}const qe=(e,t)=>(e=>{const t=e.split("."),n=[];for(const r of t){const t=r.indexOf("[");if(-1!==t){if(r.indexOf("]")!==r.length-1)throw new Ue(`Path: '${e}' does not end with ']'`);const s=r.slice(t+1,-1);if(Number.isNaN(parseInt(s)))throw new Ue(`Invalid array index: '${s}' in path: '${e}'`);0!==t&&n.push(r.slice(0,t)),n.push(s)}else n.push(r)}return n})(t).reduce(((n,r)=>{if("object"!=typeof n)throw new Ue(`Index '${r}' in '${t}' not found in '${JSON.stringify(e)}'`);return Array.isArray(n)?n[parseInt(r)]:n[r]}),e),Fe={[i.HTTP]:80,[i.HTTPS]:443},ze={booleanEquals:(e,t)=>e===t,getAttr:qe,isSet:e=>null!=e,isValidHostLabel:De,not:e=>!e,parseURL:e=>{const t=(()=>{try{if(e instanceof URL)return e;if("object"==typeof e&&"hostname"in e){const{hostname:t,port:n,protocol:r="",path:s="",query:o={}}=e,i=new URL(`${r}//${t}${n?`:${n}`:""}${s}`);return i.search=Object.entries(o).map((([e,t])=>`${e}=${t}`)).join("&"),i}return new URL(e)}catch(e){return null}})();if(!t)return console.error(`Unable to parse ${JSON.stringify(e)} as a whatwg URL.`),null;const n=t.href,{host:r,hostname:s,pathname:o,protocol:a,search:c}=t;if(c)return null;const u=a.slice(0,-1);if(!Object.values(i).includes(u))return null;const l=Ne(s);return{scheme:u,authority:`${r}${n.includes(`${r}:${Fe[u]}`)||"string"==typeof e&&e.includes(`${r}:${Fe[u]}`)?`:${Fe[u]}`:""}`,path:o,normalizedPath:o.endsWith("/")?o:`${o}/`,isIp:l}},stringEquals:(e,t)=>e===t,substring:(e,t,n,r)=>t>=n||e.length<n?null:r?e.substring(e.length-n,e.length-t):e.substring(t,n),uriEncode:e=>encodeURIComponent(e).replace(/[!*'()]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},Le=(e,t)=>{const n=[],r={...t.endpointParams,...t.referenceRecord};let s=0;for(;s<e.length;){const t=e.indexOf("{",s);if(-1===t){n.push(e.slice(s));break}n.push(e.slice(s,t));const o=e.indexOf("}",t);if(-1===o){n.push(e.slice(t));break}"{"===e[t+1]&&"}"===e[o+1]&&(n.push(e.slice(t+1,o)),s=o+2);const i=e.substring(t+1,o);if(i.includes("#")){const[e,t]=i.split("#");n.push(qe(r[e],t))}else n.push(r[i]);s=o+1}return n.join("")},Ve=(e,t,n)=>{if("string"==typeof e)return Le(e,n);if(e.fn)return Be(e,n);if(e.ref)return(({ref:e},t)=>({...t.endpointParams,...t.referenceRecord}[e]))(e,n);throw new Ue(`'${t}': ${String(e)} is not a string, function or reference.`)},Be=({fn:e,argv:t},n)=>{const r=t.map((e=>["boolean","number"].includes(typeof e)?e:Ve(e,"arg",n))),s=e.split(".");return s[0]in _e&&null!=s[1]?_e[s[0]][s[1]](...r):ze[e](...r)},We=({assign:e,...t},n)=>{if(e&&e in n.referenceRecord)throw new Ue(`'${e}' is already defined in Reference Record.`);const r=Be(t,n);return n.logger?.debug?.(Me,`evaluateCondition: ${je(t)} = ${je(r)}`),{result:""===r||!!r,...null!=e&&{toAssign:{name:e,value:r}}}},He=(e=[],t)=>{const n={};for(const r of e){const{result:e,toAssign:s}=We(r,{...t,referenceRecord:{...t.referenceRecord,...n}});if(!e)return{result:e};s&&(n[s.name]=s.value,t.logger?.debug?.(Me,`assign: ${s.name} := ${je(s.value)}`))}return{result:!0,referenceRecord:n}},Ke=(e,t)=>Object.entries(e).reduce(((e,[n,r])=>({...e,[n]:r.map((e=>{const r=Ve(e,"Header value entry",t);if("string"!=typeof r)throw new Ue(`Header '${n}' value '${r}' is not a string`);return r}))})),{}),Ge=(e,t)=>{if(Array.isArray(e))return e.map((e=>Ge(e,t)));switch(typeof e){case"string":return Le(e,t);case"object":if(null===e)throw new Ue(`Unexpected endpoint property: ${e}`);return Je(e,t);case"boolean":return e;default:throw new Ue("Unexpected endpoint property type: "+typeof e)}},Je=(e,t)=>Object.entries(e).reduce(((e,[n,r])=>({...e,[n]:Ge(r,t)})),{}),Xe=(e,t)=>{const n=Ve(e,"Endpoint URL",t);if("string"==typeof n)try{return new URL(n)}catch(e){throw console.error(`Failed to construct URL with ${n}`,e),e}throw new Ue("Endpoint URL must be a string, got "+typeof n)},Qe=(e,t)=>{const{conditions:n,endpoint:r}=e,{result:s,referenceRecord:o}=He(n,t);if(!s)return;const i={...t,referenceRecord:{...t.referenceRecord,...o}},{url:a,properties:c,headers:u}=r;return t.logger?.debug?.(Me,`Resolving endpoint from template: ${je(r)}`),{...null!=u&&{headers:Ke(u,i)},...null!=c&&{properties:Je(c,i)},url:Xe(a,i)}},Ye=(e,t)=>{const{conditions:n,error:r}=e,{result:s,referenceRecord:o}=He(n,t);if(s)throw new Ue(Ve(r,"Error",{...t,referenceRecord:{...t.referenceRecord,...o}}))},Ze=(e,t)=>{const{conditions:n,rules:r}=e,{result:s,referenceRecord:o}=He(n,t);if(s)return et(r,{...t,referenceRecord:{...t.referenceRecord,...o}})},et=(e,t)=>{for(const n of e)if("endpoint"===n.type){const e=Qe(n,t);if(e)return e}else if("error"===n.type)Ye(n,t);else{if("tree"!==n.type)throw new Ue(`Unknown endpoint rule: ${n}`);{const e=Ze(n,t);if(e)return e}}throw new Ue("Rules evaluation failed")},tt=(e,t)=>{const{endpointParams:n,logger:r}=t,{parameters:s,rules:o}=e;t.logger?.debug?.(`${Me} Initial EndpointParams: ${je(n)}`);const i=Object.entries(s).filter((([,e])=>null!=e.default)).map((([e,t])=>[e,t.default]));if(i.length>0)for(const[e,t]of i)n[e]=n[e]??t;const a=Object.entries(s).filter((([,e])=>e.required)).map((([e])=>e));for(const e of a)if(null==n[e])throw new Ue(`Missing required parameter: '${e}'`);const c=et(o,{endpointParams:n,logger:r,referenceRecord:{}});if(t.endpointParams?.Endpoint)try{const e=new URL(t.endpointParams.Endpoint),{protocol:n,port:r}=e;c.url.protocol=n,c.url.port=r}catch(e){}return t.logger?.debug?.(`${Me} Resolved endpoint: ${je(c)}`),c},nt=(e,t=!1)=>{if(t){for(const t of e.split("."))if(!nt(t))return!1;return!0}return!(!De(e)||e.length<3||e.length>63||e!==e.toLowerCase()||Ne(e))};let rt=JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-east-1","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af|il)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"il-central-1":{"description":"Israel (Tel Aviv)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","implicitGlobalRegion":"cn-northwest-1","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-gov-west-1","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","implicitGlobalRegion":"us-iso-east-1","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","implicitGlobalRegion":"us-isob-east-1","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","implicitGlobalRegion":"eu-isoe-west-1","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","implicitGlobalRegion":"us-isof-south-1","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}');const st={isVirtualHostableS3Bucket:nt,parseArn:e=>{const t=e.split(":");if(t.length<6)return null;const[n,r,s,o,i,...a]=t;return"arn"!==n||""===r||""===s||""===a[0]?null:{partition:r,service:s,region:o,accountId:i,resourceId:a[0].includes("/")?a[0].split("/"):a}},partition:e=>{const{partitions:t}=rt;for(const n of t){const{regions:t,outputs:r}=n;for(const[n,s]of Object.entries(t))if(n===e)return{...r,...s}}for(const n of t){const{regionRegex:t,outputs:r}=n;if(new RegExp(t).test(e))return{...r}}const n=t.find((e=>"aws"===e.id));if(!n)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...n.outputs}}};_e.aws=st;const ot="user-agent",it="x-amz-user-agent",at=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,ct=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,ut=e=>{const t=e[0].split("/").map((e=>e.replace(at,"-"))).join("/"),n=e[1]?.replace(ct,"-"),r=t.indexOf("/"),s=t.substring(0,r);let o=t.substring(r+1);return"api"===s&&(o=o.toLowerCase()),[s,o,n].filter((e=>e&&e.length>0)).reduce(((e,t,n)=>{switch(n){case 0:return t;case 1:return`${e}/${t}`;default:return`${e}#${t}`}}),"")},lt={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},dt=e=>({applyToStack:t=>{var n;t.add((n=e,(e,t)=>async r=>{const{request:s}=r;if(!f.isInstance(s))return e(r);const{headers:o}=s,i=t?.userAgent?.map(ut)||[],a=(await n.defaultUserAgentProvider()).map(ut),c=n?.customUserAgent?.map(ut)||[],u=[].concat([...a,...i,...c]).join(" "),l=[...a.filter((e=>e.startsWith("aws-sdk-"))),...c].join(" ");return"browser"!==n.runtime?(l&&(o[it]=o[it]?`${o[ot]} ${l}`:l),o[ot]=u):o[it]=u,e({...r,request:s})}),lt)}});var pt;!function(e){e.ENV="env",e.CONFIG="shared config entry"}(pt||(pt={}));const ft=(e,t,n)=>{if(t in e){if("true"===e[t])return!0;if("false"===e[t])return!1;throw new Error(`Cannot load ${n} "${t}". Expected "true" or "false", got ${e[t]}.`)}},ht={environmentVariableSelector:e=>ft(e,"AWS_USE_DUALSTACK_ENDPOINT",pt.ENV),configFileSelector:e=>ft(e,"use_dualstack_endpoint",pt.CONFIG),default:!1},mt={environmentVariableSelector:e=>ft(e,"AWS_USE_FIPS_ENDPOINT",pt.ENV),configFileSelector:e=>ft(e,"use_fips_endpoint",pt.CONFIG),default:!1},gt={environmentVariableSelector:e=>e.AWS_REGION,configFileSelector:e=>e.region,default:()=>{throw new Error("Region is missing")}},yt={preferredFile:"credentials"},wt=e=>"string"==typeof e&&(e.startsWith("fips-")||e.endsWith("-fips")),bt=e=>wt(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e,vt=e=>{const{region:t,useFipsEndpoint:n}=e;if(!t)throw new Error("Region is missing");return{...e,region:async()=>{if("string"==typeof t)return bt(t);const e=await t();return bt(e)},useFipsEndpoint:async()=>{const e="string"==typeof t?t:await t();return!!wt(e)||("function"!=typeof n?Promise.resolve(!!n):n())}}},St="content-length",Et={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},xt=e=>({applyToStack:t=>{var n;t.add((n=e.bodyLengthChecker,e=>async t=>{const r=t.request;if(f.isInstance(r)){const{body:e,headers:t}=r;if(e&&-1===Object.keys(t).map((e=>e.toLowerCase())).indexOf(St))try{const t=n(e);r.headers={...r.headers,[St]:String(t)}}catch(e){}}return e({...t,request:r})}),Et)}}),Pt=/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/,It=/(\d+\.){3}\d+/,At=/\.\./,kt=(e,t,n)=>{const r=async()=>{const r=n[e]??n[t];return"function"==typeof r?r():r};return"endpoint"===e||"endpoint"===t?async()=>{const e=await r();if(e&&"object"==typeof e){if("url"in e)return e.url.href;if("hostname"in e){const{protocol:t,hostname:n,port:r,path:s}=e;return`${t}//${n}${r?":"+r:""}${s}`}}return e}:r};class Tt extends Error{constructor(e,t=!0){super(e),this.tryNextLink=t,this.name="ProviderError",Object.setPrototypeOf(this,Tt.prototype)}static from(e,t=!0){return Object.assign(new this(e.message,t),e)}}const Ct=(...e)=>async()=>{if(0===e.length)throw new Tt("No providers in chain");let t;for(const n of e)try{return await n()}catch(e){if(t=e,e?.tryNextLink)continue;throw e}throw t};class Ot extends Tt{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="CredentialsProviderError",Object.setPrototypeOf(this,Ot.prototype)}}const Rt=require("os"),Nt=require("path"),$t={},Dt=()=>{const{HOME:e,USERPROFILE:t,HOMEPATH:n,HOMEDRIVE:r=`C:${Nt.sep}`}=process.env;if(e)return e;if(t)return t;if(n)return`${r}${n}`;const s=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return $t[s]||($t[s]=(0,Rt.homedir)()),$t[s]},_t="AWS_PROFILE",Mt=e=>e.profile||process.env[_t]||"default",jt=require("crypto");var Ut=n.n(jt);const qt=e=>{const t=(0,jt.createHash)("sha1").update(e).digest("hex");return(0,Nt.join)(Dt(),".aws","sso","cache",`${t}.json`)},Ft=require("fs"),{readFile:zt}=Ft.promises,Lt=async e=>{const t=qt(e),n=await zt(t,"utf8");return JSON.parse(n)},Vt=e=>Object.entries(e).filter((([e])=>{const t=e.split(Zt);return!(2!==t.length||!Object.values(d).includes(t[0]))})).reduce(((e,[t,n])=>(e[t.startsWith(d.PROFILE)?t.split(Zt)[1]:t]=n,e)),{...e.default&&{default:e.default}}),Bt=()=>process.env.AWS_CONFIG_FILE||(0,Nt.join)(Dt(),".aws","config"),Wt=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,Nt.join)(Dt(),".aws","credentials"),Ht=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,Kt=["__proto__","profile __proto__"],Gt=e=>{const t={};let n,r;for(const s of e.split(/\r?\n/)){const e=s.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){n=void 0,r=void 0;const t=e.substring(1,e.length-1),s=Ht.exec(t);if(s){const[,e,,t]=s;Object.values(d).includes(e)&&(n=[e,t].join(Zt))}else n=t;if(Kt.includes(t))throw new Error(`Found invalid profile name "${t}"`)}else if(n){const o=e.indexOf("=");if(![0,-1].includes(o)){const[i,a]=[e.substring(0,o).trim(),e.substring(o+1).trim()];if(""===a)r=i;else{r&&s.trimStart()===s&&(r=void 0),t[n]=t[n]||{};const e=r?[r,i].join(Zt):i;t[n][e]=a}}}}return t},{readFile:Jt}=Ft.promises,Xt={},Qt=(e,t)=>(Xt[e]&&!t?.ignoreCache||(Xt[e]=Jt(e,"utf8")),Xt[e]),Yt=()=>({}),Zt=".",en=async(e={})=>{const{filepath:t=Wt(),configFilepath:n=Bt()}=e,r=await Promise.all([Qt(n,{ignoreCache:e.ignoreCache}).then(Gt).then(Vt).catch(Yt),Qt(t,{ignoreCache:e.ignoreCache}).then(Gt).catch(Yt)]);return{configFile:r[0],credentialsFile:r[1]}},tn=e=>Object.entries(e).filter((([e])=>e.startsWith(d.SSO_SESSION+Zt))).reduce(((e,[t,n])=>({...e,[t.split(Zt)[1]]:n})),{}),nn=()=>({}),rn=async(e={})=>Qt(e.configFilepath??Bt()).then(Gt).then(tn).catch(nn),sn=async e=>{const t=await en(e);return((...e)=>{const t={};for(const n of e)for(const[e,r]of Object.entries(n))void 0!==t[e]?Object.assign(t[e],r):t[e]=r;return t})(t.configFile,t.credentialsFile)},on=({environmentVariableSelector:e,configFileSelector:t,default:n},r={})=>{return E(Ct((s=e,async()=>{try{const e=s(process.env);if(void 0===e)throw new Error;return e}catch(e){throw new Ot(e.message||`Cannot load config from environment variables with getter: ${s}`)}}),((e,{preferredFile:t="config",...n}={})=>async()=>{const r=Mt(n),{configFile:s,credentialsFile:o}=await en(n),i=o[r]||{},a=s[r]||{},c="config"===t?{...i,...a}:{...a,...i};try{const n=e(c,"config"===t?s:o);if(void 0===n)throw new Error;return n}catch(t){throw new Ot(t.message||`Cannot load config for profile ${r} in SDK configuration files with getter: ${e}`)}})(t,r),(e=>{return"function"==typeof e?async()=>await e():(t=e,()=>Promise.resolve(t));var t})(n)));var s},an="AWS_ENDPOINT_URL",cn="endpoint_url",un=e=>{if("string"==typeof e)return un(new URL(e));const{hostname:t,pathname:n,port:r,protocol:s,search:o}=e;let i;return o&&(i=function(e){const t={};if(e=e.replace(/^\?/,""))for(const n of e.split("&")){let[e,r=null]=n.split("=");e=decodeURIComponent(e),r&&(r=decodeURIComponent(r)),e in t?Array.isArray(t[e])?t[e].push(r):t[e]=[t[e],r]:t[e]=r}return t}(o)),{hostname:t,port:r?parseInt(r):void 0,protocol:s,path:n,query:i}},ln=e=>"object"==typeof e?"url"in e?un(e.url):e:un(e),dn=async(e,t,n)=>{const r={},s=t?.getEndpointParameterInstructions?.()||{};for(const[t,o]of Object.entries(s))switch(o.type){case"staticContextParams":r[t]=o.value;break;case"contextParams":r[t]=e[o.name];break;case"clientContextParams":case"builtInParams":r[t]=await kt(o.name,t,n)();break;default:throw new Error("Unrecognized endpoint parameter instruction: "+JSON.stringify(o))}return 0===Object.keys(s).length&&Object.assign(r,n),"s3"===String(n.serviceId).toLowerCase()&&await(async e=>{const t=e?.Bucket||"";if("string"==typeof e.Bucket&&(e.Bucket=t.replace(/#/g,encodeURIComponent("#")).replace(/\?/g,encodeURIComponent("?"))),(e=>{const[t,n,r,s,o,i]=e.split(":"),a="arn"===t&&e.split(":").length>=6,c=5===[t,n,r,o,i].filter(Boolean).length;if(a&&!c)throw new Error(`Invalid ARN: ${e} was an invalid ARN.`);return!!("arn"===t&&n&&r&&o&&i)})(t)){if(!0===e.ForcePathStyle)throw new Error("Path-style addressing cannot be used with ARN buckets")}else n=t,(!Pt.test(n)||It.test(n)||At.test(n)||-1!==t.indexOf(".")&&!String(e.Endpoint).startsWith("http:")||t.toLowerCase()!==t||t.length<3)&&(e.ForcePathStyle=!0);var n;return e.DisableMultiRegionAccessPoints&&(e.disableMultiRegionAccessPoints=!0,e.DisableMRAP=!0),e})(r),r},pn=({config:e,instructions:t})=>(n,r)=>async s=>{const o=await(async(e,t,n,r)=>{if(!n.endpoint){const e=await(async e=>on((e=>({environmentVariableSelector:t=>{const n=e.split(" ").map((e=>e.toUpperCase()));return t[[an,...n].join("_")]||t[an]||void 0},configFileSelector:(t,n)=>{if(n&&t.services){const r=n[["services",t.services].join(Zt)];if(r){const t=e.split(" ").map((e=>e.toLowerCase())),n=r[[t.join("_"),cn].join(Zt)];if(n)return n}}const r=t[cn];if(r)return r},default:void 0}))(e))())(n.serviceId||"");e&&(n.endpoint=()=>Promise.resolve(ln(e)))}const s=await dn(e,t,n);if("function"!=typeof n.endpointProvider)throw new Error("config.endpointProvider is not set.");return n.endpointProvider(s,r)})(s.input,{getEndpointParameterInstructions:()=>t},{...e},r);r.endpointV2=o,r.authSchemes=o.properties?.authSchemes;const i=r.authSchemes?.[0];if(i){r.signing_region=i.signingRegion,r.signing_service=i.signingName;const e=(e=>e[l]||(e[l]={}))(r),t=e?.selectedHttpAuthScheme?.httpAuthOption;t&&(t.signingProperties=Object.assign(t.signingProperties||{},{signing_region:i.signingRegion,signingRegion:i.signingRegion,signing_service:i.signingName,signingName:i.signingName,signingRegionSet:i.signingRegionSet},i.properties))}return n({...s})},fn={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},hn={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function mn(e,t,n){return{applyToStack:r=>{r.add(((e,t)=>(n,r)=>async r=>{const{response:s}=await n(r);try{return{response:s,output:await t(s,e)}}catch(e){if(Object.defineProperty(e,"$response",{value:s}),!("$metadata"in e)){const t="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";e.message+="\n  "+t}throw e}})(e,n),fn),r.add(((e,t)=>(n,r)=>async s=>{const o=r.endpointV2?.url&&e.urlParser?async()=>e.urlParser(r.endpointV2.url):e.endpoint;if(!o)throw new Error("No valid endpoint provider available.");const i=await t(s.input,{...e,endpoint:o});return n({...s,request:i})})(e,t),hn)}}}const gn={step:"serialize",tags:["ENDPOINT_PARAMETERS","ENDPOINT_V2","ENDPOINT"],name:"endpointV2Middleware",override:!0,relation:"before",toMiddleware:hn.name},yn=(e,t)=>({applyToStack:n=>{n.addRelativeTo(pn({config:e,instructions:t}),gn)}}),wn=e=>{const t=e.tls??!0,{endpoint:n}=e,r=null!=n?async()=>ln(await F(n)()):void 0,s=!!n;return{...e,endpoint:r,tls:t,isCustomEndpoint:s,useDualstackEndpoint:F(e.useDualstackEndpoint??!1),useFipsEndpoint:F(e.useFipsEndpoint??!1)}};var bn,vn;(vn=bn||(bn={})).STANDARD="standard",vn.ADAPTIVE="adaptive";const Sn=bn.STANDARD,En=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],xn=["TimeoutError","RequestTimeout","RequestTimeoutException"],Pn=[500,502,503,504],In=["ECONNRESET","ECONNREFUSED","EPIPE","ETIMEDOUT"],An=e=>429===e.$metadata?.httpStatusCode||En.includes(e.name)||1==e.$retryable?.throttling,kn=e=>xn.includes(e.name)||In.includes(e?.code||"")||Pn.includes(e.$metadata?.httpStatusCode||0);class Tn{constructor(e){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=e?.beta??.7,this.minCapacity=e?.minCapacity??1,this.minFillRate=e?.minFillRate??.5,this.scaleConstant=e?.scaleConstant??.4,this.smooth=e?.smooth??.8;const t=this.getCurrentTimeInSeconds();this.lastThrottleTime=t,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(e){if(this.enabled){if(this.refillTokenBucket(),e>this.currentCapacity){const t=(e-this.currentCapacity)/this.fillRate*1e3;await new Promise((e=>setTimeout(e,t)))}this.currentCapacity=this.currentCapacity-e}}refillTokenBucket(){const e=this.getCurrentTimeInSeconds();if(!this.lastTimestamp)return void(this.lastTimestamp=e);const t=(e-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+t),this.lastTimestamp=e}updateClientSendingRate(e){let t;if(this.updateMeasuredRate(),An(e)){const e=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=e,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),t=this.cubicThrottle(e),this.enableTokenBucket()}else this.calculateTimeWindow(),t=this.cubicSuccess(this.getCurrentTimeInSeconds());const n=Math.min(t,2*this.measuredTxRate);this.updateTokenBucketRate(n)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(e){return this.getPrecise(e*this.beta)}cubicSuccess(e){return this.getPrecise(this.scaleConstant*Math.pow(e-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(e){this.refillTokenBucket(),this.fillRate=Math.max(e,this.minFillRate),this.maxCapacity=Math.max(e,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){const e=this.getCurrentTimeInSeconds(),t=Math.floor(2*e)/2;if(this.requestCount++,t>this.lastTxRateBucket){const e=this.requestCount/(t-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(e*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=t}}getPrecise(e){return parseFloat(e.toFixed(8))}}const Cn=({retryDelay:e,retryCount:t,retryCost:n})=>({getRetryCount:()=>t,getRetryDelay:()=>Math.min(2e4,e),getRetryCost:()=>n});class On{constructor(e){this.maxAttempts=e,this.mode=bn.STANDARD,this.capacity=500,this.retryBackoffStrategy=(()=>{let e=100;return{computeNextBackoffDelay:t=>Math.floor(Math.min(2e4,Math.random()*2**t*e)),setDelayBase:t=>{e=t}}})(),this.maxAttemptsProvider="function"==typeof e?e:async()=>e}async acquireInitialRetryToken(e){return Cn({retryDelay:100,retryCount:0})}async refreshRetryTokenForRetry(e,t){const n=await this.getMaxAttempts();if(this.shouldRetry(e,t,n)){const n=t.errorType;this.retryBackoffStrategy.setDelayBase("THROTTLING"===n?500:100);const r=this.retryBackoffStrategy.computeNextBackoffDelay(e.getRetryCount()),s=t.retryAfterHint?Math.max(t.retryAfterHint.getTime()-Date.now()||0,r):r,o=this.getCapacityCost(n);return this.capacity-=o,Cn({retryDelay:s,retryCount:e.getRetryCount()+1,retryCost:o})}throw new Error("No retry token available")}recordSuccess(e){this.capacity=Math.max(500,this.capacity+(e.getRetryCost()??1))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch(e){return console.warn("Max attempts provider could not resolve. Using default of 3"),3}}shouldRetry(e,t,n){return e.getRetryCount()+1<n&&this.capacity>=this.getCapacityCost(t.errorType)&&this.isRetryableError(t.errorType)}getCapacityCost(e){return"TRANSIENT"===e?10:5}isRetryableError(e){return"THROTTLING"===e||"TRANSIENT"===e}}class Rn{constructor(e,t){this.maxAttemptsProvider=e,this.mode=bn.ADAPTIVE;const{rateLimiter:n}=t??{};this.rateLimiter=n??new Tn,this.standardRetryStrategy=new On(e)}async acquireInitialRetryToken(e){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(e)}async refreshRetryTokenForRetry(e,t){return this.rateLimiter.updateClientSendingRate(t),this.standardRetryStrategy.refreshRetryTokenForRetry(e,t)}recordSuccess(e){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(e)}}const Nn="AWS_MAX_ATTEMPTS",$n="max_attempts",Dn={environmentVariableSelector:e=>{const t=e[Nn];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Environment variable ${Nn} mast be a number, got "${t}"`);return n},configFileSelector:e=>{const t=e[$n];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Shared config file entry ${$n} mast be a number, got "${t}"`);return n},default:3},_n=e=>{const{retryStrategy:t}=e,n=F(e.maxAttempts??3);return{...e,maxAttempts:n,retryStrategy:async()=>t||(await F(e.retryMode)()===bn.ADAPTIVE?new Rn(n):new On(n))}},Mn={environmentVariableSelector:e=>e.AWS_RETRY_MODE,configFileSelector:e=>e.retry_mode,default:Sn},jn=new Uint8Array(256);let Un=jn.length;function qn(){return Un>jn.length-16&&(Ut().randomFillSync(jn),Un=0),jn.slice(Un,Un+=16)}const Fn=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,zn=[];for(let e=0;e<256;++e)zn.push((e+256).toString(16).substr(1));const Ln=function(e,t=0){const n=(zn[e[t+0]]+zn[e[t+1]]+zn[e[t+2]]+zn[e[t+3]]+"-"+zn[e[t+4]]+zn[e[t+5]]+"-"+zn[e[t+6]]+zn[e[t+7]]+"-"+zn[e[t+8]]+zn[e[t+9]]+"-"+zn[e[t+10]]+zn[e[t+11]]+zn[e[t+12]]+zn[e[t+13]]+zn[e[t+14]]+zn[e[t+15]]).toLowerCase();if(!function(e){return"string"==typeof e&&Fn.test(e)}(n))throw TypeError("Stringified UUID is invalid");return n},Vn=function(e,t,n){const r=(e=e||{}).random||(e.rng||qn)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=r[e];return t}return Ln(r)},Bn=e=>{const t={errorType:Wn(e)},n=Gn(e.$response);return n&&(t.retryAfterHint=n),t},Wn=e=>An(e)?"THROTTLING":kn(e)?"TRANSIENT":(e=>{if(void 0!==e.$metadata?.httpStatusCode){const t=e.$metadata.httpStatusCode;return 500<=t&&t<=599&&!kn(e)}return!1})(e)?"SERVER_ERROR":"CLIENT_ERROR",Hn={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},Kn=e=>({applyToStack:t=>{t.add((e=>(t,n)=>async r=>{let s=await e.retryStrategy();const o=await e.maxAttempts();if(!(e=>void 0!==e.acquireInitialRetryToken&&void 0!==e.refreshRetryTokenForRetry&&void 0!==e.recordSuccess)(s))return s?.mode&&(n.userAgent=[...n.userAgent||[],["cfg/retry-mode",s.mode]]),s.retry(t,r);{let e=await s.acquireInitialRetryToken(n.partition_id),a=new Error,c=0,u=0;const{request:l}=r;for(f.isInstance(l)&&(l.headers["amz-sdk-invocation-id"]=Vn());;)try{f.isInstance(l)&&(l.headers["amz-sdk-request"]=`attempt=${c+1}; max=${o}`);const{response:n,output:i}=await t(r);return s.recordSuccess(e),i.$metadata.attempts=c+1,i.$metadata.totalRetryDelay=u,{response:n,output:i}}catch(t){const n=Bn(t);a=(i=t)instanceof Error?i:i instanceof Object?Object.assign(new Error,i):"string"==typeof i?new Error(i):new Error(`AWS SDK error wrapper for ${i}`);try{e=await s.refreshRetryTokenForRetry(e,n)}catch(e){throw a.$metadata||(a.$metadata={}),a.$metadata.attempts=c+1,a.$metadata.totalRetryDelay=u,a}c=e.getRetryCount();const r=e.getRetryDelay();u+=r,await new Promise((e=>setTimeout(e,r)))}}var i})(e),Hn)}}),Gn=e=>{if(!h.isInstance(e))return;const t=Object.keys(e.headers).find((e=>"retry-after"===e.toLowerCase()));if(!t)return;const n=e.headers[t],r=Number(n);return Number.isNaN(r)?new Date(n):new Date(1e3*r)};class Jn{trace(){}debug(){}info(){}warn(){}error(){}}const Xn=(e,t)=>{const n=[];if(e&&n.push(e),t)for(const e of t)n.push(e);return n},Qn=(e,t)=>`${e||"anonymous"}${t&&t.length>0?` (a.k.a. ${t.join(",")})`:""}`,Yn=()=>{let e=[],t=[],n=!1;const r=new Set,s=n=>(e.forEach((e=>{n.add(e.middleware,{...e})})),t.forEach((e=>{n.addRelativeTo(e.middleware,{...e})})),n.identifyOnResolve?.(a.identifyOnResolve()),n),o=e=>{const t=[];return e.before.forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...o(e))})),t.push(e),e.after.reverse().forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...o(e))})),t},i=(n=!1)=>{const r=[],s=[],i={};e.forEach((e=>{const t={...e,before:[],after:[]};for(const e of Xn(t.name,t.aliases))i[e]=t;r.push(t)})),t.forEach((e=>{const t={...e,before:[],after:[]};for(const e of Xn(t.name,t.aliases))i[e]=t;s.push(t)})),s.forEach((e=>{if(e.toMiddleware){const t=i[e.toMiddleware];if(void 0===t){if(n)return;throw new Error(`${e.toMiddleware} is not found when adding ${Qn(e.name,e.aliases)} middleware ${e.relation} ${e.toMiddleware}`)}"after"===e.relation&&t.after.push(e),"before"===e.relation&&t.before.push(e)}}));const a=(c=r,c.sort(((e,t)=>Zn[t.step]-Zn[e.step]||er[t.priority||"normal"]-er[e.priority||"normal"]))).map(o).reduce(((e,t)=>(e.push(...t),e)),[]);var c;return a},a={add:(t,n={})=>{const{name:s,override:o,aliases:i}=n,a={step:"initialize",priority:"normal",middleware:t,...n},c=Xn(s,i);if(c.length>0){if(c.some((e=>r.has(e)))){if(!o)throw new Error(`Duplicate middleware name '${Qn(s,i)}'`);for(const t of c){const n=e.findIndex((e=>e.name===t||e.aliases?.some((e=>e===t))));if(-1===n)continue;const r=e[n];if(r.step!==a.step||a.priority!==r.priority)throw new Error(`"${Qn(r.name,r.aliases)}" middleware with ${r.priority} priority in ${r.step} step cannot be overridden by "${Qn(s,i)}" middleware with ${a.priority} priority in ${a.step} step.`);e.splice(n,1)}}for(const e of c)r.add(e)}e.push(a)},addRelativeTo:(e,n)=>{const{name:s,override:o,aliases:i}=n,a={middleware:e,...n},c=Xn(s,i);if(c.length>0){if(c.some((e=>r.has(e)))){if(!o)throw new Error(`Duplicate middleware name '${Qn(s,i)}'`);for(const e of c){const n=t.findIndex((t=>t.name===e||t.aliases?.some((t=>t===e))));if(-1===n)continue;const r=t[n];if(r.toMiddleware!==a.toMiddleware||r.relation!==a.relation)throw new Error(`"${Qn(r.name,r.aliases)}" middleware ${r.relation} "${r.toMiddleware}" middleware cannot be overridden by "${Qn(s,i)}" middleware ${a.relation} "${a.toMiddleware}" middleware.`);t.splice(n,1)}}for(const e of c)r.add(e)}t.push(a)},clone:()=>s(Yn()),use:e=>{e.applyToStack(a)},remove:n=>"string"==typeof n?(n=>{let s=!1;const o=e=>{const t=Xn(e.name,e.aliases);if(t.includes(n)){s=!0;for(const e of t)r.delete(e);return!1}return!0};return e=e.filter(o),t=t.filter(o),s})(n):(n=>{let s=!1;const o=e=>{if(e.middleware===n){s=!0;for(const t of Xn(e.name,e.aliases))r.delete(t);return!1}return!0};return e=e.filter(o),t=t.filter(o),s})(n),removeByTag:n=>{let s=!1;const o=e=>{const{tags:t,name:o,aliases:i}=e;if(t&&t.includes(n)){const e=Xn(o,i);for(const t of e)r.delete(t);return s=!0,!1}return!0};return e=e.filter(o),t=t.filter(o),s},concat:e=>{const t=s(Yn());return t.use(e),t.identifyOnResolve(n||t.identifyOnResolve()||(e.identifyOnResolve?.()??!1)),t},applyToStack:s,identify:()=>i(!0).map((e=>{const t=e.step??e.relation+" "+e.toMiddleware;return Qn(e.name,e.aliases)+" - "+t})),identifyOnResolve:e=>("boolean"==typeof e&&(n=e),n),resolve:(e,t)=>{for(const n of i().map((e=>e.middleware)).reverse())e=n(e,t);return n&&console.log(a.identify()),e}};return a},Zn={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},er={high:3,normal:2,low:1};class tr{constructor(e){this.middlewareStack=Yn(),this.config=e}send(e,t,n){const r="function"!=typeof t?t:void 0,s="function"==typeof t?t:n,o=e.resolveMiddleware(this.middlewareStack,this.config,r);if(!s)return o(e).then((e=>e.output));o(e).then((e=>s(null,e.output)),(e=>s(e))).catch((()=>{}))}destroy(){this.config.requestHandler.destroy&&this.config.requestHandler.destroy()}}const nr=/^[A-Za-z0-9+/]*={0,2}$/,rr=e=>{if(3*e.length%4!=0)throw new TypeError("Incorrect padding on base64 string.");if(!nr.exec(e))throw new TypeError("Invalid base64 string.");const t=B(e,"base64");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)},sr=e=>V(e.buffer,e.byteOffset,e.byteLength).toString("base64");class or extends Uint8Array{static fromString(e,t="utf-8"){if("string"==typeof e)return function(e,t){return"base64"===t?or.mutate(rr(e)):or.mutate(W(e))}(e,t);throw new Error(`Unsupported conversion from ${typeof e} to Uint8ArrayBlobAdapter.`)}static mutate(e){return Object.setPrototypeOf(e,or.prototype),e}transformToString(e="utf-8"){return function(e,t="utf-8"){return"base64"===t?sr(e):K(e)}(this,e)}}const ir=require("stream"),ar=require("http"),cr=require("https"),ur=["ECONNRESET","EPIPE","ETIMEDOUT"],lr=e=>{const t={};for(const n of Object.keys(e)){const r=e[n];t[n]=Array.isArray(r)?r.join(","):r}return t};class dr{constructor(e){this.metadata={handlerProtocol:"http/1.1"},this.configProvider=new Promise(((t,n)=>{"function"==typeof e?e().then((e=>{t(this.resolveDefaultConfig(e))})).catch(n):t(this.resolveDefaultConfig(e))}))}resolveDefaultConfig(e){const{requestTimeout:t,connectionTimeout:n,socketTimeout:r,httpAgent:s,httpsAgent:o}=e||{};return{connectionTimeout:n,requestTimeout:t??r,httpAgent:s||new ar.Agent({keepAlive:!0,maxSockets:50}),httpsAgent:o||new cr.Agent({keepAlive:!0,maxSockets:50})}}destroy(){this.config?.httpAgent?.destroy(),this.config?.httpsAgent?.destroy()}async handle(e,{abortSignal:t}={}){return this.config||(this.config=await this.configProvider),new Promise(((n,r)=>{let s;const o=async e=>{await s,r(e)};if(!this.config)throw new Error("Node HTTP request handler config is not resolved");if(t?.aborted){const e=new Error("Request aborted");return e.name="AbortError",void o(e)}const i="https:"===e.protocol,a=function(e){const t=[];for(let n of Object.keys(e).sort()){const r=e[n];if(n=he(n),Array.isArray(r))for(let e=0,s=r.length;e<s;e++)t.push(`${n}=${he(r[e])}`);else{let e=n;(r||"string"==typeof r)&&(e+=`=${he(r)}`),t.push(e)}}return t.join("&")}(e.query||{});let c;null==e.username&&null==e.password||(c=`${e.username??""}:${e.password??""}`);let u=e.path;a&&(u+=`?${a}`),e.fragment&&(u+=`#${e.fragment}`);const l={headers:e.headers,host:e.hostname,method:e.method,path:u,port:e.port,agent:i?this.config.httpsAgent:this.config.httpAgent,auth:c},d=(i?cr.request:ar.request)(l,(e=>{(async e=>{await s,n(e)})({response:new h({statusCode:e.statusCode||-1,reason:e.statusMessage,headers:lr(e.headers),body:e})})}));d.on("error",(e=>{ur.includes(e.code)?o(Object.assign(e,{name:"TimeoutError"})):o(e)})),((e,t,n=0)=>{if(!n)return;const r=setTimeout((()=>{e.destroy(),t(Object.assign(new Error(`Socket timed out without establishing a connection within ${n} ms`),{name:"TimeoutError"}))}),n);e.on("socket",(e=>{e.connecting?e.on("connect",(()=>{clearTimeout(r)})):clearTimeout(r)}))})(d,o,this.config.connectionTimeout),((e,t,n=0)=>{e.setTimeout(n,(()=>{e.destroy(),t(Object.assign(new Error(`Connection timed out after ${n} ms`),{name:"TimeoutError"}))}))})(d,o,this.config.requestTimeout),t&&(t.onabort=()=>{d.abort();const e=new Error("Request aborted");e.name="AbortError",o(e)});const p=l.agent;"object"==typeof p&&"keepAlive"in p&&((e,{keepAlive:t,keepAliveMsecs:n})=>{!0===t&&e.on("socket",(e=>{e.setKeepAlive(t,n||0)}))})(d,{keepAlive:p.keepAlive,keepAliveMsecs:p.keepAliveMsecs}),s=async function(e,t,n=1e3){const r=t.headers??{},s=r.Expect||r.expect;let o=-1,i=!1;"100-continue"===s&&await Promise.race([new Promise((e=>{o=Number(setTimeout(e,Math.max(1e3,n)))})),new Promise((t=>{e.on("continue",(()=>{clearTimeout(o),t()})),e.on("error",(()=>{i=!0,clearTimeout(o),t()}))}))]),i||function(e,t){t instanceof ir.Readable?t.pipe(e):t?e.end(Buffer.from(t)):e.end()}(e,t.body)}(d,e,this.config.requestTimeout).catch(r)}))}updateHttpClientConfig(e,t){this.config=void 0,this.configProvider=this.configProvider.then((n=>({...n,[e]:t})))}httpHandlerConfigs(){return this.config??{}}}require("http2"),Symbol.iterator;class pr extends ir.Writable{constructor(){super(...arguments),this.bufferedBytes=[]}_write(e,t,n){this.bufferedBytes.push(e),n()}}const fr=e=>new Promise(((t,n)=>{const r=new pr;e.pipe(r),e.on("error",(e=>{r.end(),n(e)})),r.on("error",n),r.on("finish",(function(){const e=new Uint8Array(Buffer.concat(this.bufferedBytes));t(e)}))})),hr=require("util"),mr=async(e=new Uint8Array,t)=>{if(e instanceof Uint8Array)return or.mutate(e);if(!e)return or.mutate(new Uint8Array);const n=t.streamCollector(e);return or.mutate(await n)};class gr{constructor(){this.middlewareStack=Yn()}}const yr="***SensitiveInformation***",wr=e=>{if(null!=e){if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return String(t)!==String(e)&&Rr.warn(Or(`Expected number but observed string: ${e}`)),t}if("number"==typeof e)return e;throw new TypeError(`Expected number, got ${typeof e}: ${e}`)}},br=Math.ceil(2**127*(2-2**-23)),vr=e=>{if(null!=e){if(Number.isInteger(e)&&!Number.isNaN(e))return e;throw new TypeError(`Expected integer, got ${typeof e}: ${e}`)}},Sr=e=>Er(e,32),Er=(e,t)=>{const n=vr(e);if(void 0!==n&&xr(n,t)!==n)throw new TypeError(`Expected ${t}-bit integer, got ${e}`);return n},xr=(e,t)=>{switch(t){case 32:return Int32Array.of(e)[0];case 16:return Int16Array.of(e)[0];case 8:return Int8Array.of(e)[0]}},Pr=(e,t)=>{if(null==e){if(t)throw new TypeError(`Expected a non-null value for ${t}`);throw new TypeError("Expected a non-null value")}return e},Ir=e=>{if(null==e)return;if("object"==typeof e&&!Array.isArray(e))return e;const t=Array.isArray(e)?"array":typeof e;throw new TypeError(`Expected object, got ${t}: ${e}`)},Ar=e=>{if(null!=e){if("string"==typeof e)return e;if(["boolean","number","bigint"].includes(typeof e))return Rr.warn(Or(`Expected string, got ${typeof e}: ${e}`)),String(e);throw new TypeError(`Expected string, got ${typeof e}: ${e}`)}},kr=/(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g,Tr=e=>{const t=e.match(kr);if(null===t||t[0].length!==e.length)throw new TypeError("Expected real number, got implicit NaN");return parseFloat(e)},Cr=e=>Sr("string"==typeof e?Tr(e):e),Or=e=>String(new TypeError(e).stack||e).split("\n").slice(0,5).filter((e=>!e.includes("stackTraceWarning"))).join("\n"),Rr={warn:console.warn},Nr=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],$r=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/),Dr=e=>{if(null==e)return;if("string"!=typeof e)throw new TypeError("RFC-3339 date-times must be expressed as strings");const t=$r.exec(e);if(!t)throw new TypeError("Invalid RFC-3339 date-time value");const[n,r,s,o,i,a,c,u,l]=t,d=(e=>(e=>Er(e,16))("string"==typeof e?Tr(e):e))(Lr(r)),p=qr(s,"month",1,12),f=qr(o,"day",1,31),h=_r(d,p,f,{hours:i,minutes:a,seconds:c,fractionalMilliseconds:u});return"Z"!=l.toUpperCase()&&h.setTime(h.getTime()-zr(l)),h},_r=(e,t,n,r)=>{const s=t-1;return jr(e,s,n),new Date(Date.UTC(e,s,n,qr(r.hours,"hour",0,23),qr(r.minutes,"minute",0,59),qr(r.seconds,"seconds",0,60),Fr(r.fractionalMilliseconds)))},Mr=[31,28,31,30,31,30,31,31,30,31,30,31],jr=(e,t,n)=>{let r=Mr[t];if(1===t&&Ur(e)&&(r=29),n>r)throw new TypeError(`Invalid day for ${Nr[t]} in ${e}: ${n}`)},Ur=e=>e%4==0&&(e%100!=0||e%400==0),qr=(e,t,n,r)=>{const s=(e=>(e=>Er(e,8))("string"==typeof e?Tr(e):e))(Lr(e));if(s<n||s>r)throw new TypeError(`${t} must be between ${n} and ${r}, inclusive`);return s},Fr=e=>null==e?0:1e3*(e=>(e=>{const t=wr(e);if(void 0!==t&&!Number.isNaN(t)&&t!==1/0&&t!==-1/0&&Math.abs(t)>br)throw new TypeError(`Expected 32-bit float, got ${e}`);return t})("string"==typeof e?Tr(e):e))("0."+e),zr=e=>{const t=e[0];let n=1;if("+"==t)n=1;else{if("-"!=t)throw new TypeError(`Offset direction, ${t}, must be "+" or "-"`);n=-1}return n*(60*Number(e.substring(1,3))+Number(e.substring(4,6)))*60*1e3},Lr=e=>{let t=0;for(;t<e.length-1&&"0"===e.charAt(t);)t++;return 0===t?e:e.slice(t)};class Vr extends Error{constructor(e){super(e.message),Object.setPrototypeOf(this,Vr.prototype),this.name=e.name,this.$fault=e.$fault,this.$metadata=e.$metadata}}const Br=(e,t={})=>{Object.entries(t).filter((([,e])=>void 0!==e)).forEach((([t,n])=>{null!=e[t]&&""!==e[t]||(e[t]=n)}));const n=e.message||e.Message||"UnknownError";return e.message=n,delete e.Message,e},Wr=e=>({output:t,parsedBody:n,errorCode:r})=>{(({output:e,parsedBody:t,exceptionCtor:n,errorCode:r})=>{const s=Hr(e),o=s.httpStatusCode?s.httpStatusCode+"":void 0,i=new n({name:t?.code||t?.Code||r||o||"UnknownError",$fault:"client",$metadata:s});throw Br(i,t)})({output:t,parsedBody:n,exceptionCtor:e,errorCode:r})},Hr=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Kr=e=>{switch(e){case"standard":case"cross-region":return{retryMode:"standard",connectionTimeout:3100};case"in-region":return{retryMode:"standard",connectionTimeout:1100};case"mobile":return{retryMode:"standard",connectionTimeout:3e4};default:return{}}};let Gr=!1;const Jr=e=>{e&&!Gr&&parseInt(e.substring(1,e.indexOf(".")))<14&&(Gr=!0)},Xr=e=>{const t=[];for(const n in a){const r=a[n];void 0!==e[r]&&t.push({algorithmId:()=>r,checksumConstructor:()=>e[r]})}return{_checksumAlgorithms:t,addChecksumAlgorithm(e){this._checksumAlgorithms.push(e)},checksumAlgorithms(){return this._checksumAlgorithms}}},Qr=e=>{const t={};return e.checksumAlgorithms().forEach((e=>{t[e.algorithmId()]=e.checksumConstructor()})),t},Yr=e=>{let t=e.retryStrategy;return{setRetryStrategy(e){t=e},retryStrategy:()=>t}},Zr=e=>{const t={};return t.retryStrategy=e.retryStrategy(),t},es=e=>({...Xr(e),...Yr(e)}),ts=e=>({...Qr(e),...Zr(e)});function ns(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}const rs=e=>{const t="#text";for(const n in e)e.hasOwnProperty(n)&&void 0!==e[n][t]?e[n]=e[n][t]:"object"==typeof e[n]&&null!==e[n]&&(e[n]=rs(e[n]));return e},ss=function(){const e=Object.getPrototypeOf(this).constructor,t=new(Function.bind.apply(String,[null,...arguments]));return Object.setPrototypeOf(t,e.prototype),t};function os(e,t,n){let r,s,o;if(void 0===t&&void 0===n)r={},o=e;else{if(r=e,"function"==typeof t)return s=t,o=n,as(r,s,o);o=t}for(const e of Object.keys(o))Array.isArray(o[e])?cs(r,null,o,e):r[e]=o[e];return r}ss.prototype=Object.create(String.prototype,{constructor:{value:ss,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf(ss,String);const is=(e,t)=>{const n={};for(const r in t)cs(n,e,t,r);return n},as=(e,t,n)=>os(e,Object.entries(n).reduce(((e,[n,r])=>(Array.isArray(r)?e[n]=r:e[n]="function"==typeof r?[t,r()]:[t,r],e)),{})),cs=(e,t,n,r)=>{if(null!==t){let s=n[r];"function"==typeof s&&(s=[,s]);const[o=us,i=ls,a=r]=s;return void(("function"==typeof o&&o(t[a])||"function"!=typeof o&&o)&&(e[r]=i(t[a])))}let[s,o]=n[r];if("function"==typeof o){let t;const n=void 0===s&&null!=(t=o()),i="function"==typeof s&&!!s(void 0)||"function"!=typeof s&&!!s;n?e[r]=t:i&&(e[r]=o())}else{const t=void 0===s&&null!=o,n="function"==typeof s&&!!s(o)||"function"!=typeof s&&!!s;(t||n)&&(e[r]=o)}},us=e=>null!=e,ls=e=>e,ds=(e,t,n,r,s,o)=>{if(null==t||void 0===t[n])throw new Error("No value provided for input HTTP label: "+n+".");{const t=r();if(t.length<=0)throw new Error("Empty value provided for input HTTP label: "+n+".");e=e.replace(s,o?t.split("/").map((e=>ns(e))).join("/"):ns(t))}return e},ps=e=>{if(e!=e)return"NaN";switch(e){case 1/0:return"Infinity";case-1/0:return"-Infinity";default:return e}},fs=e=>{if(null==e)return{};if(Array.isArray(e))return e.filter((e=>null!=e));if("object"==typeof e){const t={};for(const n of Object.keys(e))null!=e[n]&&(t[n]=fs(e[n]));return t}return e};class hs extends Vr{constructor(e){super(e),Object.setPrototypeOf(this,hs.prototype)}}class ms extends hs{constructor(e){super({name:"ExpiredTokenException",$fault:"client",...e}),this.name="ExpiredTokenException",this.$fault="client",Object.setPrototypeOf(this,ms.prototype)}}class gs extends hs{constructor(e){super({name:"MalformedPolicyDocumentException",$fault:"client",...e}),this.name="MalformedPolicyDocumentException",this.$fault="client",Object.setPrototypeOf(this,gs.prototype)}}class ys extends hs{constructor(e){super({name:"PackedPolicyTooLargeException",$fault:"client",...e}),this.name="PackedPolicyTooLargeException",this.$fault="client",Object.setPrototypeOf(this,ys.prototype)}}class ws extends hs{constructor(e){super({name:"RegionDisabledException",$fault:"client",...e}),this.name="RegionDisabledException",this.$fault="client",Object.setPrototypeOf(this,ws.prototype)}}class bs extends hs{constructor(e){super({name:"IDPRejectedClaimException",$fault:"client",...e}),this.name="IDPRejectedClaimException",this.$fault="client",Object.setPrototypeOf(this,bs.prototype)}}class vs extends hs{constructor(e){super({name:"InvalidIdentityTokenException",$fault:"client",...e}),this.name="InvalidIdentityTokenException",this.$fault="client",Object.setPrototypeOf(this,vs.prototype)}}class Ss extends hs{constructor(e){super({name:"IDPCommunicationErrorException",$fault:"client",...e}),this.name="IDPCommunicationErrorException",this.$fault="client",Object.setPrototypeOf(this,Ss.prototype)}}const Es=e=>({...e,...e.SecretAccessKey&&{SecretAccessKey:yr}}),xs=e=>({...e,...e.Credentials&&{Credentials:Es(e.Credentials)}}),Ps=e=>({...e,...e.WebIdentityToken&&{WebIdentityToken:yr}}),Is=e=>({...e,...e.Credentials&&{Credentials:Es(e.Credentials)}});var As=n(932);const ks=async(e,t)=>{const n=e.body,r=Ws(n.Error,t),s=new ms({$metadata:Ys(e),...r});return Br(s,n)},Ts=async(e,t)=>{const n=e.body,r=Hs(n.Error,t),s=new Ss({$metadata:Ys(e),...r});return Br(s,n)},Cs=async(e,t)=>{const n=e.body,r=Ks(n.Error,t),s=new bs({$metadata:Ys(e),...r});return Br(s,n)},Os=async(e,t)=>{const n=e.body,r=Gs(n.Error,t),s=new vs({$metadata:Ys(e),...r});return Br(s,n)},Rs=async(e,t)=>{const n=e.body,r=Js(n.Error,t),s=new gs({$metadata:Ys(e),...r});return Br(s,n)},Ns=async(e,t)=>{const n=e.body,r=Xs(n.Error,t),s=new ys({$metadata:Ys(e),...r});return Br(s,n)},$s=async(e,t)=>{const n=e.body,r=Qs(n.Error,t),s=new ws({$metadata:Ys(e),...r});return Br(s,n)},Ds=(e,t)=>{const n={};if(null!=e.RoleArn&&(n.RoleArn=e.RoleArn),null!=e.RoleSessionName&&(n.RoleSessionName=e.RoleSessionName),null!=e.PolicyArns){const r=Ms(e.PolicyArns,t);0===e.PolicyArns?.length&&(n.PolicyArns=[]),Object.entries(r).forEach((([e,t])=>{n[`PolicyArns.${e}`]=t}))}if(null!=e.Policy&&(n.Policy=e.Policy),null!=e.DurationSeconds&&(n.DurationSeconds=e.DurationSeconds),null!=e.Tags){const r=Ls(e.Tags,t);0===e.Tags?.length&&(n.Tags=[]),Object.entries(r).forEach((([e,t])=>{n[`Tags.${e}`]=t}))}if(null!=e.TransitiveTagKeys){const r=zs(e.TransitiveTagKeys,t);0===e.TransitiveTagKeys?.length&&(n.TransitiveTagKeys=[]),Object.entries(r).forEach((([e,t])=>{n[`TransitiveTagKeys.${e}`]=t}))}if(null!=e.ExternalId&&(n.ExternalId=e.ExternalId),null!=e.SerialNumber&&(n.SerialNumber=e.SerialNumber),null!=e.TokenCode&&(n.TokenCode=e.TokenCode),null!=e.SourceIdentity&&(n.SourceIdentity=e.SourceIdentity),null!=e.ProvidedContexts){const r=qs(e.ProvidedContexts,t);0===e.ProvidedContexts?.length&&(n.ProvidedContexts=[]),Object.entries(r).forEach((([e,t])=>{n[`ProvidedContexts.${e}`]=t}))}return n},_s=(e,t)=>{const n={};if(null!=e.RoleArn&&(n.RoleArn=e.RoleArn),null!=e.RoleSessionName&&(n.RoleSessionName=e.RoleSessionName),null!=e.WebIdentityToken&&(n.WebIdentityToken=e.WebIdentityToken),null!=e.ProviderId&&(n.ProviderId=e.ProviderId),null!=e.PolicyArns){const r=Ms(e.PolicyArns,t);0===e.PolicyArns?.length&&(n.PolicyArns=[]),Object.entries(r).forEach((([e,t])=>{n[`PolicyArns.${e}`]=t}))}return null!=e.Policy&&(n.Policy=e.Policy),null!=e.DurationSeconds&&(n.DurationSeconds=e.DurationSeconds),n},Ms=(e,t)=>{const n={};let r=1;for(const s of e){if(null===s)continue;const e=js(s,t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n},js=(e,t)=>{const n={};return null!=e.arn&&(n.arn=e.arn),n},Us=(e,t)=>{const n={};return null!=e.ProviderArn&&(n.ProviderArn=e.ProviderArn),null!=e.ContextAssertion&&(n.ContextAssertion=e.ContextAssertion),n},qs=(e,t)=>{const n={};let r=1;for(const t of e){if(null===t)continue;const e=Us(t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n},Fs=(e,t)=>{const n={};return null!=e.Key&&(n.Key=e.Key),null!=e.Value&&(n.Value=e.Value),n},zs=(e,t)=>{const n={};let r=1;for(const t of e)null!==t&&(n[`member.${r}`]=t,r++);return n},Ls=(e,t)=>{const n={};let r=1;for(const t of e){if(null===t)continue;const e=Fs(t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n},Vs=(e,t)=>{const n={};return void 0!==e.AssumedRoleId&&(n.AssumedRoleId=Ar(e.AssumedRoleId)),void 0!==e.Arn&&(n.Arn=Ar(e.Arn)),n},Bs=(e,t)=>{const n={};return void 0!==e.AccessKeyId&&(n.AccessKeyId=Ar(e.AccessKeyId)),void 0!==e.SecretAccessKey&&(n.SecretAccessKey=Ar(e.SecretAccessKey)),void 0!==e.SessionToken&&(n.SessionToken=Ar(e.SessionToken)),void 0!==e.Expiration&&(n.Expiration=Pr(Dr(e.Expiration))),n},Ws=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Hs=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Ks=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Gs=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Js=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Xs=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Qs=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Ys=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Zs=Wr(hs),eo=async(e,t,n,r,s)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),u={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==r&&(u.hostname=r),void 0!==s&&(u.body=s),new f(u)},to={"content-type":"application/x-www-form-urlencoded"},no=(e,t)=>((e,t)=>mr(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>{if(e.length){const t=new As.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});t.addEntity("#xD","\r"),t.addEntity("#10","\n");const n=t.parse(e),r="#text",s=Object.keys(n)[0],o=n[s];return o[r]&&(o[s]=o[r],delete o[r]),rs(o)}return{}})),ro=async(e,t)=>{const n=await no(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n},so=e=>Object.entries(e).map((([e,t])=>ns(e)+"="+ns(t))).join("&"),oo=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class io extends gr{static getEndpointParameterInstructions(){return{UseGlobalEndpoint:{type:"builtInParams",name:"useGlobalEndpoint"},UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(mn(t,this.serialize,this.deserialize)),this.middlewareStack.use(yn(t,io.getEndpointParameterInstructions())),this.middlewareStack.use(Ce(t));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"STSClient",commandName:"AssumeRoleCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:xs,[l]:{service:"AWSSecurityTokenServiceV20110615",operation:"AssumeRole"}},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n=to;let r;return r=so({...Ds(e,t),Action:"AssumeRole",Version:"2011-06-15"}),eo(t,n,"/",void 0,r)})(e,t)}deserialize(e,t){return(async(e,t)=>{if(e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await ro(e.body,t)},r=oo(e,n.body);switch(r){case"ExpiredTokenException":case"com.amazonaws.sts#ExpiredTokenException":throw await ks(n,t);case"MalformedPolicyDocument":case"com.amazonaws.sts#MalformedPolicyDocumentException":throw await Rs(n,t);case"PackedPolicyTooLarge":case"com.amazonaws.sts#PackedPolicyTooLargeException":throw await Ns(n,t);case"RegionDisabledException":case"com.amazonaws.sts#RegionDisabledException":throw await $s(n,t);default:const s=n.body;return Zs({output:e,parsedBody:s.Error,errorCode:r})}})(e,t);let n={};return n=((e,t)=>{const n={};return void 0!==e.Credentials&&(n.Credentials=Bs(e.Credentials,t)),void 0!==e.AssumedRoleUser&&(n.AssumedRoleUser=Vs(e.AssumedRoleUser)),void 0!==e.PackedPolicySize&&(n.PackedPolicySize=Cr(e.PackedPolicySize)),void 0!==e.SourceIdentity&&(n.SourceIdentity=Ar(e.SourceIdentity)),n})((await no(e.body,t)).AssumeRoleResult,t),{$metadata:Ys(e),...n}})(e,t)}}class ao extends gr{static getEndpointParameterInstructions(){return{UseGlobalEndpoint:{type:"builtInParams",name:"useGlobalEndpoint"},UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(mn(t,this.serialize,this.deserialize)),this.middlewareStack.use(yn(t,ao.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"STSClient",commandName:"AssumeRoleWithWebIdentityCommand",inputFilterSensitiveLog:Ps,outputFilterSensitiveLog:Is,[l]:{service:"AWSSecurityTokenServiceV20110615",operation:"AssumeRoleWithWebIdentity"}},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n=to;let r;return r=so({..._s(e,t),Action:"AssumeRoleWithWebIdentity",Version:"2011-06-15"}),eo(t,n,"/",void 0,r)})(e,t)}deserialize(e,t){return(async(e,t)=>{if(e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await ro(e.body,t)},r=oo(e,n.body);switch(r){case"ExpiredTokenException":case"com.amazonaws.sts#ExpiredTokenException":throw await ks(n,t);case"IDPCommunicationError":case"com.amazonaws.sts#IDPCommunicationErrorException":throw await Ts(n,t);case"IDPRejectedClaim":case"com.amazonaws.sts#IDPRejectedClaimException":throw await Cs(n,t);case"InvalidIdentityToken":case"com.amazonaws.sts#InvalidIdentityTokenException":throw await Os(n,t);case"MalformedPolicyDocument":case"com.amazonaws.sts#MalformedPolicyDocumentException":throw await Rs(n,t);case"PackedPolicyTooLarge":case"com.amazonaws.sts#PackedPolicyTooLargeException":throw await Ns(n,t);case"RegionDisabledException":case"com.amazonaws.sts#RegionDisabledException":throw await $s(n,t);default:const s=n.body;return Zs({output:e,parsedBody:s.Error,errorCode:r})}})(e,t);let n={};return n=((e,t)=>{const n={};return void 0!==e.Credentials&&(n.Credentials=Bs(e.Credentials,t)),void 0!==e.SubjectFromWebIdentityToken&&(n.SubjectFromWebIdentityToken=Ar(e.SubjectFromWebIdentityToken)),void 0!==e.AssumedRoleUser&&(n.AssumedRoleUser=Vs(e.AssumedRoleUser)),void 0!==e.PackedPolicySize&&(n.PackedPolicySize=Cr(e.PackedPolicySize)),void 0!==e.Provider&&(n.Provider=Ar(e.Provider)),void 0!==e.Audience&&(n.Audience=Ar(e.Audience)),void 0!==e.SourceIdentity&&(n.SourceIdentity=Ar(e.SourceIdentity)),n})((await no(e.body,t)).AssumeRoleWithWebIdentityResult,t),{$metadata:Ys(e),...n}})(e,t)}}const co="us-east-1",uo=e=>"function"!=typeof e?void 0===e?co:e:async()=>{try{return await e()}catch(e){return co}},lo=(e,t)=>{let n,r;return async(s,o)=>{if(r=s,!n){const{logger:s,region:o,requestHandler:i}=e;n=new t({logger:s,credentialDefaultProvider:()=>async()=>r,region:uo(o||e.region),...i?{requestHandler:i}:{}})}const{Credentials:i}=await n.send(new io(o));if(!i||!i.AccessKeyId||!i.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRole call with role ${o.RoleArn}`);return{accessKeyId:i.AccessKeyId,secretAccessKey:i.SecretAccessKey,sessionToken:i.SessionToken,expiration:i.Expiration}}},po=(e,t)=>{let n;return async r=>{if(!n){const{logger:r,region:s,requestHandler:o}=e;n=new t({logger:r,region:uo(s||e.region),...o?{requestHandler:o}:{}})}const{Credentials:s}=await n.send(new ao(r));if(!s||!s.AccessKeyId||!s.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${r.RoleArn}`);return{accessKeyId:s.AccessKeyId,secretAccessKey:s.SecretAccessKey,sessionToken:s.SessionToken,expiration:s.Expiration}}};let fo=!1;const ho=e=>{e&&!fo&&parseInt(e.substring(1,e.indexOf(".")))<16&&(fo=!0,process.emitWarning("NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will\nno longer support Node.js 14.x on May 1, 2024.\n\nTo continue receiving updates to AWS services, bug fixes, and security\nupdates please upgrade to an active Node.js LTS version.\n\nMore information can be found at: https://a.co/dzr2AJd"))},mo=()=>async()=>{const e=process.env.AWS_ACCESS_KEY_ID,t=process.env.AWS_SECRET_ACCESS_KEY,n=process.env.AWS_SESSION_TOKEN,r=process.env.AWS_CREDENTIAL_EXPIRATION;if(e&&t)return{accessKeyId:e,secretAccessKey:t,...n&&{sessionToken:n},...r&&{expiration:new Date(r)}};throw new Ot("Unable to find environment variable credentials.")},go=require("url");function yo(e){return new Promise(((t,n)=>{const r=(0,ar.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});r.on("error",(e=>{n(Object.assign(new Tt("Unable to connect to instance metadata service"),e)),r.destroy()})),r.on("timeout",(()=>{n(new Tt("TimeoutError from instance metadata service")),r.destroy()})),r.on("response",(e=>{const{statusCode:s=400}=e;(s<200||300<=s)&&(n(Object.assign(new Tt("Error response received from instance metadata service"),{statusCode:s})),r.destroy());const o=[];e.on("data",(e=>{o.push(e)})),e.on("end",(()=>{t(L.Buffer.concat(o)),r.destroy()}))})),r.end()}))}const wo=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.AccessKeyId&&"string"==typeof e.SecretAccessKey&&"string"==typeof e.Token&&"string"==typeof e.Expiration,bo=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration)}),vo=({maxRetries:e=0,timeout:t=1e3})=>({maxRetries:e,timeout:t}),So=(e,t)=>{let n=e();for(let r=0;r<t;r++)n=n.catch(e);return n},Eo="AWS_CONTAINER_CREDENTIALS_FULL_URI",xo="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",Po="AWS_CONTAINER_AUTHORIZATION_TOKEN",Io=(e={})=>{const{timeout:t,maxRetries:n}=vo(e);return()=>So((async()=>{const e=await Co(),n=JSON.parse(await Ao(t,e));if(!wo(n))throw new Ot("Invalid response received from instance metadata service.");return bo(n)}),n)},Ao=async(e,t)=>(process.env[Po]&&(t.headers={...t.headers,Authorization:process.env[Po]}),(await yo({...t,timeout:e})).toString()),ko={localhost:!0,"127.0.0.1":!0},To={"http:":!0,"https:":!0},Co=async()=>{if(process.env[xo])return{hostname:"169.254.170.2",path:process.env[xo]};if(process.env[Eo]){const e=(0,go.parse)(process.env[Eo]);if(!e.hostname||!(e.hostname in ko))throw new Ot(`${e.hostname} is not a valid container metadata service hostname`,!1);if(!e.protocol||!(e.protocol in To))throw new Ot(`${e.protocol} is not a valid container metadata service protocol`,!1);return{...e,port:e.port?parseInt(e.port,10):void 0}}throw new Ot(`The container metadata credential provider cannot be used unless the ${xo} or ${Eo} environment variable is set`,!1)};class Oo extends Ot{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,Oo.prototype)}}var Ro;!function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(Ro||(Ro={}));const No={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:e=>e.ec2_metadata_service_endpoint,default:void 0};var $o;!function(e){e.IPv4="IPv4",e.IPv6="IPv6"}($o||($o={}));const Do={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:e=>e.ec2_metadata_service_endpoint_mode,default:$o.IPv4},_o=async()=>un(await Mo()||await jo()),Mo=async()=>on(No)(),jo=async()=>{const e=await on(Do)();switch(e){case $o.IPv4:return Ro.IPv4;case $o.IPv6:return Ro.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values($o)}`)}},Uo=(e,t)=>{const n=300+Math.floor(300*Math.random()),r=new Date(Date.now()+1e3*n);t.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html");const s=e.originalExpiration??e.expiration;return{...e,...s?{originalExpiration:s}:{},expiration:r}},qo="/latest/meta-data/iam/security-credentials/",Fo="AWS_EC2_METADATA_V1_DISABLED",zo="ec2_metadata_v1_disabled",Lo="x-aws-ec2-metadata-token",Vo=(e={})=>((e,t={})=>{const n=t?.logger||console;let r;return async()=>{let t;try{t=await e(),t.expiration&&t.expiration.getTime()<Date.now()&&(t=Uo(t,n))}catch(e){if(!r)throw e;n.warn("Credential renew failed: ",e),t=Uo(r,n)}return r=t,t}})(Bo(e),{logger:e.logger}),Bo=e=>{let t=!1;const{logger:n,profile:r}=e,{timeout:s,maxRetries:o}=vo(e),i=async(n,s)=>{if(t||null==s.headers?.[Lo]){let t=!1,n=!1;const s=await on({environmentVariableSelector:e=>{const t=e[Fo];if(n=!!t&&"false"!==t,void 0===t)throw new Ot(`${Fo} not set in env, checking config file next.`);return n},configFileSelector:e=>{const n=e[zo];return t=!!n&&"false"!==n,t},default:!1},{profile:r})();if(e.ec2MetadataV1Disabled||s){const r=[];throw e.ec2MetadataV1Disabled&&r.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),t&&r.push(`config file profile (${zo})`),n&&r.push(`process environment variable (${Fo})`),new Oo(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${r.join(", ")}].`)}}const o=(await So((async()=>{let e;try{e=await Ho(s)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e}),n)).trim();return So((async()=>{let e;try{e=await Ko(o,s)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e}),n)};return async()=>{const e=await _o();if(t)return n?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),i(o,{...e,timeout:s});{let r;try{r=(await Wo({...e,timeout:s})).toString()}catch(r){if(400===r?.statusCode)throw Object.assign(r,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===r.message||[403,404,405].includes(r.statusCode))&&(t=!0),n?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),i(o,{...e,timeout:s})}return i(o,{...e,headers:{[Lo]:r},timeout:s})}}},Wo=async e=>yo({...e,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),Ho=async e=>(await yo({...e,path:qo})).toString(),Ko=async(e,t)=>{const n=JSON.parse((await yo({...t,path:qo+e})).toString());if(!wo(n))throw new Ot("Invalid response received from instance metadata service.");return bo(n)},Go=require("child_process"),Jo=(e={})=>async()=>{const t=await sn(e);return(async(e,t)=>{const n=t[e];if(!t[e])throw new Ot(`Profile ${e} could not be found in shared credentials file.`);{const t=n.credential_process;if(void 0===t)throw new Ot(`Profile ${e} did not contain credential_process.`);{const n=(0,hr.promisify)(Go.exec);try{const{stdout:r}=await n(t);let s;try{s=JSON.parse(r.trim())}catch{throw Error(`Profile ${e} credential_process returned invalid JSON.`)}return((e,t)=>{if(1!==t.Version)throw Error(`Profile ${e} credential_process did not return Version 1.`);if(void 0===t.AccessKeyId||void 0===t.SecretAccessKey)throw Error(`Profile ${e} credential_process returned invalid credentials.`);if(t.Expiration){const n=new Date;if(new Date(t.Expiration)<n)throw Error(`Profile ${e} credential_process returned expired credentials.`)}return{accessKeyId:t.AccessKeyId,secretAccessKey:t.SecretAccessKey,...t.SessionToken&&{sessionToken:t.SessionToken},...t.Expiration&&{expiration:new Date(t.Expiration)}}})(e,s)}catch(e){throw new Ot(e.message)}}}})(Mt(e),t)},Xo=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),Qo=require("process"),Yo=({serviceId:e,clientVersion:t})=>{const n=[["aws-sdk-js",t],["ua","2.0"],[`os/${(0,Rt.platform)()}`,(0,Rt.release)()],["lang/js"],["md/nodejs",`${Qo.versions.node}`]];e&&n.push([`api/${e}`,t]),Qo.env.AWS_EXECUTION_ENV&&n.push([`exec-env/${Qo.env.AWS_EXECUTION_ENV}`]);const r=on({environmentVariableSelector:e=>e.AWS_SDK_UA_APP_ID,configFileSelector:e=>e["sdk-ua-app-id"],default:void 0})();let s;return async()=>{if(!s){const e=await r;s=e?[...n,[`app/${e}`]]:[...n]}return s}};class Zo{constructor(e,t){this.algorithmIdentifier=e,this.secret=t,this.reset()}update(e,t){this.hash.update(H(ei(e,t)))}digest(){return Promise.resolve(this.hash.digest())}reset(){this.hash=this.secret?(0,jt.createHmac)(this.algorithmIdentifier,ei(this.secret)):(0,jt.createHash)(this.algorithmIdentifier)}}function ei(e,t){return L.Buffer.isBuffer(e)?e:"string"==typeof e?B(e,t):ArrayBuffer.isView(e)?V(e.buffer,e.byteOffset,e.byteLength):V(e)}const ti=e=>{if(!e)return 0;if("string"==typeof e)return Buffer.from(e).length;if("number"==typeof e.byteLength)return e.byteLength;if("number"==typeof e.size)return e.size;if("number"==typeof e.start&&"number"==typeof e.end)return e.end+1-e.start;if("string"==typeof e.path||Buffer.isBuffer(e.path))return(0,Ft.lstatSync)(e.path).size;if("number"==typeof e.fd)return(0,Ft.fstatSync)(e.fd).size;throw new Error(`Body Length computation failed for ${e}`)},ni="required",ri="fn",si="argv",oi="ref",ii="isSet",ai="booleanEquals",ci="error",ui="endpoint",li="tree",di="PartitionResult",pi="getAttr",fi={[ni]:!1,type:"String"},hi={[ni]:!0,default:!1,type:"Boolean"},mi={[oi]:"Endpoint"},gi={[ri]:ai,[si]:[{[oi]:"UseFIPS"},!0]},yi={[ri]:ai,[si]:[{[oi]:"UseDualStack"},!0]},wi={},bi={[ri]:pi,[si]:[{[oi]:di},"supportsFIPS"]},vi={[oi]:di},Si={[ri]:ai,[si]:[!0,{[ri]:pi,[si]:[vi,"supportsDualStack"]}]},Ei=[gi],xi=[yi],Pi=[{[oi]:"Region"}],Ii={version:"1.0",parameters:{Region:fi,UseDualStack:hi,UseFIPS:hi,Endpoint:fi},rules:[{conditions:[{[ri]:ii,[si]:[mi]}],rules:[{conditions:Ei,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:ci},{conditions:xi,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:ci},{endpoint:{url:mi,properties:wi,headers:wi},type:ui}],type:li},{conditions:[{[ri]:ii,[si]:Pi}],rules:[{conditions:[{[ri]:"aws.partition",[si]:Pi,assign:di}],rules:[{conditions:[gi,yi],rules:[{conditions:[{[ri]:ai,[si]:[!0,bi]},Si],rules:[{endpoint:{url:"https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:wi,headers:wi},type:ui}],type:li},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:ci}],type:li},{conditions:Ei,rules:[{conditions:[{[ri]:ai,[si]:[bi,!0]}],rules:[{conditions:[{[ri]:"stringEquals",[si]:[{[ri]:pi,[si]:[vi,"name"]},"aws-us-gov"]}],endpoint:{url:"https://portal.sso.{Region}.amazonaws.com",properties:wi,headers:wi},type:ui},{endpoint:{url:"https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}",properties:wi,headers:wi},type:ui}],type:li},{error:"FIPS is enabled but this partition does not support FIPS",type:ci}],type:li},{conditions:xi,rules:[{conditions:[Si],rules:[{endpoint:{url:"https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:wi,headers:wi},type:ui}],type:li},{error:"DualStack is enabled but this partition does not support DualStack",type:ci}],type:li},{endpoint:{url:"https://portal.sso.{Region}.{PartitionResult#dnsSuffix}",properties:wi,headers:wi},type:ui}],type:li}],type:li},{error:"Invalid Configuration: Missing Region",type:ci}]},Ai=(e,t={})=>tt(Ii,{endpointParams:e,logger:t.logger}),ki="AWS_REGION",Ti="AWS_DEFAULT_REGION",Ci=["in-region","cross-region","mobile","standard","legacy"],Oi={environmentVariableSelector:e=>e.AWS_DEFAULTS_MODE,configFileSelector:e=>e.defaults_mode,default:"legacy"},Ri=({region:e=on(gt),defaultsMode:t=on(Oi)}={})=>E((async()=>{const n="function"==typeof t?await t():t;switch(n?.toLowerCase()){case"auto":return Ni(e);case"in-region":case"cross-region":case"mobile":case"standard":case"legacy":return Promise.resolve(n?.toLocaleLowerCase());case void 0:return Promise.resolve("legacy");default:throw new Error(`Invalid parameter for "defaultsMode", expect ${Ci.join(", ")}, got ${n}`)}})),Ni=async e=>{if(e){const t="function"==typeof e?await e():e,n=await $i();return n?t===n?"in-region":"cross-region":"standard"}return"standard"},$i=async()=>{if(process.env.AWS_EXECUTION_ENV&&(process.env[ki]||process.env[Ti]))return process.env[ki]??process.env[Ti];if(!process.env.AWS_EC2_METADATA_DISABLED)try{const e=await _o();return(await yo({...e,path:"/latest/meta-data/placement/region"})).toString()}catch(e){}},Di=e=>{let t=async()=>{if(void 0===e.region)throw new Error("Region is missing from runtimeConfig");const t=e.region;return"string"==typeof t?t:t()};return{setRegion(e){t=e},region:()=>t}},_i=e=>({region:e.region()});class Mi extends tr{constructor(...[n]){const r=(s=(e=>{Jr(process.version);const t=Ri(e),n=()=>t().then(Kr),r=(e=>({apiVersion:"2019-06-10",base64Decoder:e?.base64Decoder??rr,base64Encoder:e?.base64Encoder??sr,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Ai,extensions:e?.extensions??[],logger:e?.logger??new Jn,serviceId:e?.serviceId??"SSO",urlParser:e?.urlParser??un,utf8Decoder:e?.utf8Decoder??W,utf8Encoder:e?.utf8Encoder??K}))(e);return ho(process.version),{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??ti,defaultUserAgentProvider:e?.defaultUserAgentProvider??Yo({serviceId:r.serviceId,clientVersion:"3.460.0"}),maxAttempts:e?.maxAttempts??on(Dn),region:e?.region??on(gt,yt),requestHandler:e?.requestHandler??new dr(n),retryMode:e?.retryMode??on({...Mn,default:async()=>(await n()).retryMode||Sn}),sha256:e?.sha256??Zo.bind(null,"sha256"),streamCollector:e?.streamCollector??fr,useDualstackEndpoint:e?.useDualstackEndpoint??on(ht),useFipsEndpoint:e?.useFipsEndpoint??on(mt)}})(n||{}),{...s,useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"awsssoportal"});var s;const o=vt(r),i=wn(o),a=((n,r)=>{const s={...Di(n),...es(n),...e(n)};return r.forEach((e=>e.configure(s))),{...n,..._i(s),...ts(s),...t(s)}})(Oe(_n(i)),n?.extensions||[]);super(a),this.config=a,this.middlewareStack.use(Kn(this.config)),this.middlewareStack.use(xt(this.config)),this.middlewareStack.use(g(this.config)),this.middlewareStack.use(w(this.config)),this.middlewareStack.use(S(this.config)),this.middlewareStack.use(dt(this.config))}destroy(){super.destroy()}}class ji extends Vr{constructor(e){super(e),Object.setPrototypeOf(this,ji.prototype)}}class Ui extends ji{constructor(e){super({name:"InvalidRequestException",$fault:"client",...e}),this.name="InvalidRequestException",this.$fault="client",Object.setPrototypeOf(this,Ui.prototype)}}class qi extends ji{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,qi.prototype)}}class Fi extends ji{constructor(e){super({name:"TooManyRequestsException",$fault:"client",...e}),this.name="TooManyRequestsException",this.$fault="client",Object.setPrototypeOf(this,Fi.prototype)}}class zi extends ji{constructor(e){super({name:"UnauthorizedException",$fault:"client",...e}),this.name="UnauthorizedException",this.$fault="client",Object.setPrototypeOf(this,zi.prototype)}}const Li=e=>({...e,...e.accessToken&&{accessToken:yr}}),Vi=e=>({...e,...e.secretAccessKey&&{secretAccessKey:yr},...e.sessionToken&&{sessionToken:yr}}),Bi=e=>({...e,...e.roleCredentials&&{roleCredentials:Vi(e.roleCredentials)}}),Wi=Wr(ji),Hi=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{message:Ar});Object.assign(n,s);const o=new Ui({$metadata:Xi(e),...n});return Br(o,e.body)},Ki=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{message:Ar});Object.assign(n,s);const o=new qi({$metadata:Xi(e),...n});return Br(o,e.body)},Gi=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{message:Ar});Object.assign(n,s);const o=new Fi({$metadata:Xi(e),...n});return Br(o,e.body)},Ji=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{message:Ar});Object.assign(n,s);const o=new zi({$metadata:Xi(e),...n});return Br(o,e.body)},Xi=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Qi=e=>!(null==e||""===e||Object.getOwnPropertyNames(e).includes("length")&&0==e.length||Object.getOwnPropertyNames(e).includes("size")&&0==e.size),Yi=(e,t)=>((e,t)=>mr(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),Zi=async(e,t)=>{const n=await Yi(e,t);return n.message=n.message??n.Message,n},ea=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=(s=e.headers,"x-amzn-errortype",Object.keys(s).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var s;return void 0!==r?n(e.headers[r]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class ta extends gr{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(mn(t,this.serialize,this.deserialize)),this.middlewareStack.use(yn(t,ta.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"SSOClient",commandName:"GetRoleCredentialsCommand",inputFilterSensitiveLog:Li,outputFilterSensitiveLog:Bi,[l]:{service:"SWBPortalService",operation:"GetRoleCredentials"}},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint(),i=os({},Qi,{"x-amz-sso_bearer_token":e.accessToken}),a=`${o?.endsWith("/")?o.slice(0,-1):o||""}/federation/credentials`,c=os({role_name:[,Pr(e.roleName,"roleName")],account_id:[,Pr(e.accountId,"accountId")]});return new f({protocol:r,hostname:n,port:s,method:"GET",headers:i,path:a,query:c,body:void 0})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await Zi(e.body,t)},r=ea(e,n.body);switch(r){case"InvalidRequestException":case"com.amazonaws.sso#InvalidRequestException":throw await Hi(n,t);case"ResourceNotFoundException":case"com.amazonaws.sso#ResourceNotFoundException":throw await Ki(n,t);case"TooManyRequestsException":case"com.amazonaws.sso#TooManyRequestsException":throw await Gi(n,t);case"UnauthorizedException":case"com.amazonaws.sso#UnauthorizedException":throw await Ji(n,t);default:const s=n.body;return Wi({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=os({$metadata:Xi(e)}),r=Pr(Ir(await Yi(e.body,t)),"body"),s=is(r,{roleCredentials:fs});return Object.assign(n,s),n})(e,t)}}class na extends Tt{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="TokenProviderError",Object.setPrototypeOf(this,na.prototype)}}const ra="To refresh this SSO session run 'aws sso login' with the corresponding profile.";var sa="required",oa="fn",ia="argv",aa="ref",ca="isSet",ua="tree",la="error",da="endpoint",pa="PartitionResult",fa="getAttr",ha={[sa]:!1,type:"String"},ma={[sa]:!0,default:!1,type:"Boolean"},ga={[aa]:"Endpoint"},ya={[oa]:"booleanEquals",[ia]:[{[aa]:"UseFIPS"},!0]},wa={[oa]:"booleanEquals",[ia]:[{[aa]:"UseDualStack"},!0]},ba={},va={[oa]:"booleanEquals",[ia]:[!0,{[oa]:fa,[ia]:[{[aa]:pa},"supportsFIPS"]}]},Sa={[aa]:pa},Ea={[oa]:"booleanEquals",[ia]:[!0,{[oa]:fa,[ia]:[Sa,"supportsDualStack"]}]},xa=[ya],Pa=[wa],Ia=[{[aa]:"Region"}],Aa={version:"1.0",parameters:{Region:ha,UseDualStack:ma,UseFIPS:ma,Endpoint:ha},rules:[{conditions:[{[oa]:ca,[ia]:[ga]}],type:ua,rules:[{conditions:xa,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:la},{conditions:Pa,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:la},{endpoint:{url:ga,properties:ba,headers:ba},type:da}]},{conditions:[{[oa]:ca,[ia]:Ia}],type:ua,rules:[{conditions:[{[oa]:"aws.partition",[ia]:Ia,assign:pa}],type:ua,rules:[{conditions:[ya,wa],type:ua,rules:[{conditions:[va,Ea],type:ua,rules:[{endpoint:{url:"https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:ba,headers:ba},type:da}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:la}]},{conditions:xa,type:ua,rules:[{conditions:[va],type:ua,rules:[{conditions:[{[oa]:"stringEquals",[ia]:["aws-us-gov",{[oa]:fa,[ia]:[Sa,"name"]}]}],endpoint:{url:"https://oidc.{Region}.amazonaws.com",properties:ba,headers:ba},type:da},{endpoint:{url:"https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}",properties:ba,headers:ba},type:da}]},{error:"FIPS is enabled but this partition does not support FIPS",type:la}]},{conditions:Pa,type:ua,rules:[{conditions:[Ea],type:ua,rules:[{endpoint:{url:"https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:ba,headers:ba},type:da}]},{error:"DualStack is enabled but this partition does not support DualStack",type:la}]},{endpoint:{url:"https://oidc.{Region}.{PartitionResult#dnsSuffix}",properties:ba,headers:ba},type:da}]}]},{error:"Invalid Configuration: Missing Region",type:la}]},ka=(e,t={})=>tt(Aa,{endpointParams:e,logger:t.logger}),Ta=class extends tr{constructor(...[n]){const r=(s=(e=>{Jr(process.version);const t=Ri(e),n=()=>t().then(Kr),r=(e=>({apiVersion:"2019-06-10",base64Decoder:e?.base64Decoder??rr,base64Encoder:e?.base64Encoder??sr,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??ka,extensions:e?.extensions??[],logger:e?.logger??new Jn,serviceId:e?.serviceId??"SSO OIDC",urlParser:e?.urlParser??un,utf8Decoder:e?.utf8Decoder??W,utf8Encoder:e?.utf8Encoder??K}))(e);return{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??ti,defaultUserAgentProvider:e?.defaultUserAgentProvider??Yo({serviceId:r.serviceId,clientVersion:"3.429.0"}),maxAttempts:e?.maxAttempts??on(Dn),region:e?.region??on(gt,yt),requestHandler:e?.requestHandler??new dr(n),retryMode:e?.retryMode??on({...Mn,default:async()=>(await n()).retryMode||Sn}),sha256:e?.sha256??Zo.bind(null,"sha256"),streamCollector:e?.streamCollector??fr,useDualstackEndpoint:e?.useDualstackEndpoint??on(ht),useFipsEndpoint:e?.useFipsEndpoint??on(mt)}})(n||{}),{...s,useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"awsssooidc"});var s;const o=vt(r),i=wn(o),a=((n,r)=>{const s={...Di(n),...es(n),...e(n)};return r.forEach((e=>e.configure(s))),{...n,..._i(s),...ts(s),...t(s)}})(Oe(_n(i)),n?.extensions||[]);super(a),this.config=a,this.middlewareStack.use(Kn(this.config)),this.middlewareStack.use(xt(this.config)),this.middlewareStack.use(g(this.config)),this.middlewareStack.use(w(this.config)),this.middlewareStack.use(S(this.config)),this.middlewareStack.use(dt(this.config))}destroy(){super.destroy()}},Ca=class e extends Vr{constructor(t){super(t),Object.setPrototypeOf(this,e.prototype)}},Oa=class e extends Ca{constructor(t){super({name:"AccessDeniedException",$fault:"client",...t}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},Ra=class e extends Ca{constructor(t){super({name:"AuthorizationPendingException",$fault:"client",...t}),this.name="AuthorizationPendingException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},Na=class e extends Ca{constructor(t){super({name:"ExpiredTokenException",$fault:"client",...t}),this.name="ExpiredTokenException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},$a=class e extends Ca{constructor(t){super({name:"InternalServerException",$fault:"server",...t}),this.name="InternalServerException",this.$fault="server",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},Da=class e extends Ca{constructor(t){super({name:"InvalidClientException",$fault:"client",...t}),this.name="InvalidClientException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},_a=class e extends Ca{constructor(t){super({name:"InvalidGrantException",$fault:"client",...t}),this.name="InvalidGrantException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},Ma=class e extends Ca{constructor(t){super({name:"InvalidRequestException",$fault:"client",...t}),this.name="InvalidRequestException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},ja=class e extends Ca{constructor(t){super({name:"InvalidScopeException",$fault:"client",...t}),this.name="InvalidScopeException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},Ua=class e extends Ca{constructor(t){super({name:"SlowDownException",$fault:"client",...t}),this.name="SlowDownException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},qa=class e extends Ca{constructor(t){super({name:"UnauthorizedClientException",$fault:"client",...t}),this.name="UnauthorizedClientException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},Fa=class e extends Ca{constructor(t){super({name:"UnsupportedGrantTypeException",$fault:"client",...t}),this.name="UnsupportedGrantTypeException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},za=class e extends Ca{constructor(t){super({name:"InvalidClientMetadataException",$fault:"client",...t}),this.name="InvalidClientMetadataException",this.$fault="client",Object.setPrototypeOf(this,e.prototype),this.error=t.error,this.error_description=t.error_description}},La=Wr(Ca),Va=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new Oa({$metadata:tc(e),...n});return Br(o,e.body)},Ba=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new Ra({$metadata:tc(e),...n});return Br(o,e.body)},Wa=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new Na({$metadata:tc(e),...n});return Br(o,e.body)},Ha=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new $a({$metadata:tc(e),...n});return Br(o,e.body)},Ka=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new Da({$metadata:tc(e),...n});return Br(o,e.body)},Ga=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new za({$metadata:tc(e),...n});return Br(o,e.body)},Ja=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new _a({$metadata:tc(e),...n});return Br(o,e.body)},Xa=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new Ma({$metadata:tc(e),...n});return Br(o,e.body)},Qa=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new ja({$metadata:tc(e),...n});return Br(o,e.body)},Ya=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new Ua({$metadata:tc(e),...n});return Br(o,e.body)},Za=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new qa({$metadata:tc(e),...n});return Br(o,e.body)},ec=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{error:Ar,error_description:Ar});Object.assign(n,s);const o=new Fa({$metadata:tc(e),...n});return Br(o,e.body)},tc=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),nc=(e,t)=>((e,t)=>mr(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),rc=async(e,t)=>{const n=await nc(e,t);return n.message=n.message??n.Message,n},sc=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=(s=e.headers,"x-amzn-errortype",Object.keys(s).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var s;return void 0!==r?n(e.headers[r]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0},oc=class e extends gr{constructor(e){super(),this.input=e}static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}resolveMiddleware(t,n,r){this.middlewareStack.use(mn(n,this.serialize,this.deserialize)),this.middlewareStack.use(yn(n,e.getEndpointParameterInstructions()));const s=t.concat(this.middlewareStack),{logger:o}=n,i={logger:o,clientName:"SSOOIDCClient",commandName:"CreateTokenCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e,[l]:{service:"AWSSSOOIDCService",operation:"CreateToken"}},{requestHandler:a}=n;return s.resolve((e=>a.handle(e.request,r||{})),i)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint(),i=`${o?.endsWith("/")?o.slice(0,-1):o||""}/token`;let a;return a=JSON.stringify(is(e,{clientId:[],clientSecret:[],code:[],deviceCode:[],grantType:[],redirectUri:[],refreshToken:[],scope:e=>fs(e)})),new f({protocol:r,hostname:n,port:s,method:"POST",headers:{"content-type":"application/json"},path:i,body:a})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await rc(e.body,t)},r=sc(e,n.body);switch(r){case"AccessDeniedException":case"com.amazonaws.ssooidc#AccessDeniedException":throw await Va(n,t);case"AuthorizationPendingException":case"com.amazonaws.ssooidc#AuthorizationPendingException":throw await Ba(n,t);case"ExpiredTokenException":case"com.amazonaws.ssooidc#ExpiredTokenException":throw await Wa(n,t);case"InternalServerException":case"com.amazonaws.ssooidc#InternalServerException":throw await Ha(n,t);case"InvalidClientException":case"com.amazonaws.ssooidc#InvalidClientException":throw await Ka(n,t);case"InvalidGrantException":case"com.amazonaws.ssooidc#InvalidGrantException":throw await Ja(n,t);case"InvalidRequestException":case"com.amazonaws.ssooidc#InvalidRequestException":throw await Xa(n,t);case"InvalidScopeException":case"com.amazonaws.ssooidc#InvalidScopeException":throw await Qa(n,t);case"SlowDownException":case"com.amazonaws.ssooidc#SlowDownException":throw await Ya(n,t);case"UnauthorizedClientException":case"com.amazonaws.ssooidc#UnauthorizedClientException":throw await Za(n,t);case"UnsupportedGrantTypeException":case"com.amazonaws.ssooidc#UnsupportedGrantTypeException":throw await ec(n,t);default:const s=n.body;return La({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=os({$metadata:tc(e)}),r=Pr(Ir(await nc(e.body,t)),"body"),s=is(r,{accessToken:Ar,expiresIn:Sr,idToken:Ar,refreshToken:Ar,tokenType:Ar});return Object.assign(n,s),n})(e,t)}},ic={CreateTokenCommand:oc,RegisterClientCommand:class e extends gr{constructor(e){super(),this.input=e}static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}resolveMiddleware(t,n,r){this.middlewareStack.use(mn(n,this.serialize,this.deserialize)),this.middlewareStack.use(yn(n,e.getEndpointParameterInstructions()));const s=t.concat(this.middlewareStack),{logger:o}=n,i={logger:o,clientName:"SSOOIDCClient",commandName:"RegisterClientCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e,[l]:{service:"AWSSSOOIDCService",operation:"RegisterClient"}},{requestHandler:a}=n;return s.resolve((e=>a.handle(e.request,r||{})),i)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint(),i=`${o?.endsWith("/")?o.slice(0,-1):o||""}/client/register`;let a;return a=JSON.stringify(is(e,{clientName:[],clientType:[],scopes:e=>fs(e)})),new f({protocol:r,hostname:n,port:s,method:"POST",headers:{"content-type":"application/json"},path:i,body:a})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await rc(e.body,t)},r=sc(e,n.body);switch(r){case"InternalServerException":case"com.amazonaws.ssooidc#InternalServerException":throw await Ha(n,t);case"InvalidClientMetadataException":case"com.amazonaws.ssooidc#InvalidClientMetadataException":throw await Ga(n,t);case"InvalidRequestException":case"com.amazonaws.ssooidc#InvalidRequestException":throw await Xa(n,t);case"InvalidScopeException":case"com.amazonaws.ssooidc#InvalidScopeException":throw await Qa(n,t);default:const s=n.body;return La({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=os({$metadata:tc(e)}),r=Pr(Ir(await nc(e.body,t)),"body"),s=is(r,{authorizationEndpoint:Ar,clientId:Ar,clientIdIssuedAt:vr,clientSecret:Ar,clientSecretExpiresAt:vr,tokenEndpoint:Ar});return Object.assign(n,s),n})(e,t)}},StartDeviceAuthorizationCommand:class e extends gr{constructor(e){super(),this.input=e}static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}resolveMiddleware(t,n,r){this.middlewareStack.use(mn(n,this.serialize,this.deserialize)),this.middlewareStack.use(yn(n,e.getEndpointParameterInstructions()));const s=t.concat(this.middlewareStack),{logger:o}=n,i={logger:o,clientName:"SSOOIDCClient",commandName:"StartDeviceAuthorizationCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e,[l]:{service:"AWSSSOOIDCService",operation:"StartDeviceAuthorization"}},{requestHandler:a}=n;return s.resolve((e=>a.handle(e.request,r||{})),i)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint(),i=`${o?.endsWith("/")?o.slice(0,-1):o||""}/device_authorization`;let a;return a=JSON.stringify(is(e,{clientId:[],clientSecret:[],startUrl:[]})),new f({protocol:r,hostname:n,port:s,method:"POST",headers:{"content-type":"application/json"},path:i,body:a})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await rc(e.body,t)},r=sc(e,n.body);switch(r){case"InternalServerException":case"com.amazonaws.ssooidc#InternalServerException":throw await Ha(n,t);case"InvalidClientException":case"com.amazonaws.ssooidc#InvalidClientException":throw await Ka(n,t);case"InvalidRequestException":case"com.amazonaws.ssooidc#InvalidRequestException":throw await Xa(n,t);case"SlowDownException":case"com.amazonaws.ssooidc#SlowDownException":throw await Ya(n,t);case"UnauthorizedClientException":case"com.amazonaws.ssooidc#UnauthorizedClientException":throw await Za(n,t);default:const s=n.body;return La({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=os({$metadata:tc(e)}),r=Pr(Ir(await nc(e.body,t)),"body"),s=is(r,{deviceCode:Ar,expiresIn:Sr,interval:Sr,userCode:Ar,verificationUri:Ar,verificationUriComplete:Ar});return Object.assign(n,s),n})(e,t)}}};((e,t)=>{for(const n of Object.keys(e)){const r=e[n],s=async function(e,t,n){const s=new r(e);if("function"==typeof t)this.send(s,t);else{if("function"!=typeof n)return this.send(s,t);if("object"!=typeof t)throw new Error("Expected http options but got "+typeof t);this.send(s,t||{},n)}},o=(n[0].toLowerCase()+n.slice(1)).replace(/Command$/,"");t.prototype[o]=s}})(ic,class extends Ta{});const ac={},cc=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new na(`Token is expired. ${ra}`,!1)},uc=(e,t,n=!1)=>{if(void 0===t)throw new na(`Value not present for '${e}' in SSO Token${n?". Cannot refresh":""}. ${ra}`,!1)},{writeFile:lc}=Ft.promises,dc=new Date(0),pc=(e={})=>async()=>{const t=await sn(e),n=Mt(e),r=t[n];if(!r)throw new na(`Profile '${n}' could not be found in shared credentials file.`,!1);if(!r.sso_session)throw new na(`Profile '${n}' is missing required property 'sso_session'.`);const s=r.sso_session,o=(await rn(e))[s];if(!o)throw new na(`Sso session '${s}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!o[e])throw new na(`Sso session '${s}' is missing required property '${e}'.`,!1);o.sso_start_url;const i=o.sso_region;let a;try{a=await Lt(s)}catch(e){throw new na(`The SSO session token associated with profile=${n} was not found or is invalid. ${ra}`,!1)}uc("accessToken",a.accessToken),uc("expiresAt",a.expiresAt);const{accessToken:c,expiresAt:u}=a,l={token:c,expiration:new Date(u)};if(l.expiration.getTime()-Date.now()>3e5)return l;if(Date.now()-dc.getTime()<3e4)return cc(l),l;uc("clientId",a.clientId,!0),uc("clientSecret",a.clientSecret,!0),uc("refreshToken",a.refreshToken,!0);try{dc.setTime(Date.now());const e=await((e,t)=>{const n=(e=>{if(ac[e])return ac[e];const t=new Ta({region:e});return ac[e]=t,t})(t);return n.send(new oc({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))})(a,i);uc("accessToken",e.accessToken),uc("expiresIn",e.expiresIn);const t=new Date(Date.now()+1e3*e.expiresIn);try{await((e,t)=>{const n=qt(e),r=JSON.stringify(t,null,2);return lc(n,r)})(s,{...a,accessToken:e.accessToken,expiresAt:t.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:t}}catch(e){return cc(l),l}},fc=!1,hc=async({ssoStartUrl:e,ssoSession:t,ssoAccountId:n,ssoRegion:r,ssoRoleName:s,ssoClient:o,profile:i})=>{let a;const c="To refresh this SSO session run aws sso login with the corresponding profile.";if(t)try{const e=await pc({profile:i})();a={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new Ot(e.message,fc)}else try{a=await Lt(e)}catch(e){throw new Ot(`The SSO session associated with this profile is invalid. ${c}`,fc)}if(new Date(a.expiresAt).getTime()-Date.now()<=0)throw new Ot(`The SSO session associated with this profile has expired. ${c}`,fc);const{accessToken:u}=a,l=o||new Mi({region:r});let d;try{d=await l.send(new ta({accountId:n,roleName:s,accessToken:u}))}catch(e){throw Ot.from(e,fc)}const{roleCredentials:{accessKeyId:p,secretAccessKey:f,sessionToken:h,expiration:m}={}}=d;if(!(p&&f&&h&&m))throw new Ot("SSO returns an invalid temporary credential.",fc);return{accessKeyId:p,secretAccessKey:f,sessionToken:h,expiration:new Date(m)}},mc=e=>{const{sso_start_url:t,sso_account_id:n,sso_region:r,sso_role_name:s}=e;if(!(t&&n&&r&&s))throw new Ot(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,!1);return e},gc=(e={})=>async()=>{const{ssoStartUrl:t,ssoAccountId:n,ssoRegion:r,ssoRoleName:s,ssoClient:o,ssoSession:i}=e,a=Mt(e);if(t||n||r||s||i){if(t&&n&&r&&s)return hc({ssoStartUrl:t,ssoSession:i,ssoAccountId:n,ssoRegion:r,ssoRoleName:s,ssoClient:o,profile:a});throw new Ot('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"')}{const n=(await sn(e))[a];if(!n)throw new Ot(`Profile ${a} was not found.`);if(!Xo(n))throw new Ot(`Profile ${a} is not configured with SSO credentials.`);if(n?.sso_session){const s=(await rn(e))[n.sso_session],o=` configurations in profile ${a} and sso-session ${n.sso_session}`;if(r&&r!==s.sso_region)throw new Ot("Conflicting SSO region"+o,!1);if(t&&t!==s.sso_start_url)throw new Ot("Conflicting SSO start_url"+o,!1);n.sso_region=s.sso_region,n.sso_start_url=s.sso_start_url}const{sso_start_url:s,sso_account_id:i,sso_region:c,sso_role_name:u,sso_session:l}=mc(n);return hc({ssoStartUrl:s,ssoSession:l,ssoAccountId:i,ssoRegion:c,ssoRoleName:u,ssoClient:o,profile:a})}},yc=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1,wc=e=>Promise.resolve({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token}),bc=(e={})=>async()=>{const t=e?.webIdentityTokenFile??process.env.AWS_WEB_IDENTITY_TOKEN_FILE,n=e?.roleArn??process.env.AWS_ROLE_ARN,r=e?.roleSessionName??process.env.AWS_ROLE_SESSION_NAME;if(!t||!n)throw new Ot("Web identity configuration not specified");return(e=>()=>{const{roleArn:t,roleSessionName:n,webIdentityToken:r,providerId:s,policyArns:o,policy:i,durationSeconds:a,roleAssumerWithWebIdentity:c}=e;if(!c)throw new Ot(`Role Arn '${t}' needs to be assumed with web identity, but no role assumption callback was provided.`,!1);return c({RoleArn:t,RoleSessionName:n??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:r,ProviderId:s,PolicyArns:o,Policy:i,DurationSeconds:a})})({...e,webIdentityToken:(0,Ft.readFileSync)(t,{encoding:"ascii"}),roleArn:n,roleSessionName:r})()},vc=async(e,t,n,r={})=>{const s=t[e];if(Object.keys(r).length>0&&yc(s))return wc(s);if(o=s,Boolean(o)&&"object"==typeof o&&"string"==typeof o.role_arn&&["undefined","string"].indexOf(typeof o.role_session_name)>-1&&["undefined","string"].indexOf(typeof o.external_id)>-1&&["undefined","string"].indexOf(typeof o.mfa_serial)>-1&&((e=>"string"==typeof e.source_profile&&void 0===e.credential_source)(o)||(e=>"string"==typeof e.credential_source&&void 0===e.source_profile)(o)))return(async(e,t,n,r={})=>{const s=t[e];if(!n.roleAssumer)throw new Ot(`Profile ${e} requires a role to be assumed, but no role assumption callback was provided.`,!1);const{source_profile:o}=s;if(o&&o in r)throw new Ot(`Detected a cycle attempting to resolve credentials for profile ${Mt(n)}. Profiles visited: `+Object.keys(r).join(", "),!1);const i=o?vc(o,t,n,{...r,[o]:!0}):((e,t)=>{const n={EcsContainer:Io,Ec2InstanceMetadata:Vo,Environment:mo};if(e in n)return n[e]();throw new Ot(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`)})(s.credential_source,e)(),a={RoleArn:s.role_arn,RoleSessionName:s.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:s.external_id,DurationSeconds:parseInt(s.duration_seconds||"3600",10)},{mfa_serial:c}=s;if(c){if(!n.mfaCodeProvider)throw new Ot(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,!1);a.SerialNumber=c,a.TokenCode=await n.mfaCodeProvider(c)}const u=await i;return n.roleAssumer(u,a)})(e,t,n,r);var o;if(yc(s))return wc(s);if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1)(s))return(async(e,t)=>bc({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity})())(s,n);if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(s))return(async(e,t)=>Jo({...e,profile:t})())(n,e);if(Xo(s))return(e=>{const{sso_start_url:t,sso_account_id:n,sso_session:r,sso_region:s,sso_role_name:o}=mc(e);return gc({ssoStartUrl:t,ssoAccountId:n,ssoSession:r,ssoRegion:s,ssoRoleName:o})()})(s);throw new Ot(`Profile ${e} could not be found or parsed in shared credentials file.`)},Sc=(e={})=>E(Ct(...e.profile||process.env[_t]?[]:[mo()],gc(e),((e={})=>async()=>{const t=await sn(e);return vc(Mt(e),t,e)})(e),Jo(e),bc(e),(e=>process.env[xo]||process.env[Eo]?Io(e):process.env.AWS_EC2_METADATA_DISABLED?async()=>{throw new Ot("EC2 Instance Metadata Service access disabled")}:Vo(e))(e),(async()=>{throw new Ot("Could not load credentials from any providers",!1)})),(e=>void 0!==e.expiration&&e.expiration.getTime()-Date.now()<3e5),(e=>void 0!==e.expiration)),Ec="required",xc="type",Pc="fn",Ic="argv",Ac="ref",kc=!0,Tc="booleanEquals",Cc="stringEquals",Oc="sigv4",Rc="us-east-1",Nc="endpoint",$c="https://sts.{Region}.{PartitionResult#dnsSuffix}",Dc="tree",_c="error",Mc="getAttr",jc={[Ec]:!1,[xc]:"String"},Uc={[Ec]:!0,default:!1,[xc]:"Boolean"},qc={[Ac]:"Endpoint"},Fc={[Pc]:"isSet",[Ic]:[{[Ac]:"Region"}]},zc={[Ac]:"Region"},Lc={[Pc]:"aws.partition",[Ic]:[zc],assign:"PartitionResult"},Vc={[Ac]:"UseFIPS"},Bc={[Ac]:"UseDualStack"},Wc={url:"https://sts.amazonaws.com",properties:{authSchemes:[{name:Oc,signingName:"sts",signingRegion:Rc}]},headers:{}},Hc={},Kc={conditions:[{[Pc]:Cc,[Ic]:[zc,"aws-global"]}],[Nc]:Wc,[xc]:Nc},Gc={[Pc]:Tc,[Ic]:[Vc,!0]},Jc={[Pc]:Tc,[Ic]:[Bc,!0]},Xc={[Pc]:Mc,[Ic]:[{[Ac]:"PartitionResult"},"supportsFIPS"]},Qc={[Ac]:"PartitionResult"},Yc={[Pc]:Tc,[Ic]:[!0,{[Pc]:Mc,[Ic]:[Qc,"supportsDualStack"]}]},Zc=[{[Pc]:"isSet",[Ic]:[qc]}],eu=[Gc],tu=[Jc],nu={version:"1.0",parameters:{Region:jc,UseDualStack:Uc,UseFIPS:Uc,Endpoint:jc,UseGlobalEndpoint:Uc},rules:[{conditions:[{[Pc]:Tc,[Ic]:[{[Ac]:"UseGlobalEndpoint"},kc]},{[Pc]:"not",[Ic]:Zc},Fc,Lc,{[Pc]:Tc,[Ic]:[Vc,!1]},{[Pc]:Tc,[Ic]:[Bc,!1]}],rules:[{conditions:[{[Pc]:Cc,[Ic]:[zc,"ap-northeast-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"ap-south-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"ap-southeast-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"ap-southeast-2"]}],endpoint:Wc,[xc]:Nc},Kc,{conditions:[{[Pc]:Cc,[Ic]:[zc,"ca-central-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"eu-central-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"eu-north-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"eu-west-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"eu-west-2"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"eu-west-3"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"sa-east-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,Rc]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"us-east-2"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"us-west-1"]}],endpoint:Wc,[xc]:Nc},{conditions:[{[Pc]:Cc,[Ic]:[zc,"us-west-2"]}],endpoint:Wc,[xc]:Nc},{endpoint:{url:$c,properties:{authSchemes:[{name:Oc,signingName:"sts",signingRegion:"{Region}"}]},headers:Hc},[xc]:Nc}],[xc]:Dc},{conditions:Zc,rules:[{conditions:eu,error:"Invalid Configuration: FIPS and custom endpoint are not supported",[xc]:_c},{conditions:tu,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",[xc]:_c},{endpoint:{url:qc,properties:Hc,headers:Hc},[xc]:Nc}],[xc]:Dc},{conditions:[Fc],rules:[{conditions:[Lc],rules:[{conditions:[Gc,Jc],rules:[{conditions:[{[Pc]:Tc,[Ic]:[kc,Xc]},Yc],rules:[{endpoint:{url:"https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Hc,headers:Hc},[xc]:Nc}],[xc]:Dc},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",[xc]:_c}],[xc]:Dc},{conditions:eu,rules:[{conditions:[{[Pc]:Tc,[Ic]:[Xc,kc]}],rules:[{conditions:[{[Pc]:Cc,[Ic]:[{[Pc]:Mc,[Ic]:[Qc,"name"]},"aws-us-gov"]}],endpoint:{url:"https://sts.{Region}.amazonaws.com",properties:Hc,headers:Hc},[xc]:Nc},{endpoint:{url:"https://sts-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Hc,headers:Hc},[xc]:Nc}],[xc]:Dc},{error:"FIPS is enabled but this partition does not support FIPS",[xc]:_c}],[xc]:Dc},{conditions:tu,rules:[{conditions:[Yc],rules:[{endpoint:{url:"https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Hc,headers:Hc},[xc]:Nc}],[xc]:Dc},{error:"DualStack is enabled but this partition does not support DualStack",[xc]:_c}],[xc]:Dc},Kc,{endpoint:{url:$c,properties:Hc,headers:Hc},[xc]:Nc}],[xc]:Dc}],[xc]:Dc},{error:"Invalid Configuration: Missing Region",[xc]:_c}]},ru=(e,t={})=>tt(nu,{endpointParams:e,logger:t.logger});class su extends tr{constructor(...[n]){const r=(s=(e=>{Jr(process.version);const t=Ri(e),n=()=>t().then(Kr),r=(e=>({apiVersion:"2011-06-15",base64Decoder:e?.base64Decoder??rr,base64Encoder:e?.base64Encoder??sr,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??ru,extensions:e?.extensions??[],logger:e?.logger??new Jn,serviceId:e?.serviceId??"STS",urlParser:e?.urlParser??un,utf8Decoder:e?.utf8Decoder??W,utf8Encoder:e?.utf8Encoder??K}))(e);return ho(process.version),{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??ti,credentialDefaultProvider:e?.credentialDefaultProvider??(s=Sc,e=>s({roleAssumer:lo(e,e.stsClientCtor),roleAssumerWithWebIdentity:po(e,e.stsClientCtor),...e})),defaultUserAgentProvider:e?.defaultUserAgentProvider??Yo({serviceId:r.serviceId,clientVersion:"3.461.0"}),maxAttempts:e?.maxAttempts??on(Dn),region:e?.region??on(gt,yt),requestHandler:e?.requestHandler??new dr(n),retryMode:e?.retryMode??on({...Mn,default:async()=>(await n()).retryMode||Sn}),sha256:e?.sha256??Zo.bind(null,"sha256"),streamCollector:e?.streamCollector??fr,useDualstackEndpoint:e?.useDualstackEndpoint??on(ht),useFipsEndpoint:e?.useFipsEndpoint??on(mt)};var s})(n||{}),{...s,useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,useGlobalEndpoint:s.useGlobalEndpoint??!1,defaultSigningName:"sts"});var s;const o=vt(r),i=wn(o),a=((n,r)=>{const s={...Di(n),...es(n),...e(n)};return r.forEach((e=>e.configure(s))),{...n,..._i(s),...ts(s),...t(s)}})(Oe(((e,{stsClientCtor:t})=>xe({...e,stsClientCtor:t}))(_n(i),{stsClientCtor:su})),n?.extensions||[]);super(a),this.config=a,this.middlewareStack.use(Kn(this.config)),this.middlewareStack.use(xt(this.config)),this.middlewareStack.use(g(this.config)),this.middlewareStack.use(w(this.config)),this.middlewareStack.use(S(this.config)),this.middlewareStack.use(dt(this.config))}destroy(){super.destroy()}}const ou=(e,t)=>t?class extends e{constructor(e){super(e);for(const e of t)this.middlewareStack.use(e)}}:e,iu=(e={},t)=>lo(e,ou(su,t)),au=(e={},t)=>po(e,ou(su,t)),cu=e=>t=>e({roleAssumer:iu(t),roleAssumerWithWebIdentity:au(t),...t}),uu="required",lu="fn",du="argv",pu="ref",fu="isSet",hu="booleanEquals",mu="error",gu="endpoint",yu="tree",wu="PartitionResult",bu="stringEquals",vu={[uu]:!1,type:"String"},Su={[uu]:!0,default:!1,type:"Boolean"},Eu={[pu]:"Endpoint"},xu={[lu]:hu,[du]:[{[pu]:"UseFIPS"},!0]},Pu={[lu]:hu,[du]:[{[pu]:"UseDualStack"},!0]},Iu={},Au={[pu]:"Region"},ku={[lu]:"getAttr",[du]:[{[pu]:wu},"supportsFIPS"]},Tu={[lu]:hu,[du]:[!0,{[lu]:"getAttr",[du]:[{[pu]:wu},"supportsDualStack"]}]},Cu=[xu],Ou=[Pu],Ru=[Au],Nu={version:"1.0",parameters:{Region:vu,UseDualStack:Su,UseFIPS:Su,Endpoint:vu},rules:[{conditions:[{[lu]:fu,[du]:[Eu]}],rules:[{conditions:Cu,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:mu},{conditions:Ou,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:mu},{endpoint:{url:Eu,properties:Iu,headers:Iu},type:gu}],type:yu},{conditions:[{[lu]:fu,[du]:Ru}],rules:[{conditions:[{[lu]:"aws.partition",[du]:Ru,assign:wu}],rules:[{conditions:[xu,Pu],rules:[{conditions:[{[lu]:hu,[du]:[!0,ku]},Tu],rules:[{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Iu,headers:Iu},type:gu}],type:yu},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:mu}],type:yu},{conditions:Cu,rules:[{conditions:[{[lu]:hu,[du]:[ku,!0]}],rules:[{conditions:[{[lu]:bu,[du]:[Au,"us-gov-east-1"]}],endpoint:{url:"https://cloudtrail.us-gov-east-1.amazonaws.com",properties:Iu,headers:Iu},type:gu},{conditions:[{[lu]:bu,[du]:[Au,"us-gov-west-1"]}],endpoint:{url:"https://cloudtrail.us-gov-west-1.amazonaws.com",properties:Iu,headers:Iu},type:gu},{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Iu,headers:Iu},type:gu}],type:yu},{error:"FIPS is enabled but this partition does not support FIPS",type:mu}],type:yu},{conditions:Ou,rules:[{conditions:[Tu],rules:[{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Iu,headers:Iu},type:gu}],type:yu},{error:"DualStack is enabled but this partition does not support DualStack",type:mu}],type:yu},{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dnsSuffix}",properties:Iu,headers:Iu},type:gu}],type:yu}],type:yu},{error:"Invalid Configuration: Missing Region",type:mu}]},$u=(e,t={})=>tt(Nu,{endpointParams:e,logger:t.logger});class Du extends tr{constructor(...[n]){const r=(s=(e=>{Jr(process.version);const t=Ri(e),n=()=>t().then(Kr),r=(e=>({apiVersion:"2013-11-01",base64Decoder:e?.base64Decoder??rr,base64Encoder:e?.base64Encoder??sr,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??$u,extensions:e?.extensions??[],logger:e?.logger??new Jn,serviceId:e?.serviceId??"CloudTrail",urlParser:e?.urlParser??un,utf8Decoder:e?.utf8Decoder??W,utf8Encoder:e?.utf8Encoder??K}))(e);return ho(process.version),{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??ti,credentialDefaultProvider:e?.credentialDefaultProvider??cu(Sc),defaultUserAgentProvider:e?.defaultUserAgentProvider??Yo({serviceId:r.serviceId,clientVersion:"3.461.0"}),maxAttempts:e?.maxAttempts??on(Dn),region:e?.region??on(gt,yt),requestHandler:e?.requestHandler??new dr(n),retryMode:e?.retryMode??on({...Mn,default:async()=>(await n()).retryMode||Sn}),sha256:e?.sha256??Zo.bind(null,"sha256"),streamCollector:e?.streamCollector??fr,useDualstackEndpoint:e?.useDualstackEndpoint??on(ht),useFipsEndpoint:e?.useFipsEndpoint??on(mt)}})(n||{}),{...s,useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"cloudtrail"});var s;const o=vt(r),i=wn(o),a=_n(i),c=((n,r)=>{const s={...Di(n),...es(n),...e(n)};return r.forEach((e=>e.configure(s))),{...n,..._i(s),...ts(s),...t(s)}})(Oe(xe(a)),n?.extensions||[]);super(c),this.config=c,this.middlewareStack.use(Kn(this.config)),this.middlewareStack.use(xt(this.config)),this.middlewareStack.use(g(this.config)),this.middlewareStack.use(w(this.config)),this.middlewareStack.use(S(this.config)),this.middlewareStack.use(Ce(this.config)),this.middlewareStack.use(dt(this.config))}destroy(){super.destroy()}}class _u extends Vr{constructor(e){super(e),Object.setPrototypeOf(this,_u.prototype)}}class Mu extends _u{constructor(e){super({name:"OperationNotPermittedException",$fault:"client",...e}),this.name="OperationNotPermittedException",this.$fault="client",Object.setPrototypeOf(this,Mu.prototype),this.Message=e.Message}}class ju extends _u{constructor(e){super({name:"UnsupportedOperationException",$fault:"client",...e}),this.name="UnsupportedOperationException",this.$fault="client",Object.setPrototypeOf(this,ju.prototype),this.Message=e.Message}}class Uu extends _u{constructor(e){super({name:"InvalidMaxResultsException",$fault:"client",...e}),this.name="InvalidMaxResultsException",this.$fault="client",Object.setPrototypeOf(this,Uu.prototype),this.Message=e.Message}}class qu extends _u{constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),this.name="InvalidNextTokenException",this.$fault="client",Object.setPrototypeOf(this,qu.prototype),this.Message=e.Message}}class Fu extends _u{constructor(e){super({name:"InvalidTimeRangeException",$fault:"client",...e}),this.name="InvalidTimeRangeException",this.$fault="client",Object.setPrototypeOf(this,Fu.prototype),this.Message=e.Message}}class zu extends _u{constructor(e){super({name:"InvalidEventCategoryException",$fault:"client",...e}),this.name="InvalidEventCategoryException",this.$fault="client",Object.setPrototypeOf(this,zu.prototype),this.Message=e.Message}}class Lu extends _u{constructor(e){super({name:"InvalidLookupAttributesException",$fault:"client",...e}),this.name="InvalidLookupAttributesException",this.$fault="client",Object.setPrototypeOf(this,Lu.prototype),this.Message=e.Message}}const Vu=async(e,t)=>{const n=e.body,r=fs(n),s=new zu({$metadata:Qu(e),...r});return Br(s,n)},Bu=async(e,t)=>{const n=e.body,r=fs(n),s=new Lu({$metadata:Qu(e),...r});return Br(s,n)},Wu=async(e,t)=>{const n=e.body,r=fs(n),s=new Uu({$metadata:Qu(e),...r});return Br(s,n)},Hu=async(e,t)=>{const n=e.body,r=fs(n),s=new qu({$metadata:Qu(e),...r});return Br(s,n)},Ku=async(e,t)=>{const n=e.body,r=fs(n),s=new Fu({$metadata:Qu(e),...r});return Br(s,n)},Gu=async(e,t)=>{const n=e.body,r=fs(n),s=new Mu({$metadata:Qu(e),...r});return Br(s,n)},Ju=async(e,t)=>{const n=e.body,r=fs(n),s=new ju({$metadata:Qu(e),...r});return Br(s,n)},Xu=(e,t)=>is(e,{AccessKeyId:Ar,CloudTrailEvent:Ar,EventId:Ar,EventName:Ar,EventSource:Ar,EventTime:e=>Pr((e=>{if(null==e)return;let t;if("number"==typeof e)t=e;else{if("string"!=typeof e)throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");t=(e=>wr("string"==typeof e?Tr(e):e))(e)}if(Number.isNaN(t)||t===1/0||t===-1/0)throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");return new Date(Math.round(1e3*t))})(wr(e))),ReadOnly:Ar,Resources:fs,Username:Ar}),Qu=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Yu=Wr(_u);const Zu=(e,t)=>((e,t)=>mr(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),el=async(e,t)=>{const n=await Zu(e,t);return n.message=n.message??n.Message,n},tl=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=(s=e.headers,"x-amzn-errortype",Object.keys(s).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var s;return void 0!==r?n(e.headers[r]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class nl extends gr{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(mn(t,this.serialize,this.deserialize)),this.middlewareStack.use(yn(t,nl.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"CloudTrailClient",commandName:"LookupEventsCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e,[l]:{service:"CloudTrail_20131101",operation:"LookupEvents"}},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n={"content-type":"application/x-amz-json-1.1","x-amz-target":`CloudTrail_20131101.${"LookupEvents"}`};let r;return r=JSON.stringify(((e,t)=>is(e,{EndTime:e=>Math.round(e.getTime()/1e3),EventCategory:[],LookupAttributes:fs,MaxResults:[],NextToken:[],StartTime:e=>Math.round(e.getTime()/1e3)}))(e)),(async(e,t,n,r,s)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),u={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==r&&(u.hostname=r),void 0!==s&&(u.body=s),new f(u)})(t,n,"/",void 0,r)})(e,t)}deserialize(e,t){return(async(e,t)=>{if(e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await el(e.body,t)},r=tl(e,n.body);switch(r){case"InvalidEventCategoryException":case"com.amazonaws.cloudtrail#InvalidEventCategoryException":throw await Vu(n,t);case"InvalidLookupAttributesException":case"com.amazonaws.cloudtrail#InvalidLookupAttributesException":throw await Bu(n,t);case"InvalidMaxResultsException":case"com.amazonaws.cloudtrail#InvalidMaxResultsException":throw await Wu(n,t);case"InvalidNextTokenException":case"com.amazonaws.cloudtrail#InvalidNextTokenException":throw await Hu(n,t);case"InvalidTimeRangeException":case"com.amazonaws.cloudtrail#InvalidTimeRangeException":throw await Ku(n,t);case"OperationNotPermittedException":case"com.amazonaws.cloudtrail#OperationNotPermittedException":throw await Gu(n,t);case"UnsupportedOperationException":case"com.amazonaws.cloudtrail#UnsupportedOperationException":throw await Ju(n,t);default:const s=n.body;return Yu({output:e,parsedBody:s,errorCode:r})}})(e,t);let n={};return n=((e,t)=>is(e,{Events:e=>((e,t)=>{const n=(e||[]).filter((e=>null!=e)).map((e=>Xu(e)));return n})(e),NextToken:Ar}))(await Zu(e.body,t)),{$metadata:Qu(e),...n}})(e,t)}}var rl=function(e){var t=JSON.parse(e.CloudTrailEvent).userIdentity.arn.split("/").slice(1),n=t[0],r=t[1];this.iamRole=n,this.stsSession=r,this.eventTime=e.EventTime},sl=function(){function e(){this.cloudTrailClient=new Du({})}return e.prototype.retrieveQuickSightUserEvents=function(e){return t=this,n=void 0,s=function(){var t,n,r,s;return function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(o){switch(o.label){case 0:t=[],n=null,o.label=1;case 1:return r=new nl({LookupAttributes:[{AttributeKey:"EventSource",AttributeValue:"quicksight.amazonaws.com"}],StartTime:e,NextToken:n}),[4,this.cloudTrailClient.send(r)];case 2:s=o.sent(),n=s.NextToken,s.Events.forEach((function(e){return t.push(new rl(e))})),o.label=3;case 3:if(n)return[3,1];o.label=4;case 4:return[2,t]}}))},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,a)}c((s=s.apply(t,n||[])).next())}));var t,n,r,s},e.prototype.getLastAccessDate=function(e,t){var n=t.filter((function(t){return e.iamRole===t.iamRole&&e.stsSession===t.stsSession}));if(0===n.length)return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," no CloudTrail events found")),new Date(0);var r=n.sort((function(e,t){return e.eventTime<=t.eventTime?1:-1}))[0];return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," latest event: ").concat(JSON.stringify(r,null,1))),r.eventTime},e}();const ol="required",il="fn",al="argv",cl="ref",ul="isSet",ll="booleanEquals",dl="error",pl="endpoint",fl="tree",hl="PartitionResult",ml="getAttr",gl={[ol]:!1,type:"String"},yl={[ol]:!0,default:!1,type:"Boolean"},wl={[cl]:"Endpoint"},bl={[il]:ll,[al]:[{[cl]:"UseFIPS"},!0]},vl={[il]:ll,[al]:[{[cl]:"UseDualStack"},!0]},Sl={},El={[il]:ml,[al]:[{[cl]:hl},"supportsFIPS"]},xl={[cl]:hl},Pl={[il]:ll,[al]:[!0,{[il]:ml,[al]:[xl,"supportsDualStack"]}]},Il=[bl],Al=[vl],kl=[{[cl]:"Region"}],Tl={version:"1.0",parameters:{Region:gl,UseDualStack:yl,UseFIPS:yl,Endpoint:gl},rules:[{conditions:[{[il]:ul,[al]:[wl]}],rules:[{conditions:Il,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:dl},{conditions:Al,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:dl},{endpoint:{url:wl,properties:Sl,headers:Sl},type:pl}],type:fl},{conditions:[{[il]:ul,[al]:kl}],rules:[{conditions:[{[il]:"aws.partition",[al]:kl,assign:hl}],rules:[{conditions:[bl,vl],rules:[{conditions:[{[il]:ll,[al]:[!0,El]},Pl],rules:[{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Sl,headers:Sl},type:pl}],type:fl},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:dl}],type:fl},{conditions:Il,rules:[{conditions:[{[il]:ll,[al]:[El,!0]}],rules:[{conditions:[{[il]:"stringEquals",[al]:[{[il]:ml,[al]:[xl,"name"]},"aws-us-gov"]}],endpoint:{url:"https://monitoring.{Region}.amazonaws.com",properties:Sl,headers:Sl},type:pl},{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Sl,headers:Sl},type:pl}],type:fl},{error:"FIPS is enabled but this partition does not support FIPS",type:dl}],type:fl},{conditions:Al,rules:[{conditions:[Pl],rules:[{endpoint:{url:"https://monitoring.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Sl,headers:Sl},type:pl}],type:fl},{error:"DualStack is enabled but this partition does not support DualStack",type:dl}],type:fl},{endpoint:{url:"https://monitoring.{Region}.{PartitionResult#dnsSuffix}",properties:Sl,headers:Sl},type:pl}],type:fl}],type:fl},{error:"Invalid Configuration: Missing Region",type:dl}]},Cl=(e,t={})=>tt(Tl,{endpointParams:e,logger:t.logger});class Ol extends tr{constructor(...[n]){const r=(s=(e=>{Jr(process.version);const t=Ri(e),n=()=>t().then(Kr),r=(e=>({apiVersion:"2010-08-01",base64Decoder:e?.base64Decoder??rr,base64Encoder:e?.base64Encoder??sr,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Cl,extensions:e?.extensions??[],logger:e?.logger??new Jn,serviceId:e?.serviceId??"CloudWatch",urlParser:e?.urlParser??un,utf8Decoder:e?.utf8Decoder??W,utf8Encoder:e?.utf8Encoder??K}))(e);return ho(process.version),{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??ti,credentialDefaultProvider:e?.credentialDefaultProvider??cu(Sc),defaultUserAgentProvider:e?.defaultUserAgentProvider??Yo({serviceId:r.serviceId,clientVersion:"3.461.0"}),maxAttempts:e?.maxAttempts??on(Dn),region:e?.region??on(gt,yt),requestHandler:e?.requestHandler??new dr(n),retryMode:e?.retryMode??on({...Mn,default:async()=>(await n()).retryMode||Sn}),sha256:e?.sha256??Zo.bind(null,"sha256"),streamCollector:e?.streamCollector??fr,useDualstackEndpoint:e?.useDualstackEndpoint??on(ht),useFipsEndpoint:e?.useFipsEndpoint??on(mt)}})(n||{}),{...s,useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"monitoring"});var s;const o=vt(r),i=wn(o),a=_n(i),c=((n,r)=>{const s={...Di(n),...es(n),...e(n)};return r.forEach((e=>e.configure(s))),{...n,..._i(s),...ts(s),...t(s)}})(Oe(xe(a)),n?.extensions||[]);super(c),this.config=c,this.middlewareStack.use(Kn(this.config)),this.middlewareStack.use(xt(this.config)),this.middlewareStack.use(g(this.config)),this.middlewareStack.use(w(this.config)),this.middlewareStack.use(S(this.config)),this.middlewareStack.use(Ce(this.config)),this.middlewareStack.use(dt(this.config))}destroy(){super.destroy()}}class Rl extends Vr{constructor(e){super(e),Object.setPrototypeOf(this,Rl.prototype)}}class Nl extends Rl{constructor(e){super({name:"InternalServiceFault",$fault:"server",...e}),this.name="InternalServiceFault",this.$fault="server",Object.setPrototypeOf(this,Nl.prototype),this.Message=e.Message}}class $l extends Rl{constructor(e){super({name:"InvalidParameterCombinationException",$fault:"client",...e}),this.name="InvalidParameterCombinationException",this.$fault="client",Object.setPrototypeOf(this,$l.prototype)}}class Dl extends Rl{constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,Dl.prototype)}}class _l extends Rl{constructor(e){super({name:"MissingRequiredParameterException",$fault:"client",...e}),this.name="MissingRequiredParameterException",this.$fault="client",Object.setPrototypeOf(this,_l.prototype)}}const Ml=async(e,t)=>{const n=e.body,r=Wl(n.Error,t),s=new Nl({$metadata:Jl(e),...r});return Br(s,n)},jl=async(e,t)=>{const n=e.body,r=Hl(n.Error,t),s=new $l({$metadata:Jl(e),...r});return Br(s,n)},Ul=async(e,t)=>{const n=e.body,r=Kl(n.Error,t),s=new Dl({$metadata:Jl(e),...r});return Br(s,n)},ql=async(e,t)=>{const n=e.body,r=Gl(n.Error,t),s=new _l({$metadata:Jl(e),...r});return Br(s,n)},Fl=(e,t)=>{const n={};return null!=e.Name&&(n.Name=e.Name),null!=e.Value&&(n.Value=e.Value),n},zl=(e,t)=>{const n={};if(null!=e.MetricName&&(n.MetricName=e.MetricName),null!=e.Dimensions){const t=((e,t)=>{const n={};let r=1;for(const t of e){if(null===t)continue;const e=Fl(t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n})(e.Dimensions);0===e.Dimensions?.length&&(n.Dimensions=[]),Object.entries(t).forEach((([e,t])=>{n[`Dimensions.${e}`]=t}))}if(null!=e.Timestamp&&(n.Timestamp=e.Timestamp.toISOString().split(".")[0]+"Z"),null!=e.Value&&(n.Value=ps(e.Value)),null!=e.StatisticValues){const r=Vl(e.StatisticValues,t);Object.entries(r).forEach((([e,t])=>{n[`StatisticValues.${e}`]=t}))}if(null!=e.Values){const r=Bl(e.Values,t);0===e.Values?.length&&(n.Values=[]),Object.entries(r).forEach((([e,t])=>{n[`Values.${e}`]=t}))}if(null!=e.Counts){const t=((e,t)=>{const n={};let r=1;for(const t of e)null!==t&&(n[`member.${r}`]=ps(t),r++);return n})(e.Counts);0===e.Counts?.length&&(n.Counts=[]),Object.entries(t).forEach((([e,t])=>{n[`Counts.${e}`]=t}))}return null!=e.Unit&&(n.Unit=e.Unit),null!=e.StorageResolution&&(n.StorageResolution=e.StorageResolution),n},Ll=(e,t)=>{const n={};if(null!=e.Namespace&&(n.Namespace=e.Namespace),null!=e.MetricData){const r=((e,t)=>{const n={};let r=1;for(const s of e){if(null===s)continue;const e=zl(s,t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n})(e.MetricData,t);0===e.MetricData?.length&&(n.MetricData=[]),Object.entries(r).forEach((([e,t])=>{n[`MetricData.${e}`]=t}))}return n},Vl=(e,t)=>{const n={};return null!=e.SampleCount&&(n.SampleCount=ps(e.SampleCount)),null!=e.Sum&&(n.Sum=ps(e.Sum)),null!=e.Minimum&&(n.Minimum=ps(e.Minimum)),null!=e.Maximum&&(n.Maximum=ps(e.Maximum)),n},Bl=(e,t)=>{const n={};let r=1;for(const t of e)null!==t&&(n[`member.${r}`]=ps(t),r++);return n},Wl=(e,t)=>{const n={};return void 0!==e.Message&&(n.Message=Ar(e.Message)),n},Hl=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Kl=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Gl=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Jl=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Xl=Wr(Rl),Ql={"content-type":"application/x-www-form-urlencoded"},Yl=async(e,t)=>{const n=await((e,t)=>((e,t)=>mr(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>{if(e.length){const t=new As.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});t.addEntity("#xD","\r"),t.addEntity("#10","\n");const n=t.parse(e),r="#text",s=Object.keys(n)[0],o=n[s];return o[r]&&(o[s]=o[r],delete o[r]),rs(o)}return{}})))(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n},Zl=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class ed extends gr{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(mn(t,this.serialize,this.deserialize)),this.middlewareStack.use(yn(t,ed.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"CloudWatchClient",commandName:"PutMetricDataCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e,[l]:{service:"GraniteServiceVersion20100801",operation:"PutMetricData"}},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n=Ql;let r;return s={...Ll(e,t),Action:"PutMetricData",Version:"2010-08-01"},r=Object.entries(s).map((([e,t])=>ns(e)+"="+ns(t))).join("&"),(async(e,t,n,r,s)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),u={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==r&&(u.hostname=r),void 0!==s&&(u.body=s),new f(u)})(t,n,"/",void 0,r);var s})(e,t)}deserialize(e,t){return(async(e,t)=>e.statusCode>=300?(async(e,t)=>{const n={...e,body:await Yl(e.body,t)},r=Zl(e,n.body);switch(r){case"InternalServiceError":case"com.amazonaws.cloudwatch#InternalServiceFault":throw await Ml(n,t);case"InvalidParameterCombination":case"com.amazonaws.cloudwatch#InvalidParameterCombinationException":throw await jl(n,t);case"InvalidParameterValue":case"com.amazonaws.cloudwatch#InvalidParameterValueException":throw await Ul(n,t);case"MissingParameter":case"com.amazonaws.cloudwatch#MissingRequiredParameterException":throw await ql(n,t);default:const s=n.body;return Xl({output:e,parsedBody:s.Error,errorCode:r})}})(e,t):(await mr(e.body,t),{$metadata:Jl(e)}))(e,t)}}var td=function(){function e(){this.metricData=[],this.cloudWatchClient=new Ol({})}return e.prototype.queueMetric=function(e){this.metricData.push(e)},e.prototype.emitQueuedMetrics=function(){return e=this,t=void 0,r=function(){var e;return function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(t){switch(t.label){case 0:return e=new ed({Namespace:process.env.AWS_LAMBDA_FUNCTION_NAME,MetricData:this.metricData}),console.debug("Emitting metrics:\n".concat(JSON.stringify(e.input,null,2))),[4,this.cloudWatchClient.send(e)];case 1:return t.sent(),this.metricData=[],[2]}}))},new((n=void 0)||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}));var e,t,n,r},e}();const nd="required",rd="fn",sd="argv",od="ref",id="isSet",ad="booleanEquals",cd="error",ud="endpoint",ld="tree",dd="PartitionResult",pd={[nd]:!1,type:"String"},fd={[nd]:!0,default:!1,type:"Boolean"},hd={[od]:"Endpoint"},md={[rd]:ad,[sd]:[{[od]:"UseFIPS"},!0]},gd={[rd]:ad,[sd]:[{[od]:"UseDualStack"},!0]},yd={},wd={[rd]:"getAttr",[sd]:[{[od]:dd},"supportsFIPS"]},bd={[rd]:ad,[sd]:[!0,{[rd]:"getAttr",[sd]:[{[od]:dd},"supportsDualStack"]}]},vd=[md],Sd=[gd],Ed=[{[od]:"Region"}],xd={version:"1.0",parameters:{Region:pd,UseDualStack:fd,UseFIPS:fd,Endpoint:pd},rules:[{conditions:[{[rd]:id,[sd]:[hd]}],rules:[{conditions:vd,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:cd},{conditions:Sd,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:cd},{endpoint:{url:hd,properties:yd,headers:yd},type:ud}],type:ld},{conditions:[{[rd]:id,[sd]:Ed}],rules:[{conditions:[{[rd]:"aws.partition",[sd]:Ed,assign:dd}],rules:[{conditions:[md,gd],rules:[{conditions:[{[rd]:ad,[sd]:[!0,wd]},bd],rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:yd,headers:yd},type:ud}],type:ld},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:cd}],type:ld},{conditions:vd,rules:[{conditions:[{[rd]:ad,[sd]:[wd,!0]}],rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dnsSuffix}",properties:yd,headers:yd},type:ud}],type:ld},{error:"FIPS is enabled but this partition does not support FIPS",type:cd}],type:ld},{conditions:Sd,rules:[{conditions:[bd],rules:[{endpoint:{url:"https://email.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:yd,headers:yd},type:ud}],type:ld},{error:"DualStack is enabled but this partition does not support DualStack",type:cd}],type:ld},{endpoint:{url:"https://email.{Region}.{PartitionResult#dnsSuffix}",properties:yd,headers:yd},type:ud}],type:ld}],type:ld},{error:"Invalid Configuration: Missing Region",type:cd}]},Pd=(e,t={})=>tt(xd,{endpointParams:e,logger:t.logger});class Id extends tr{constructor(...[n]){const r=(s=(e=>{Jr(process.version);const t=Ri(e),n=()=>t().then(Kr),r=(e=>({apiVersion:"2010-12-01",base64Decoder:e?.base64Decoder??rr,base64Encoder:e?.base64Encoder??sr,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Pd,extensions:e?.extensions??[],logger:e?.logger??new Jn,serviceId:e?.serviceId??"SES",urlParser:e?.urlParser??un,utf8Decoder:e?.utf8Decoder??W,utf8Encoder:e?.utf8Encoder??K}))(e);return ho(process.version),{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??ti,credentialDefaultProvider:e?.credentialDefaultProvider??cu(Sc),defaultUserAgentProvider:e?.defaultUserAgentProvider??Yo({serviceId:r.serviceId,clientVersion:"3.461.0"}),maxAttempts:e?.maxAttempts??on(Dn),region:e?.region??on(gt,yt),requestHandler:e?.requestHandler??new dr(n),retryMode:e?.retryMode??on({...Mn,default:async()=>(await n()).retryMode||Sn}),sha256:e?.sha256??Zo.bind(null,"sha256"),streamCollector:e?.streamCollector??fr,useDualstackEndpoint:e?.useDualstackEndpoint??on(ht),useFipsEndpoint:e?.useFipsEndpoint??on(mt)}})(n||{}),{...s,useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"ses"});var s;const o=vt(r),i=wn(o),a=_n(i),c=((n,r)=>{const s={...Di(n),...es(n),...e(n)};return r.forEach((e=>e.configure(s))),{...n,..._i(s),...ts(s),...t(s)}})(Oe(xe(a)),n?.extensions||[]);super(c),this.config=c,this.middlewareStack.use(Kn(this.config)),this.middlewareStack.use(xt(this.config)),this.middlewareStack.use(g(this.config)),this.middlewareStack.use(w(this.config)),this.middlewareStack.use(S(this.config)),this.middlewareStack.use(Ce(this.config)),this.middlewareStack.use(dt(this.config))}destroy(){super.destroy()}}class Ad extends Vr{constructor(e){super(e),Object.setPrototypeOf(this,Ad.prototype)}}class kd extends Ad{constructor(e){super({name:"AccountSendingPausedException",$fault:"client",...e}),this.name="AccountSendingPausedException",this.$fault="client",Object.setPrototypeOf(this,kd.prototype)}}class Td extends Ad{constructor(e){super({name:"ConfigurationSetDoesNotExistException",$fault:"client",...e}),this.name="ConfigurationSetDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Td.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Cd extends Ad{constructor(e){super({name:"ConfigurationSetSendingPausedException",$fault:"client",...e}),this.name="ConfigurationSetSendingPausedException",this.$fault="client",Object.setPrototypeOf(this,Cd.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Od extends Ad{constructor(e){super({name:"MailFromDomainNotVerifiedException",$fault:"client",...e}),this.name="MailFromDomainNotVerifiedException",this.$fault="client",Object.setPrototypeOf(this,Od.prototype)}}class Rd extends Ad{constructor(e){super({name:"MessageRejected",$fault:"client",...e}),this.name="MessageRejected",this.$fault="client",Object.setPrototypeOf(this,Rd.prototype)}}const Nd=async(e,t)=>{const n=e.body,r=zd(n.Error,t),s=new kd({$metadata:Hd(e),...r});return Br(s,n)},$d=async(e,t)=>{const n=e.body,r=Ld(n.Error,t),s=new Td({$metadata:Hd(e),...r});return Br(s,n)},Dd=async(e,t)=>{const n=e.body,r=Vd(n.Error,t),s=new Cd({$metadata:Hd(e),...r});return Br(s,n)},_d=async(e,t)=>{const n=e.body,r=Bd(n.Error,t),s=new Od({$metadata:Hd(e),...r});return Br(s,n)},Md=async(e,t)=>{const n=e.body,r=Wd(n.Error,t),s=new Rd({$metadata:Hd(e),...r});return Br(s,n)},jd=(e,t)=>{const n={};let r=1;for(const t of e)null!==t&&(n[`member.${r}`]=t,r++);return n},Ud=(e,t)=>{const n={};return null!=e.Data&&(n.Data=e.Data),null!=e.Charset&&(n.Charset=e.Charset),n},qd=(e,t)=>{const n={};return null!=e.Name&&(n.Name=e.Name),null!=e.Value&&(n.Value=e.Value),n},Fd=(e,t)=>{const n={};if(null!=e.Source&&(n.Source=e.Source),null!=e.Destination){const t=((e,t)=>{const n={};if(null!=e.ToAddresses){const t=jd(e.ToAddresses);0===e.ToAddresses?.length&&(n.ToAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`ToAddresses.${e}`]=t}))}if(null!=e.CcAddresses){const t=jd(e.CcAddresses);0===e.CcAddresses?.length&&(n.CcAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`CcAddresses.${e}`]=t}))}if(null!=e.BccAddresses){const t=jd(e.BccAddresses);0===e.BccAddresses?.length&&(n.BccAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`BccAddresses.${e}`]=t}))}return n})(e.Destination);Object.entries(t).forEach((([e,t])=>{n[`Destination.${e}`]=t}))}if(null!=e.Message){const t=((e,t)=>{const n={};if(null!=e.Subject){const t=Ud(e.Subject);Object.entries(t).forEach((([e,t])=>{n[`Subject.${e}`]=t}))}if(null!=e.Body){const t=((e,t)=>{const n={};if(null!=e.Text){const t=Ud(e.Text);Object.entries(t).forEach((([e,t])=>{n[`Text.${e}`]=t}))}if(null!=e.Html){const t=Ud(e.Html);Object.entries(t).forEach((([e,t])=>{n[`Html.${e}`]=t}))}return n})(e.Body);Object.entries(t).forEach((([e,t])=>{n[`Body.${e}`]=t}))}return n})(e.Message);Object.entries(t).forEach((([e,t])=>{n[`Message.${e}`]=t}))}if(null!=e.ReplyToAddresses){const t=jd(e.ReplyToAddresses);0===e.ReplyToAddresses?.length&&(n.ReplyToAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`ReplyToAddresses.${e}`]=t}))}if(null!=e.ReturnPath&&(n.ReturnPath=e.ReturnPath),null!=e.SourceArn&&(n.SourceArn=e.SourceArn),null!=e.ReturnPathArn&&(n.ReturnPathArn=e.ReturnPathArn),null!=e.Tags){const t=((e,t)=>{const n={};let r=1;for(const t of e){if(null===t)continue;const e=qd(t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n})(e.Tags);0===e.Tags?.length&&(n.Tags=[]),Object.entries(t).forEach((([e,t])=>{n[`Tags.${e}`]=t}))}return null!=e.ConfigurationSetName&&(n.ConfigurationSetName=e.ConfigurationSetName),n},zd=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Ld=(e,t)=>{const n={};return void 0!==e.ConfigurationSetName&&(n.ConfigurationSetName=Ar(e.ConfigurationSetName)),void 0!==e.message&&(n.message=Ar(e.message)),n},Vd=(e,t)=>{const n={};return void 0!==e.ConfigurationSetName&&(n.ConfigurationSetName=Ar(e.ConfigurationSetName)),void 0!==e.message&&(n.message=Ar(e.message)),n},Bd=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Wd=(e,t)=>{const n={};return void 0!==e.message&&(n.message=Ar(e.message)),n},Hd=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Kd=Wr(Ad),Gd={"content-type":"application/x-www-form-urlencoded"},Jd=(e,t)=>((e,t)=>mr(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>{if(e.length){const t=new As.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});t.addEntity("#xD","\r"),t.addEntity("#10","\n");const n=t.parse(e),r="#text",s=Object.keys(n)[0],o=n[s];return o[r]&&(o[s]=o[r],delete o[r]),rs(o)}return{}})),Xd=async(e,t)=>{const n=await Jd(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n},Qd=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class Yd extends gr{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(mn(t,this.serialize,this.deserialize)),this.middlewareStack.use(yn(t,Yd.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"SESClient",commandName:"SendEmailCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e,[l]:{service:"SimpleEmailService",operation:"SendEmail"}},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n=Gd;let r;return s={...Fd(e),Action:"SendEmail",Version:"2010-12-01"},r=Object.entries(s).map((([e,t])=>ns(e)+"="+ns(t))).join("&"),(async(e,t,n,r,s)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),u={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==r&&(u.hostname=r),void 0!==s&&(u.body=s),new f(u)})(t,n,"/",void 0,r);var s})(e,t)}deserialize(e,t){return(async(e,t)=>{if(e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await Xd(e.body,t)},r=Qd(e,n.body);switch(r){case"AccountSendingPausedException":case"com.amazonaws.ses#AccountSendingPausedException":throw await Nd(n,t);case"ConfigurationSetDoesNotExist":case"com.amazonaws.ses#ConfigurationSetDoesNotExistException":throw await $d(n,t);case"ConfigurationSetSendingPausedException":case"com.amazonaws.ses#ConfigurationSetSendingPausedException":throw await Dd(n,t);case"MailFromDomainNotVerifiedException":case"com.amazonaws.ses#MailFromDomainNotVerifiedException":throw await _d(n,t);case"MessageRejected":case"com.amazonaws.ses#MessageRejected":throw await Md(n,t);default:const s=n.body;return Kd({output:e,parsedBody:s.Error,errorCode:r})}})(e,t);let n={};return n=((e,t)=>{const n={};return void 0!==e.MessageId&&(n.MessageId=Ar(e.MessageId)),n})((await Jd(e.body,t)).SendEmailResult),{$metadata:Hd(e),...n}})(e,t)}}var Zd,ep=function(){function e(){this.sesClient=new Id({}),this.noLastAccessDate=new Date(0).toLocaleString()}return e.prototype.notifyUser=function(e){return t=this,n=void 0,s=function(){var t,n,r,s;return function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(o){switch(o.label){case 0:return console.debug("Notifying ".concat(JSON.stringify(e,null,1))),t=e.lastAccess.toLocaleString()===this.noLastAccessDate?"not in the last ".concat(process.env.deleteDays," days"):e.lastAccess.toLocaleDateString(),n="I: QuickSight user ".concat(e.username," in account ").concat(process.env.accountAlias," will be deleted"),r='In order to <a href="https://aws.amazon.com/quicksight/pricing/">control costs ($24/month/user)</a>,\n    your AWS QuickSight user \''.concat(e.username,"' \n    will be deleted when you have not accessed QuickSight in ").concat(process.env.deleteDays," days. \n    CloudTrail records indicate that your last access was ").concat(t,".<br /><br />\n    \n    You can keep your user by logging in and taking actions in QuickSight. \n    Alternatively, you can do nothing, and your user will be automatically deleted. \n    Never fear, you simply log back into QuickSight and enter your e-mail, and your user gets recreated. \n    No dashboards or other resources will be deleted at this time (we may clean those up in the future, with notification, of course).<br /><br />\n    \n    Account Number: ").concat(process.env.awsAccountId,"<br />\n    Account Alias: ").concat(process.env.accountAlias,"<br />\n    Assumed Role: ").concat(e.iamRole,"<br />\n    Email: ").concat(e.email,'<br /><br />\n  \n    For further assistance, contact <a href="mailto:').concat(process.env.contact,'">').concat(process.env.contact,"</a>. Thank you and have a fantastically fun-filled day 🥳.\n    "),s=new Yd({Source:"".concat(process.env.accountAlias," Cloud Account Administrator<").concat(process.env.from,">"),Destination:{ToAddresses:[e.email],CcAddresses:JSON.parse(process.env.cc)},ReplyToAddresses:[process.env.replyTo],SourceArn:process.env.sesArn,Message:{Subject:{Data:n},Body:{Html:{Data:r}}}}),[4,this.sesClient.send(s)];case 1:return o.sent(),[2]}}))},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,a)}c((s=s.apply(t,n||[])).next())}));var t,n,r,s},e}(),tp=function(e){this.arn=e.Arn,this.email=e.Email,this.role=Zd[e.Role],this.username=e.UserName,this.invalid="N/A"===this.username;var t=this.username.split("/"),n=t[0],r=t[1];this.iamRole=n,this.stsSession=r};!function(e){e.READER="READER",e.AUTHOR="AUTHOR",e.ADMIN="ADMIN"}(Zd||(Zd={}));const np="required",rp="fn",sp="argv",op="ref",ip="isSet",ap="booleanEquals",cp="error",up="endpoint",lp="tree",dp="PartitionResult",pp={[np]:!1,type:"String"},fp={[np]:!0,default:!1,type:"Boolean"},hp={[op]:"Endpoint"},mp={[rp]:ap,[sp]:[{[op]:"UseFIPS"},!0]},gp={[rp]:ap,[sp]:[{[op]:"UseDualStack"},!0]},yp={},wp={[rp]:"getAttr",[sp]:[{[op]:dp},"supportsFIPS"]},bp={[rp]:ap,[sp]:[!0,{[rp]:"getAttr",[sp]:[{[op]:dp},"supportsDualStack"]}]},vp=[mp],Sp=[gp],Ep=[{[op]:"Region"}],xp={version:"1.0",parameters:{Region:pp,UseDualStack:fp,UseFIPS:fp,Endpoint:pp},rules:[{conditions:[{[rp]:ip,[sp]:[hp]}],rules:[{conditions:vp,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:cp},{conditions:Sp,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:cp},{endpoint:{url:hp,properties:yp,headers:yp},type:up}],type:lp},{conditions:[{[rp]:ip,[sp]:Ep}],rules:[{conditions:[{[rp]:"aws.partition",[sp]:Ep,assign:dp}],rules:[{conditions:[mp,gp],rules:[{conditions:[{[rp]:ap,[sp]:[!0,wp]},bp],rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:yp,headers:yp},type:up}],type:lp},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:cp}],type:lp},{conditions:vp,rules:[{conditions:[{[rp]:ap,[sp]:[wp,!0]}],rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dnsSuffix}",properties:yp,headers:yp},type:up}],type:lp},{error:"FIPS is enabled but this partition does not support FIPS",type:cp}],type:lp},{conditions:Sp,rules:[{conditions:[bp],rules:[{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:yp,headers:yp},type:up}],type:lp},{error:"DualStack is enabled but this partition does not support DualStack",type:cp}],type:lp},{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dnsSuffix}",properties:yp,headers:yp},type:up}],type:lp}],type:lp},{error:"Invalid Configuration: Missing Region",type:cp}]},Pp=(e,t={})=>tt(xp,{endpointParams:e,logger:t.logger});class Ip extends tr{constructor(...[n]){const r=(s=(e=>{Jr(process.version);const t=Ri(e),n=()=>t().then(Kr),r=(e=>({apiVersion:"2018-04-01",base64Decoder:e?.base64Decoder??rr,base64Encoder:e?.base64Encoder??sr,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Pp,extensions:e?.extensions??[],logger:e?.logger??new Jn,serviceId:e?.serviceId??"QuickSight",urlParser:e?.urlParser??un,utf8Decoder:e?.utf8Decoder??W,utf8Encoder:e?.utf8Encoder??K}))(e);return ho(process.version),{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??ti,credentialDefaultProvider:e?.credentialDefaultProvider??cu(Sc),defaultUserAgentProvider:e?.defaultUserAgentProvider??Yo({serviceId:r.serviceId,clientVersion:"3.461.0"}),maxAttempts:e?.maxAttempts??on(Dn),region:e?.region??on(gt,yt),requestHandler:e?.requestHandler??new dr(n),retryMode:e?.retryMode??on({...Mn,default:async()=>(await n()).retryMode||Sn}),sha256:e?.sha256??Zo.bind(null,"sha256"),streamCollector:e?.streamCollector??fr,useDualstackEndpoint:e?.useDualstackEndpoint??on(ht),useFipsEndpoint:e?.useFipsEndpoint??on(mt)}})(n||{}),{...s,useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"quicksight"});var s;const o=vt(r),i=wn(o),a=_n(i),c=((n,r)=>{const s={...Di(n),...es(n),...e(n)};return r.forEach((e=>e.configure(s))),{...n,..._i(s),...ts(s),...t(s)}})(Oe(xe(a)),n?.extensions||[]);super(c),this.config=c,this.middlewareStack.use(Kn(this.config)),this.middlewareStack.use(xt(this.config)),this.middlewareStack.use(g(this.config)),this.middlewareStack.use(w(this.config)),this.middlewareStack.use(S(this.config)),this.middlewareStack.use(Ce(this.config)),this.middlewareStack.use(dt(this.config))}destroy(){super.destroy()}}class Ap extends Vr{constructor(e){super(e),Object.setPrototypeOf(this,Ap.prototype)}}class kp extends Ap{constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,kp.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}var Tp,Cp,Op;!function(e){e.visit=(e,t)=>void 0!==e.AmazonElasticsearchParameters?t.AmazonElasticsearchParameters(e.AmazonElasticsearchParameters):void 0!==e.AthenaParameters?t.AthenaParameters(e.AthenaParameters):void 0!==e.AuroraParameters?t.AuroraParameters(e.AuroraParameters):void 0!==e.AuroraPostgreSqlParameters?t.AuroraPostgreSqlParameters(e.AuroraPostgreSqlParameters):void 0!==e.AwsIotAnalyticsParameters?t.AwsIotAnalyticsParameters(e.AwsIotAnalyticsParameters):void 0!==e.JiraParameters?t.JiraParameters(e.JiraParameters):void 0!==e.MariaDbParameters?t.MariaDbParameters(e.MariaDbParameters):void 0!==e.MySqlParameters?t.MySqlParameters(e.MySqlParameters):void 0!==e.OracleParameters?t.OracleParameters(e.OracleParameters):void 0!==e.PostgreSqlParameters?t.PostgreSqlParameters(e.PostgreSqlParameters):void 0!==e.PrestoParameters?t.PrestoParameters(e.PrestoParameters):void 0!==e.RdsParameters?t.RdsParameters(e.RdsParameters):void 0!==e.RedshiftParameters?t.RedshiftParameters(e.RedshiftParameters):void 0!==e.S3Parameters?t.S3Parameters(e.S3Parameters):void 0!==e.ServiceNowParameters?t.ServiceNowParameters(e.ServiceNowParameters):void 0!==e.SnowflakeParameters?t.SnowflakeParameters(e.SnowflakeParameters):void 0!==e.SparkParameters?t.SparkParameters(e.SparkParameters):void 0!==e.SqlServerParameters?t.SqlServerParameters(e.SqlServerParameters):void 0!==e.TeradataParameters?t.TeradataParameters(e.TeradataParameters):void 0!==e.TwitterParameters?t.TwitterParameters(e.TwitterParameters):void 0!==e.AmazonOpenSearchParameters?t.AmazonOpenSearchParameters(e.AmazonOpenSearchParameters):void 0!==e.ExasolParameters?t.ExasolParameters(e.ExasolParameters):void 0!==e.DatabricksParameters?t.DatabricksParameters(e.DatabricksParameters):void 0!==e.StarburstParameters?t.StarburstParameters(e.StarburstParameters):void 0!==e.TrinoParameters?t.TrinoParameters(e.TrinoParameters):void 0!==e.BigQueryParameters?t.BigQueryParameters(e.BigQueryParameters):t._(e.$unknown[0],e.$unknown[1])}(Tp||(Tp={}));class Rp extends Ap{constructor(e){super({name:"InternalFailureException",$fault:"server",...e}),this.name="InternalFailureException",this.$fault="server",Object.setPrototypeOf(this,Rp.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Np extends Ap{constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,Np.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class $p extends Ap{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,$p.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class Dp extends Ap{constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),this.name="ThrottlingException",this.$fault="client",Object.setPrototypeOf(this,Dp.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class _p extends Ap{constructor(e){super({name:"ResourceUnavailableException",$fault:"server",...e}),this.name="ResourceUnavailableException",this.$fault="server",Object.setPrototypeOf(this,_p.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class Mp extends Ap{constructor(e){super({name:"PreconditionNotMetException",$fault:"client",...e}),this.name="PreconditionNotMetException",this.$fault="client",Object.setPrototypeOf(this,Mp.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}(Cp||(Cp={})).visit=(e,t)=>void 0!==e.ProjectOperation?t.ProjectOperation(e.ProjectOperation):void 0!==e.FilterOperation?t.FilterOperation(e.FilterOperation):void 0!==e.CreateColumnsOperation?t.CreateColumnsOperation(e.CreateColumnsOperation):void 0!==e.RenameColumnOperation?t.RenameColumnOperation(e.RenameColumnOperation):void 0!==e.CastColumnTypeOperation?t.CastColumnTypeOperation(e.CastColumnTypeOperation):void 0!==e.TagColumnOperation?t.TagColumnOperation(e.TagColumnOperation):void 0!==e.UntagColumnOperation?t.UntagColumnOperation(e.UntagColumnOperation):void 0!==e.OverrideDatasetParameterOperation?t.OverrideDatasetParameterOperation(e.OverrideDatasetParameterOperation):t._(e.$unknown[0],e.$unknown[1]),function(e){e.visit=(e,t)=>void 0!==e.RelationalTable?t.RelationalTable(e.RelationalTable):void 0!==e.CustomSql?t.CustomSql(e.CustomSql):void 0!==e.S3Source?t.S3Source(e.S3Source):t._(e.$unknown[0],e.$unknown[1])}(Op||(Op={}));class jp extends Ap{constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),this.name="InvalidNextTokenException",this.$fault="client",Object.setPrototypeOf(this,jp.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}const Up=Wr(Ap),qp=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{Message:Ar,RequestId:Ar});Object.assign(n,s);const o=new kp({$metadata:Kp(e),...n});return Br(o,e.body)},Fp=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{Message:Ar,RequestId:Ar});Object.assign(n,s);const o=new Rp({$metadata:Kp(e),...n});return Br(o,e.body)},zp=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{Message:Ar,RequestId:Ar});Object.assign(n,s);const o=new jp({$metadata:Kp(e),...n});return Br(o,e.body)},Lp=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{Message:Ar,RequestId:Ar});Object.assign(n,s);const o=new Np({$metadata:Kp(e),...n});return Br(o,e.body)},Vp=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{Message:Ar,RequestId:Ar});Object.assign(n,s);const o=new Mp({$metadata:Kp(e),...n});return Br(o,e.body)},Bp=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{Message:Ar,RequestId:Ar,ResourceType:Ar});Object.assign(n,s);const o=new $p({$metadata:Kp(e),...n});return Br(o,e.body)},Wp=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{Message:Ar,RequestId:Ar,ResourceType:Ar});Object.assign(n,s);const o=new _p({$metadata:Kp(e),...n});return Br(o,e.body)},Hp=async(e,t)=>{const n=os({}),r=e.body,s=is(r,{Message:Ar,RequestId:Ar});Object.assign(n,s);const o=new Dp({$metadata:Kp(e),...n});return Br(o,e.body)},Kp=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Gp=(e,t)=>((e,t)=>mr(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),Jp=async(e,t)=>{const n=await Gp(e,t);return n.message=n.message??n.Message,n},Xp=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=(s=e.headers,"x-amzn-errortype",Object.keys(s).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var s;return void 0!==r?n(e.headers[r]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class Qp extends gr{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(mn(t,this.serialize,this.deserialize)),this.middlewareStack.use(yn(t,Qp.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"QuickSightClient",commandName:"ListUsersCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e,[l]:{service:"QuickSight_20180401",operation:"ListUsers"}},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint();let i=`${o?.endsWith("/")?o.slice(0,-1):o||""}/accounts/{AwsAccountId}/namespaces/{Namespace}/users`;i=ds(i,e,"AwsAccountId",(()=>e.AwsAccountId),"{AwsAccountId}",!1),i=ds(i,e,"Namespace",(()=>e.Namespace),"{Namespace}",!1);const a=os({"next-token":[,e.NextToken],"max-results":[()=>void 0!==e.MaxResults,()=>e.MaxResults.toString()]});return new f({protocol:r,hostname:n,port:s,method:"GET",headers:{},path:i,query:a,body:void 0})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await Jp(e.body,t)},r=Xp(e,n.body);switch(r){case"AccessDeniedException":case"com.amazonaws.quicksight#AccessDeniedException":throw await qp(n,t);case"InternalFailureException":case"com.amazonaws.quicksight#InternalFailureException":throw await Fp(n,t);case"InvalidNextTokenException":case"com.amazonaws.quicksight#InvalidNextTokenException":throw await zp(n,t);case"InvalidParameterValueException":case"com.amazonaws.quicksight#InvalidParameterValueException":throw await Lp(n,t);case"PreconditionNotMetException":case"com.amazonaws.quicksight#PreconditionNotMetException":throw await Vp(n,t);case"ResourceNotFoundException":case"com.amazonaws.quicksight#ResourceNotFoundException":throw await Bp(n,t);case"ResourceUnavailableException":case"com.amazonaws.quicksight#ResourceUnavailableException":throw await Wp(n,t);case"ThrottlingException":case"com.amazonaws.quicksight#ThrottlingException":throw await Hp(n,t);default:const s=n.body;return Up({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=os({$metadata:Kp(e)}),r=Pr(Ir(await Gp(e.body,t)),"body"),s=is(r,{NextToken:Ar,RequestId:Ar,UserList:fs});return Object.assign(n,s),os(n,{Status:[,e.statusCode]}),n})(e,t)}}class Yp extends gr{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(mn(t,this.serialize,this.deserialize)),this.middlewareStack.use(yn(t,Yp.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"QuickSightClient",commandName:"DeleteUserCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e,[l]:{service:"QuickSight_20180401",operation:"DeleteUser"}},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint();let i=`${o?.endsWith("/")?o.slice(0,-1):o||""}/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}`;return i=ds(i,e,"UserName",(()=>e.UserName),"{UserName}",!1),i=ds(i,e,"AwsAccountId",(()=>e.AwsAccountId),"{AwsAccountId}",!1),i=ds(i,e,"Namespace",(()=>e.Namespace),"{Namespace}",!1),new f({protocol:r,hostname:n,port:s,method:"DELETE",headers:{},path:i,body:void 0})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await Jp(e.body,t)},r=Xp(e,n.body);switch(r){case"AccessDeniedException":case"com.amazonaws.quicksight#AccessDeniedException":throw await qp(n,t);case"InternalFailureException":case"com.amazonaws.quicksight#InternalFailureException":throw await Fp(n,t);case"InvalidParameterValueException":case"com.amazonaws.quicksight#InvalidParameterValueException":throw await Lp(n,t);case"PreconditionNotMetException":case"com.amazonaws.quicksight#PreconditionNotMetException":throw await Vp(n,t);case"ResourceNotFoundException":case"com.amazonaws.quicksight#ResourceNotFoundException":throw await Bp(n,t);case"ResourceUnavailableException":case"com.amazonaws.quicksight#ResourceUnavailableException":throw await Wp(n,t);case"ThrottlingException":case"com.amazonaws.quicksight#ThrottlingException":throw await Hp(n,t);default:const s=n.body;return Up({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=os({$metadata:Kp(e)}),r=Pr(Ir(await Gp(e.body,t)),"body"),s=is(r,{RequestId:Ar});return Object.assign(n,s),os(n,{Status:[,e.statusCode]}),n})(e,t)}}var Zp=function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},ef=function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},tf=function(){function e(){this.awsAccountId=process.env.awsAccountId,this.quickSightClient=new Ip({})}return e.prototype.retrieveUsers=function(){return Zp(this,void 0,void 0,(function(){var t,n,r,s;return ef(this,(function(o){switch(o.label){case 0:t=[],n="",o.label=1;case 1:return r=new Qp({AwsAccountId:this.awsAccountId,Namespace:e.namespace,NextToken:n}),[4,this.quickSightClient.send(r)];case 2:s=o.sent(),n=s.NextToken,s.UserList.forEach((function(e){return t.push(new tp(e))})),o.label=3;case 3:if(n)return[3,1];o.label=4;case 4:return[2,t]}}))}))},e.prototype.deleteUser=function(t){return Zp(this,void 0,void 0,(function(){var n;return ef(this,(function(r){switch(r.label){case 0:return console.debug("Deleting ".concat(JSON.stringify(t,null,1))),n=new Yp({AwsAccountId:this.awsAccountId,Namespace:e.namespace,UserName:t.username}),[4,this.quickSightClient.send(n)];case 1:return r.sent(),[2]}}))}))},e.namespace="default",e}();const nf=function(){return e=void 0,t=void 0,r=function(){var e,t,n,r,s,o,i,a,c,u,l,d,p,f,h,m,g,y,w,b;return function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(v){switch(v.label){case 0:return e=process.env,t=e.deleteDays,n=e.notifyDays,r="true"===process.env.enableNotification,s=new Date,o=new Date,s.setDate(s.getDate()-parseInt(t)),o.setDate(o.getDate()-parseInt(n)),console.info("Notifying users with last access date on: ".concat(o.toLocaleDateString()," (").concat(n," days ago).")),console.info("Deleting users with last access date on or before: ".concat(s.toLocaleDateString()," (").concat(t," days ago).")),console.info("Notification enabled? ".concat(r,".")),i=new tf,a=new sl,c=new ep,u=new td,[4,i.retrieveUsers()];case 1:return l=v.sent(),[4,a.retrieveQuickSightUserEvents(s)];case 2:for(d=v.sent(),p=0,f=l;p<f.length;p++)(b=f[p]).lastAccess=a.getLastAccessDate(b,d);console.debug("QuickSight Users:\n".concat(JSON.stringify(l,null,2))),u.queueMetric({MetricName:"PriorQuickSightUsersCount",Value:l.length}),h=0,m=0,g=0,y=0,w=l,v.label=3;case 3:return y<w.length?(b=w[y]).invalid?(console.warn("Invalid user: ".concat(JSON.stringify(b))),h++,[3,8]):[3,4]:[3,9];case 4:return b.lastAccess<s?(m++,[4,i.deleteUser(b)]):[3,6];case 5:return v.sent(),[3,8];case 6:return r&&b.role!==Zd.READER&&b.lastAccess.toLocaleDateString()===o.toLocaleDateString()?(g++,[4,c.notifyUser(b)]):[3,8];case 7:v.sent(),v.label=8;case 8:return y++,[3,3];case 9:return u.queueMetric({MetricName:"InvalidUsersCount",Value:h}),u.queueMetric({MetricName:"UsersDeletedCount",Value:m}),u.queueMetric({MetricName:"NotificationsSentCount",Value:g}),u.queueMetric({MetricName:"RemainingQuickSightUsersCount",Value:l.length-m}),[4,u.emitQueuedMetrics()];case 10:return v.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}));var e,t,n,r}})(),module.exports=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,