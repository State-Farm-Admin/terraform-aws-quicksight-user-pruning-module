// This file is committed because Terraform needs it to be there. Source code is in src folder
/*! For license information please see pruneQuickSightUsers.js.LICENSE.txt */
(()=>{var e,t={5456:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AwsCrc32=void 0;var s=n(1478),r=n(5388),o=n(3465),i=function(){function e(){this.crc32=new o.Crc32}return e.prototype.update=function(e){(0,r.isEmptyData)(e)||this.crc32.update((0,r.convertToBuffer)(e))},e.prototype.digest=function(){return s.__awaiter(this,void 0,void 0,(function(){return s.__generator(this,(function(e){return[2,(0,r.numToUint8)(this.crc32.digest())]}))}))},e.prototype.reset=function(){this.crc32=new o.Crc32},e}();t.AwsCrc32=i},3465:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AwsCrc32=t.Crc32=t.crc32=void 0;var s=n(1478),r=n(5388);t.crc32=function(e){return(new o).update(e).digest()};var o=function(){function e(){this.checksum=4294967295}return e.prototype.update=function(e){var t,n;try{for(var r=s.__values(e),o=r.next();!o.done;o=r.next()){var a=o.value;this.checksum=this.checksum>>>8^i[255&(this.checksum^a)]}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}return this},e.prototype.digest=function(){return(4294967295^this.checksum)>>>0},e}();t.Crc32=o;var i=(0,r.uint32ArrayFrom)([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117]),a=n(5456);Object.defineProperty(t,"AwsCrc32",{enumerable:!0,get:function(){return a.AwsCrc32}})},1478:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>o,__asyncDelegator:()=>x,__asyncGenerator:()=>E,__asyncValues:()=>b,__await:()=>w,__awaiter:()=>l,__classPrivateFieldGet:()=>I,__classPrivateFieldSet:()=>O,__createBinding:()=>p,__decorate:()=>a,__exportStar:()=>h,__extends:()=>r,__generator:()=>d,__importDefault:()=>P,__importStar:()=>S,__makeTemplateObject:()=>v,__metadata:()=>u,__param:()=>c,__read:()=>m,__rest:()=>i,__spread:()=>g,__spreadArrays:()=>y,__values:()=>f});var s=function(e,t){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},s(e,t)};function r(e,t){function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,s=arguments.length;n<s;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},o.apply(this,arguments)};function i(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}function a(e,t,n,s){var r,o=arguments.length,i=o<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,n):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(i=(o<3?r(i):o>3?r(t,n,i):r(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}function c(e,t){return function(n,s){t(n,s,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))}function d(e,t){var n,s,r,o,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,s&&(r=2&o[0]?s.return:o[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,o[1])).done)return r;switch(s=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,s=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){i.label=o[1];break}if(6===o[0]&&i.label<r[1]){i.label=r[1],r=o;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(o);break}r[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],s=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function p(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}function h(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||(t[n]=e[n])}function f(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],s=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&s>=e.length&&(e=void 0),{value:e&&e[s++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var s,r,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(s=o.next()).done;)i.push(s.value)}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return i}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var s=Array(e),r=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,a=o.length;i<a;i++,r++)s[r]=o[i];return s}function w(e){return this instanceof w?(this.v=e,this):new w(e)}function E(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var s,r=n.apply(e,t||[]),o=[];return s={},i("next"),i("throw"),i("return"),s[Symbol.asyncIterator]=function(){return this},s;function i(e){r[e]&&(s[e]=function(t){return new Promise((function(n,s){o.push([e,t,n,s])>1||a(e,t)}))})}function a(e,t){try{(n=r[e](t)).value instanceof w?Promise.resolve(n.value.v).then(c,u):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function c(e){a("next",e)}function u(e){a("throw",e)}function l(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}function x(e){var t,n;return t={},s("next"),s("throw",(function(e){throw e})),s("return"),t[Symbol.iterator]=function(){return this},t;function s(s,r){t[s]=e[s]?function(t){return(n=!n)?{value:w(e[s](t)),done:"return"===s}:r?r(t):t}:r}}function b(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=f(e),t={},s("next"),s("throw"),s("return"),t[Symbol.asyncIterator]=function(){return this},t);function s(n){t[n]=e[n]&&function(t){return new Promise((function(s,r){!function(e,t,n,s){Promise.resolve(s).then((function(t){e({value:t,done:n})}),t)}(s,r,(t=e[n](t)).done,t.value)}))}}}function v(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function S(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function P(e){return e&&e.__esModule?e:{default:e}}function I(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function O(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},1024:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToBuffer=void 0;var s=n(4006),r="undefined"!=typeof Buffer&&Buffer.from?function(e){return Buffer.from(e,"utf8")}:s.fromUtf8;t.convertToBuffer=function(e){return e instanceof Uint8Array?e:"string"==typeof e?r(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}},5388:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=t.numToUint8=t.isEmptyData=t.convertToBuffer=void 0;var s=n(1024);Object.defineProperty(t,"convertToBuffer",{enumerable:!0,get:function(){return s.convertToBuffer}});var r=n(165);Object.defineProperty(t,"isEmptyData",{enumerable:!0,get:function(){return r.isEmptyData}});var o=n(5413);Object.defineProperty(t,"numToUint8",{enumerable:!0,get:function(){return o.numToUint8}});var i=n(2110);Object.defineProperty(t,"uint32ArrayFrom",{enumerable:!0,get:function(){return i.uint32ArrayFrom}})},165:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmptyData=void 0,t.isEmptyData=function(e){return"string"==typeof e?0===e.length:0===e.byteLength}},5413:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numToUint8=void 0,t.numToUint8=function(e){return new Uint8Array([(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e])}},2110:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=void 0,t.uint32ArrayFrom=function(e){if(!Uint32Array.from){for(var t=new Uint32Array(e.length),n=0;n<e.length;)t[n]=e[n],n+=1;return t}return Uint32Array.from(e)}},2458:(e,t,n)=>{"use strict";n.d(t,{I:()=>r});let s=!1;const r=e=>{e&&!s&&parseInt(e.substring(1,e.indexOf(".")))<16&&(s=!0,process.emitWarning("NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will\nno longer support Node.js 14.x on May 1, 2024.\n\nTo continue receiving updates to AWS services, bug fixes, and security\nupdates please upgrade to an active Node.js LTS version.\n\nMore information can be found at: https://a.co/dzr2AJd"))}},1228:(e,t,n)=>{"use strict";n.d(t,{f:()=>c});var s=n(5479);const r=e=>new Date(Date.now()+e),o=e=>s.cS.isInstance(e)?e.headers?.date??e.headers?.Date:void 0,i=(e,t)=>{const n=Date.parse(e);return((e,t)=>Math.abs(r(t).getTime()-e)>=3e5)(n,t)?n-Date.now():t},a=(e,t)=>{if(!t)throw new Error(`Property \`${e}\` is not resolved for AWS SDK SigV4Auth`);return t};class c{async sign(e,t,n){if(!s.Kd.isInstance(e))throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");const{config:o,signer:i,signingRegion:c,signingName:u}=await(async e=>{const t=a("context",e.context),n=a("config",e.config),s=t.endpointV2?.properties?.authSchemes?.[0],r=a("signer",n.signer),o=await r(s),i=e?.signingRegion,c=e?.signingName;return{config:n,signer:o,signingRegion:i,signingName:c}})(n);return await i.sign(e,{signingDate:r(o.systemClockOffset),signingRegion:c,signingService:u})}errorHandler(e){return t=>{const n=t.ServerTime??o(t.$response);if(n){const t=a("config",e.config);t.systemClockOffset=i(n,t.systemClockOffset)}throw t}}successHandler(e,t){const n=o(e);if(n){const e=a("config",t.config);e.systemClockOffset=i(n,e.systemClockOffset)}}}},2211:(e,t,n)=>{"use strict";n.d(t,{h:()=>X});var s=n(4966);n(3465);const r={},o={};for(let e=0;e<256;e++){let t=e.toString(16).toLowerCase();1===t.length&&(t=`0${t}`),r[e]=t,o[t]=e}function i(e){let t="";for(let n=0;n<e.byteLength;n++)t+=r[e[n]];return t}class a{constructor(e){if(this.bytes=e,8!==e.byteLength)throw new Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(`${e} is too large (or, if negative, too small) to represent as an Int64`);const t=new Uint8Array(8);for(let n=7,s=Math.abs(Math.round(e));n>-1&&s>0;n--,s/=256)t[n]=s;return e<0&&c(t),new a(t)}valueOf(){const e=this.bytes.slice(0),t=128&e[0];return t&&c(e),parseInt(i(e),16)*(t?-1:1)}toString(){return String(this.valueOf())}}function c(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,0===e[t]);t--);}class u{constructor(e,t){this.toUtf8=e,this.fromUtf8=t}format(e){const t=[];for(const n of Object.keys(e)){const s=this.fromUtf8(n);t.push(Uint8Array.from([s.byteLength]),s,this.formatHeaderValue(e[n]))}const n=new Uint8Array(t.reduce(((e,t)=>e+t.byteLength),0));let s=0;for(const e of t)n.set(e,s),s+=e.byteLength;return n}formatHeaderValue(e){switch(e.type){case"boolean":return Uint8Array.from([e.value?0:1]);case"byte":return Uint8Array.from([2,e.value]);case"short":const t=new DataView(new ArrayBuffer(3));return t.setUint8(0,3),t.setInt16(1,e.value,!1),new Uint8Array(t.buffer);case"integer":const n=new DataView(new ArrayBuffer(5));return n.setUint8(0,4),n.setInt32(1,e.value,!1),new Uint8Array(n.buffer);case"long":const s=new Uint8Array(9);return s[0]=5,s.set(e.value.bytes,1),s;case"binary":const r=new DataView(new ArrayBuffer(3+e.value.byteLength));r.setUint8(0,6),r.setUint16(1,e.value.byteLength,!1);const i=new Uint8Array(r.buffer);return i.set(e.value,3),i;case"string":const c=this.fromUtf8(e.value),u=new DataView(new ArrayBuffer(3+c.byteLength));u.setUint8(0,7),u.setUint16(1,c.byteLength,!1);const l=new Uint8Array(u.buffer);return l.set(c,3),l;case"timestamp":const d=new Uint8Array(9);return d[0]=8,d.set(a.fromNumber(e.value.valueOf()).bytes,1),d;case"uuid":if(!x.test(e.value))throw new Error(`Invalid UUID received: ${e.value}`);const p=new Uint8Array(17);return p[0]=9,p.set(function(e){if(e.length%2!=0)throw new Error("Hex encoded strings must have an even number length");const t=new Uint8Array(e.length/2);for(let n=0;n<e.length;n+=2){const s=e.slice(n,n+2).toLowerCase();if(!(s in o))throw new Error(`Cannot decode unrecognized sequence ${s} as hexadecimal`);t[n/2]=o[s]}return t}(e.value.replace(/\-/g,"")),1),p}}parse(e){const t={};let n=0;for(;n<e.byteLength;){const s=e.getUint8(n++),r=this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+n,s));switch(n+=s,e.getUint8(n++)){case 0:t[r]={type:d,value:!0};break;case 1:t[r]={type:d,value:!1};break;case 2:t[r]={type:p,value:e.getInt8(n++)};break;case 3:t[r]={type:h,value:e.getInt16(n,!1)},n+=2;break;case 4:t[r]={type:f,value:e.getInt32(n,!1)},n+=4;break;case 5:t[r]={type:m,value:new a(new Uint8Array(e.buffer,e.byteOffset+n,8))},n+=8;break;case 6:const s=e.getUint16(n,!1);n+=2,t[r]={type:g,value:new Uint8Array(e.buffer,e.byteOffset+n,s)},n+=s;break;case 7:const o=e.getUint16(n,!1);n+=2,t[r]={type:y,value:this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+n,o))},n+=o;break;case 8:t[r]={type:w,value:new Date(new a(new Uint8Array(e.buffer,e.byteOffset+n,8)).valueOf())},n+=8;break;case 9:const c=new Uint8Array(e.buffer,e.byteOffset+n,16);n+=16,t[r]={type:E,value:`${i(c.subarray(0,4))}-${i(c.subarray(4,6))}-${i(c.subarray(6,8))}-${i(c.subarray(8,10))}-${i(c.subarray(10))}`};break;default:throw new Error("Unrecognized header type tag")}}return t}}var l;!function(e){e[e.boolTrue=0]="boolTrue",e[e.boolFalse=1]="boolFalse",e[e.byte=2]="byte",e[e.short=3]="short",e[e.integer=4]="integer",e[e.long=5]="long",e[e.byteArray=6]="byteArray",e[e.string=7]="string",e[e.timestamp=8]="timestamp",e[e.uuid=9]="uuid"}(l||(l={}));const d="boolean",p="byte",h="short",f="integer",m="long",g="binary",y="string",w="timestamp",E="uuid",x=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;Symbol.asyncIterator,Symbol.asyncIterator,Symbol.asyncIterator,Symbol.asyncIterator;var b=n(7135),v=n(3197);const S="X-Amz-Date",P="X-Amz-Signature",I="X-Amz-Security-Token",O="authorization",$=S.toLowerCase(),A=[O,$,"date"],N=P.toLowerCase(),M="x-amz-content-sha256",T=I.toLowerCase(),C={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},R=/^proxy-/,D=/^sec-/,k="AWS4-HMAC-SHA256",j="AWS4-HMAC-SHA256-PAYLOAD",F="aws4_request",q={},z=[],_=(e,t,n)=>`${e}/${t}/${n}/${F}`,U=(e,t,n)=>{const s=new e(t);return s.update((0,v.Fo)(n)),s.digest()},L=({headers:e},t,n)=>{const s={};for(const r of Object.keys(e).sort()){if(null==e[r])continue;const o=r.toLowerCase();(o in C||t?.has(o)||R.test(o)||D.test(o))&&(!n||n&&!n.has(o))||(s[o]=e[r].trim().replace(/\s+/g," "))}return s};var K=n(2531),V=n(3695);const B=async({headers:e,body:t},n)=>{for(const t of Object.keys(e))if(t.toLowerCase()===M)return e[t];if(null==t)return"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";if("string"==typeof t||ArrayBuffer.isView(t)||(0,V.m)(t)){const e=new n;return e.update((0,v.Fo)(t)),i(await e.digest())}return"UNSIGNED-PAYLOAD"},H=({headers:e,query:t,...n})=>({...n,headers:{...e},query:t?W(t):void 0}),W=e=>Object.keys(e).reduce(((t,n)=>{const s=e[n];return{...t,[n]:Array.isArray(s)?[...s]:s}}),{}),G=e=>{e="function"==typeof e.clone?e.clone():H(e);for(const t of Object.keys(e.headers))A.indexOf(t.toLowerCase())>-1&&delete e.headers[t];return e};class Q{constructor({applyChecksum:e,credentials:t,region:n,service:s,sha256:r,uriEscapePath:o=!0}){this.headerMarshaller=new u(v.Pq,v.ar),this.service=s,this.sha256=r,this.uriEscapePath=o,this.applyChecksum="boolean"!=typeof e||e,this.regionProvider=(0,b.t)(n),this.credentialProvider=(0,b.t)(t)}async presign(e,t={}){const{signingDate:n=new Date,expiresIn:s=3600,unsignableHeaders:r,unhoistableHeaders:o,signableHeaders:i,signingRegion:a,signingService:c}=t,u=await this.credentialProvider();this.validateResolvedCredentials(u);const l=a??await this.regionProvider(),{longDate:d,shortDate:p}=Z(n);if(s>604800)return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");const h=_(p,l,c??this.service),f=((e,t={})=>{const{headers:n,query:s={}}="function"==typeof e.clone?e.clone():H(e);for(const e of Object.keys(n)){const r=e.toLowerCase();"x-amz-"!==r.slice(0,6)||t.unhoistableHeaders?.has(r)||(s[e]=n[e],delete n[e])}return{...e,headers:n,query:s}})(G(e),{unhoistableHeaders:o});u.sessionToken&&(f.query[I]=u.sessionToken),f.query["X-Amz-Algorithm"]=k,f.query["X-Amz-Credential"]=`${u.accessKeyId}/${h}`,f.query[S]=d,f.query["X-Amz-Expires"]=s.toString(10);const m=L(f,r,i);return f.query["X-Amz-SignedHeaders"]=J(m),f.query[P]=await this.getSignature(d,h,this.getSigningKey(u,l,p,c),this.createCanonicalRequest(f,m,await B(e,this.sha256))),f}async sign(e,t){return"string"==typeof e?this.signString(e,t):e.headers&&e.payload?this.signEvent(e,t):e.message?this.signMessage(e,t):this.signRequest(e,t)}async signEvent({headers:e,payload:t},{signingDate:n=new Date,priorSignature:s,signingRegion:r,signingService:o}){const a=r??await this.regionProvider(),{shortDate:c,longDate:u}=Z(n),l=_(c,a,o??this.service),d=await B({headers:{},body:t},this.sha256),p=new this.sha256;p.update(e);const h=i(await p.digest()),f=[j,u,l,s,h,d].join("\n");return this.signString(f,{signingDate:n,signingRegion:a,signingService:o})}async signMessage(e,{signingDate:t=new Date,signingRegion:n,signingService:s}){return this.signEvent({headers:this.headerMarshaller.format(e.message.headers),payload:e.message.body},{signingDate:t,signingRegion:n,signingService:s,priorSignature:e.priorSignature}).then((t=>({message:e.message,signature:t})))}async signString(e,{signingDate:t=new Date,signingRegion:n,signingService:s}={}){const r=await this.credentialProvider();this.validateResolvedCredentials(r);const o=n??await this.regionProvider(),{shortDate:a}=Z(t),c=new this.sha256(await this.getSigningKey(r,o,a,s));return c.update((0,v.Fo)(e)),i(await c.digest())}async signRequest(e,{signingDate:t=new Date,signableHeaders:n,unsignableHeaders:s,signingRegion:r,signingService:o}={}){const i=await this.credentialProvider();this.validateResolvedCredentials(i);const a=r??await this.regionProvider(),c=G(e),{longDate:u,shortDate:l}=Z(t),d=_(l,a,o??this.service);c.headers[$]=u,i.sessionToken&&(c.headers[T]=i.sessionToken);const p=await B(c,this.sha256);!((e,t)=>{e=e.toLowerCase();for(const n of Object.keys(t))if(e===n.toLowerCase())return!0;return!1})(M,c.headers)&&this.applyChecksum&&(c.headers[M]=p);const h=L(c,s,n),f=await this.getSignature(u,d,this.getSigningKey(i,a,l,o),this.createCanonicalRequest(c,h,p));return c.headers[O]=`${k} Credential=${i.accessKeyId}/${d}, SignedHeaders=${J(h)}, Signature=${f}`,c}createCanonicalRequest(e,t,n){const s=Object.keys(t).sort();return`${e.method}\n${this.getCanonicalPath(e)}\n${(({query:e={}})=>{const t=[],n={};for(const s of Object.keys(e).sort()){if(s.toLowerCase()===N)continue;t.push(s);const r=e[s];"string"==typeof r?n[s]=`${(0,K.o)(s)}=${(0,K.o)(r)}`:Array.isArray(r)&&(n[s]=r.slice(0).reduce(((e,t)=>e.concat([`${(0,K.o)(s)}=${(0,K.o)(t)}`])),[]).sort().join("&"))}return t.map((e=>n[e])).filter((e=>e)).join("&")})(e)}\n${s.map((e=>`${e}:${t[e]}`)).join("\n")}\n\n${s.join(";")}\n${n}`}async createStringToSign(e,t,n){const s=new this.sha256;s.update((0,v.Fo)(n));const r=await s.digest();return`${k}\n${e}\n${t}\n${i(r)}`}getCanonicalPath({path:e}){if(this.uriEscapePath){const t=[];for(const n of e.split("/"))0!==n?.length&&"."!==n&&(".."===n?t.pop():t.push(n));const n=`${e?.startsWith("/")?"/":""}${t.join("/")}${t.length>0&&e?.endsWith("/")?"/":""}`;return encodeURIComponent(n).replace(/%2F/g,"/")}return e}async getSignature(e,t,n,s){const r=await this.createStringToSign(e,t,s),o=new this.sha256(await n);return o.update((0,v.Fo)(r)),i(await o.digest())}getSigningKey(e,t,n,s){return(async(e,t,n,s,r)=>{const o=`${n}:${s}:${r}:${i(await U(e,t.secretAccessKey,t.accessKeyId))}:${t.sessionToken}`;if(o in q)return q[o];for(z.push(o);z.length>50;)delete q[z.shift()];let a=`AWS4${t.secretAccessKey}`;for(const t of[n,s,r,F])a=await U(e,a,t);return q[o]=a})(this.sha256,e,n,t,s||this.service)}validateResolvedCredentials(e){if("object"!=typeof e||"string"!=typeof e.accessKeyId||"string"!=typeof e.secretAccessKey)throw new Error("Resolved credential object is not valid")}}const Z=e=>{const t=(n=e,(e=>"number"==typeof e?new Date(1e3*e):"string"==typeof e?Number(e)?new Date(1e3*Number(e)):new Date(e):e)(n).toISOString().replace(/\.\d{3}Z$/,"Z")).replace(/[\-:]/g,"");var n;return{longDate:t,shortDate:t.slice(0,8)}},J=e=>Object.keys(e).sort().join(";"),X=e=>{let t;e.credentials&&(t=(0,s.K4)(e.credentials,s.OC,s.e)),t||(t=e.credentialDefaultProvider?(0,s.te)(e.credentialDefaultProvider(Object.assign({},e,{parentClientConfig:e}))):async()=>{throw new Error("`credentials` is missing")});const{signingEscapePath:n=!0,systemClockOffset:r=e.systemClockOffset||0,sha256:o}=e;let i;return i=e.signer?(0,s.te)(e.signer):e.regionInfoProvider?()=>(0,s.te)(e.region)().then((async t=>[await e.regionInfoProvider(t,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},t])).then((([s,r])=>{const{signingRegion:i,signingService:a}=s;e.signingRegion=e.signingRegion||i||r,e.signingName=e.signingName||a||e.serviceId;const c={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:o,uriEscapePath:n};return new(e.signerConstructor||Q)(c)})):async r=>{const i=(r=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await(0,s.te)(e.region)(),properties:{}},r)).signingRegion,a=r.signingName;e.signingRegion=e.signingRegion||i,e.signingName=e.signingName||a||e.serviceId;const c={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:o,uriEscapePath:n};return new(e.signerConstructor||Q)(c)},{...e,systemClockOffset:r,signingEscapePath:n,credentials:t,signer:i}}},8257:(e,t,n)=>{"use strict";n.r(t),n.d(t,{credentialsTreatedAsExpired:()=>a,credentialsWillNeedRefresh:()=>i,defaultProvider:()=>o});var s=n(8112),r=n(2792);const o=(e={})=>(0,s.Bj)((0,s.cy)(...e.profile||process.env[r.Ch]?[]:[async()=>{e.logger?.debug("@aws-sdk/credential-provider-node","defaultProvider::fromEnv");const{fromEnv:t}=await n.e(904).then(n.bind(n,904));return t(e)()}],(async()=>{e.logger?.debug("@aws-sdk/credential-provider-node","defaultProvider::fromSSO");const{ssoStartUrl:t,ssoAccountId:r,ssoRegion:o,ssoRoleName:i,ssoSession:a}=e;if(!(t||r||o||i||a))throw new s.C1("Skipping SSO provider in default chain (inputs do not include SSO fields).");const{fromSSO:c}=await n.e(791).then(n.bind(n,9791));return c(e)()}),(async()=>{e.logger?.debug("@aws-sdk/credential-provider-node","defaultProvider::fromIni");const{fromIni:t}=await n.e(789).then(n.bind(n,2789));return t(e)()}),(async()=>{e.logger?.debug("@aws-sdk/credential-provider-node","defaultProvider::fromProcess");const{fromProcess:t}=await n.e(109).then(n.bind(n,5109));return t(e)()}),(async()=>{e.logger?.debug("@aws-sdk/credential-provider-node","defaultProvider::fromTokenFile");const{fromTokenFile:t}=await n.e(819).then(n.bind(n,7819));return t(e)()}),(async()=>(e.logger?.debug("@aws-sdk/credential-provider-node","defaultProvider::remoteProvider"),(await(async e=>{const{ENV_CMDS_FULL_URI:t,ENV_CMDS_RELATIVE_URI:r,fromContainerMetadata:o,fromInstanceMetadata:i}=await n.e(897).then(n.bind(n,7897));if(process.env[r]||process.env[t]){e.logger?.debug("@aws-sdk/credential-provider-node","remoteProvider::fromHttp/fromContainerMetadata");const{fromHttp:t}=await n.e(610).then(n.bind(n,3610));return(0,s.cy)(t(e),o(e))}return process.env.AWS_EC2_METADATA_DISABLED?async()=>{throw new s.C1("EC2 Instance Metadata Service access disabled")}:(e.logger?.debug("@aws-sdk/credential-provider-node","remoteProvider::fromInstanceMetadata"),i(e))})(e))())),(async()=>{throw new s.C1("Could not load credentials from any providers",!1)})),a,i),i=e=>void 0!==e?.expiration,a=e=>void 0!==e?.expiration&&e.expiration.getTime()-Date.now()<3e5},1095:(e,t,n)=>{"use strict";n.d(t,{OV:()=>r,TC:()=>i});var s=n(5479);function r(e){return e}const o={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},i=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{if(!s.Kd.isInstance(n.request))return t(n);const{request:r}=n,{handlerProtocol:o=""}=e.requestHandler.metadata||{};if(o.indexOf("h2")>=0&&!r.headers[":authority"])delete r.headers.host,r.headers[":authority"]=r.hostname+(r.port?":"+r.port:"");else if(!r.headers.host){let e=r.hostname;null!=r.port&&(e+=`:${r.port}`),r.headers.host=e}return t(n)})(e),o)}})},9359:(e,t,n)=>{"use strict";n.d(t,{Y7:()=>r});const s={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},r=e=>({applyToStack:e=>{e.add(((e,t)=>async n=>{try{const s=await e(n),{clientName:r,commandName:o,logger:i,dynamoDbDocumentClientOptions:a={}}=t,{overrideInputFilterSensitiveLog:c,overrideOutputFilterSensitiveLog:u}=a,l=c??t.inputFilterSensitiveLog,d=u??t.outputFilterSensitiveLog,{$metadata:p,...h}=s.output;return i?.info?.({clientName:r,commandName:o,input:l(n.input),output:d(h),metadata:p}),s}catch(e){const{clientName:s,commandName:r,logger:o,dynamoDbDocumentClientOptions:i={}}=t,{overrideInputFilterSensitiveLog:a}=i,c=a??t.inputFilterSensitiveLog;throw o?.error?.({clientName:s,commandName:r,input:c(n.input),error:e,metadata:e.$metadata}),e}}),s)}})},8377:(e,t,n)=>{"use strict";n.d(t,{n4:()=>i});var s=n(5479);const r="X-Amzn-Trace-Id",o={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"},i=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{const{request:o}=n;if(!s.Kd.isInstance(o)||"node"!==e.runtime||o.headers.hasOwnProperty(r))return t(n);const i=process.env.AWS_LAMBDA_FUNCTION_NAME,a=process.env._X_AMZN_TRACE_ID,c=e=>"string"==typeof e&&e.length>0;return c(i)&&c(a)&&(o.headers[r]=a),t({...n,request:o})})(e),o)}})},1731:(e,t,n)=>{"use strict";function s(e){return{...e,customUserAgent:"string"==typeof e.customUserAgent?[[e.customUserAgent]]:e.customUserAgent}}n.d(t,{sM:()=>m,Dc:()=>s});var r=n(3875);const o=(e,t=!1)=>{if(t){for(const t of e.split("."))if(!o(t))return!1;return!0}return!(!(0,r.X8)(e)||e.length<3||e.length>63||e!==e.toLowerCase()||(0,r.oX)(e))};let i=JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-east-1","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af|il)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"ca-west-1":{"description":"Canada West (Calgary)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"il-central-1":{"description":"Israel (Tel Aviv)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","implicitGlobalRegion":"cn-northwest-1","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-gov-west-1","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","implicitGlobalRegion":"us-iso-east-1","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","implicitGlobalRegion":"us-isob-east-1","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","implicitGlobalRegion":"eu-isoe-west-1","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","implicitGlobalRegion":"us-isof-south-1","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}');const a={isVirtualHostableS3Bucket:o,parseArn:e=>{const t=e.split(":");if(t.length<6)return null;const[n,s,r,o,i,...a]=t;return"arn"!==n||""===s||""===r||""===a[0]?null:{partition:s,service:r,region:o,accountId:i,resourceId:a[0].includes("/")?a[0].split("/"):a}},partition:e=>{const{partitions:t}=i;for(const n of t){const{regions:t,outputs:s}=n;for(const[n,r]of Object.entries(t))if(n===e)return{...s,...r}}for(const n of t){const{regionRegex:t,outputs:s}=n;if(new RegExp(t).test(e))return{...s}}const n=t.find((e=>"aws"===e.id));if(!n)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...n.outputs}}};r.mw.aws=a;var c=n(5479);const u="user-agent",l="x-amz-user-agent",d=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,p=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,h=e=>{const t=e[0].split("/").map((e=>e.replace(d,"-"))).join("/"),n=e[1]?.replace(p,"-"),s=t.indexOf("/"),r=t.substring(0,s);let o=t.substring(s+1);return"api"===r&&(o=o.toLowerCase()),[r,o,n].filter((e=>e&&e.length>0)).reduce(((e,t,n)=>{switch(n){case 0:return t;case 1:return`${e}/${t}`;default:return`${e}#${t}`}}),"")},f={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},m=e=>({applyToStack:t=>{var n;t.add((n=e,(e,t)=>async s=>{const{request:r}=s;if(!c.Kd.isInstance(r))return e(s);const{headers:o}=r,i=t?.userAgent?.map(h)||[],a=(await n.defaultUserAgentProvider()).map(h),d=n?.customUserAgent?.map(h)||[],p=[].concat([...a,...i,...d]).join(" "),f=[...a.filter((e=>e.startsWith("aws-sdk-"))),...d].join(" ");return"browser"!==n.runtime?(f&&(o[l]=o[l]?`${o[u]} ${f}`:f),o[u]=p):o[l]=p,e({...s,request:r})}),f)}})},6928:(e,t,n)=>{"use strict";n.d(t,{Rq:()=>s,$3:()=>r});const s=e=>{let t=async()=>{if(void 0===e.region)throw new Error("Region is missing from runtimeConfig");const t=e.region;return"string"==typeof t?t:t()};return{setRegion(e){t=e},region:()=>t}},r=e=>({region:e.region()})},3058:(e,t,n)=>{"use strict";n.d(t,{mJ:()=>i});var s=n(1881),r=n(857);const o=require("process"),i=({serviceId:e,clientVersion:t})=>{const n=[["aws-sdk-js",t],["ua","2.0"],[`os/${(0,r.platform)()}`,(0,r.release)()],["lang/js"],["md/nodejs",`${o.versions.node}`]];e&&n.push([`api/${e}`,t]),o.env.AWS_EXECUTION_ENV&&n.push([`exec-env/${o.env.AWS_EXECUTION_ENV}`]);const i=(0,s.Z)({environmentVariableSelector:e=>e.AWS_SDK_UA_APP_ID,configFileSelector:e=>e["sdk-ua-app-id"],default:void 0})();let a;return async()=>{if(!a){const e=await i;a=e?[...n,[`app/${e}`]]:[...n]}return a}}},4006:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fromUtf8:()=>s,toUtf8:()=>r});const s=e=>"function"==typeof TextEncoder?function(e){return(new TextEncoder).encode(e)}(e):(e=>{const t=[];for(let n=0,s=e.length;n<s;n++){const s=e.charCodeAt(n);if(s<128)t.push(s);else if(s<2048)t.push(s>>6|192,63&s|128);else if(n+1<e.length&&55296==(64512&s)&&56320==(64512&e.charCodeAt(n+1))){const r=65536+((1023&s)<<10)+(1023&e.charCodeAt(++n));t.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}else t.push(s>>12|224,s>>6&63|128,63&s|128)}return Uint8Array.from(t)})(e),r=e=>"function"==typeof TextDecoder?function(e){return new TextDecoder("utf-8").decode(e)}(e):(e=>{let t="";for(let n=0,s=e.length;n<s;n++){const s=e[n];if(s<128)t+=String.fromCharCode(s);else if(192<=s&&s<224){const r=e[++n];t+=String.fromCharCode((31&s)<<6|63&r)}else if(240<=s&&s<365){const r="%"+[s,e[++n],e[++n],e[++n]].map((e=>e.toString(16))).join("%");t+=decodeURIComponent(r)}else t+=String.fromCharCode((15&s)<<12|(63&e[++n])<<6|63&e[++n])}return t})(e)},7122:(e,t,n)=>{"use strict";n.d(t,{zH:()=>a,GG:()=>i,e$:()=>r,Ko:()=>o,TD:()=>l});var s=n(8230);const r={environmentVariableSelector:e=>(0,s.Qm)(e,"AWS_USE_DUALSTACK_ENDPOINT",s.cV.ENV),configFileSelector:e=>(0,s.Qm)(e,"use_dualstack_endpoint",s.cV.CONFIG),default:!1},o={environmentVariableSelector:e=>(0,s.Qm)(e,"AWS_USE_FIPS_ENDPOINT",s.cV.ENV),configFileSelector:e=>(0,s.Qm)(e,"use_fips_endpoint",s.cV.CONFIG),default:!1};n(7135);const i={environmentVariableSelector:e=>e.AWS_REGION,configFileSelector:e=>e.region,default:()=>{throw new Error("Region is missing")}},a={preferredFile:"credentials"},c=e=>"string"==typeof e&&(e.startsWith("fips-")||e.endsWith("-fips")),u=e=>c(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e,l=e=>{const{region:t,useFipsEndpoint:n}=e;if(!t)throw new Error("Region is missing");return{...e,region:async()=>{if("string"==typeof t)return u(t);const e=await t();return u(e)},useFipsEndpoint:async()=>{const e="string"==typeof t?t:await t();return!!c(e)||("function"!=typeof n?Promise.resolve(!!n):n())}}}},4966:(e,t,n)=>{"use strict";n.d(t,{h$:()=>d,mR:()=>p,e:()=>f,wB:()=>o,lW:()=>l,OC:()=>h,K4:()=>m,te:()=>g,lI:()=>w}),n(7523);var s=n(7135);const r={step:"serialize",tags:["HTTP_AUTH_SCHEME"],name:"httpAuthSchemeMiddleware",override:!0,relation:"before",toMiddleware:n(9389).ko.name},o=(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:n})=>({applyToStack:o=>{o.addRelativeTo(((e,t)=>(n,r)=>async o=>{const i=e.httpAuthSchemeProvider(await t.httpAuthSchemeParametersProvider(e,r,o.input)),a=function(e){const t=new Map;for(const n of e)t.set(n.schemeId,n);return t}(e.httpAuthSchemes),c=(0,s.u)(r),u=[];for(const n of i){const s=a.get(n.schemeId);if(!s){u.push(`HttpAuthScheme \`${n.schemeId}\` was not enabled for this service.`);continue}const o=s.identityProvider(await t.identityProviderConfigProvider(e));if(!o){u.push(`HttpAuthScheme \`${n.schemeId}\` did not have an IdentityProvider configured.`);continue}const{identityProperties:i={},signingProperties:l={}}=n.propertiesExtractor?.(e,r)||{};n.identityProperties=Object.assign(n.identityProperties||{},i),n.signingProperties=Object.assign(n.signingProperties||{},l),c.selectedHttpAuthScheme={httpAuthOption:n,identity:await o(n.identityProperties),signer:s.signer};break}if(!c.selectedHttpAuthScheme)throw new Error(u.join("\n"));return n(o)})(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:n}),r)}});n(1208).Ou.name;var i=n(5479);const a=e=>e=>{throw e},c=(e,t)=>{},u={step:"finalizeRequest",tags:["HTTP_SIGNING"],name:"httpSigningMiddleware",aliases:["apiKeyMiddleware","tokenMiddleware","awsAuthMiddleware"],override:!0,relation:"after",toMiddleware:n(1010).j7.name},l=e=>({applyToStack:e=>{e.addRelativeTo(((e,t)=>async n=>{if(!i.Kd.isInstance(n.request))return e(n);const r=(0,s.u)(t).selectedHttpAuthScheme;if(!r)throw new Error("No HttpAuthScheme was selected: unable to sign request");const{httpAuthOption:{signingProperties:o={}},identity:u,signer:l}=r,d=await e({...n,request:await l.sign(n.request,u,o)}).catch((l.errorHandler||a)(o));return(l.successHandler||c)(d.response,o),d}),u)}});class d{constructor(e){this.authSchemes=new Map;for(const[t,n]of Object.entries(e))void 0!==n&&this.authSchemes.set(t,n)}getIdentityProvider(e){return this.authSchemes.get(e)}}class p{async sign(e,t,n){return e}}const h=(3e5,e=>f(e)&&e.expiration.getTime()-Date.now()<3e5);const f=e=>void 0!==e.expiration,m=(e,t,n)=>{if(void 0===e)return;const s="function"!=typeof e?async()=>Promise.resolve(e):e;let r,o,i,a=!1;const c=async e=>{o||(o=s(e));try{r=await o,i=!0,a=!1}finally{o=void 0}return r};return void 0===t?async e=>(i&&!e?.forceRefresh||(r=await c(e)),r):async e=>(i&&!e?.forceRefresh||(r=await c(e)),a?r:n(r)?t(r)?(await c(e),r):r:(a=!0,r))},g=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t};var y=n(8156);function w(e,t){return new E(e,t)}class E{constructor(e,t){this.input=e,this.context=t,this.query={},this.method="",this.headers={},this.path="",this.body=null,this.hostname="",this.resolvePathStack=[]}async build(){const{hostname:e,protocol:t="https",port:n,path:s}=await this.context.endpoint();this.path=s;for(const e of this.resolvePathStack)e(this.path);return new i.Kd({protocol:t,hostname:this.hostname||e,port:n,method:this.method,path:this.path,query:this.query,body:this.body,headers:this.headers})}hn(e){return this.hostname=e,this}bp(e){return this.resolvePathStack.push((t=>{this.path=`${t?.endsWith("/")?t.slice(0,-1):t||""}`+e})),this}p(e,t,n,s){return this.resolvePathStack.push((r=>{this.path=(0,y.un)(r,this.input,e,t,n,s)})),this}h(e){return this.headers=e,this}q(e){return this.query=e,this}b(e){return this.body=e,this}m(e){return this.method=e,this}}},1701:(e,t,n)=>{"use strict";n.d(t,{V:()=>a});var s=n(9290),r=n(3197),o=n(181),i=n(6982);class a{constructor(e,t){this.algorithmIdentifier=e,this.secret=t,this.reset()}update(e,t){this.hash.update((0,r.Fo)(c(e,t)))}digest(){return Promise.resolve(this.hash.digest())}reset(){this.hash=this.secret?(0,i.createHmac)(this.algorithmIdentifier,c(this.secret)):(0,i.createHash)(this.algorithmIdentifier)}}function c(e,t){return o.Buffer.isBuffer(e)?e:"string"==typeof e?(0,s.s)(e,t):ArrayBuffer.isView(e)?(0,s.Q)(e.buffer,e.byteOffset,e.byteLength):(0,s.Q)(e)}},3695:(e,t,n)=>{"use strict";n.d(t,{m:()=>s});const s=e=>"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||"[object ArrayBuffer]"===Object.prototype.toString.call(e)},649:(e,t,n)=>{"use strict";n.d(t,{vK:()=>i});var s=n(5479);const r="content-length",o={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},i=e=>({applyToStack:t=>{var n;t.add((n=e.bodyLengthChecker,e=>async t=>{const o=t.request;if(s.Kd.isInstance(o)){const{body:e,headers:t}=o;if(e&&-1===Object.keys(t).map((e=>e.toLowerCase())).indexOf(r))try{const t=n(e);o.headers={...o.headers,[r]:String(t)}}catch(e){}}return e({...t,request:o})}),o)}})},9389:(e,t,n)=>{"use strict";n.d(t,{ko:()=>g,rD:()=>y,Co:()=>w});const s=/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/,r=/(\d+\.){3}\d+/,o=/\.\./,i=(e,t,n)=>{const s=async()=>{const s=n[e]??n[t];return"function"==typeof s?s():s};return"credentialScope"===e||"CredentialScope"===t?async()=>{const e="function"==typeof n.credentials?await n.credentials():n.credentials;return e?.credentialScope??e?.CredentialScope}:"endpoint"===e||"endpoint"===t?async()=>{const e=await s();if(e&&"object"==typeof e){if("url"in e)return e.url.href;if("hostname"in e){const{protocol:t,hostname:n,port:s,path:r}=e;return`${t}//${n}${s?":"+s:""}${r}`}}return e}:s};var a=n(1881),c=n(2792);const u="AWS_ENDPOINT_URL",l="endpoint_url";var d=n(2641);const p=e=>"object"==typeof e?"url"in e?(0,d.D)(e.url):e:(0,d.D)(e),h=async(e,t,n)=>{const a={},c=t?.getEndpointParameterInstructions?.()||{};for(const[t,s]of Object.entries(c))switch(s.type){case"staticContextParams":a[t]=s.value;break;case"contextParams":a[t]=e[s.name];break;case"clientContextParams":case"builtInParams":a[t]=await i(s.name,t,n)();break;default:throw new Error("Unrecognized endpoint parameter instruction: "+JSON.stringify(s))}return 0===Object.keys(c).length&&Object.assign(a,n),"s3"===String(n.serviceId).toLowerCase()&&await(async e=>{const t=e?.Bucket||"";if("string"==typeof e.Bucket&&(e.Bucket=t.replace(/#/g,encodeURIComponent("#")).replace(/\?/g,encodeURIComponent("?"))),(e=>{const[t,n,s,r,o,i]=e.split(":"),a="arn"===t&&e.split(":").length>=6,c=5===[t,n,s,o,i].filter(Boolean).length;if(a&&!c)throw new Error(`Invalid ARN: ${e} was an invalid ARN.`);return!!("arn"===t&&n&&s&&o&&i)})(t)){if(!0===e.ForcePathStyle)throw new Error("Path-style addressing cannot be used with ARN buckets")}else n=t,(!s.test(n)||r.test(n)||o.test(n)||-1!==t.indexOf(".")&&!String(e.Endpoint).startsWith("http:")||t.toLowerCase()!==t||t.length<3)&&(e.ForcePathStyle=!0);var n;return e.DisableMultiRegionAccessPoints&&(e.disableMultiRegionAccessPoints=!0,e.DisableMRAP=!0),e})(a),a};var f=n(7135);const m=({config:e,instructions:t})=>(n,s)=>async r=>{const o=await(async(e,t,n,s)=>{if(!n.endpoint){const e=await(async e=>(0,a.Z)((e=>({environmentVariableSelector:t=>{const n=e.split(" ").map((e=>e.toUpperCase()));return t[[u,...n].join("_")]||t[u]||void 0},configFileSelector:(t,n)=>{if(n&&t.services){const s=n[["services",t.services].join(c.QD)];if(s){const t=s[[e.split(" ").map((e=>e.toLowerCase())).join("_"),l].join(c.QD)];if(t)return t}}const s=t[l];if(s)return s},default:void 0}))(e))())(n.serviceId||"");e&&(n.endpoint=()=>Promise.resolve(p(e)))}const r=await h(e,t,n);if("function"!=typeof n.endpointProvider)throw new Error("config.endpointProvider is not set.");return n.endpointProvider(r,s)})(r.input,{getEndpointParameterInstructions:()=>t},{...e},s);s.endpointV2=o,s.authSchemes=o.properties?.authSchemes;const i=s.authSchemes?.[0];if(i){s.signing_region=i.signingRegion,s.signing_service=i.signingName;const e=(0,f.u)(s),t=e?.selectedHttpAuthScheme?.httpAuthOption;t&&(t.signingProperties=Object.assign(t.signingProperties||{},{signing_region:i.signingRegion,signingRegion:i.signingRegion,signing_service:i.signingName,signingName:i.signingName,signingRegionSet:i.signingRegionSet},i.properties))}return n({...r})},g={step:"serialize",tags:["ENDPOINT_PARAMETERS","ENDPOINT_V2","ENDPOINT"],name:"endpointV2Middleware",override:!0,relation:"before",toMiddleware:n(1208).Ou.name},y=(e,t)=>({applyToStack:n=>{n.addRelativeTo(m({config:e,instructions:t}),g)}}),w=e=>{const t=e.tls??!0,{endpoint:n}=e,s=null!=n?async()=>p(await(0,f.t)(n)()):void 0,r=!!n;return{...e,endpoint:s,tls:t,isCustomEndpoint:r,useDualstackEndpoint:(0,f.t)(e.useDualstackEndpoint??!1),useFipsEndpoint:(0,f.t)(e.useFipsEndpoint??!1)}}},1010:(e,t,n)=>{"use strict";n.d(t,{qs:()=>w,kN:()=>x,ey:()=>$,$z:()=>E,j7:()=>O});var s=n(3323),r=n(5479),o=n(4542),i=n(6982),a=n.n(i);const c=new Uint8Array(256);let u=c.length;function l(){return u>c.length-16&&(a().randomFillSync(c),u=0),c.slice(u,u+=16)}const d=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,p=[];for(let e=0;e<256;++e)p.push((e+256).toString(16).substr(1));const h=function(e,t=0){const n=(p[e[t+0]]+p[e[t+1]]+p[e[t+2]]+p[e[t+3]]+"-"+p[e[t+4]]+p[e[t+5]]+"-"+p[e[t+6]]+p[e[t+7]]+"-"+p[e[t+8]]+p[e[t+9]]+"-"+p[e[t+10]]+p[e[t+11]]+p[e[t+12]]+p[e[t+13]]+p[e[t+14]]+p[e[t+15]]).toLowerCase();if(!function(e){return"string"==typeof e&&d.test(e)}(n))throw TypeError("Stringified UUID is invalid");return n},f=function(e,t,n){const s=(e=e||{}).random||(e.rng||l)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=s[e];return t}return h(s)};var m=n(7135);const g="AWS_MAX_ATTEMPTS",y="max_attempts",w={environmentVariableSelector:e=>{const t=e[g];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Environment variable ${g} mast be a number, got "${t}"`);return n},configFileSelector:e=>{const t=e[y];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Shared config file entry ${y} mast be a number, got "${t}"`);return n},default:s.Gz},E=e=>{const{retryStrategy:t}=e,n=(0,m.t)(e.maxAttempts??s.Gz);return{...e,maxAttempts:n,retryStrategy:async()=>t||(await(0,m.t)(e.retryMode)()===s.cm.ADAPTIVE?new s.Y(n):new s.ru(n))}},x={environmentVariableSelector:e=>e.AWS_RETRY_MODE,configFileSelector:e=>e.retry_mode,default:s.L0};var b=n(8156),v=n(2203);const S=e=>e?.body instanceof v.Readable||"undefined"!=typeof ReadableStream&&e?.body instanceof ReadableStream,P=e=>{const t={errorType:I(e)},n=A(e.$response);return n&&(t.retryAfterHint=n),t},I=e=>(0,o.Qb)(e)?"THROTTLING":(0,o.bV)(e)?"TRANSIENT":(0,o.GQ)(e)?"SERVER_ERROR":"CLIENT_ERROR",O={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},$=e=>({applyToStack:t=>{t.add((e=>(t,n)=>async o=>{let i=await e.retryStrategy();const a=await e.maxAttempts();if(!(e=>void 0!==e.acquireInitialRetryToken&&void 0!==e.refreshRetryTokenForRetry&&void 0!==e.recordSuccess)(i))return i?.mode&&(n.userAgent=[...n.userAgent||[],["cfg/retry-mode",i.mode]]),i.retry(t,o);{let e=await i.acquireInitialRetryToken(n.partition_id),u=new Error,l=0,d=0;const{request:p}=o,h=r.Kd.isInstance(p);for(h&&(p.headers[s.l5]=f());;)try{h&&(p.headers[s.ok]=`attempt=${l+1}; max=${a}`);const{response:n,output:r}=await t(o);return i.recordSuccess(e),r.$metadata.attempts=l+1,r.$metadata.totalRetryDelay=d,{response:n,output:r}}catch(t){const s=P(t);if(u=(c=t)instanceof Error?c:c instanceof Object?Object.assign(new Error,c):"string"==typeof c?new Error(c):new Error(`AWS SDK error wrapper for ${c}`),h&&S(p))throw(n.logger instanceof b.N4?console:n.logger)?.warn("An error was encountered in a non-retryable streaming request."),u;try{e=await i.refreshRetryTokenForRetry(e,s)}catch(e){throw u.$metadata||(u.$metadata={}),u.$metadata.attempts=l+1,u.$metadata.totalRetryDelay=d,u}l=e.getRetryCount();const r=e.getRetryDelay();d+=r,await new Promise((e=>setTimeout(e,r)))}}var c})(e),O)}}),A=e=>{if(!r.cS.isInstance(e))return;const t=Object.keys(e.headers).find((e=>"retry-after"===e.toLowerCase()));if(!t)return;const n=e.headers[t],s=Number(n);return Number.isNaN(s)?new Date(n):new Date(1e3*s)}},1208:(e,t,n)=>{"use strict";n.d(t,{TM:()=>a,Ou:()=>i});const s=(e,t)=>(n,s)=>async s=>{const{response:r}=await n(s);try{return{response:r,output:await t(r,e)}}catch(e){if(Object.defineProperty(e,"$response",{value:r}),!("$metadata"in e)){const t="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";e.message+="\n  "+t}throw e}},r=(e,t)=>(n,s)=>async r=>{const o=s.endpointV2?.url&&e.urlParser?async()=>e.urlParser(s.endpointV2.url):e.endpoint;if(!o)throw new Error("No valid endpoint provider available.");const i=await t(r.input,{...e,endpoint:o});return n({...r,request:i})},o={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},i={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function a(e,t,n){return{applyToStack:a=>{a.add(s(e,n),o),a.add(r(e,t),i)}}}},1881:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var s=n(8112),r=n(2792);const o=({environmentVariableSelector:e,configFileSelector:t,default:n},o={})=>{return(0,s.Bj)((0,s.cy)((i=e,async()=>{try{const e=i(process.env);if(void 0===e)throw new Error;return e}catch(e){throw new s.C1(e.message||`Cannot load config from environment variables with getter: ${i}`)}}),((e,{preferredFile:t="config",...n}={})=>async()=>{const o=(0,r.Bz)(n),{configFile:i,credentialsFile:a}=await(0,r.p6)(n),c=a[o]||{},u=i[o]||{},l="config"===t?{...c,...u}:{...u,...c};try{const n=e(l,"config"===t?i:a);if(void 0===n)throw new Error;return n}catch(t){throw new s.C1(t.message||`Cannot load config for profile ${o} in SDK configuration files with getter: ${e}`)}})(t,o),(e=>"function"==typeof e?async()=>await e():(0,s.VR)(e))(n)));var i}},4029:(e,t,n)=>{"use strict";n.d(t,{$c:()=>l,kv:()=>p});var s=n(5479),r=n(2531),o=n(8611);const i=require("https"),a=["ECONNRESET","EPIPE","ETIMEDOUT"],c=e=>{const t={};for(const n of Object.keys(e)){const s=e[n];t[n]=Array.isArray(s)?s.join(","):s}return t};var u=n(2203);class l{static create(e){return"function"==typeof e?.handle?e:new l(e)}constructor(e){this.metadata={handlerProtocol:"http/1.1"},this.configProvider=new Promise(((t,n)=>{"function"==typeof e?e().then((e=>{t(this.resolveDefaultConfig(e))})).catch(n):t(this.resolveDefaultConfig(e))}))}resolveDefaultConfig(e){const{requestTimeout:t,connectionTimeout:n,socketTimeout:s,httpAgent:r,httpsAgent:a}=e||{};return{connectionTimeout:n,requestTimeout:t??s,httpAgent:r||new o.Agent({keepAlive:!0,maxSockets:50}),httpsAgent:a||new i.Agent({keepAlive:!0,maxSockets:50})}}destroy(){this.config?.httpAgent?.destroy(),this.config?.httpsAgent?.destroy()}async handle(e,{abortSignal:t}={}){return this.config||(this.config=await this.configProvider),new Promise(((n,l)=>{let d;const p=async e=>{await d,l(e)};if(!this.config)throw new Error("Node HTTP request handler config is not resolved");if(t?.aborted){const e=new Error("Request aborted");return e.name="AbortError",void p(e)}const h="https:"===e.protocol,f=function(e){const t=[];for(let n of Object.keys(e).sort()){const s=e[n];if(n=(0,r.o)(n),Array.isArray(s))for(let e=0,o=s.length;e<o;e++)t.push(`${n}=${(0,r.o)(s[e])}`);else{let e=n;(s||"string"==typeof s)&&(e+=`=${(0,r.o)(s)}`),t.push(e)}}return t.join("&")}(e.query||{});let m;null==e.username&&null==e.password||(m=`${e.username??""}:${e.password??""}`);let g=e.path;f&&(g+=`?${f}`),e.fragment&&(g+=`#${e.fragment}`);const y={headers:e.headers,host:e.hostname,method:e.method,path:g,port:e.port,agent:h?this.config.httpsAgent:this.config.httpAgent,auth:m},w=(h?i.request:o.request)(y,(e=>{(async e=>{await d,n(e)})({response:new s.cS({statusCode:e.statusCode||-1,reason:e.statusMessage,headers:c(e.headers),body:e})})}));w.on("error",(e=>{a.includes(e.code)?p(Object.assign(e,{name:"TimeoutError"})):p(e)})),((e,t,n=0)=>{if(!n)return;const s=setTimeout((()=>{e.destroy(),t(Object.assign(new Error(`Socket timed out without establishing a connection within ${n} ms`),{name:"TimeoutError"}))}),n);e.on("socket",(e=>{e.connecting?e.on("connect",(()=>{clearTimeout(s)})):clearTimeout(s)}))})(w,p,this.config.connectionTimeout),((e,t,n=0)=>{e.setTimeout(n,(()=>{e.destroy(),t(Object.assign(new Error(`Connection timed out after ${n} ms`),{name:"TimeoutError"}))}))})(w,p,this.config.requestTimeout),t&&(t.onabort=()=>{w.abort();const e=new Error("Request aborted");e.name="AbortError",p(e)});const E=y.agent;"object"==typeof E&&"keepAlive"in E&&((e,{keepAlive:t,keepAliveMsecs:n})=>{!0===t&&e.on("socket",(e=>{e.setKeepAlive(t,n||0)}))})(w,{keepAlive:E.keepAlive,keepAliveMsecs:E.keepAliveMsecs}),d=async function(e,t,n=1e3){const s=t.headers??{},r=s.Expect||s.expect;let o=-1,i=!1;"100-continue"===r&&await Promise.race([new Promise((e=>{o=Number(setTimeout(e,Math.max(1e3,n)))})),new Promise((t=>{e.on("continue",(()=>{clearTimeout(o),t()})),e.on("error",(()=>{i=!0,clearTimeout(o),t()}))}))]),i||function(e,t){t instanceof u.Readable?t.pipe(e):t?e.end(Buffer.from(t)):e.end()}(e,t.body)}(w,e,this.config.requestTimeout).catch(l)}))}updateHttpClientConfig(e,t){this.config=void 0,this.configProvider=this.configProvider.then((n=>({...n,[e]:t})))}httpHandlerConfigs(){return this.config??{}}}require("http2"),Symbol.iterator;class d extends u.Writable{constructor(){super(...arguments),this.bufferedBytes=[]}_write(e,t,n){this.bufferedBytes.push(e),n()}}const p=e=>new Promise(((t,n)=>{const s=new d;e.pipe(s),e.on("error",(e=>{s.end(),n(e)})),s.on("error",n),s.on("finish",(function(){const e=new Uint8Array(Buffer.concat(this.bufferedBytes));t(e)}))}))},8112:(e,t,n)=>{"use strict";n.d(t,{C1:()=>r,mZ:()=>s,Jh:()=>o,cy:()=>i,VR:()=>a,Bj:()=>c});class s extends Error{constructor(e,t=!0){super(e),this.tryNextLink=t,this.name="ProviderError",Object.setPrototypeOf(this,s.prototype)}static from(e,t=!0){return Object.assign(new this(e.message,t),e)}}class r extends s{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="CredentialsProviderError",Object.setPrototypeOf(this,r.prototype)}}class o extends s{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="TokenProviderError",Object.setPrototypeOf(this,o.prototype)}}const i=(...e)=>async()=>{if(0===e.length)throw new s("No providers in chain");let t;for(const n of e)try{return await n()}catch(e){if(t=e,e?.tryNextLink)continue;throw e}throw t},a=e=>()=>Promise.resolve(e),c=(e,t,n)=>{let s,r,o,i=!1;const a=async()=>{r||(r=e());try{s=await r,o=!0,i=!1}finally{r=void 0}return s};return void 0===t?async e=>(o&&!e?.forceRefresh||(s=await a()),s):async e=>(o&&!e?.forceRefresh||(s=await a()),i?s:n&&!n(s)?(i=!0,s):t(s)?(await a(),s):s)}},5479:(e,t,n)=>{"use strict";n.d(t,{Kd:()=>o,cS:()=>i,eS:()=>s,jt:()=>r});const s=e=>{let t=e.httpHandler;return{setHttpHandler(e){t=e},httpHandler:()=>t,updateHttpClientConfig(e,n){t.updateHttpClientConfig(e,n)},httpHandlerConfigs:()=>t.httpHandlerConfigs()}},r=e=>({httpHandler:e.httpHandler()});n(7523);class o{constructor(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.slice(-1)?`${e.protocol}:`:e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?`/${e.path}`:e.path:"/",this.username=e.username,this.password=e.password,this.fragment=e.fragment}static isInstance(e){if(!e)return!1;const t=e;return"method"in t&&"protocol"in t&&"hostname"in t&&"path"in t&&"object"==typeof t.query&&"object"==typeof t.headers}clone(){const e=new o({...this,headers:{...this.headers}});var t;return e.query&&(e.query=(t=e.query,Object.keys(t).reduce(((e,n)=>{const s=t[n];return{...e,[n]:Array.isArray(s)?[...s]:s}}),{}))),e}}class i{constructor(e){this.statusCode=e.statusCode,this.reason=e.reason,this.headers=e.headers||{},this.body=e.body}static isInstance(e){if(!e)return!1;const t=e;return"number"==typeof t.statusCode&&"object"==typeof t.headers}}},4542:(e,t,n)=>{"use strict";n.d(t,{h5:()=>u,S0:()=>c,GQ:()=>p,Qb:()=>l,bV:()=>d});const s=["AuthFailure","InvalidSignatureException","RequestExpired","RequestInTheFuture","RequestTimeTooSkewed","SignatureDoesNotMatch"],r=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],o=["TimeoutError","RequestTimeout","RequestTimeoutException"],i=[500,502,503,504],a=["ECONNRESET","ECONNREFUSED","EPIPE","ETIMEDOUT"],c=e=>void 0!==e.$retryable,u=e=>s.includes(e.name),l=e=>429===e.$metadata?.httpStatusCode||r.includes(e.name)||1==e.$retryable?.throttling,d=e=>o.includes(e.name)||a.includes(e?.code||"")||i.includes(e.$metadata?.httpStatusCode||0),p=e=>{if(void 0!==e.$metadata?.httpStatusCode){const t=e.$metadata.httpStatusCode;return 500<=t&&t<=599&&!d(e)}return!1}},2792:(e,t,n)=>{"use strict";n.d(t,{QD:()=>I,Ch:()=>a,Bz:()=>c,C9:()=>l,vf:()=>h,p6:()=>O,qw:()=>N,YU:()=>M});var s=n(857);const r=require("path"),o={},i=()=>{const{HOME:e,USERPROFILE:t,HOMEPATH:n,HOMEDRIVE:i=`C:${r.sep}`}=process.env;if(e)return e;if(t)return t;if(n)return`${i}${n}`;const a=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return o[a]||(o[a]=(0,s.homedir)()),o[a]},a="AWS_PROFILE",c=e=>e.profile||process.env[a]||"default";var u=n(6982);const l=e=>{const t=(0,u.createHash)("sha1").update(e).digest("hex");return(0,r.join)(i(),".aws","sso","cache",`${t}.json`)};var d=n(9896);const{readFile:p}=d.promises,h=async e=>{const t=l(e),n=await p(t,"utf8");return JSON.parse(n)};var f=n(7523);const m=e=>Object.entries(e).filter((([e])=>{const t=e.indexOf(I);return-1!==t&&Object.values(f.Ip).includes(e.substring(0,t))})).reduce(((e,[t,n])=>{const s=t.indexOf(I);return e[t.substring(0,s)===f.Ip.PROFILE?t.substring(s+1):t]=n,e}),{...e.default&&{default:e.default}}),g=()=>process.env.AWS_CONFIG_FILE||(0,r.join)(i(),".aws","config"),y=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,r.join)(i(),".aws","credentials"),w=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,E=["__proto__","profile __proto__"],x=e=>{const t={};let n,s;for(const r of e.split(/\r?\n/)){const e=r.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){n=void 0,s=void 0;const t=e.substring(1,e.length-1),r=w.exec(t);if(r){const[,e,,t]=r;Object.values(f.Ip).includes(e)&&(n=[e,t].join(I))}else n=t;if(E.includes(t))throw new Error(`Found invalid profile name "${t}"`)}else if(n){const o=e.indexOf("=");if(![0,-1].includes(o)){const[i,a]=[e.substring(0,o).trim(),e.substring(o+1).trim()];if(""===a)s=i;else{s&&r.trimStart()===r&&(s=void 0),t[n]=t[n]||{};const e=s?[s,i].join(I):i;t[n][e]=a}}}}return t},{readFile:b}=d.promises,v={},S=(e,t)=>(v[e]&&!t?.ignoreCache||(v[e]=b(e,"utf8")),v[e]),P=()=>({}),I=".",O=async(e={})=>{const{filepath:t=y(),configFilepath:n=g()}=e,s=await Promise.all([S(n,{ignoreCache:e.ignoreCache}).then(x).then(m).catch(P),S(t,{ignoreCache:e.ignoreCache}).then(x).catch(P)]);return{configFile:s[0],credentialsFile:s[1]}},$=e=>Object.entries(e).filter((([e])=>e.startsWith(f.Ip.SSO_SESSION+I))).reduce(((e,[t,n])=>({...e,[t.split(I)[1]]:n})),{}),A=()=>({}),N=async(e={})=>S(e.configFilepath??g()).then(x).then($).catch(A),M=async e=>{const t=await O(e);return((...e)=>{const t={};for(const n of e)for(const[e,s]of Object.entries(n))void 0!==t[e]?Object.assign(t[e],s):t[e]=s;return t})(t.configFile,t.credentialsFile)}},8156:(e,t,n)=>{"use strict";n.d(t,{Kj:()=>u,uB:()=>h,N4:()=>s,$H:()=>m,TJ:()=>V,Ss:()=>me,Px:()=>d,Mw:()=>B,I9:()=>Z,ET:()=>w,Y0:()=>b,r$:()=>g,Xk:()=>v,lK:()=>S,$6:()=>se,Yd:()=>re,xA:()=>te,rm:()=>oe,lT:()=>G,Tj:()=>ae,l3:()=>k,EI:()=>C,t_:()=>D,uv:()=>ne,un:()=>he,VA:()=>fe,xW:()=>O,s:()=>ce,jr:()=>H});class s{trace(){}debug(){}info(){}warn(){}error(){}}const r=(e,t)=>{const n=[];if(e&&n.push(e),t)for(const e of t)n.push(e);return n},o=(e,t)=>`${e||"anonymous"}${t&&t.length>0?` (a.k.a. ${t.join(",")})`:""}`,i=()=>{let e=[],t=[],n=!1;const s=new Set,u=n=>(e.forEach((e=>{n.add(e.middleware,{...e})})),t.forEach((e=>{n.addRelativeTo(e.middleware,{...e})})),n.identifyOnResolve?.(p.identifyOnResolve()),n),l=e=>{const t=[];return e.before.forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...l(e))})),t.push(e),e.after.reverse().forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...l(e))})),t},d=(n=!1)=>{const s=[],i=[],u={};var d;return e.forEach((e=>{const t={...e,before:[],after:[]};for(const e of r(t.name,t.aliases))u[e]=t;s.push(t)})),t.forEach((e=>{const t={...e,before:[],after:[]};for(const e of r(t.name,t.aliases))u[e]=t;i.push(t)})),i.forEach((e=>{if(e.toMiddleware){const t=u[e.toMiddleware];if(void 0===t){if(n)return;throw new Error(`${e.toMiddleware} is not found when adding ${o(e.name,e.aliases)} middleware ${e.relation} ${e.toMiddleware}`)}"after"===e.relation&&t.after.push(e),"before"===e.relation&&t.before.push(e)}})),(d=s,d.sort(((e,t)=>a[t.step]-a[e.step]||c[t.priority||"normal"]-c[e.priority||"normal"]))).map(l).reduce(((e,t)=>(e.push(...t),e)),[])},p={add:(t,n={})=>{const{name:i,override:a,aliases:c}=n,u={step:"initialize",priority:"normal",middleware:t,...n},l=r(i,c);if(l.length>0){if(l.some((e=>s.has(e)))){if(!a)throw new Error(`Duplicate middleware name '${o(i,c)}'`);for(const t of l){const n=e.findIndex((e=>e.name===t||e.aliases?.some((e=>e===t))));if(-1===n)continue;const s=e[n];if(s.step!==u.step||u.priority!==s.priority)throw new Error(`"${o(s.name,s.aliases)}" middleware with ${s.priority} priority in ${s.step} step cannot be overridden by "${o(i,c)}" middleware with ${u.priority} priority in ${u.step} step.`);e.splice(n,1)}}for(const e of l)s.add(e)}e.push(u)},addRelativeTo:(e,n)=>{const{name:i,override:a,aliases:c}=n,u={middleware:e,...n},l=r(i,c);if(l.length>0){if(l.some((e=>s.has(e)))){if(!a)throw new Error(`Duplicate middleware name '${o(i,c)}'`);for(const e of l){const n=t.findIndex((t=>t.name===e||t.aliases?.some((t=>t===e))));if(-1===n)continue;const s=t[n];if(s.toMiddleware!==u.toMiddleware||s.relation!==u.relation)throw new Error(`"${o(s.name,s.aliases)}" middleware ${s.relation} "${s.toMiddleware}" middleware cannot be overridden by "${o(i,c)}" middleware ${u.relation} "${u.toMiddleware}" middleware.`);t.splice(n,1)}}for(const e of l)s.add(e)}t.push(u)},clone:()=>u(i()),use:e=>{e.applyToStack(p)},remove:n=>"string"==typeof n?(n=>{let o=!1;const i=e=>{const t=r(e.name,e.aliases);if(t.includes(n)){o=!0;for(const e of t)s.delete(e);return!1}return!0};return e=e.filter(i),t=t.filter(i),o})(n):(n=>{let o=!1;const i=e=>{if(e.middleware===n){o=!0;for(const t of r(e.name,e.aliases))s.delete(t);return!1}return!0};return e=e.filter(i),t=t.filter(i),o})(n),removeByTag:n=>{let o=!1;const i=e=>{const{tags:t,name:i,aliases:a}=e;if(t&&t.includes(n)){const e=r(i,a);for(const t of e)s.delete(t);return o=!0,!1}return!0};return e=e.filter(i),t=t.filter(i),o},concat:e=>{const t=u(i());return t.use(e),t.identifyOnResolve(n||t.identifyOnResolve()||(e.identifyOnResolve?.()??!1)),t},applyToStack:u,identify:()=>d(!0).map((e=>{const t=e.step??e.relation+" "+e.toMiddleware;return o(e.name,e.aliases)+" - "+t})),identifyOnResolve:e=>("boolean"==typeof e&&(n=e),n),resolve:(e,t)=>{for(const n of d().map((e=>e.middleware)).reverse())e=n(e,t);return n&&console.log(p.identify()),e}};return p},a={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},c={high:3,normal:2,low:1};class u{constructor(e){this.middlewareStack=i(),this.config=e}send(e,t,n){const s="function"!=typeof t?t:void 0,r="function"==typeof t?t:n,o=e.resolveMiddleware(this.middlewareStack,this.config,s);if(!r)return o(e).then((e=>e.output));o(e).then((e=>r(null,e.output)),(e=>r(e))).catch((()=>{}))}destroy(){this.config.requestHandler.destroy&&this.config.requestHandler.destroy()}}var l=n(5186);const d=async(e=new Uint8Array,t)=>{if(e instanceof Uint8Array)return l.Mu.mutate(e);if(!e)return l.Mu.mutate(new Uint8Array);const n=t.streamCollector(e);return l.Mu.mutate(await n)};var p=n(7523);class h{constructor(){this.middlewareStack=i()}static classBuilder(){return new f}resolveMiddlewareWithContext(e,t,n,{middlewareFn:s,clientName:r,commandName:o,inputFilterSensitiveLog:i,outputFilterSensitiveLog:a,smithyContext:c,additionalContext:u,CommandCtor:l}){for(const r of s.bind(this)(l,e,t,n))this.middlewareStack.use(r);const d=e.concat(this.middlewareStack),{logger:h}=t,f={logger:h,clientName:r,commandName:o,inputFilterSensitiveLog:i,outputFilterSensitiveLog:a,[p.Vf]:{...c},...u},{requestHandler:m}=t;return d.resolve((e=>m.handle(e.request,n||{})),f)}}class f{constructor(){this._init=()=>{},this._ep={},this._middlewareFn=()=>[],this._commandName="",this._clientName="",this._additionalContext={},this._smithyContext={},this._inputFilterSensitiveLog=e=>e,this._outputFilterSensitiveLog=e=>e,this._serializer=null,this._deserializer=null}init(e){this._init=e}ep(e){return this._ep=e,this}m(e){return this._middlewareFn=e,this}s(e,t,n={}){return this._smithyContext={service:e,operation:t,...n},this}c(e={}){return this._additionalContext=e,this}n(e,t){return this._clientName=e,this._commandName=t,this}f(e=(e=>e),t=(e=>e)){return this._inputFilterSensitiveLog=e,this._outputFilterSensitiveLog=t,this}ser(e){return this._serializer=e,this}de(e){return this._deserializer=e,this}build(){const e=this;let t;return t=class extends h{static getEndpointParameterInstructions(){return e._ep}constructor(t){super(),this.input=t,this.serialize=e._serializer,this.deserialize=e._deserializer,e._init(this)}resolveMiddleware(n,s,r){return this.resolveMiddlewareWithContext(n,s,r,{CommandCtor:t,middlewareFn:e._middlewareFn,clientName:e._clientName,commandName:e._commandName,inputFilterSensitiveLog:e._inputFilterSensitiveLog,outputFilterSensitiveLog:e._outputFilterSensitiveLog,smithyContext:e._smithyContext,additionalContext:e._additionalContext})}}}}const m="***SensitiveInformation***",g=e=>{if(null!=e){if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return String(t)!==String(e)&&N.warn(A(`Expected number but observed string: ${e}`)),t}if("number"==typeof e)return e;throw new TypeError(`Expected number, got ${typeof e}: ${e}`)}},y=Math.ceil(2**127*(2-2**-23)),w=e=>E(e,32),E=(e,t)=>{const n=(e=>{if(null!=e){if(Number.isInteger(e)&&!Number.isNaN(e))return e;throw new TypeError(`Expected integer, got ${typeof e}: ${e}`)}})(e);if(void 0!==n&&x(n,t)!==n)throw new TypeError(`Expected ${t}-bit integer, got ${e}`);return n},x=(e,t)=>{switch(t){case 32:return Int32Array.of(e)[0];case 16:return Int16Array.of(e)[0];case 8:return Int8Array.of(e)[0]}},b=(e,t)=>{if(null==e){if(t)throw new TypeError(`Expected a non-null value for ${t}`);throw new TypeError("Expected a non-null value")}return e},v=e=>{if(null==e)return;if("object"==typeof e&&!Array.isArray(e))return e;const t=Array.isArray(e)?"array":typeof e;throw new TypeError(`Expected object, got ${t}: ${e}`)},S=e=>{if(null!=e){if("string"==typeof e)return e;if(["boolean","number","bigint"].includes(typeof e))return N.warn(A(`Expected string, got ${typeof e}: ${e}`)),String(e);throw new TypeError(`Expected string, got ${typeof e}: ${e}`)}},P=/(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g,I=e=>{const t=e.match(P);if(null===t||t[0].length!==e.length)throw new TypeError("Expected real number, got implicit NaN");return parseFloat(e)},O=e=>w("string"==typeof e?I(e):e),$=e=>(e=>E(e,16))("string"==typeof e?I(e):e),A=e=>String(new TypeError(e).stack||e).split("\n").slice(0,5).filter((e=>!e.includes("stackTraceWarning"))).join("\n"),N={warn:console.warn},M=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],T=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/),C=e=>{if(null==e)return;if("string"!=typeof e)throw new TypeError("RFC-3339 date-times must be expressed as strings");const t=T.exec(e);if(!t)throw new TypeError("Invalid RFC-3339 date-time value");const[n,s,r,o,i,a,c,u]=t,l=$(K(s)),d=_(r,"month",1,12),p=_(o,"day",1,31);return j(l,d,p,{hours:i,minutes:a,seconds:c,fractionalMilliseconds:u})},R=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/),D=e=>{if(null==e)return;if("string"!=typeof e)throw new TypeError("RFC-3339 date-times must be expressed as strings");const t=R.exec(e);if(!t)throw new TypeError("Invalid RFC-3339 date-time value");const[n,s,r,o,i,a,c,u,l]=t,d=$(K(s)),p=_(r,"month",1,12),h=_(o,"day",1,31),f=j(d,p,h,{hours:i,minutes:a,seconds:c,fractionalMilliseconds:u});return"Z"!=l.toUpperCase()&&f.setTime(f.getTime()-L(l)),f},k=e=>{if(null==e)return;let t;if("number"==typeof e)t=e;else{if("string"!=typeof e)throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");t=(e=>g("string"==typeof e?I(e):e))(e)}if(Number.isNaN(t)||t===1/0||t===-1/0)throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");return new Date(Math.round(1e3*t))},j=(e,t,n,s)=>{const r=t-1;return q(e,r,n),new Date(Date.UTC(e,r,n,_(s.hours,"hour",0,23),_(s.minutes,"minute",0,59),_(s.seconds,"seconds",0,60),U(s.fractionalMilliseconds)))},F=[31,28,31,30,31,30,31,31,30,31,30,31],q=(e,t,n)=>{let s=F[t];if(1===t&&z(e)&&(s=29),n>s)throw new TypeError(`Invalid day for ${M[t]} in ${e}: ${n}`)},z=e=>e%4==0&&(e%100!=0||e%400==0),_=(e,t,n,s)=>{const r=(e=>(e=>E(e,8))("string"==typeof e?I(e):e))(K(e));if(r<n||r>s)throw new TypeError(`${t} must be between ${n} and ${s}, inclusive`);return r},U=e=>null==e?0:1e3*(e=>(e=>{const t=g(e);if(void 0!==t&&!Number.isNaN(t)&&t!==1/0&&t!==-1/0&&Math.abs(t)>y)throw new TypeError(`Expected 32-bit float, got ${e}`);return t})("string"==typeof e?I(e):e))("0."+e),L=e=>{const t=e[0];let n=1;if("+"==t)n=1;else{if("-"!=t)throw new TypeError(`Offset direction, ${t}, must be "+" or "-"`);n=-1}return n*(60*Number(e.substring(1,3))+Number(e.substring(4,6)))*60*1e3},K=e=>{let t=0;for(;t<e.length-1&&"0"===e.charAt(t);)t++;return 0===t?e:e.slice(t)};class V extends Error{constructor(e){super(e.message),Object.setPrototypeOf(this,V.prototype),this.name=e.name,this.$fault=e.$fault,this.$metadata=e.$metadata}}const B=(e,t={})=>{Object.entries(t).filter((([,e])=>void 0!==e)).forEach((([t,n])=>{null!=e[t]&&""!==e[t]||(e[t]=n)}));const n=e.message||e.Message||"UnknownError";return e.message=n,delete e.Message,e},H=e=>({output:t,parsedBody:n,errorCode:s})=>{(({output:e,parsedBody:t,exceptionCtor:n,errorCode:s})=>{const r=W(e),o=r.httpStatusCode?r.httpStatusCode+"":void 0,i=new n({name:t?.code||t?.Code||s||o||"UnknownError",$fault:"client",$metadata:r});throw B(i,t)})({output:t,parsedBody:n,exceptionCtor:e,errorCode:s})},W=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),G=e=>{switch(e){case"standard":case"cross-region":return{retryMode:"standard",connectionTimeout:3100};case"in-region":return{retryMode:"standard",connectionTimeout:1100};case"mobile":return{retryMode:"standard",connectionTimeout:3e4};default:return{}}};let Q=!1;const Z=e=>{e&&!Q&&parseInt(e.substring(1,e.indexOf(".")))<14&&(Q=!0)},J=e=>{const t=[];for(const n in p.dB){const s=p.dB[n];void 0!==e[s]&&t.push({algorithmId:()=>s,checksumConstructor:()=>e[s]})}return{_checksumAlgorithms:t,addChecksumAlgorithm(e){this._checksumAlgorithms.push(e)},checksumAlgorithms(){return this._checksumAlgorithms}}},X=e=>{const t={};return e.checksumAlgorithms().forEach((e=>{t[e.algorithmId()]=e.checksumConstructor()})),t},Y=e=>{let t=e.retryStrategy;return{setRetryStrategy(e){t=e},retryStrategy:()=>t}},ee=e=>{const t={};return t.retryStrategy=e.retryStrategy(),t},te=e=>({...J(e),...Y(e)}),ne=e=>({...X(e),...ee(e)});function se(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}const re=e=>Array.isArray(e)?e:[e],oe=e=>{const t="#text";for(const n in e)e.hasOwnProperty(n)&&void 0!==e[n][t]?e[n]=e[n][t]:"object"==typeof e[n]&&null!==e[n]&&(e[n]=oe(e[n]));return e},ie=function(){const e=Object.getPrototypeOf(this).constructor,t=new(Function.bind.apply(String,[null,...arguments]));return Object.setPrototypeOf(t,e.prototype),t};function ae(e,t,n){let s,r,o;if(void 0===t&&void 0===n)s={},o=e;else{if(s=e,"function"==typeof t)return r=t,o=n,ue(s,r,o);o=t}for(const e of Object.keys(o))Array.isArray(o[e])?le(s,null,o,e):s[e]=o[e];return s}ie.prototype=Object.create(String.prototype,{constructor:{value:ie,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf(ie,String);const ce=(e,t)=>{const n={};for(const s in t)le(n,e,t,s);return n},ue=(e,t,n)=>ae(e,Object.entries(n).reduce(((e,[n,s])=>(Array.isArray(s)?e[n]=s:e[n]="function"==typeof s?[t,s()]:[t,s],e)),{})),le=(e,t,n,s)=>{if(null!==t){let r=n[s];"function"==typeof r&&(r=[,r]);const[o=de,i=pe,a=s]=r;return void(("function"==typeof o&&o(t[a])||"function"!=typeof o&&o)&&(e[s]=i(t[a])))}let[r,o]=n[s];if("function"==typeof o){let t;const n=void 0===r&&null!=(t=o()),i="function"==typeof r&&!!r(void 0)||"function"!=typeof r&&!!r;n?e[s]=t:i&&(e[s]=o())}else{const t=void 0===r&&null!=o,n="function"==typeof r&&!!r(o)||"function"!=typeof r&&!!r;(t||n)&&(e[s]=o)}},de=e=>null!=e,pe=e=>e,he=(e,t,n,s,r,o)=>{if(null==t||void 0===t[n])throw new Error("No value provided for input HTTP label: "+n+".");{const t=s();if(t.length<=0)throw new Error("Empty value provided for input HTTP label: "+n+".");e=e.replace(r,o?t.split("/").map((e=>se(e))).join("/"):se(t))}return e},fe=e=>{if(e!=e)return"NaN";switch(e){case 1/0:return"Infinity";case-1/0:return"-Infinity";default:return e}},me=e=>{if(null==e)return{};if(Array.isArray(e))return e.filter((e=>null!=e)).map(me);if("object"==typeof e){const t={};for(const n of Object.keys(e))null!=e[n]&&(t[n]=me(e[n]));return t}return e}},7523:(e,t,n)=>{"use strict";var s,r,o,i,a;n.d(t,{dB:()=>i,Ue:()=>o,Ip:()=>u,Vf:()=>c}),function(e){e.HEADER="header",e.QUERY="query"}(s||(s={})),function(e){e.HEADER="header",e.QUERY="query"}(r||(r={})),function(e){e.HTTP="http",e.HTTPS="https"}(o||(o={})),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(i||(i={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(a||(a={}));const c="__smithy_context";var u,l;!function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"}(u||(u={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(l||(l={}))},2641:(e,t,n)=>{"use strict";n.d(t,{D:()=>s});const s=e=>{if("string"==typeof e)return s(new URL(e));const{hostname:t,pathname:n,port:r,protocol:o,search:i}=e;let a;return i&&(a=function(e){const t={};if(e=e.replace(/^\?/,""))for(const n of e.split("&")){let[e,s=null]=n.split("=");e=decodeURIComponent(e),s&&(s=decodeURIComponent(s)),e in t?Array.isArray(t[e])?t[e].push(s):t[e]=[t[e],s]:t[e]=s}return t}(i)),{hostname:t,port:r?parseInt(r):void 0,protocol:o,path:n,query:a}}},4572:(e,t,n)=>{"use strict";n.d(t,{E:()=>o,n:()=>i});var s=n(9290);const r=/^[A-Za-z0-9+/]*={0,2}$/,o=e=>{if(3*e.length%4!=0)throw new TypeError("Incorrect padding on base64 string.");if(!r.exec(e))throw new TypeError("Invalid base64 string.");const t=(0,s.s)(e,"base64");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)},i=e=>(0,s.Q)(e.buffer,e.byteOffset,e.byteLength).toString("base64")},7809:(e,t,n)=>{"use strict";n.d(t,{n:()=>r});var s=n(9896);const r=e=>{if(!e)return 0;if("string"==typeof e)return Buffer.from(e).length;if("number"==typeof e.byteLength)return e.byteLength;if("number"==typeof e.size)return e.size;if("number"==typeof e.start&&"number"==typeof e.end)return e.end+1-e.start;if("string"==typeof e.path||Buffer.isBuffer(e.path))return(0,s.lstatSync)(e.path).size;if("number"==typeof e.fd)return(0,s.fstatSync)(e.fd).size;throw new Error(`Body Length computation failed for ${e}`)}},9290:(e,t,n)=>{"use strict";n.d(t,{Q:()=>o,s:()=>i});var s=n(3695),r=n(181);const o=(e,t=0,n=e.byteLength-t)=>{if(!(0,s.m)(e))throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof e} (${e})`);return r.Buffer.from(e,t,n)},i=(e,t)=>{if("string"!=typeof e)throw new TypeError(`The "input" argument must be of type string. Received type ${typeof e} (${e})`);return t?r.Buffer.from(e,t):r.Buffer.from(e)}},8230:(e,t,n)=>{"use strict";n.d(t,{cV:()=>o,Qm:()=>s,nB:()=>r});const s=(e,t,n)=>{if(t in e){if("true"===e[t])return!0;if("false"===e[t])return!1;throw new Error(`Cannot load ${n} "${t}". Expected "true" or "false", got ${e[t]}.`)}},r=(e,t,n)=>{if(!(t in e))return;const s=parseInt(e[t],10);if(Number.isNaN(s))throw new TypeError(`Cannot load ${n} '${t}'. Expected number, got '${e[t]}'.`);return s};var o;!function(e){e.ENV="env",e.CONFIG="shared config entry"}(o||(o={}))},4321:(e,t,n)=>{"use strict";n.d(t,{I:()=>l});var s=n(7122),r=n(1881),o=n(8112);const i="AWS_REGION",a="AWS_DEFAULT_REGION",c=["in-region","cross-region","mobile","standard","legacy"],u={environmentVariableSelector:e=>e.AWS_DEFAULTS_MODE,configFileSelector:e=>e.defaults_mode,default:"legacy"},l=({region:e=(0,r.Z)(s.GG),defaultsMode:t=(0,r.Z)(u)}={})=>(0,o.Bj)((async()=>{const n="function"==typeof t?await t():t;switch(n?.toLowerCase()){case"auto":return d(e);case"in-region":case"cross-region":case"mobile":case"standard":case"legacy":return Promise.resolve(n?.toLocaleLowerCase());case void 0:return Promise.resolve("legacy");default:throw new Error(`Invalid parameter for "defaultsMode", expect ${c.join(", ")}, got ${n}`)}})),d=async e=>{if(e){const t="function"==typeof e?await e():e,n=await p();return n?t===n?"in-region":"cross-region":"standard"}return"standard"},p=async()=>{if(process.env.AWS_EXECUTION_ENV&&(process.env[i]||process.env[a]))return process.env[i]??process.env[a];if(!process.env.AWS_EC2_METADATA_DISABLED)try{const{getInstanceMetadataEndpoint:e,httpRequest:t}=await n.e(897).then(n.bind(n,7897)),s=await e();return(await t({...s,path:"/latest/meta-data/placement/region"})).toString()}catch(e){}}},3875:(e,t,n)=>{"use strict";n.d(t,{mw:()=>a,oX:()=>r,X8:()=>i,sO:()=>A});const s=new RegExp("^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$"),r=e=>s.test(e)||e.startsWith("[")&&e.endsWith("]"),o=new RegExp("^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$"),i=(e,t=!1)=>{if(!t)return o.test(e);const n=e.split(".");for(const e of n)if(!i(e))return!1;return!0},a={},c="endpoints";function u(e){return"object"!=typeof e||null==e?e:"ref"in e?`$${u(e.ref)}`:"fn"in e?`${e.fn}(${(e.argv||[]).map(u).join(", ")})`:JSON.stringify(e,null,2)}class l extends Error{constructor(e){super(e),this.name="EndpointError"}}const d=(e,t)=>(e=>{const t=e.split("."),n=[];for(const s of t){const t=s.indexOf("[");if(-1!==t){if(s.indexOf("]")!==s.length-1)throw new l(`Path: '${e}' does not end with ']'`);const r=s.slice(t+1,-1);if(Number.isNaN(parseInt(r)))throw new l(`Invalid array index: '${r}' in path: '${e}'`);0!==t&&n.push(s.slice(0,t)),n.push(r)}else n.push(s)}return n})(t).reduce(((n,s)=>{if("object"!=typeof n)throw new l(`Index '${s}' in '${t}' not found in '${JSON.stringify(e)}'`);return Array.isArray(n)?n[parseInt(s)]:n[s]}),e);var p=n(7523);const h={[p.Ue.HTTP]:80,[p.Ue.HTTPS]:443},f={booleanEquals:(e,t)=>e===t,getAttr:d,isSet:e=>null!=e,isValidHostLabel:i,not:e=>!e,parseURL:e=>{const t=(()=>{try{if(e instanceof URL)return e;if("object"==typeof e&&"hostname"in e){const{hostname:t,port:n,protocol:s="",path:r="",query:o={}}=e,i=new URL(`${s}//${t}${n?`:${n}`:""}${r}`);return i.search=Object.entries(o).map((([e,t])=>`${e}=${t}`)).join("&"),i}return new URL(e)}catch(e){return null}})();if(!t)return console.error(`Unable to parse ${JSON.stringify(e)} as a whatwg URL.`),null;const n=t.href,{host:s,hostname:o,pathname:i,protocol:a,search:c}=t;if(c)return null;const u=a.slice(0,-1);if(!Object.values(p.Ue).includes(u))return null;const l=r(o);return{scheme:u,authority:`${s}${n.includes(`${s}:${h[u]}`)||"string"==typeof e&&e.includes(`${s}:${h[u]}`)?`:${h[u]}`:""}`,path:i,normalizedPath:i.endsWith("/")?i:`${i}/`,isIp:l}},stringEquals:(e,t)=>e===t,substring:(e,t,n,s)=>t>=n||e.length<n?null:s?e.substring(e.length-n,e.length-t):e.substring(t,n),uriEncode:e=>encodeURIComponent(e).replace(/[!*'()]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},m=(e,t)=>{const n=[],s={...t.endpointParams,...t.referenceRecord};let r=0;for(;r<e.length;){const t=e.indexOf("{",r);if(-1===t){n.push(e.slice(r));break}n.push(e.slice(r,t));const o=e.indexOf("}",t);if(-1===o){n.push(e.slice(t));break}"{"===e[t+1]&&"}"===e[o+1]&&(n.push(e.slice(t+1,o)),r=o+2);const i=e.substring(t+1,o);if(i.includes("#")){const[e,t]=i.split("#");n.push(d(s[e],t))}else n.push(s[i]);r=o+1}return n.join("")},g=(e,t,n)=>{if("string"==typeof e)return m(e,n);if(e.fn)return y(e,n);if(e.ref)return(({ref:e},t)=>({...t.endpointParams,...t.referenceRecord}[e]))(e,n);throw new l(`'${t}': ${String(e)} is not a string, function or reference.`)},y=({fn:e,argv:t},n)=>{const s=t.map((e=>["boolean","number"].includes(typeof e)?e:g(e,"arg",n))),r=e.split(".");return r[0]in a&&null!=r[1]?a[r[0]][r[1]](...s):f[e](...s)},w=({assign:e,...t},n)=>{if(e&&e in n.referenceRecord)throw new l(`'${e}' is already defined in Reference Record.`);const s=y(t,n);return n.logger?.debug?.(c,`evaluateCondition: ${u(t)} = ${u(s)}`),{result:""===s||!!s,...null!=e&&{toAssign:{name:e,value:s}}}},E=(e=[],t)=>{const n={};for(const s of e){const{result:e,toAssign:r}=w(s,{...t,referenceRecord:{...t.referenceRecord,...n}});if(!e)return{result:e};r&&(n[r.name]=r.value,t.logger?.debug?.(c,`assign: ${r.name} := ${u(r.value)}`))}return{result:!0,referenceRecord:n}},x=(e,t)=>Object.entries(e).reduce(((e,[n,s])=>({...e,[n]:s.map((e=>{const s=g(e,"Header value entry",t);if("string"!=typeof s)throw new l(`Header '${n}' value '${s}' is not a string`);return s}))})),{}),b=(e,t)=>{if(Array.isArray(e))return e.map((e=>b(e,t)));switch(typeof e){case"string":return m(e,t);case"object":if(null===e)throw new l(`Unexpected endpoint property: ${e}`);return v(e,t);case"boolean":return e;default:throw new l("Unexpected endpoint property type: "+typeof e)}},v=(e,t)=>Object.entries(e).reduce(((e,[n,s])=>({...e,[n]:b(s,t)})),{}),S=(e,t)=>{const n=g(e,"Endpoint URL",t);if("string"==typeof n)try{return new URL(n)}catch(e){throw console.error(`Failed to construct URL with ${n}`,e),e}throw new l("Endpoint URL must be a string, got "+typeof n)},P=(e,t)=>{const{conditions:n,endpoint:s}=e,{result:r,referenceRecord:o}=E(n,t);if(!r)return;const i={...t,referenceRecord:{...t.referenceRecord,...o}},{url:a,properties:l,headers:d}=s;return t.logger?.debug?.(c,`Resolving endpoint from template: ${u(s)}`),{...null!=d&&{headers:x(d,i)},...null!=l&&{properties:v(l,i)},url:S(a,i)}},I=(e,t)=>{const{conditions:n,error:s}=e,{result:r,referenceRecord:o}=E(n,t);if(r)throw new l(g(s,"Error",{...t,referenceRecord:{...t.referenceRecord,...o}}))},O=(e,t)=>{const{conditions:n,rules:s}=e,{result:r,referenceRecord:o}=E(n,t);if(r)return $(s,{...t,referenceRecord:{...t.referenceRecord,...o}})},$=(e,t)=>{for(const n of e)if("endpoint"===n.type){const e=P(n,t);if(e)return e}else if("error"===n.type)I(n,t);else{if("tree"!==n.type)throw new l(`Unknown endpoint rule: ${n}`);{const e=O(n,t);if(e)return e}}throw new l("Rules evaluation failed")},A=(e,t)=>{const{endpointParams:n,logger:s}=t,{parameters:r,rules:o}=e;t.logger?.debug?.(`${c} Initial EndpointParams: ${u(n)}`);const i=Object.entries(r).filter((([,e])=>null!=e.default)).map((([e,t])=>[e,t.default]));if(i.length>0)for(const[e,t]of i)n[e]=n[e]??t;const a=Object.entries(r).filter((([,e])=>e.required)).map((([e])=>e));for(const e of a)if(null==n[e])throw new l(`Missing required parameter: '${e}'`);const d=$(o,{endpointParams:n,logger:s,referenceRecord:{}});if(t.endpointParams?.Endpoint)try{const e=new URL(t.endpointParams.Endpoint),{protocol:n,port:s}=e;d.url.protocol=n,d.url.port=s}catch(e){}return t.logger?.debug?.(`${c} Resolved endpoint: ${u(d)}`),d}},7135:(e,t,n)=>{"use strict";n.d(t,{u:()=>r,t:()=>o});var s=n(7523);const r=e=>e[s.Vf]||(e[s.Vf]={}),o=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t}},3323:(e,t,n)=>{"use strict";var s;n.d(t,{Y:()=>E,Gz:()=>r,bp:()=>c,L0:()=>o,QJ:()=>a,Df:()=>d,l5:()=>m,G8:()=>u,XP:()=>f,ok:()=>g,XS:()=>p,cm:()=>s,ru:()=>w,jh:()=>l,Rn:()=>h}),function(e){e.STANDARD="standard",e.ADAPTIVE="adaptive"}(s||(s={}));const r=3,o=s.STANDARD;var i=n(4542);class a{constructor(e){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=e?.beta??.7,this.minCapacity=e?.minCapacity??1,this.minFillRate=e?.minFillRate??.5,this.scaleConstant=e?.scaleConstant??.4,this.smooth=e?.smooth??.8;const t=this.getCurrentTimeInSeconds();this.lastThrottleTime=t,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(e){if(this.enabled){if(this.refillTokenBucket(),e>this.currentCapacity){const t=(e-this.currentCapacity)/this.fillRate*1e3;await new Promise((e=>setTimeout(e,t)))}this.currentCapacity=this.currentCapacity-e}}refillTokenBucket(){const e=this.getCurrentTimeInSeconds();if(!this.lastTimestamp)return void(this.lastTimestamp=e);const t=(e-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+t),this.lastTimestamp=e}updateClientSendingRate(e){let t;if(this.updateMeasuredRate(),(0,i.Qb)(e)){const e=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=e,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),t=this.cubicThrottle(e),this.enableTokenBucket()}else this.calculateTimeWindow(),t=this.cubicSuccess(this.getCurrentTimeInSeconds());const n=Math.min(t,2*this.measuredTxRate);this.updateTokenBucketRate(n)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(e){return this.getPrecise(e*this.beta)}cubicSuccess(e){return this.getPrecise(this.scaleConstant*Math.pow(e-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(e){this.refillTokenBucket(),this.fillRate=Math.max(e,this.minFillRate),this.maxCapacity=Math.max(e,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){const e=this.getCurrentTimeInSeconds(),t=Math.floor(2*e)/2;if(this.requestCount++,t>this.lastTxRateBucket){const e=this.requestCount/(t-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(e*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=t}}getPrecise(e){return parseFloat(e.toFixed(8))}}const c=100,u=2e4,l=500,d=500,p=5,h=10,f=1,m="amz-sdk-invocation-id",g="amz-sdk-request",y=({retryDelay:e,retryCount:t,retryCost:n})=>({getRetryCount:()=>t,getRetryDelay:()=>Math.min(u,e),getRetryCost:()=>n});class w{constructor(e){this.maxAttempts=e,this.mode=s.STANDARD,this.capacity=d,this.retryBackoffStrategy=(()=>{let e=c;return{computeNextBackoffDelay:t=>Math.floor(Math.min(u,Math.random()*2**t*e)),setDelayBase:t=>{e=t}}})(),this.maxAttemptsProvider="function"==typeof e?e:async()=>e}async acquireInitialRetryToken(e){return y({retryDelay:c,retryCount:0})}async refreshRetryTokenForRetry(e,t){const n=await this.getMaxAttempts();if(this.shouldRetry(e,t,n)){const n=t.errorType;this.retryBackoffStrategy.setDelayBase("THROTTLING"===n?l:c);const s=this.retryBackoffStrategy.computeNextBackoffDelay(e.getRetryCount()),r=t.retryAfterHint?Math.max(t.retryAfterHint.getTime()-Date.now()||0,s):s,o=this.getCapacityCost(n);return this.capacity-=o,y({retryDelay:r,retryCount:e.getRetryCount()+1,retryCost:o})}throw new Error("No retry token available")}recordSuccess(e){this.capacity=Math.max(d,this.capacity+(e.getRetryCost()??f))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch(e){return console.warn(`Max attempts provider could not resolve. Using default of ${r}`),r}}shouldRetry(e,t,n){return e.getRetryCount()+1<n&&this.capacity>=this.getCapacityCost(t.errorType)&&this.isRetryableError(t.errorType)}getCapacityCost(e){return"TRANSIENT"===e?h:p}isRetryableError(e){return"THROTTLING"===e||"TRANSIENT"===e}}class E{constructor(e,t){this.maxAttemptsProvider=e,this.mode=s.ADAPTIVE;const{rateLimiter:n}=t??{};this.rateLimiter=n??new a,this.standardRetryStrategy=new w(e)}async acquireInitialRetryToken(e){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(e)}async refreshRetryTokenForRetry(e,t){return this.rateLimiter.updateClientSendingRate(t),this.standardRetryStrategy.refreshRetryTokenForRetry(e,t)}recordSuccess(e){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(e)}}},5186:(e,t,n)=>{"use strict";n.d(t,{Mu:()=>o,c9:()=>d});var s=n(4572),r=n(3197);class o extends Uint8Array{static fromString(e,t="utf-8"){if("string"==typeof e)return function(e,t){return"base64"===t?o.mutate((0,s.E)(e)):o.mutate((0,r.ar)(e))}(e,t);throw new Error(`Unsupported conversion from ${typeof e} to Uint8ArrayBlobAdapter.`)}static mutate(e){return Object.setPrototypeOf(e,o.prototype),e}transformToString(e="utf-8"){return function(e,t="utf-8"){return"base64"===t?(0,s.n)(e):(0,r.Pq)(e)}(this,e)}}var i=n(2203),a=n(4029),c=n(9290),u=n(9023);const l="The stream has already been transformed.",d=e=>{if(!(e instanceof i.Readable))throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${e?.__proto__?.constructor?.name||e}`);let t=!1;const n=async()=>{if(t)throw new Error(l);return t=!0,await(0,a.kv)(e)};return Object.assign(e,{transformToByteArray:n,transformToString:async e=>{const t=await n();return void 0===e||Buffer.isEncoding(e)?(0,c.Q)(t.buffer,t.byteOffset,t.byteLength).toString(e):new u.TextDecoder(e).decode(t)},transformToWebStream:()=>{if(t)throw new Error(l);if(null!==e.readableFlowing)throw new Error("The stream has been consumed by other callbacks.");if("function"!=typeof i.Readable.toWeb)throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");return t=!0,i.Readable.toWeb(e)}})}},2531:(e,t,n)=>{"use strict";n.d(t,{o:()=>s});const s=e=>encodeURIComponent(e).replace(/[!'()*]/g,r),r=e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`},3197:(e,t,n)=>{"use strict";n.d(t,{ar:()=>r,Fo:()=>o,Pq:()=>i});var s=n(9290);const r=e=>{const t=(0,s.s)(e,"utf8");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength/Uint8Array.BYTES_PER_ELEMENT)},o=e=>"string"==typeof e?r(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e),i=e=>(0,s.Q)(e.buffer,e.byteOffset,e.byteLength).toString("utf8")},6454:(e,t,n)=>{"use strict";const s=n(3918),r=n(2923),o=n(8904);e.exports={XMLParser:r,XMLValidator:s,XMLBuilder:o}},5334:(e,t)=>{"use strict";const n=":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",s="["+n+"]["+n+"\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*",r=new RegExp("^"+s+"$");t.isExist=function(e){return void 0!==e},t.isEmptyObject=function(e){return 0===Object.keys(e).length},t.merge=function(e,t,n){if(t){const s=Object.keys(t),r=s.length;for(let o=0;o<r;o++)e[s[o]]="strict"===n?[t[s[o]]]:t[s[o]]}},t.getValue=function(e){return t.isExist(e)?e:""},t.isName=function(e){return!(null==r.exec(e))},t.getAllMatches=function(e,t){const n=[];let s=t.exec(e);for(;s;){const r=[];r.startIndex=t.lastIndex-s[0].length;const o=s.length;for(let e=0;e<o;e++)r.push(s[e]);n.push(r),s=t.exec(e)}return n},t.nameRegexp=s},3918:(e,t,n)=>{"use strict";const s=n(5334),r={allowBooleanAttributes:!1,unpairedTags:[]};function o(e){return" "===e||"\t"===e||"\n"===e||"\r"===e}function i(e,t){const n=t;for(;t<e.length;t++)if("?"!=e[t]&&" "!=e[t]);else{const s=e.substr(n,t-n);if(t>5&&"xml"===s)return f("InvalidXml","XML declaration allowed only at the start of the document.",g(e,t));if("?"==e[t]&&">"==e[t+1]){t++;break}}return t}function a(e,t){if(e.length>t+5&&"-"===e[t+1]&&"-"===e[t+2]){for(t+=3;t<e.length;t++)if("-"===e[t]&&"-"===e[t+1]&&">"===e[t+2]){t+=2;break}}else if(e.length>t+8&&"D"===e[t+1]&&"O"===e[t+2]&&"C"===e[t+3]&&"T"===e[t+4]&&"Y"===e[t+5]&&"P"===e[t+6]&&"E"===e[t+7]){let n=1;for(t+=8;t<e.length;t++)if("<"===e[t])n++;else if(">"===e[t]&&(n--,0===n))break}else if(e.length>t+9&&"["===e[t+1]&&"C"===e[t+2]&&"D"===e[t+3]&&"A"===e[t+4]&&"T"===e[t+5]&&"A"===e[t+6]&&"["===e[t+7])for(t+=8;t<e.length;t++)if("]"===e[t]&&"]"===e[t+1]&&">"===e[t+2]){t+=2;break}return t}t.validate=function(e,t){t=Object.assign({},r,t);const n=[];let c=!1,u=!1;"\ufeff"===e[0]&&(e=e.substr(1));for(let r=0;r<e.length;r++)if("<"===e[r]&&"?"===e[r+1]){if(r+=2,r=i(e,r),r.err)return r}else{if("<"!==e[r]){if(o(e[r]))continue;return f("InvalidChar","char '"+e[r]+"' is not expected.",g(e,r))}{let m=r;if(r++,"!"===e[r]){r=a(e,r);continue}{let y=!1;"/"===e[r]&&(y=!0,r++);let w="";for(;r<e.length&&">"!==e[r]&&" "!==e[r]&&"\t"!==e[r]&&"\n"!==e[r]&&"\r"!==e[r];r++)w+=e[r];if(w=w.trim(),"/"===w[w.length-1]&&(w=w.substring(0,w.length-1),r--),d=w,!s.isName(d)){let t;return t=0===w.trim().length?"Invalid space after '<'.":"Tag '"+w+"' is an invalid name.",f("InvalidTag",t,g(e,r))}const E=l(e,r);if(!1===E)return f("InvalidAttr","Attributes for '"+w+"' have open quote.",g(e,r));let x=E.value;if(r=E.index,"/"===x[x.length-1]){const n=r-x.length;x=x.substring(0,x.length-1);const s=p(x,t);if(!0!==s)return f(s.err.code,s.err.msg,g(e,n+s.err.line));c=!0}else if(y){if(!E.tagClosed)return f("InvalidTag","Closing tag '"+w+"' doesn't have proper closing.",g(e,r));if(x.trim().length>0)return f("InvalidTag","Closing tag '"+w+"' can't have attributes or invalid starting.",g(e,m));{const t=n.pop();if(w!==t.tagName){let n=g(e,t.tagStartPos);return f("InvalidTag","Expected closing tag '"+t.tagName+"' (opened in line "+n.line+", col "+n.col+") instead of closing tag '"+w+"'.",g(e,m))}0==n.length&&(u=!0)}}else{const s=p(x,t);if(!0!==s)return f(s.err.code,s.err.msg,g(e,r-x.length+s.err.line));if(!0===u)return f("InvalidXml","Multiple possible root nodes found.",g(e,r));-1!==t.unpairedTags.indexOf(w)||n.push({tagName:w,tagStartPos:m}),c=!0}for(r++;r<e.length;r++)if("<"===e[r]){if("!"===e[r+1]){r++,r=a(e,r);continue}if("?"!==e[r+1])break;if(r=i(e,++r),r.err)return r}else if("&"===e[r]){const t=h(e,r);if(-1==t)return f("InvalidChar","char '&' is not expected.",g(e,r));r=t}else if(!0===u&&!o(e[r]))return f("InvalidXml","Extra text at the end",g(e,r));"<"===e[r]&&r--}}}var d;return c?1==n.length?f("InvalidTag","Unclosed tag '"+n[0].tagName+"'.",g(e,n[0].tagStartPos)):!(n.length>0)||f("InvalidXml","Invalid '"+JSON.stringify(n.map((e=>e.tagName)),null,4).replace(/\r?\n/g,"")+"' found.",{line:1,col:1}):f("InvalidXml","Start tag expected.",1)};const c='"',u="'";function l(e,t){let n="",s="",r=!1;for(;t<e.length;t++){if(e[t]===c||e[t]===u)""===s?s=e[t]:s!==e[t]||(s="");else if(">"===e[t]&&""===s){r=!0;break}n+=e[t]}return""===s&&{value:n,index:t,tagClosed:r}}const d=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function p(e,t){const n=s.getAllMatches(e,d),r={};for(let e=0;e<n.length;e++){if(0===n[e][1].length)return f("InvalidAttr","Attribute '"+n[e][2]+"' has no space in starting.",y(n[e]));if(void 0!==n[e][3]&&void 0===n[e][4])return f("InvalidAttr","Attribute '"+n[e][2]+"' is without value.",y(n[e]));if(void 0===n[e][3]&&!t.allowBooleanAttributes)return f("InvalidAttr","boolean attribute '"+n[e][2]+"' is not allowed.",y(n[e]));const s=n[e][2];if(!m(s))return f("InvalidAttr","Attribute '"+s+"' is an invalid name.",y(n[e]));if(r.hasOwnProperty(s))return f("InvalidAttr","Attribute '"+s+"' is repeated.",y(n[e]));r[s]=1}return!0}function h(e,t){if(";"===e[++t])return-1;if("#"===e[t])return function(e,t){let n=/\d/;for("x"===e[t]&&(t++,n=/[\da-fA-F]/);t<e.length;t++){if(";"===e[t])return t;if(!e[t].match(n))break}return-1}(e,++t);let n=0;for(;t<e.length;t++,n++)if(!(e[t].match(/\w/)&&n<20)){if(";"===e[t])break;return-1}return t}function f(e,t,n){return{err:{code:e,msg:t,line:n.line||n,col:n.col}}}function m(e){return s.isName(e)}function g(e,t){const n=e.substring(0,t).split(/\r?\n/);return{line:n.length,col:n[n.length-1].length+1}}function y(e){return e.startIndex+e[1].length}},8904:(e,t,n)=>{"use strict";const s=n(2788),r={attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,cdataPropName:!1,format:!1,indentBy:"  ",suppressEmptyNode:!1,suppressUnpairedNode:!0,suppressBooleanAttributes:!0,tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},preserveOrder:!1,commentPropName:!1,unpairedTags:[],entities:[{regex:new RegExp("&","g"),val:"&amp;"},{regex:new RegExp(">","g"),val:"&gt;"},{regex:new RegExp("<","g"),val:"&lt;"},{regex:new RegExp("'","g"),val:"&apos;"},{regex:new RegExp('"',"g"),val:"&quot;"}],processEntities:!0,stopNodes:[],oneListGroup:!1};function o(e){this.options=Object.assign({},r,e),this.options.ignoreAttributes||this.options.attributesGroupName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=c),this.processTextOrObjNode=i,this.options.format?(this.indentate=a,this.tagEndChar=">\n",this.newLine="\n"):(this.indentate=function(){return""},this.tagEndChar=">",this.newLine="")}function i(e,t,n){const s=this.j2x(e,n+1);return void 0!==e[this.options.textNodeName]&&1===Object.keys(e).length?this.buildTextValNode(e[this.options.textNodeName],t,s.attrStr,n):this.buildObjectNode(s.val,t,s.attrStr,n)}function a(e){return this.options.indentBy.repeat(e)}function c(e){return!!e.startsWith(this.options.attributeNamePrefix)&&e.substr(this.attrPrefixLen)}o.prototype.build=function(e){return this.options.preserveOrder?s(e,this.options):(Array.isArray(e)&&this.options.arrayNodeName&&this.options.arrayNodeName.length>1&&(e={[this.options.arrayNodeName]:e}),this.j2x(e,0).val)},o.prototype.j2x=function(e,t){let n="",s="";for(let r in e)if(void 0===e[r]);else if(null===e[r])"?"===r[0]?s+=this.indentate(t)+"<"+r+"?"+this.tagEndChar:s+=this.indentate(t)+"<"+r+"/"+this.tagEndChar;else if(e[r]instanceof Date)s+=this.buildTextValNode(e[r],r,"",t);else if("object"!=typeof e[r]){const o=this.isAttribute(r);if(o)n+=this.buildAttrPairStr(o,""+e[r]);else if(r===this.options.textNodeName){let t=this.options.tagValueProcessor(r,""+e[r]);s+=this.replaceEntitiesValue(t)}else s+=this.buildTextValNode(e[r],r,"",t)}else if(Array.isArray(e[r])){const n=e[r].length;let o="";for(let i=0;i<n;i++){const n=e[r][i];void 0===n||(null===n?"?"===r[0]?s+=this.indentate(t)+"<"+r+"?"+this.tagEndChar:s+=this.indentate(t)+"<"+r+"/"+this.tagEndChar:"object"==typeof n?this.options.oneListGroup?o+=this.j2x(n,t+1).val:o+=this.processTextOrObjNode(n,r,t):o+=this.buildTextValNode(n,r,"",t))}this.options.oneListGroup&&(o=this.buildObjectNode(o,r,"",t)),s+=o}else if(this.options.attributesGroupName&&r===this.options.attributesGroupName){const t=Object.keys(e[r]),s=t.length;for(let o=0;o<s;o++)n+=this.buildAttrPairStr(t[o],""+e[r][t[o]])}else s+=this.processTextOrObjNode(e[r],r,t);return{attrStr:n,val:s}},o.prototype.buildAttrPairStr=function(e,t){return t=this.options.attributeValueProcessor(e,""+t),t=this.replaceEntitiesValue(t),this.options.suppressBooleanAttributes&&"true"===t?" "+e:" "+e+'="'+t+'"'},o.prototype.buildObjectNode=function(e,t,n,s){if(""===e)return"?"===t[0]?this.indentate(s)+"<"+t+n+"?"+this.tagEndChar:this.indentate(s)+"<"+t+n+this.closeTag(t)+this.tagEndChar;{let r="</"+t+this.tagEndChar,o="";return"?"===t[0]&&(o="?",r=""),n&&-1===e.indexOf("<")?this.indentate(s)+"<"+t+n+o+">"+e+r:!1!==this.options.commentPropName&&t===this.options.commentPropName&&0===o.length?this.indentate(s)+`\x3c!--${e}--\x3e`+this.newLine:this.indentate(s)+"<"+t+n+o+this.tagEndChar+e+this.indentate(s)+r}},o.prototype.closeTag=function(e){let t="";return-1!==this.options.unpairedTags.indexOf(e)?this.options.suppressUnpairedNode||(t="/"):t=this.options.suppressEmptyNode?"/":`></${e}`,t},o.prototype.buildTextValNode=function(e,t,n,s){if(!1!==this.options.cdataPropName&&t===this.options.cdataPropName)return this.indentate(s)+`<![CDATA[${e}]]>`+this.newLine;if(!1!==this.options.commentPropName&&t===this.options.commentPropName)return this.indentate(s)+`\x3c!--${e}--\x3e`+this.newLine;if("?"===t[0])return this.indentate(s)+"<"+t+n+"?"+this.tagEndChar;{let r=this.options.tagValueProcessor(t,e);return r=this.replaceEntitiesValue(r),""===r?this.indentate(s)+"<"+t+n+this.closeTag(t)+this.tagEndChar:this.indentate(s)+"<"+t+n+">"+r+"</"+t+this.tagEndChar}},o.prototype.replaceEntitiesValue=function(e){if(e&&e.length>0&&this.options.processEntities)for(let t=0;t<this.options.entities.length;t++){const n=this.options.entities[t];e=e.replace(n.regex,n.val)}return e},e.exports=o},2788:e=>{function t(e,i,a,c){let u="",l=!1;for(let d=0;d<e.length;d++){const p=e[d],h=n(p);let f="";if(f=0===a.length?h:`${a}.${h}`,h===i.textNodeName){let e=p[h];r(f,i)||(e=i.tagValueProcessor(h,e),e=o(e,i)),l&&(u+=c),u+=e,l=!1;continue}if(h===i.cdataPropName){l&&(u+=c),u+=`<![CDATA[${p[h][0][i.textNodeName]}]]>`,l=!1;continue}if(h===i.commentPropName){u+=c+`\x3c!--${p[h][0][i.textNodeName]}--\x3e`,l=!0;continue}if("?"===h[0]){const e=s(p[":@"],i),t="?xml"===h?"":c;let n=p[h][0][i.textNodeName];n=0!==n.length?" "+n:"",u+=t+`<${h}${n}${e}?>`,l=!0;continue}let m=c;""!==m&&(m+=i.indentBy);const g=c+`<${h}${s(p[":@"],i)}`,y=t(p[h],i,f,m);-1!==i.unpairedTags.indexOf(h)?i.suppressUnpairedNode?u+=g+">":u+=g+"/>":y&&0!==y.length||!i.suppressEmptyNode?y&&y.endsWith(">")?u+=g+`>${y}${c}</${h}>`:(u+=g+">",y&&""!==c&&(y.includes("/>")||y.includes("</"))?u+=c+i.indentBy+y+c:u+=y,u+=`</${h}>`):u+=g+"/>",l=!0}return u}function n(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function s(e,t){let n="";if(e&&!t.ignoreAttributes)for(let s in e){let r=t.attributeValueProcessor(s,e[s]);r=o(r,t),!0===r&&t.suppressBooleanAttributes?n+=` ${s.substr(t.attributeNamePrefix.length)}`:n+=` ${s.substr(t.attributeNamePrefix.length)}="${r}"`}return n}function r(e,t){let n=(e=e.substr(0,e.length-t.textNodeName.length-1)).substr(e.lastIndexOf(".")+1);for(let s in t.stopNodes)if(t.stopNodes[s]===e||t.stopNodes[s]==="*."+n)return!0;return!1}function o(e,t){if(e&&e.length>0&&t.processEntities)for(let n=0;n<t.entities.length;n++){const s=t.entities[n];e=e.replace(s.regex,s.val)}return e}e.exports=function(e,n){let s="";return n.format&&n.indentBy.length>0&&(s="\n"),t(e,n,"",s)}},9400:(e,t,n)=>{const s=n(5334);function r(e,t){let n="";for(;t<e.length&&"'"!==e[t]&&'"'!==e[t];t++)n+=e[t];if(n=n.trim(),-1!==n.indexOf(" "))throw new Error("External entites are not supported");const s=e[t++];let r="";for(;t<e.length&&e[t]!==s;t++)r+=e[t];return[n,r,t]}function o(e,t){return"!"===e[t+1]&&"-"===e[t+2]&&"-"===e[t+3]}function i(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"N"===e[t+3]&&"T"===e[t+4]&&"I"===e[t+5]&&"T"===e[t+6]&&"Y"===e[t+7]}function a(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"L"===e[t+3]&&"E"===e[t+4]&&"M"===e[t+5]&&"E"===e[t+6]&&"N"===e[t+7]&&"T"===e[t+8]}function c(e,t){return"!"===e[t+1]&&"A"===e[t+2]&&"T"===e[t+3]&&"T"===e[t+4]&&"L"===e[t+5]&&"I"===e[t+6]&&"S"===e[t+7]&&"T"===e[t+8]}function u(e,t){return"!"===e[t+1]&&"N"===e[t+2]&&"O"===e[t+3]&&"T"===e[t+4]&&"A"===e[t+5]&&"T"===e[t+6]&&"I"===e[t+7]&&"O"===e[t+8]&&"N"===e[t+9]}function l(e){if(s.isName(e))return e;throw new Error(`Invalid entity name ${e}`)}e.exports=function(e,t){const n={};if("O"!==e[t+3]||"C"!==e[t+4]||"T"!==e[t+5]||"Y"!==e[t+6]||"P"!==e[t+7]||"E"!==e[t+8])throw new Error("Invalid Tag instead of DOCTYPE");{t+=9;let s=1,d=!1,p=!1,h="";for(;t<e.length;t++)if("<"!==e[t]||p)if(">"===e[t]){if(p?"-"===e[t-1]&&"-"===e[t-2]&&(p=!1,s--):s--,0===s)break}else"["===e[t]?d=!0:h+=e[t];else{if(d&&i(e,t))t+=7,[entityName,val,t]=r(e,t+1),-1===val.indexOf("&")&&(n[l(entityName)]={regx:RegExp(`&${entityName};`,"g"),val});else if(d&&a(e,t))t+=8;else if(d&&c(e,t))t+=8;else if(d&&u(e,t))t+=9;else{if(!o)throw new Error("Invalid DOCTYPE");p=!0}s++,h=""}if(0!==s)throw new Error("Unclosed DOCTYPE")}return{entities:n,i:t}}},460:(e,t)=>{const n={preserveOrder:!1,attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0,eNotation:!0},tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1,transformTagName:!1,transformAttributeName:!1,updateTag:function(e,t,n){return e}};t.buildOptions=function(e){return Object.assign({},n,e)},t.defaultOptions=n},7680:(e,t,n)=>{"use strict";const s=n(5334),r=n(3832),o=n(9400),i=n(7983);function a(e){const t=Object.keys(e);for(let n=0;n<t.length;n++){const s=t[n];this.lastEntities[s]={regex:new RegExp("&"+s+";","g"),val:e[s]}}}function c(e,t,n,s,r,o,i){if(void 0!==e&&(this.options.trimValues&&!s&&(e=e.trim()),e.length>0)){i||(e=this.replaceEntitiesValue(e));const s=this.options.tagValueProcessor(t,e,n,r,o);return null==s?e:typeof s!=typeof e||s!==e?s:this.options.trimValues||e.trim()===e?x(e,this.options.parseTagValue,this.options.numberParseOptions):e}}function u(e){if(this.options.removeNSPrefix){const t=e.split(":"),n="/"===e.charAt(0)?"/":"";if("xmlns"===t[0])return"";2===t.length&&(e=n+t[1])}return e}"<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g,s.nameRegexp);const l=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?","gm");function d(e,t,n){if(!this.options.ignoreAttributes&&"string"==typeof e){const n=s.getAllMatches(e,l),r=n.length,o={};for(let e=0;e<r;e++){const s=this.resolveNameSpace(n[e][1]);let r=n[e][4],i=this.options.attributeNamePrefix+s;if(s.length)if(this.options.transformAttributeName&&(i=this.options.transformAttributeName(i)),"__proto__"===i&&(i="#__proto__"),void 0!==r){this.options.trimValues&&(r=r.trim()),r=this.replaceEntitiesValue(r);const e=this.options.attributeValueProcessor(s,r,t);o[i]=null==e?r:typeof e!=typeof r||e!==r?e:x(r,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(o[i]=!0)}if(!Object.keys(o).length)return;if(this.options.attributesGroupName){const e={};return e[this.options.attributesGroupName]=o,e}return o}}const p=function(e){e=e.replace(/\r\n?/g,"\n");const t=new r("!xml");let n=t,s="",i="";for(let a=0;a<e.length;a++)if("<"===e[a])if("/"===e[a+1]){const t=y(e,">",a,"Closing Tag is not closed.");let r=e.substring(a+2,t).trim();if(this.options.removeNSPrefix){const e=r.indexOf(":");-1!==e&&(r=r.substr(e+1))}this.options.transformTagName&&(r=this.options.transformTagName(r)),n&&(s=this.saveTextToParentTag(s,n,i));const o=i.substring(i.lastIndexOf(".")+1);if(r&&-1!==this.options.unpairedTags.indexOf(r))throw new Error(`Unpaired tag can not be used as closing tag: </${r}>`);let c=0;o&&-1!==this.options.unpairedTags.indexOf(o)?(c=i.lastIndexOf(".",i.lastIndexOf(".")-1),this.tagsNodeStack.pop()):c=i.lastIndexOf("."),i=i.substring(0,c),n=this.tagsNodeStack.pop(),s="",a=t}else if("?"===e[a+1]){let t=w(e,a,!1,"?>");if(!t)throw new Error("Pi Tag is not closed.");if(s=this.saveTextToParentTag(s,n,i),this.options.ignoreDeclaration&&"?xml"===t.tagName||this.options.ignorePiTags);else{const e=new r(t.tagName);e.add(this.options.textNodeName,""),t.tagName!==t.tagExp&&t.attrExpPresent&&(e[":@"]=this.buildAttributesMap(t.tagExp,i,t.tagName)),this.addChild(n,e,i)}a=t.closeIndex+1}else if("!--"===e.substr(a+1,3)){const t=y(e,"--\x3e",a+4,"Comment is not closed.");if(this.options.commentPropName){const r=e.substring(a+4,t-2);s=this.saveTextToParentTag(s,n,i),n.add(this.options.commentPropName,[{[this.options.textNodeName]:r}])}a=t}else if("!D"===e.substr(a+1,2)){const t=o(e,a);this.docTypeEntities=t.entities,a=t.i}else if("!["===e.substr(a+1,2)){const t=y(e,"]]>",a,"CDATA is not closed.")-2,r=e.substring(a+9,t);if(s=this.saveTextToParentTag(s,n,i),this.options.cdataPropName)n.add(this.options.cdataPropName,[{[this.options.textNodeName]:r}]);else{let e=this.parseTextData(r,n.tagname,i,!0,!1,!0);null==e&&(e=""),n.add(this.options.textNodeName,e)}a=t+2}else{let o=w(e,a,this.options.removeNSPrefix),c=o.tagName,u=o.tagExp,l=o.attrExpPresent,d=o.closeIndex;this.options.transformTagName&&(c=this.options.transformTagName(c)),n&&s&&"!xml"!==n.tagname&&(s=this.saveTextToParentTag(s,n,i,!1));const p=n;if(p&&-1!==this.options.unpairedTags.indexOf(p.tagname)&&(n=this.tagsNodeStack.pop(),i=i.substring(0,i.lastIndexOf("."))),c!==t.tagname&&(i+=i?"."+c:c),this.isItStopNode(this.options.stopNodes,i,c)){let t="";if(u.length>0&&u.lastIndexOf("/")===u.length-1)a=o.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(c))a=o.closeIndex;else{const n=this.readStopNodeData(e,c,d+1);if(!n)throw new Error(`Unexpected end of ${c}`);a=n.i,t=n.tagContent}const s=new r(c);c!==u&&l&&(s[":@"]=this.buildAttributesMap(u,i,c)),t&&(t=this.parseTextData(t,c,i,!0,l,!0,!0)),i=i.substr(0,i.lastIndexOf(".")),s.add(this.options.textNodeName,t),this.addChild(n,s,i)}else{if(u.length>0&&u.lastIndexOf("/")===u.length-1){"/"===c[c.length-1]?(c=c.substr(0,c.length-1),u=c):u=u.substr(0,u.length-1),this.options.transformTagName&&(c=this.options.transformTagName(c));const e=new r(c);c!==u&&l&&(e[":@"]=this.buildAttributesMap(u,i,c)),this.addChild(n,e,i),i=i.substr(0,i.lastIndexOf("."))}else{const e=new r(c);this.tagsNodeStack.push(n),c!==u&&l&&(e[":@"]=this.buildAttributesMap(u,i,c)),this.addChild(n,e,i),n=e}s="",a=d}}else s+=e[a];return t.child};function h(e,t,n){const s=this.options.updateTag(t.tagname,n,t[":@"]);!1===s||("string"==typeof s?(t.tagname=s,e.addChild(t)):e.addChild(t))}const f=function(e){if(this.options.processEntities){for(let t in this.docTypeEntities){const n=this.docTypeEntities[t];e=e.replace(n.regx,n.val)}for(let t in this.lastEntities){const n=this.lastEntities[t];e=e.replace(n.regex,n.val)}if(this.options.htmlEntities)for(let t in this.htmlEntities){const n=this.htmlEntities[t];e=e.replace(n.regex,n.val)}e=e.replace(this.ampEntity.regex,this.ampEntity.val)}return e};function m(e,t,n,s){return e&&(void 0===s&&(s=0===Object.keys(t.child).length),void 0!==(e=this.parseTextData(e,t.tagname,n,!1,!!t[":@"]&&0!==Object.keys(t[":@"]).length,s))&&""!==e&&t.add(this.options.textNodeName,e),e=""),e}function g(e,t,n){const s="*."+n;for(const n in e){const r=e[n];if(s===r||t===r)return!0}return!1}function y(e,t,n,s){const r=e.indexOf(t,n);if(-1===r)throw new Error(s);return r+t.length-1}function w(e,t,n,s=">"){const r=function(e,t,n=">"){let s,r="";for(let o=t;o<e.length;o++){let t=e[o];if(s)t===s&&(s="");else if('"'===t||"'"===t)s=t;else if(t===n[0]){if(!n[1])return{data:r,index:o};if(e[o+1]===n[1])return{data:r,index:o}}else"\t"===t&&(t=" ");r+=t}}(e,t+1,s);if(!r)return;let o=r.data;const i=r.index,a=o.search(/\s/);let c=o,u=!0;if(-1!==a&&(c=o.substr(0,a).replace(/\s\s*$/,""),o=o.substr(a+1)),n){const e=c.indexOf(":");-1!==e&&(c=c.substr(e+1),u=c!==r.data.substr(e+1))}return{tagName:c,tagExp:o,closeIndex:i,attrExpPresent:u}}function E(e,t,n){const s=n;let r=1;for(;n<e.length;n++)if("<"===e[n])if("/"===e[n+1]){const o=y(e,">",n,`${t} is not closed`);if(e.substring(n+2,o).trim()===t&&(r--,0===r))return{tagContent:e.substring(s,n),i:o};n=o}else if("?"===e[n+1])n=y(e,"?>",n+1,"StopNode is not closed.");else if("!--"===e.substr(n+1,3))n=y(e,"--\x3e",n+3,"StopNode is not closed.");else if("!["===e.substr(n+1,2))n=y(e,"]]>",n,"StopNode is not closed.")-2;else{const s=w(e,n,">");s&&((s&&s.tagName)===t&&"/"!==s.tagExp[s.tagExp.length-1]&&r++,n=s.closeIndex)}}function x(e,t,n){if(t&&"string"==typeof e){const t=e.trim();return"true"===t||"false"!==t&&i(e,n)}return s.isExist(e)?e:""}e.exports=class{constructor(e){this.options=e,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={apos:{regex:/&(apos|#39|#x27);/g,val:"'"},gt:{regex:/&(gt|#62|#x3E);/g,val:">"},lt:{regex:/&(lt|#60|#x3C);/g,val:"<"},quot:{regex:/&(quot|#34|#x22);/g,val:'"'}},this.ampEntity={regex:/&(amp|#38|#x26);/g,val:"&"},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:" "},cent:{regex:/&(cent|#162);/g,val:"¢"},pound:{regex:/&(pound|#163);/g,val:"£"},yen:{regex:/&(yen|#165);/g,val:"¥"},euro:{regex:/&(euro|#8364);/g,val:"€"},copyright:{regex:/&(copy|#169);/g,val:"©"},reg:{regex:/&(reg|#174);/g,val:"®"},inr:{regex:/&(inr|#8377);/g,val:"₹"}},this.addExternalEntities=a,this.parseXml=p,this.parseTextData=c,this.resolveNameSpace=u,this.buildAttributesMap=d,this.isItStopNode=g,this.replaceEntitiesValue=f,this.readStopNodeData=E,this.saveTextToParentTag=m,this.addChild=h}}},2923:(e,t,n)=>{const{buildOptions:s}=n(460),r=n(7680),{prettify:o}=n(5629),i=n(3918);e.exports=class{constructor(e){this.externalEntities={},this.options=s(e)}parse(e,t){if("string"==typeof e);else{if(!e.toString)throw new Error("XML data is accepted in String or Bytes[] form.");e=e.toString()}if(t){!0===t&&(t={});const n=i.validate(e,t);if(!0!==n)throw Error(`${n.err.msg}:${n.err.line}:${n.err.col}`)}const n=new r(this.options);n.addExternalEntities(this.externalEntities);const s=n.parseXml(e);return this.options.preserveOrder||void 0===s?s:o(s,this.options)}addEntity(e,t){if(-1!==t.indexOf("&"))throw new Error("Entity value can't have '&'");if(-1!==e.indexOf("&")||-1!==e.indexOf(";"))throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");if("&"===t)throw new Error("An entity with value '&' is not permitted");this.externalEntities[e]=t}}},5629:(e,t)=>{"use strict";function n(e,t,i){let a;const c={};for(let u=0;u<e.length;u++){const l=e[u],d=s(l);let p="";if(p=void 0===i?d:i+"."+d,d===t.textNodeName)void 0===a?a=l[d]:a+=""+l[d];else{if(void 0===d)continue;if(l[d]){let e=n(l[d],t,p);const s=o(e,t);l[":@"]?r(e,l[":@"],p,t):1!==Object.keys(e).length||void 0===e[t.textNodeName]||t.alwaysCreateTextNode?0===Object.keys(e).length&&(t.alwaysCreateTextNode?e[t.textNodeName]="":e=""):e=e[t.textNodeName],void 0!==c[d]&&c.hasOwnProperty(d)?(Array.isArray(c[d])||(c[d]=[c[d]]),c[d].push(e)):t.isArray(d,p,s)?c[d]=[e]:c[d]=e}}}return"string"==typeof a?a.length>0&&(c[t.textNodeName]=a):void 0!==a&&(c[t.textNodeName]=a),c}function s(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function r(e,t,n,s){if(t){const r=Object.keys(t),o=r.length;for(let i=0;i<o;i++){const o=r[i];s.isArray(o,n+"."+o,!0,!0)?e[o]=[t[o]]:e[o]=t[o]}}}function o(e,t){const{textNodeName:n}=t,s=Object.keys(e).length;return 0===s||!(1!==s||!e[n]&&"boolean"!=typeof e[n]&&0!==e[n])}t.prettify=function(e,t){return n(e,t)}},3832:e=>{"use strict";e.exports=class{constructor(e){this.tagname=e,this.child=[],this[":@"]={}}add(e,t){"__proto__"===e&&(e="#__proto__"),this.child.push({[e]:t})}addChild(e){"__proto__"===e.tagname&&(e.tagname="#__proto__"),e[":@"]&&Object.keys(e[":@"]).length>0?this.child.push({[e.tagname]:e.child,":@":e[":@"]}):this.child.push({[e.tagname]:e.child})}}},7983:e=>{const t=/^[-+]?0x[a-fA-F0-9]+$/,n=/^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const s={hex:!0,leadingZeros:!0,decimalPoint:".",eNotation:!0};e.exports=function(e,r={}){if(r=Object.assign({},s,r),!e||"string"!=typeof e)return e;let o=e.trim();if(void 0!==r.skipLike&&r.skipLike.test(o))return e;if(r.hex&&t.test(o))return Number.parseInt(o,16);{const t=n.exec(o);if(t){const n=t[1],s=t[2];let a=(i=t[3])&&-1!==i.indexOf(".")?("."===(i=i.replace(/0+$/,""))?i="0":"."===i[0]?i="0"+i:"."===i[i.length-1]&&(i=i.substr(0,i.length-1)),i):i;const c=t[4]||t[6];if(!r.leadingZeros&&s.length>0&&n&&"."!==o[2])return e;if(!r.leadingZeros&&s.length>0&&!n&&"."!==o[1])return e;{const t=Number(o),i=""+t;return-1!==i.search(/[eE]/)||c?r.eNotation?t:e:-1!==o.indexOf(".")?"0"===i&&""===a||i===a||n&&i==="-"+a?t:e:s?a===i||n+a===i?t:e:o===i||o===n+i?t:e}}return e}var i}},181:e=>{"use strict";e.exports=require("buffer")},5317:e=>{"use strict";e.exports=require("child_process")},6982:e=>{"use strict";e.exports=require("crypto")},9896:e=>{"use strict";e.exports=require("fs")},1943:e=>{"use strict";e.exports=require("fs/promises")},8611:e=>{"use strict";e.exports=require("http")},857:e=>{"use strict";e.exports=require("os")},2203:e=>{"use strict";e.exports=require("stream")},7016:e=>{"use strict";e.exports=require("url")},9023:e=>{"use strict";e.exports=require("util")}},n={};function s(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={exports:{}};return t[e](o,o.exports,s),o.exports}s.m=t,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,n)=>(s.f[n](e,t),t)),[])),s.u=e=>e+".js",s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},e={167:1},s.f.require=(t,n)=>{e[t]||(t=>{var n=t.modules,r=t.ids,o=t.runtime;for(var i in n)s.o(n,i)&&(s.m[i]=n[i]);o&&o(s);for(var a=0;a<r.length;a++)e[r[a]]=1})(require("./"+s.u(t)))};var r={};(()=>{"use strict";s.r(r),s.d(r,{default:()=>Ql});var e=s(1095),t=s(9359),n=s(8377),o=s(1731),i=s(7122),a=s(4966),c=s(649),u=s(9389),l=s(1010),d=s(8156),p=s(2211),h=s(7135);const f=async(e,t,n)=>({operation:(0,h.u)(t).operation,region:await(0,h.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),m=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"cloudtrail",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},g={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}};var y=s(2458),w=s(8257),E=s(3058),x=s(1701),b=s(1881),v=s(4029),S=s(7809),P=s(3323),I=s(1228),O=s(2641),$=s(4572),A=s(3197),N=s(3875);const M="required",T="fn",C="argv",R="ref",D="isSet",k="booleanEquals",j="error",F="endpoint",q="tree",z="PartitionResult",_="stringEquals",U={[M]:!1,type:"String"},L={[M]:!0,default:!1,type:"Boolean"},K={[R]:"Endpoint"},V={[T]:k,[C]:[{[R]:"UseFIPS"},!0]},B={[T]:k,[C]:[{[R]:"UseDualStack"},!0]},H={},W={[R]:"Region"},G={[T]:"getAttr",[C]:[{[R]:z},"supportsFIPS"]},Q={[T]:k,[C]:[!0,{[T]:"getAttr",[C]:[{[R]:z},"supportsDualStack"]}]},Z=[V],J=[B],X=[W],Y={version:"1.0",parameters:{Region:U,UseDualStack:L,UseFIPS:L,Endpoint:U},rules:[{conditions:[{[T]:D,[C]:[K]}],rules:[{conditions:Z,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:j},{conditions:J,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:j},{endpoint:{url:K,properties:H,headers:H},type:F}],type:q},{conditions:[{[T]:D,[C]:X}],rules:[{conditions:[{[T]:"aws.partition",[C]:X,assign:z}],rules:[{conditions:[V,B],rules:[{conditions:[{[T]:k,[C]:[!0,G]},Q],rules:[{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:H,headers:H},type:F}],type:q},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:j}],type:q},{conditions:Z,rules:[{conditions:[{[T]:k,[C]:[G,!0]}],rules:[{conditions:[{[T]:_,[C]:[W,"us-gov-east-1"]}],endpoint:{url:"https://cloudtrail.us-gov-east-1.amazonaws.com",properties:H,headers:H},type:F},{conditions:[{[T]:_,[C]:[W,"us-gov-west-1"]}],endpoint:{url:"https://cloudtrail.us-gov-west-1.amazonaws.com",properties:H,headers:H},type:F},{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dnsSuffix}",properties:H,headers:H},type:F}],type:q},{error:"FIPS is enabled but this partition does not support FIPS",type:j}],type:q},{conditions:J,rules:[{conditions:[Q],rules:[{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:H,headers:H},type:F}],type:q},{error:"DualStack is enabled but this partition does not support DualStack",type:j}],type:q},{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dnsSuffix}",properties:H,headers:H},type:F}],type:q}],type:q},{error:"Invalid Configuration: Missing Region",type:j}]},ee=(e,t={})=>(0,N.sO)(Y,{endpointParams:e,logger:t.logger});var te=s(4321);var ne=s(6928),se=s(5479);const re=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}};class oe extends d.Kj{constructor(...[s]){const r=(e=>{(0,d.I9)(process.version);const t=(0,te.I)(e),n=()=>t().then(d.lT),s=(e=>({apiVersion:"2013-11-01",base64Decoder:e?.base64Decoder??$.E,base64Encoder:e?.base64Encoder??$.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??ee,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??m,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new I.f}],logger:e?.logger??new d.N4,serviceId:e?.serviceId??"CloudTrail",urlParser:e?.urlParser??O.D,utf8Decoder:e?.utf8Decoder??A.ar,utf8Encoder:e?.utf8Encoder??A.Pq}))(e);return(0,y.I)(process.version),{...s,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??S.n,credentialDefaultProvider:e?.credentialDefaultProvider??w.defaultProvider,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,E.mJ)({serviceId:s.serviceId,clientVersion:"3.515.0"}),maxAttempts:e?.maxAttempts??(0,b.Z)(l.qs),region:e?.region??(0,b.Z)(i.GG,i.zH),requestHandler:e?.requestHandler??new v.$c(n),retryMode:e?.retryMode??(0,b.Z)({...l.kN,default:async()=>(await n()).retryMode||P.L0}),sha256:e?.sha256??x.V.bind(null,"sha256"),streamCollector:e?.streamCollector??v.kv,useDualstackEndpoint:e?.useDualstackEndpoint??(0,b.Z)(i.e$),useFipsEndpoint:e?.useFipsEndpoint??(0,b.Z)(i.Ko)}})(s||{}),h=(f=r,{...f,useDualstackEndpoint:f.useDualstackEndpoint??!1,useFipsEndpoint:f.useFipsEndpoint??!1,defaultSigningName:"cloudtrail"});var f;const g=(0,i.TD)(h),N=(0,u.Co)(g),M=(0,l.$z)(N),T=(0,e.OV)(M);var C;const R=((e,t)=>{const n={...(0,ne.Rq)(e),...(0,d.xA)(e),...(0,se.eS)(e),...re(e)};return t.forEach((e=>e.configure(n))),{...e,...(0,ne.$3)(n),...(0,d.uv)(n),...(0,se.jt)(n),...(s=n,{httpAuthSchemes:s.httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()})};var s})((C=(0,o.Dc)(T),{...(0,p.h)(C)}),s?.extensions||[]);super(R),this.config=R,this.middlewareStack.use((0,l.ey)(this.config)),this.middlewareStack.use((0,c.vK)(this.config)),this.middlewareStack.use((0,e.TC)(this.config)),this.middlewareStack.use((0,t.Y7)(this.config)),this.middlewareStack.use((0,n.n4)(this.config)),this.middlewareStack.use((0,o.sM)(this.config)),this.middlewareStack.use((0,a.wB)(this.config,{httpAuthSchemeParametersProvider:this.getDefaultHttpAuthSchemeParametersProvider(),identityProviderConfigProvider:this.getIdentityProviderConfigProvider()})),this.middlewareStack.use((0,a.lW)(this.config))}destroy(){super.destroy()}getDefaultHttpAuthSchemeParametersProvider(){return f}getIdentityProviderConfigProvider(){return async e=>new a.h$({"aws.auth#sigv4":e.credentials})}}var ie=s(1208);class ae extends d.TJ{constructor(e){super(e),Object.setPrototypeOf(this,ae.prototype)}}class ce extends ae{constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,ce.prototype),this.Message=e.Message}}class ue extends ae{constructor(e){super({name:"AccountHasOngoingImportException",$fault:"client",...e}),this.name="AccountHasOngoingImportException",this.$fault="client",Object.setPrototypeOf(this,ue.prototype),this.Message=e.Message}}class le extends ae{constructor(e){super({name:"AccountNotFoundException",$fault:"client",...e}),this.name="AccountNotFoundException",this.$fault="client",Object.setPrototypeOf(this,le.prototype),this.Message=e.Message}}class de extends ae{constructor(e){super({name:"AccountNotRegisteredException",$fault:"client",...e}),this.name="AccountNotRegisteredException",this.$fault="client",Object.setPrototypeOf(this,de.prototype),this.Message=e.Message}}class pe extends ae{constructor(e){super({name:"AccountRegisteredException",$fault:"client",...e}),this.name="AccountRegisteredException",this.$fault="client",Object.setPrototypeOf(this,pe.prototype),this.Message=e.Message}}class he extends ae{constructor(e){super({name:"ChannelARNInvalidException",$fault:"client",...e}),this.name="ChannelARNInvalidException",this.$fault="client",Object.setPrototypeOf(this,he.prototype),this.Message=e.Message}}class fe extends ae{constructor(e){super({name:"ChannelNotFoundException",$fault:"client",...e}),this.name="ChannelNotFoundException",this.$fault="client",Object.setPrototypeOf(this,fe.prototype),this.Message=e.Message}}class me extends ae{constructor(e){super({name:"CloudTrailARNInvalidException",$fault:"client",...e}),this.name="CloudTrailARNInvalidException",this.$fault="client",Object.setPrototypeOf(this,me.prototype),this.Message=e.Message}}class ge extends ae{constructor(e){super({name:"ConflictException",$fault:"client",...e}),this.name="ConflictException",this.$fault="client",Object.setPrototypeOf(this,ge.prototype),this.Message=e.Message}}class ye extends ae{constructor(e){super({name:"EventDataStoreARNInvalidException",$fault:"client",...e}),this.name="EventDataStoreARNInvalidException",this.$fault="client",Object.setPrototypeOf(this,ye.prototype),this.Message=e.Message}}class we extends ae{constructor(e){super({name:"EventDataStoreNotFoundException",$fault:"client",...e}),this.name="EventDataStoreNotFoundException",this.$fault="client",Object.setPrototypeOf(this,we.prototype),this.Message=e.Message}}class Ee extends ae{constructor(e){super({name:"InactiveEventDataStoreException",$fault:"client",...e}),this.name="InactiveEventDataStoreException",this.$fault="client",Object.setPrototypeOf(this,Ee.prototype),this.Message=e.Message}}class xe extends ae{constructor(e){super({name:"InvalidTagParameterException",$fault:"client",...e}),this.name="InvalidTagParameterException",this.$fault="client",Object.setPrototypeOf(this,xe.prototype),this.Message=e.Message}}class be extends ae{constructor(e){super({name:"InvalidTrailNameException",$fault:"client",...e}),this.name="InvalidTrailNameException",this.$fault="client",Object.setPrototypeOf(this,be.prototype),this.Message=e.Message}}class ve extends ae{constructor(e){super({name:"NoManagementAccountSLRExistsException",$fault:"client",...e}),this.name="NoManagementAccountSLRExistsException",this.$fault="client",Object.setPrototypeOf(this,ve.prototype),this.Message=e.Message}}class Se extends ae{constructor(e){super({name:"NotOrganizationMasterAccountException",$fault:"client",...e}),this.name="NotOrganizationMasterAccountException",this.$fault="client",Object.setPrototypeOf(this,Se.prototype),this.Message=e.Message}}class Pe extends ae{constructor(e){super({name:"OperationNotPermittedException",$fault:"client",...e}),this.name="OperationNotPermittedException",this.$fault="client",Object.setPrototypeOf(this,Pe.prototype),this.Message=e.Message}}class Ie extends ae{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Ie.prototype),this.Message=e.Message}}class Oe extends ae{constructor(e){super({name:"ResourceTypeNotSupportedException",$fault:"client",...e}),this.name="ResourceTypeNotSupportedException",this.$fault="client",Object.setPrototypeOf(this,Oe.prototype),this.Message=e.Message}}class $e extends ae{constructor(e){super({name:"TagsLimitExceededException",$fault:"client",...e}),this.name="TagsLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,$e.prototype),this.Message=e.Message}}class Ae extends ae{constructor(e){super({name:"UnsupportedOperationException",$fault:"client",...e}),this.name="UnsupportedOperationException",this.$fault="client",Object.setPrototypeOf(this,Ae.prototype),this.Message=e.Message}}class Ne extends ae{constructor(e){super({name:"InactiveQueryException",$fault:"client",...e}),this.name="InactiveQueryException",this.$fault="client",Object.setPrototypeOf(this,Ne.prototype),this.Message=e.Message}}class Me extends ae{constructor(e){super({name:"InvalidParameterException",$fault:"client",...e}),this.name="InvalidParameterException",this.$fault="client",Object.setPrototypeOf(this,Me.prototype),this.Message=e.Message}}class Te extends ae{constructor(e){super({name:"QueryIdNotFoundException",$fault:"client",...e}),this.name="QueryIdNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Te.prototype),this.Message=e.Message}}class Ce extends ae{constructor(e){super({name:"CannotDelegateManagementAccountException",$fault:"client",...e}),this.name="CannotDelegateManagementAccountException",this.$fault="client",Object.setPrototypeOf(this,Ce.prototype),this.Message=e.Message}}class Re extends ae{constructor(e){super({name:"ChannelAlreadyExistsException",$fault:"client",...e}),this.name="ChannelAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,Re.prototype),this.Message=e.Message}}class De extends ae{constructor(e){super({name:"ChannelExistsForEDSException",$fault:"client",...e}),this.name="ChannelExistsForEDSException",this.$fault="client",Object.setPrototypeOf(this,De.prototype),this.Message=e.Message}}class ke extends ae{constructor(e){super({name:"ChannelMaxLimitExceededException",$fault:"client",...e}),this.name="ChannelMaxLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,ke.prototype),this.Message=e.Message}}class je extends ae{constructor(e){super({name:"InvalidEventDataStoreCategoryException",$fault:"client",...e}),this.name="InvalidEventDataStoreCategoryException",this.$fault="client",Object.setPrototypeOf(this,je.prototype),this.Message=e.Message}}class Fe extends ae{constructor(e){super({name:"InvalidSourceException",$fault:"client",...e}),this.name="InvalidSourceException",this.$fault="client",Object.setPrototypeOf(this,Fe.prototype),this.Message=e.Message}}class qe extends ae{constructor(e){super({name:"CloudTrailAccessNotEnabledException",$fault:"client",...e}),this.name="CloudTrailAccessNotEnabledException",this.$fault="client",Object.setPrototypeOf(this,qe.prototype),this.Message=e.Message}}class ze extends ae{constructor(e){super({name:"EventDataStoreAlreadyExistsException",$fault:"client",...e}),this.name="EventDataStoreAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,ze.prototype),this.Message=e.Message}}class _e extends ae{constructor(e){super({name:"EventDataStoreMaxLimitExceededException",$fault:"client",...e}),this.name="EventDataStoreMaxLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,_e.prototype),this.Message=e.Message}}class Ue extends ae{constructor(e){super({name:"InsufficientDependencyServiceAccessPermissionException",$fault:"client",...e}),this.name="InsufficientDependencyServiceAccessPermissionException",this.$fault="client",Object.setPrototypeOf(this,Ue.prototype),this.Message=e.Message}}class Le extends ae{constructor(e){super({name:"InsufficientEncryptionPolicyException",$fault:"client",...e}),this.name="InsufficientEncryptionPolicyException",this.$fault="client",Object.setPrototypeOf(this,Le.prototype),this.Message=e.Message}}class Ke extends ae{constructor(e){super({name:"InvalidEventSelectorsException",$fault:"client",...e}),this.name="InvalidEventSelectorsException",this.$fault="client",Object.setPrototypeOf(this,Ke.prototype),this.Message=e.Message}}class Ve extends ae{constructor(e){super({name:"InvalidKmsKeyIdException",$fault:"client",...e}),this.name="InvalidKmsKeyIdException",this.$fault="client",Object.setPrototypeOf(this,Ve.prototype),this.Message=e.Message}}class Be extends ae{constructor(e){super({name:"KmsException",$fault:"client",...e}),this.name="KmsException",this.$fault="client",Object.setPrototypeOf(this,Be.prototype),this.Message=e.Message}}class He extends ae{constructor(e){super({name:"KmsKeyNotFoundException",$fault:"client",...e}),this.name="KmsKeyNotFoundException",this.$fault="client",Object.setPrototypeOf(this,He.prototype),this.Message=e.Message}}class We extends ae{constructor(e){super({name:"OrganizationNotInAllFeaturesModeException",$fault:"client",...e}),this.name="OrganizationNotInAllFeaturesModeException",this.$fault="client",Object.setPrototypeOf(this,We.prototype),this.Message=e.Message}}class Ge extends ae{constructor(e){super({name:"OrganizationsNotInUseException",$fault:"client",...e}),this.name="OrganizationsNotInUseException",this.$fault="client",Object.setPrototypeOf(this,Ge.prototype),this.Message=e.Message}}class Qe extends ae{constructor(e){super({name:"CloudTrailInvalidClientTokenIdException",$fault:"client",...e}),this.name="CloudTrailInvalidClientTokenIdException",this.$fault="client",Object.setPrototypeOf(this,Qe.prototype),this.Message=e.Message}}class Ze extends ae{constructor(e){super({name:"CloudWatchLogsDeliveryUnavailableException",$fault:"client",...e}),this.name="CloudWatchLogsDeliveryUnavailableException",this.$fault="client",Object.setPrototypeOf(this,Ze.prototype),this.Message=e.Message}}class Je extends ae{constructor(e){super({name:"InsufficientS3BucketPolicyException",$fault:"client",...e}),this.name="InsufficientS3BucketPolicyException",this.$fault="client",Object.setPrototypeOf(this,Je.prototype),this.Message=e.Message}}class Xe extends ae{constructor(e){super({name:"InsufficientSnsTopicPolicyException",$fault:"client",...e}),this.name="InsufficientSnsTopicPolicyException",this.$fault="client",Object.setPrototypeOf(this,Xe.prototype),this.Message=e.Message}}class Ye extends ae{constructor(e){super({name:"InvalidCloudWatchLogsLogGroupArnException",$fault:"client",...e}),this.name="InvalidCloudWatchLogsLogGroupArnException",this.$fault="client",Object.setPrototypeOf(this,Ye.prototype),this.Message=e.Message}}class et extends ae{constructor(e){super({name:"InvalidCloudWatchLogsRoleArnException",$fault:"client",...e}),this.name="InvalidCloudWatchLogsRoleArnException",this.$fault="client",Object.setPrototypeOf(this,et.prototype),this.Message=e.Message}}class tt extends ae{constructor(e){super({name:"InvalidParameterCombinationException",$fault:"client",...e}),this.name="InvalidParameterCombinationException",this.$fault="client",Object.setPrototypeOf(this,tt.prototype),this.Message=e.Message}}class nt extends ae{constructor(e){super({name:"InvalidS3BucketNameException",$fault:"client",...e}),this.name="InvalidS3BucketNameException",this.$fault="client",Object.setPrototypeOf(this,nt.prototype),this.Message=e.Message}}class st extends ae{constructor(e){super({name:"InvalidS3PrefixException",$fault:"client",...e}),this.name="InvalidS3PrefixException",this.$fault="client",Object.setPrototypeOf(this,st.prototype),this.Message=e.Message}}class rt extends ae{constructor(e){super({name:"InvalidSnsTopicNameException",$fault:"client",...e}),this.name="InvalidSnsTopicNameException",this.$fault="client",Object.setPrototypeOf(this,rt.prototype),this.Message=e.Message}}class ot extends ae{constructor(e){super({name:"KmsKeyDisabledException",$fault:"client",...e}),this.name="KmsKeyDisabledException",this.$fault="client",Object.setPrototypeOf(this,ot.prototype),this.Message=e.Message}}class it extends ae{constructor(e){super({name:"MaximumNumberOfTrailsExceededException",$fault:"client",...e}),this.name="MaximumNumberOfTrailsExceededException",this.$fault="client",Object.setPrototypeOf(this,it.prototype),this.Message=e.Message}}class at extends ae{constructor(e){super({name:"S3BucketDoesNotExistException",$fault:"client",...e}),this.name="S3BucketDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,at.prototype),this.Message=e.Message}}class ct extends ae{constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),this.name="ThrottlingException",this.$fault="client",Object.setPrototypeOf(this,ct.prototype),this.Message=e.Message}}class ut extends ae{constructor(e){super({name:"TrailAlreadyExistsException",$fault:"client",...e}),this.name="TrailAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,ut.prototype),this.Message=e.Message}}class lt extends ae{constructor(e){super({name:"TrailNotProvidedException",$fault:"client",...e}),this.name="TrailNotProvidedException",this.$fault="client",Object.setPrototypeOf(this,lt.prototype),this.Message=e.Message}}class dt extends ae{constructor(e){super({name:"EventDataStoreFederationEnabledException",$fault:"client",...e}),this.name="EventDataStoreFederationEnabledException",this.$fault="client",Object.setPrototypeOf(this,dt.prototype),this.Message=e.Message}}class pt extends ae{constructor(e){super({name:"EventDataStoreHasOngoingImportException",$fault:"client",...e}),this.name="EventDataStoreHasOngoingImportException",this.$fault="client",Object.setPrototypeOf(this,pt.prototype),this.Message=e.Message}}class ht extends ae{constructor(e){super({name:"EventDataStoreTerminationProtectedException",$fault:"client",...e}),this.name="EventDataStoreTerminationProtectedException",this.$fault="client",Object.setPrototypeOf(this,ht.prototype),this.Message=e.Message}}class ft extends ae{constructor(e){super({name:"ResourceARNNotValidException",$fault:"client",...e}),this.name="ResourceARNNotValidException",this.$fault="client",Object.setPrototypeOf(this,ft.prototype),this.Message=e.Message}}class mt extends ae{constructor(e){super({name:"ResourcePolicyNotFoundException",$fault:"client",...e}),this.name="ResourcePolicyNotFoundException",this.$fault="client",Object.setPrototypeOf(this,mt.prototype),this.Message=e.Message}}class gt extends ae{constructor(e){super({name:"InvalidHomeRegionException",$fault:"client",...e}),this.name="InvalidHomeRegionException",this.$fault="client",Object.setPrototypeOf(this,gt.prototype),this.Message=e.Message}}class yt extends ae{constructor(e){super({name:"TrailNotFoundException",$fault:"client",...e}),this.name="TrailNotFoundException",this.$fault="client",Object.setPrototypeOf(this,yt.prototype),this.Message=e.Message}}class wt extends ae{constructor(e){super({name:"NotOrganizationManagementAccountException",$fault:"client",...e}),this.name="NotOrganizationManagementAccountException",this.$fault="client",Object.setPrototypeOf(this,wt.prototype),this.Message=e.Message}}class Et extends ae{constructor(e){super({name:"ConcurrentModificationException",$fault:"client",...e}),this.name="ConcurrentModificationException",this.$fault="client",Object.setPrototypeOf(this,Et.prototype),this.Message=e.Message}}class xt extends ae{constructor(e){super({name:"ImportNotFoundException",$fault:"client",...e}),this.name="ImportNotFoundException",this.$fault="client",Object.setPrototypeOf(this,xt.prototype),this.Message=e.Message}}class bt extends ae{constructor(e){super({name:"InsightNotEnabledException",$fault:"client",...e}),this.name="InsightNotEnabledException",this.$fault="client",Object.setPrototypeOf(this,bt.prototype),this.Message=e.Message}}class vt extends ae{constructor(e){super({name:"InvalidMaxResultsException",$fault:"client",...e}),this.name="InvalidMaxResultsException",this.$fault="client",Object.setPrototypeOf(this,vt.prototype),this.Message=e.Message}}class St extends ae{constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),this.name="InvalidNextTokenException",this.$fault="client",Object.setPrototypeOf(this,St.prototype),this.Message=e.Message}}class Pt extends ae{constructor(e){super({name:"InvalidTimeRangeException",$fault:"client",...e}),this.name="InvalidTimeRangeException",this.$fault="client",Object.setPrototypeOf(this,Pt.prototype),this.Message=e.Message}}class It extends ae{constructor(e){super({name:"InvalidTokenException",$fault:"client",...e}),this.name="InvalidTokenException",this.$fault="client",Object.setPrototypeOf(this,It.prototype),this.Message=e.Message}}class Ot extends ae{constructor(e){super({name:"InvalidDateRangeException",$fault:"client",...e}),this.name="InvalidDateRangeException",this.$fault="client",Object.setPrototypeOf(this,Ot.prototype),this.Message=e.Message}}class $t extends ae{constructor(e){super({name:"InvalidQueryStatusException",$fault:"client",...e}),this.name="InvalidQueryStatusException",this.$fault="client",Object.setPrototypeOf(this,$t.prototype),this.Message=e.Message}}class At extends ae{constructor(e){super({name:"InvalidEventCategoryException",$fault:"client",...e}),this.name="InvalidEventCategoryException",this.$fault="client",Object.setPrototypeOf(this,At.prototype),this.Message=e.Message}}class Nt extends ae{constructor(e){super({name:"InvalidLookupAttributesException",$fault:"client",...e}),this.name="InvalidLookupAttributesException",this.$fault="client",Object.setPrototypeOf(this,Nt.prototype),this.Message=e.Message}}class Mt extends ae{constructor(e){super({name:"InvalidInsightSelectorsException",$fault:"client",...e}),this.name="InvalidInsightSelectorsException",this.$fault="client",Object.setPrototypeOf(this,Mt.prototype),this.Message=e.Message}}class Tt extends ae{constructor(e){super({name:"ResourcePolicyNotValidException",$fault:"client",...e}),this.name="ResourcePolicyNotValidException",this.$fault="client",Object.setPrototypeOf(this,Tt.prototype),this.Message=e.Message}}class Ct extends ae{constructor(e){super({name:"DelegatedAdminAccountLimitExceededException",$fault:"client",...e}),this.name="DelegatedAdminAccountLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,Ct.prototype),this.Message=e.Message}}class Rt extends ae{constructor(e){super({name:"InvalidEventDataStoreStatusException",$fault:"client",...e}),this.name="InvalidEventDataStoreStatusException",this.$fault="client",Object.setPrototypeOf(this,Rt.prototype),this.Message=e.Message}}class Dt extends ae{constructor(e){super({name:"InvalidImportSourceException",$fault:"client",...e}),this.name="InvalidImportSourceException",this.$fault="client",Object.setPrototypeOf(this,Dt.prototype),this.Message=e.Message}}class kt extends ae{constructor(e){super({name:"InvalidQueryStatementException",$fault:"client",...e}),this.name="InvalidQueryStatementException",this.$fault="client",Object.setPrototypeOf(this,kt.prototype),this.Message=e.Message}}class jt extends ae{constructor(e){super({name:"MaxConcurrentQueriesException",$fault:"client",...e}),this.name="MaxConcurrentQueriesException",this.$fault="client",Object.setPrototypeOf(this,jt.prototype),this.Message=e.Message}}const Ft=async(e,t)=>{const n={"content-type":"application/x-amz-json-1.1","x-amz-target":`CloudTrail_20131101.${"LookupEvents"}`};let s;return s=JSON.stringify(gs(e,t)),xs(t,n,"/",void 0,s)},qt=async(e,t)=>{if(e.statusCode>=300)return zt(e,t);const n=await bs(e.body,t);let s={};return s=ys(n,t),{$metadata:ws(e),...s}},zt=async(e,t)=>{const n={...e,body:await vs(e.body,t)},s=Ss(e,n.body);switch(s){case"ChannelARNInvalidException":case"com.amazonaws.cloudtrail#ChannelARNInvalidException":throw await Wt(n,t);case"ChannelNotFoundException":case"com.amazonaws.cloudtrail#ChannelNotFoundException":throw await Zt(n,t);case"CloudTrailARNInvalidException":case"com.amazonaws.cloudtrail#CloudTrailARNInvalidException":throw await Xt(n,t);case"ConflictException":case"com.amazonaws.cloudtrail#ConflictException":throw await nn(n,t);case"EventDataStoreARNInvalidException":case"com.amazonaws.cloudtrail#EventDataStoreARNInvalidException":throw await on(n,t);case"EventDataStoreNotFoundException":case"com.amazonaws.cloudtrail#EventDataStoreNotFoundException":throw await ln(n,t);case"InactiveEventDataStoreException":case"com.amazonaws.cloudtrail#InactiveEventDataStoreException":throw await hn(n,t);case"InvalidTagParameterException":case"com.amazonaws.cloudtrail#InvalidTagParameterException":throw await Ln(n,t);case"InvalidTrailNameException":case"com.amazonaws.cloudtrail#InvalidTrailNameException":throw await Bn(n,t);case"NoManagementAccountSLRExistsException":case"com.amazonaws.cloudtrail#NoManagementAccountSLRExistsException":throw await Jn(n,t);case"NotOrganizationMasterAccountException":case"com.amazonaws.cloudtrail#NotOrganizationMasterAccountException":throw await Yn(n,t);case"OperationNotPermittedException":case"com.amazonaws.cloudtrail#OperationNotPermittedException":throw await es(n,t);case"ResourceNotFoundException":case"com.amazonaws.cloudtrail#ResourceNotFoundException":throw await os(n,t);case"ResourceTypeNotSupportedException":case"com.amazonaws.cloudtrail#ResourceTypeNotSupportedException":throw await cs(n,t);case"TagsLimitExceededException":case"com.amazonaws.cloudtrail#TagsLimitExceededException":throw await ls(n,t);case"UnsupportedOperationException":case"com.amazonaws.cloudtrail#UnsupportedOperationException":throw await ms(n,t);case"InactiveQueryException":case"com.amazonaws.cloudtrail#InactiveQueryException":throw await fn(n,t);case"InvalidParameterException":case"com.amazonaws.cloudtrail#InvalidParameterException":throw await kn(n,t);case"QueryIdNotFoundException":case"com.amazonaws.cloudtrail#QueryIdNotFoundException":throw await ss(n,t);case"ChannelAlreadyExistsException":case"com.amazonaws.cloudtrail#ChannelAlreadyExistsException":throw await Ht(n,t);case"ChannelMaxLimitExceededException":case"com.amazonaws.cloudtrail#ChannelMaxLimitExceededException":throw await Qt(n,t);case"InvalidEventDataStoreCategoryException":case"com.amazonaws.cloudtrail#InvalidEventDataStoreCategoryException":throw await Pn(n,t);case"InvalidSourceException":case"com.amazonaws.cloudtrail#InvalidSourceException":throw await Un(n,t);case"CloudTrailAccessNotEnabledException":case"com.amazonaws.cloudtrail#CloudTrailAccessNotEnabledException":throw await Jt(n,t);case"EventDataStoreAlreadyExistsException":case"com.amazonaws.cloudtrail#EventDataStoreAlreadyExistsException":throw await rn(n,t);case"EventDataStoreMaxLimitExceededException":case"com.amazonaws.cloudtrail#EventDataStoreMaxLimitExceededException":throw await un(n,t);case"InsufficientDependencyServiceAccessPermissionException":case"com.amazonaws.cloudtrail#InsufficientDependencyServiceAccessPermissionException":throw await gn(n,t);case"InsufficientEncryptionPolicyException":case"com.amazonaws.cloudtrail#InsufficientEncryptionPolicyException":throw await yn(n,t);case"InvalidEventSelectorsException":case"com.amazonaws.cloudtrail#InvalidEventSelectorsException":throw await On(n,t);case"InvalidKmsKeyIdException":case"com.amazonaws.cloudtrail#InvalidKmsKeyIdException":throw await Mn(n,t);case"KmsException":case"com.amazonaws.cloudtrail#KmsException":throw await Hn(n,t);case"KmsKeyNotFoundException":case"com.amazonaws.cloudtrail#KmsKeyNotFoundException":throw await Gn(n,t);case"OrganizationNotInAllFeaturesModeException":case"com.amazonaws.cloudtrail#OrganizationNotInAllFeaturesModeException":throw await ts(n,t);case"OrganizationsNotInUseException":case"com.amazonaws.cloudtrail#OrganizationsNotInUseException":throw await ns(n,t);case"CloudTrailInvalidClientTokenIdException":case"com.amazonaws.cloudtrail#CloudTrailInvalidClientTokenIdException":throw await Yt(n,t);case"CloudWatchLogsDeliveryUnavailableException":case"com.amazonaws.cloudtrail#CloudWatchLogsDeliveryUnavailableException":throw await en(n,t);case"InsufficientS3BucketPolicyException":case"com.amazonaws.cloudtrail#InsufficientS3BucketPolicyException":throw await wn(n,t);case"InsufficientSnsTopicPolicyException":case"com.amazonaws.cloudtrail#InsufficientSnsTopicPolicyException":throw await En(n,t);case"InvalidCloudWatchLogsLogGroupArnException":case"com.amazonaws.cloudtrail#InvalidCloudWatchLogsLogGroupArnException":throw await xn(n,t);case"InvalidCloudWatchLogsRoleArnException":case"com.amazonaws.cloudtrail#InvalidCloudWatchLogsRoleArnException":throw await bn(n,t);case"InvalidParameterCombinationException":case"com.amazonaws.cloudtrail#InvalidParameterCombinationException":throw await Dn(n,t);case"InvalidS3BucketNameException":case"com.amazonaws.cloudtrail#InvalidS3BucketNameException":throw await qn(n,t);case"InvalidS3PrefixException":case"com.amazonaws.cloudtrail#InvalidS3PrefixException":throw await zn(n,t);case"InvalidSnsTopicNameException":case"com.amazonaws.cloudtrail#InvalidSnsTopicNameException":throw await _n(n,t);case"KmsKeyDisabledException":case"com.amazonaws.cloudtrail#KmsKeyDisabledException":throw await Wn(n,t);case"MaximumNumberOfTrailsExceededException":case"com.amazonaws.cloudtrail#MaximumNumberOfTrailsExceededException":throw await Zn(n,t);case"S3BucketDoesNotExistException":case"com.amazonaws.cloudtrail#S3BucketDoesNotExistException":throw await us(n,t);case"ThrottlingException":case"com.amazonaws.cloudtrail#ThrottlingException":throw await ds(n,t);case"TrailAlreadyExistsException":case"com.amazonaws.cloudtrail#TrailAlreadyExistsException":throw await ps(n,t);case"TrailNotProvidedException":case"com.amazonaws.cloudtrail#TrailNotProvidedException":throw await fs(n,t);case"ChannelExistsForEDSException":case"com.amazonaws.cloudtrail#ChannelExistsForEDSException":throw await Gt(n,t);case"EventDataStoreFederationEnabledException":case"com.amazonaws.cloudtrail#EventDataStoreFederationEnabledException":throw await an(n,t);case"EventDataStoreHasOngoingImportException":case"com.amazonaws.cloudtrail#EventDataStoreHasOngoingImportException":throw await cn(n,t);case"EventDataStoreTerminationProtectedException":case"com.amazonaws.cloudtrail#EventDataStoreTerminationProtectedException":throw await dn(n,t);case"ResourceARNNotValidException":case"com.amazonaws.cloudtrail#ResourceARNNotValidException":throw await rs(n,t);case"ResourcePolicyNotFoundException":case"com.amazonaws.cloudtrail#ResourcePolicyNotFoundException":throw await is(n,t);case"InvalidHomeRegionException":case"com.amazonaws.cloudtrail#InvalidHomeRegionException":throw await $n(n,t);case"TrailNotFoundException":case"com.amazonaws.cloudtrail#TrailNotFoundException":throw await hs(n,t);case"AccountNotFoundException":case"com.amazonaws.cloudtrail#AccountNotFoundException":throw await Lt(n,t);case"AccountNotRegisteredException":case"com.amazonaws.cloudtrail#AccountNotRegisteredException":throw await Kt(n,t);case"NotOrganizationManagementAccountException":case"com.amazonaws.cloudtrail#NotOrganizationManagementAccountException":throw await Xn(n,t);case"AccessDeniedException":case"com.amazonaws.cloudtrail#AccessDeniedException":throw await _t(n,t);case"ConcurrentModificationException":case"com.amazonaws.cloudtrail#ConcurrentModificationException":throw await tn(n,t);case"ImportNotFoundException":case"com.amazonaws.cloudtrail#ImportNotFoundException":throw await pn(n,t);case"InsightNotEnabledException":case"com.amazonaws.cloudtrail#InsightNotEnabledException":throw await mn(n,t);case"InvalidMaxResultsException":case"com.amazonaws.cloudtrail#InvalidMaxResultsException":throw await Cn(n,t);case"InvalidNextTokenException":case"com.amazonaws.cloudtrail#InvalidNextTokenException":throw await Rn(n,t);case"InvalidTimeRangeException":case"com.amazonaws.cloudtrail#InvalidTimeRangeException":throw await Kn(n,t);case"InvalidTokenException":case"com.amazonaws.cloudtrail#InvalidTokenException":throw await Vn(n,t);case"InvalidDateRangeException":case"com.amazonaws.cloudtrail#InvalidDateRangeException":throw await vn(n,t);case"InvalidQueryStatusException":case"com.amazonaws.cloudtrail#InvalidQueryStatusException":throw await Fn(n,t);case"InvalidEventCategoryException":case"com.amazonaws.cloudtrail#InvalidEventCategoryException":throw await Sn(n,t);case"InvalidLookupAttributesException":case"com.amazonaws.cloudtrail#InvalidLookupAttributesException":throw await Tn(n,t);case"InvalidInsightSelectorsException":case"com.amazonaws.cloudtrail#InvalidInsightSelectorsException":throw await Nn(n,t);case"ResourcePolicyNotValidException":case"com.amazonaws.cloudtrail#ResourcePolicyNotValidException":throw await as(n,t);case"AccountRegisteredException":case"com.amazonaws.cloudtrail#AccountRegisteredException":throw await Vt(n,t);case"CannotDelegateManagementAccountException":case"com.amazonaws.cloudtrail#CannotDelegateManagementAccountException":throw await Bt(n,t);case"DelegatedAdminAccountLimitExceededException":case"com.amazonaws.cloudtrail#DelegatedAdminAccountLimitExceededException":throw await sn(n,t);case"InvalidEventDataStoreStatusException":case"com.amazonaws.cloudtrail#InvalidEventDataStoreStatusException":throw await In(n,t);case"AccountHasOngoingImportException":case"com.amazonaws.cloudtrail#AccountHasOngoingImportException":throw await Ut(n,t);case"InvalidImportSourceException":case"com.amazonaws.cloudtrail#InvalidImportSourceException":throw await An(n,t);case"InvalidQueryStatementException":case"com.amazonaws.cloudtrail#InvalidQueryStatementException":throw await jn(n,t);case"MaxConcurrentQueriesException":case"com.amazonaws.cloudtrail#MaxConcurrentQueriesException":throw await Qn(n,t);default:const r=n.body;return Es({output:e,parsedBody:r,errorCode:s})}},_t=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ce({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Ut=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ue({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Lt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new le({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Kt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new de({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Vt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new pe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Bt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ce({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Ht=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Re({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Wt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new he({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Gt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new De({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Qt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ke({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Zt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new fe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Jt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new qe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Xt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new me({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Yt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Qe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},en=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ze({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},tn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Et({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},nn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ge({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},sn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ct({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},rn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ze({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},on=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ye({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},an=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new dt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},cn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new pt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},un=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new _e({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},ln=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new we({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},dn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ht({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},pn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new xt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},hn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ee({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},fn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ne({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},mn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new bt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},gn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ue({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},yn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Le({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},wn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Je({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},En=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Xe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},xn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ye({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},bn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new et({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},vn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ot({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Sn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new At({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Pn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new je({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},In=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Rt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},On=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ke({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},$n=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new gt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},An=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Dt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Nn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Mt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Mn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ve({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Tn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Nt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Cn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new vt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Rn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new St({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Dn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new tt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},kn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Me({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},jn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new kt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Fn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new $t({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},qn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new nt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},zn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new st({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},_n=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new rt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Un=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Fe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Ln=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new xe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Kn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Pt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Vn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new It({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Bn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new be({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Hn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Be({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Wn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ot({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Gn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new He({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Qn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new jt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Zn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new it({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Jn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ve({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Xn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new wt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},Yn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Se({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},es=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Pe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},ts=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new We({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},ns=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ge({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},ss=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Te({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},rs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ft({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},os=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ie({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},is=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new mt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},as=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Tt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},cs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Oe({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},us=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new at({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},ls=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new $e({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},ds=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ct({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},ps=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new ut({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},hs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new yt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},fs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new lt({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},ms=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),r=new Ae({$metadata:ws(e),...s});return(0,d.Mw)(r,n)},gs=(e,t)=>(0,d.s)(e,{EndTime:e=>Math.round(e.getTime()/1e3),EventCategory:[],LookupAttributes:d.Ss,MaxResults:[],NextToken:[],StartTime:e=>Math.round(e.getTime()/1e3)}),ys=(e,t)=>(0,d.s)(e,{Events:e=>((e,t)=>{const n=(e||[]).filter((e=>null!=e)).map((e=>((e,t)=>(0,d.s)(e,{AccessKeyId:d.lK,CloudTrailEvent:d.lK,EventId:d.lK,EventName:d.lK,EventSource:d.lK,EventTime:e=>(0,d.Y0)((0,d.l3)((0,d.r$)(e))),ReadOnly:d.lK,Resources:d.Ss,Username:d.lK}))(e)));return n})(e),NextToken:d.lK}),ws=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Es=(0,d.jr)(ae),xs=async(e,t,n,s,r)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),u={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==r&&(u.body=r),new se.Kd(u)};const bs=(e,t)=>((e,t)=>(0,d.Px)(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),vs=async(e,t)=>{const n=await bs(e,t);return n.message=n.message??n.Message,n},Ss=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},s=(r=e.headers,"x-amzn-errortype",Object.keys(r).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var r;return void 0!==s?n(e.headers[s]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class Ps extends(d.uB.classBuilder().ep({...g}).m((function(e,t,n,s){return[(0,ie.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions())]})).s("CloudTrail_20131101","LookupEvents",{}).n("CloudTrailClient","LookupEventsCommand").f(void 0,void 0).ser(Ft).de(qt).build()){}var Is=function(e){var t=JSON.parse(e.CloudTrailEvent).userIdentity.arn.split("/").slice(1),n=t[0],s=t[1];this.iamRole=n,this.stsSession=s,this.eventTime=e.EventTime},Os=function(){function e(){this.cloudTrailClient=new oe({})}return e.prototype.retrieveQuickSightUserEvents=function(e){return t=this,n=void 0,r=function(){var t,n,s,r;return function(e,t){var n,s,r,o,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,s=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(o){switch(o.label){case 0:t=[],n=null,o.label=1;case 1:return s=new Ps({LookupAttributes:[{AttributeKey:"EventSource",AttributeValue:"quicksight.amazonaws.com"}],StartTime:e,NextToken:n}),[4,this.cloudTrailClient.send(s)];case 2:r=o.sent(),n=r.NextToken,r.Events.forEach((function(e){return t.push(new Is(e))})),o.label=3;case 3:if(n)return[3,1];o.label=4;case 4:return[2,t]}}))},new((s=void 0)||(s=Promise))((function(e,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s((function(e){e(n)}))).then(i,a)}c((r=r.apply(t,n||[])).next())}));var t,n,s,r},e.prototype.getLastAccessDate=function(e,t){var n=t.filter((function(t){return e.iamRole===t.iamRole&&e.stsSession===t.stsSession}));if(0===n.length)return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," no CloudTrail events found")),new Date(0);var s=n.sort((function(e,t){return e.eventTime<=t.eventTime?1:-1}))[0];return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," latest event: ").concat(JSON.stringify(s,null,1))),s.eventTime},e}(),$s=s(8230);const As={environmentVariableSelector:e=>(0,$s.Qm)(e,"AWS_DISABLE_REQUEST_COMPRESSION",$s.cV.ENV),configFileSelector:e=>(0,$s.Qm)(e,"disable_request_compression",$s.cV.CONFIG),default:!1},Ns={environmentVariableSelector:e=>(0,$s.nB)(e,"AWS_REQUEST_MIN_COMPRESSION_SIZE_BYTES",$s.cV.ENV),configFileSelector:e=>(0,$s.nB)(e,"request_min_compression_size_bytes",$s.cV.CONFIG),default:10240},Ms=require("zlib"),Ts=async e=>e.pipe((0,Ms.createGzip)()),Cs=(0,s(9023).promisify)(Ms.gzip),Rs=async e=>{try{const t=await Cs((0,A.Fo)(e||""));return(0,A.Fo)(t)}catch(e){throw new Error("Failure during compression: "+e.message)}};var Ds;!function(e){e.GZIP="gzip"}(Ds||(Ds={}));const ks=[Ds.GZIP];var js=s(3695);const Fs=e=>void 0!==e&&"string"!=typeof e&&!ArrayBuffer.isView(e)&&!(0,js.m)(e),qs={name:"compressionMiddleware",step:"build",tags:["REQUEST_BODY_COMPRESSION","GZIP"],override:!0,priority:"high"},zs=(e,t)=>({applyToStack:n=>{n.add(((e,t)=>n=>async s=>{if(!se.Kd.isInstance(s.request))return n(s);if(await e.disableRequestCompression())return n(s);const{request:r}=s,{body:o,headers:i}=r,{encodings:a,streamRequiresLength:c}=t;let u=o,l=i;for(const t of a)if(ks.includes(t)){let n=!1;if(Fs(o)){if(c)throw new Error("Compression is not supported for streaming blobs that require a length.");u=await Ts(o),n=!0}else{const t=e.bodyLengthChecker(o),s=await e.requestMinCompressionSizeBytes();t&&t>=s&&(u=await Rs(o),n=!0)}if(n){l=i["Content-Encoding"]?{...i,"Content-Encoding":`${i["Content-Encoding"]},${t}`}:{...i,"Content-Encoding":t};break}}return n({...s,request:{...r,body:u,headers:l}})})(e,t),qs)}}),_s=async(e,t,n)=>({operation:(0,h.u)(t).operation,region:await(0,h.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),Us=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"monitoring",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},Ls={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},Ks="required",Vs="fn",Bs="argv",Hs="ref",Ws="isSet",Gs="booleanEquals",Qs="error",Zs="endpoint",Js="tree",Xs="PartitionResult",Ys="getAttr",er={[Ks]:!1,type:"String"},tr={[Ks]:!0,default:!1,type:"Boolean"},nr={[Hs]:"Endpoint"},sr={[Vs]:Gs,[Bs]:[{[Hs]:"UseFIPS"},!0]},rr={[Vs]:Gs,[Bs]:[{[Hs]:"UseDualStack"},!0]},or={},ir={[Vs]:Ys,[Bs]:[{[Hs]:Xs},"supportsFIPS"]},ar={[Hs]:Xs},cr={[Vs]:Gs,[Bs]:[!0,{[Vs]:Ys,[Bs]:[ar,"supportsDualStack"]}]},ur=[sr],lr=[rr],dr=[{[Hs]:"Region"}],pr={version:"1.0",parameters:{Region:er,UseDualStack:tr,UseFIPS:tr,Endpoint:er},rules:[{conditions:[{[Vs]:Ws,[Bs]:[nr]}],rules:[{conditions:ur,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Qs},{conditions:lr,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Qs},{endpoint:{url:nr,properties:or,headers:or},type:Zs}],type:Js},{conditions:[{[Vs]:Ws,[Bs]:dr}],rules:[{conditions:[{[Vs]:"aws.partition",[Bs]:dr,assign:Xs}],rules:[{conditions:[sr,rr],rules:[{conditions:[{[Vs]:Gs,[Bs]:[!0,ir]},cr],rules:[{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:or,headers:or},type:Zs}],type:Js},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Qs}],type:Js},{conditions:ur,rules:[{conditions:[{[Vs]:Gs,[Bs]:[ir,!0]}],rules:[{conditions:[{[Vs]:"stringEquals",[Bs]:[{[Vs]:Ys,[Bs]:[ar,"name"]},"aws-us-gov"]}],endpoint:{url:"https://monitoring.{Region}.amazonaws.com",properties:or,headers:or},type:Zs},{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dnsSuffix}",properties:or,headers:or},type:Zs}],type:Js},{error:"FIPS is enabled but this partition does not support FIPS",type:Qs}],type:Js},{conditions:lr,rules:[{conditions:[cr],rules:[{endpoint:{url:"https://monitoring.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:or,headers:or},type:Zs}],type:Js},{error:"DualStack is enabled but this partition does not support DualStack",type:Qs}],type:Js},{endpoint:{url:"https://monitoring.{Region}.{PartitionResult#dnsSuffix}",properties:or,headers:or},type:Zs}],type:Js}],type:Js},{error:"Invalid Configuration: Missing Region",type:Qs}]},hr=(e,t={})=>(0,N.sO)(pr,{endpointParams:e,logger:t.logger}),fr=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}};class mr extends d.Kj{constructor(...[s]){const r=(e=>{(0,d.I9)(process.version);const t=(0,te.I)(e),n=()=>t().then(d.lT),s=(e=>({apiVersion:"2010-08-01",base64Decoder:e?.base64Decoder??$.E,base64Encoder:e?.base64Encoder??$.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??hr,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??Us,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new I.f}],logger:e?.logger??new d.N4,serviceId:e?.serviceId??"CloudWatch",urlParser:e?.urlParser??O.D,utf8Decoder:e?.utf8Decoder??A.ar,utf8Encoder:e?.utf8Encoder??A.Pq}))(e);return(0,y.I)(process.version),{...s,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??S.n,credentialDefaultProvider:e?.credentialDefaultProvider??w.defaultProvider,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,E.mJ)({serviceId:s.serviceId,clientVersion:"3.515.0"}),disableRequestCompression:e?.disableRequestCompression??(0,b.Z)(As),maxAttempts:e?.maxAttempts??(0,b.Z)(l.qs),region:e?.region??(0,b.Z)(i.GG,i.zH),requestHandler:e?.requestHandler??new v.$c(n),requestMinCompressionSizeBytes:e?.requestMinCompressionSizeBytes??(0,b.Z)(Ns),retryMode:e?.retryMode??(0,b.Z)({...l.kN,default:async()=>(await n()).retryMode||P.L0}),sha256:e?.sha256??x.V.bind(null,"sha256"),streamCollector:e?.streamCollector??v.kv,useDualstackEndpoint:e?.useDualstackEndpoint??(0,b.Z)(i.e$),useFipsEndpoint:e?.useFipsEndpoint??(0,b.Z)(i.Ko)}})(s||{}),f=(m=r,{...m,useDualstackEndpoint:m.useDualstackEndpoint??!1,useFipsEndpoint:m.useFipsEndpoint??!1,defaultSigningName:"monitoring"});var m;const g=(0,i.TD)(f),N=(0,u.Co)(g),M=(0,l.$z)(N),T=(0,e.OV)(M),C=(R=(0,o.Dc)(T),{...(0,p.h)(R)});var R,D;const k=((e,t)=>{const n={...(0,ne.Rq)(e),...(0,d.xA)(e),...(0,se.eS)(e),...fr(e)};return t.forEach((e=>e.configure(n))),{...e,...(0,ne.$3)(n),...(0,d.uv)(n),...(0,se.jt)(n),...(s=n,{httpAuthSchemes:s.httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()})};var s})((D=C,{...D,disableRequestCompression:(0,h.t)(D.disableRequestCompression),requestMinCompressionSizeBytes:async()=>{const e=await(0,h.t)(D.requestMinCompressionSizeBytes)();if(e<0||e>10485760)throw new RangeError(`The value for requestMinCompressionSizeBytes must be between 0 and 10485760 inclusive. The provided value ${e} is outside this range."`);return e}}),s?.extensions||[]);super(k),this.config=k,this.middlewareStack.use((0,l.ey)(this.config)),this.middlewareStack.use((0,c.vK)(this.config)),this.middlewareStack.use((0,e.TC)(this.config)),this.middlewareStack.use((0,t.Y7)(this.config)),this.middlewareStack.use((0,n.n4)(this.config)),this.middlewareStack.use((0,o.sM)(this.config)),this.middlewareStack.use((0,a.wB)(this.config,{httpAuthSchemeParametersProvider:this.getDefaultHttpAuthSchemeParametersProvider(),identityProviderConfigProvider:this.getIdentityProviderConfigProvider()})),this.middlewareStack.use((0,a.lW)(this.config))}destroy(){super.destroy()}getDefaultHttpAuthSchemeParametersProvider(){return _s}getIdentityProviderConfigProvider(){return async e=>new a.h$({"aws.auth#sigv4":e.credentials})}}var gr=s(6454);class yr extends d.TJ{constructor(e){super(e),Object.setPrototypeOf(this,yr.prototype)}}class wr extends yr{constructor(e){super({name:"ConcurrentModificationException",$fault:"client",...e}),this.name="ConcurrentModificationException",this.$fault="client",Object.setPrototypeOf(this,wr.prototype),this.Message=e.Message}}class Er extends yr{constructor(e){super({name:"DashboardInvalidInputError",$fault:"client",...e}),this.name="DashboardInvalidInputError",this.$fault="client",Object.setPrototypeOf(this,Er.prototype),this.dashboardValidationMessages=e.dashboardValidationMessages}}class xr extends yr{constructor(e){super({name:"ResourceNotFound",$fault:"client",...e}),this.name="ResourceNotFound",this.$fault="client",Object.setPrototypeOf(this,xr.prototype)}}class br extends yr{constructor(e){super({name:"InternalServiceFault",$fault:"server",...e}),this.name="InternalServiceFault",this.$fault="server",Object.setPrototypeOf(this,br.prototype),this.Message=e.Message}}class vr extends yr{constructor(e){super({name:"InvalidParameterCombinationException",$fault:"client",...e}),this.name="InvalidParameterCombinationException",this.$fault="client",Object.setPrototypeOf(this,vr.prototype)}}class Sr extends yr{constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,Sr.prototype)}}class Pr extends yr{constructor(e){super({name:"MissingRequiredParameterException",$fault:"client",...e}),this.name="MissingRequiredParameterException",this.$fault="client",Object.setPrototypeOf(this,Pr.prototype)}}class Ir extends yr{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Ir.prototype),this.ResourceType=e.ResourceType,this.ResourceId=e.ResourceId,this.Message=e.Message}}class Or extends yr{constructor(e){super({name:"InvalidNextToken",$fault:"client",...e}),this.name="InvalidNextToken",this.$fault="client",Object.setPrototypeOf(this,Or.prototype)}}class $r extends yr{constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),this.name="LimitExceededException",this.$fault="client",Object.setPrototypeOf(this,$r.prototype),this.Message=e.Message}}class Ar extends yr{constructor(e){super({name:"LimitExceededFault",$fault:"client",...e}),this.name="LimitExceededFault",this.$fault="client",Object.setPrototypeOf(this,Ar.prototype)}}class Nr extends yr{constructor(e){super({name:"InvalidFormatFault",$fault:"client",...e}),this.name="InvalidFormatFault",this.$fault="client",Object.setPrototypeOf(this,Nr.prototype)}}const Mr=async(e,t)=>{const n=ho;let s;return s=Lo({...Wr(e,t),[mo]:Oo,[ko]:fo}),po(t,n,"/",void 0,s)},Tr=async(e,t)=>e.statusCode>=300?Cr(e,t):(await(0,d.Px)(e.body,t),{$metadata:uo(e)}),Cr=async(e,t)=>{const n={...e,body:await Uo(e.body,t)},s=Ko(e,n.body);switch(s){case"ResourceNotFound":case"com.amazonaws.cloudwatch#ResourceNotFound":throw await Kr(n,t);case"InternalServiceError":case"com.amazonaws.cloudwatch#InternalServiceFault":throw await kr(n,t);case"InvalidParameterCombination":case"com.amazonaws.cloudwatch#InvalidParameterCombinationException":throw await qr(n,t);case"InvalidParameterValue":case"com.amazonaws.cloudwatch#InvalidParameterValueException":throw await zr(n,t);case"MissingParameter":case"com.amazonaws.cloudwatch#MissingRequiredParameterException":throw await Lr(n,t);case"ResourceNotFoundException":case"com.amazonaws.cloudwatch#ResourceNotFoundException":throw await Vr(n,t);case"InvalidNextToken":case"com.amazonaws.cloudwatch#InvalidNextToken":throw await Fr(n,t);case"LimitExceededException":case"com.amazonaws.cloudwatch#LimitExceededException":throw await _r(n,t);case"LimitExceeded":case"com.amazonaws.cloudwatch#LimitExceededFault":throw await Ur(n,t);case"InvalidParameterInput":case"com.amazonaws.cloudwatch#DashboardInvalidInputError":throw await Dr(n,t);case"ConcurrentModificationException":case"com.amazonaws.cloudwatch#ConcurrentModificationException":throw await Rr(n,t);case"InvalidFormat":case"com.amazonaws.cloudwatch#InvalidFormatFault":throw await jr(n,t);default:const r=n.body;return lo({output:e,parsedBody:r.Error,errorCode:s})}},Rr=async(e,t)=>{const n=e.body,s=Zr(n.Error,t),r=new wr({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},Dr=async(e,t)=>{const n=e.body,s=Jr(n.Error,t),r=new Er({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},kr=async(e,t)=>{const n=e.body,s=Yr(n.Error,t),r=new br({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},jr=async(e,t)=>{const n=e.body,s=eo(n.Error,t),r=new Nr({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},Fr=async(e,t)=>{const n=e.body,s=to(n.Error,t),r=new Or({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},qr=async(e,t)=>{const n=e.body,s=no(n.Error,t),r=new vr({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},zr=async(e,t)=>{const n=e.body,s=so(n.Error,t),r=new Sr({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},_r=async(e,t)=>{const n=e.body,s=ro(n.Error,t),r=new $r({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},Ur=async(e,t)=>{const n=e.body,s=oo(n.Error,t),r=new Ar({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},Lr=async(e,t)=>{const n=e.body,s=io(n.Error,t),r=new Pr({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},Kr=async(e,t)=>{const n=e.body,s=ao(n.Error,t),r=new xr({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},Vr=async(e,t)=>{const n=e.body,s=co(n.Error,t),r=new Ir({$metadata:uo(e),...s});return(0,d.Mw)(r,n)},Br=(e,t)=>{const n={};return null!=e[Io]&&(n[Io]=e[Io]),null!=e[jo]&&(n[jo]=e[jo]),n},Hr=(e,t)=>{const n={};if(null!=e[xo]&&(n[xo]=e[xo]),null!=e[yo]){const t=((e,t)=>{const n={};let s=1;for(const t of e){if(null===t)continue;const e=Br(t);Object.entries(e).forEach((([e,t])=>{n[`member.${s}.${e}`]=t})),s++}return n})(e[yo]);0===e[yo]?.length&&(n.Dimensions=[]),Object.entries(t).forEach((([e,t])=>{n[`Dimensions.${e}`]=t}))}if(null!=e[Ro]&&(n[Ro]=e[Ro].toISOString().split(".")[0]+"Z"),null!=e[jo]&&(n[jo]=(0,d.VA)(e[jo])),null!=e[To]){const s=Gr(e[To],t);Object.entries(s).forEach((([e,t])=>{n[`StatisticValues.${e}`]=t}))}if(null!=e[Fo]){const s=Qr(e[Fo],t);0===e[Fo]?.length&&(n.Values=[]),Object.entries(s).forEach((([e,t])=>{n[`Values.${e}`]=t}))}if(null!=e[go]){const t=((e,t)=>{const n={};let s=1;for(const t of e)null!==t&&(n[`member.${s}`]=(0,d.VA)(t),s++);return n})(e[go]);0===e[go]?.length&&(n.Counts=[]),Object.entries(t).forEach((([e,t])=>{n[`Counts.${e}`]=t}))}return null!=e[Do]&&(n[Do]=e[Do]),null!=e[Mo]&&(n[Mo]=e[Mo]),n},Wr=(e,t)=>{const n={};if(null!=e[Po]&&(n[Po]=e[Po]),null!=e[Eo]){const s=((e,t)=>{const n={};let s=1;for(const r of e){if(null===r)continue;const e=Hr(r,t);Object.entries(e).forEach((([e,t])=>{n[`member.${s}.${e}`]=t})),s++}return n})(e[Eo],t);0===e[Eo]?.length&&(n.MetricData=[]),Object.entries(s).forEach((([e,t])=>{n[`MetricData.${e}`]=t}))}return n},Gr=(e,t)=>{const n={};return null!=e[No]&&(n[No]=(0,d.VA)(e[No])),null!=e[Co]&&(n[Co]=(0,d.VA)(e[Co])),null!=e[So]&&(n[So]=(0,d.VA)(e[So])),null!=e[bo]&&(n[bo]=(0,d.VA)(e[bo])),n},Qr=(e,t)=>{const n={};let s=1;for(const t of e)null!==t&&(n[`member.${s}`]=(0,d.VA)(t),s++);return n},Zr=(e,t)=>{const n={};return null!=e[vo]&&(n[vo]=(0,d.lK)(e[vo])),n},Jr=(e,t)=>{const n={};return null!=e[_o]&&(n[_o]=(0,d.lK)(e[_o])),""===e.dashboardValidationMessages?n[qo]=[]:null!=e[qo]&&null!=e[qo][zo]&&(n[qo]=Xr((0,d.Yd)(e[qo][zo]),t)),n},Xr=(e,t)=>(e||[]).filter((e=>null!=e)).map((e=>((e,t)=>{const n={};return null!=e[wo]&&(n[wo]=(0,d.lK)(e[wo])),null!=e[vo]&&(n[vo]=(0,d.lK)(e[vo])),n})(e))),Yr=(e,t)=>{const n={};return null!=e[vo]&&(n[vo]=(0,d.lK)(e[vo])),n},eo=(e,t)=>{const n={};return null!=e[_o]&&(n[_o]=(0,d.lK)(e[_o])),n},to=(e,t)=>{const n={};return null!=e[_o]&&(n[_o]=(0,d.lK)(e[_o])),n},no=(e,t)=>{const n={};return null!=e[_o]&&(n[_o]=(0,d.lK)(e[_o])),n},so=(e,t)=>{const n={};return null!=e[_o]&&(n[_o]=(0,d.lK)(e[_o])),n},ro=(e,t)=>{const n={};return null!=e[vo]&&(n[vo]=(0,d.lK)(e[vo])),n},oo=(e,t)=>{const n={};return null!=e[_o]&&(n[_o]=(0,d.lK)(e[_o])),n},io=(e,t)=>{const n={};return null!=e[_o]&&(n[_o]=(0,d.lK)(e[_o])),n},ao=(e,t)=>{const n={};return null!=e[_o]&&(n[_o]=(0,d.lK)(e[_o])),n},co=(e,t)=>{const n={};return null!=e[Ao]&&(n[Ao]=(0,d.lK)(e[Ao])),null!=e[$o]&&(n[$o]=(0,d.lK)(e[$o])),null!=e[vo]&&(n[vo]=(0,d.lK)(e[vo])),n},uo=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),lo=(0,d.jr)(yr),po=async(e,t,n,s,r)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),u={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==r&&(u.body=r),new se.Kd(u)},ho={"content-type":"application/x-www-form-urlencoded"},fo="2010-08-01",mo="Action",go="Counts",yo="Dimensions",wo="DataPath",Eo="MetricData",xo="MetricName",bo="Maximum",vo="Message",So="Minimum",Po="Namespace",Io="Name",Oo="PutMetricData",$o="ResourceId",Ao="ResourceType",No="SampleCount",Mo="StorageResolution",To="StatisticValues",Co="Sum",Ro="Timestamp",Do="Unit",ko="Version",jo="Value",Fo="Values",qo="dashboardValidationMessages",zo="member",_o="message",Uo=async(e,t)=>{const n=await((e,t)=>((e,t)=>(0,d.Px)(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>{if(e.length){const t=new gr.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});t.addEntity("#xD","\r"),t.addEntity("#10","\n");const n=t.parse(e),s="#text",r=Object.keys(n)[0],o=n[r];return o[s]&&(o[r]=o[s],delete o[s]),(0,d.rm)(o)}return{}})))(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n},Lo=e=>Object.entries(e).map((([e,t])=>(0,d.$6)(e)+"="+(0,d.$6)(t))).join("&"),Ko=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class Vo extends(d.uB.classBuilder().ep({...Ls}).m((function(e,t,n,s){return[(0,ie.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions()),zs(n,{encodings:["gzip"]})]})).s("GraniteServiceVersion20100801","PutMetricData",{}).n("CloudWatchClient","PutMetricDataCommand").f(void 0,void 0).ser(Mr).de(Tr).build()){}var Bo=function(){function e(){this.metricData=[],this.cloudWatchClient=new mr({})}return e.prototype.queueMetric=function(e){this.metricData.push(e)},e.prototype.emitQueuedMetrics=function(){return e=this,t=void 0,s=function(){var e;return function(e,t){var n,s,r,o,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,s=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(t){switch(t.label){case 0:return e=new Vo({Namespace:process.env.AWS_LAMBDA_FUNCTION_NAME,MetricData:this.metricData}),console.debug("Emitting metrics:\n".concat(JSON.stringify(e.input,null,2))),[4,this.cloudWatchClient.send(e)];case 1:return t.sent(),this.metricData=[],[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}));var e,t,n,s},e}();const Ho=async(e,t,n)=>({operation:(0,h.u)(t).operation,region:await(0,h.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),Wo=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"ses",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},Go={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},Qo="required",Zo="fn",Jo="argv",Xo="ref",Yo="isSet",ei="booleanEquals",ti="error",ni="endpoint",si="tree",ri="PartitionResult",oi={[Qo]:!1,type:"String"},ii={[Qo]:!0,default:!1,type:"Boolean"},ai={[Xo]:"Endpoint"},ci={[Zo]:ei,[Jo]:[{[Xo]:"UseFIPS"},!0]},ui={[Zo]:ei,[Jo]:[{[Xo]:"UseDualStack"},!0]},li={},di={[Zo]:"getAttr",[Jo]:[{[Xo]:ri},"supportsFIPS"]},pi={[Zo]:ei,[Jo]:[!0,{[Zo]:"getAttr",[Jo]:[{[Xo]:ri},"supportsDualStack"]}]},hi=[ci],fi=[ui],mi=[{[Xo]:"Region"}],gi={version:"1.0",parameters:{Region:oi,UseDualStack:ii,UseFIPS:ii,Endpoint:oi},rules:[{conditions:[{[Zo]:Yo,[Jo]:[ai]}],rules:[{conditions:hi,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:ti},{conditions:fi,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:ti},{endpoint:{url:ai,properties:li,headers:li},type:ni}],type:si},{conditions:[{[Zo]:Yo,[Jo]:mi}],rules:[{conditions:[{[Zo]:"aws.partition",[Jo]:mi,assign:ri}],rules:[{conditions:[ci,ui],rules:[{conditions:[{[Zo]:ei,[Jo]:[!0,di]},pi],rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:li,headers:li},type:ni}],type:si},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:ti}],type:si},{conditions:hi,rules:[{conditions:[{[Zo]:ei,[Jo]:[di,!0]}],rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dnsSuffix}",properties:li,headers:li},type:ni}],type:si},{error:"FIPS is enabled but this partition does not support FIPS",type:ti}],type:si},{conditions:fi,rules:[{conditions:[pi],rules:[{endpoint:{url:"https://email.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:li,headers:li},type:ni}],type:si},{error:"DualStack is enabled but this partition does not support DualStack",type:ti}],type:si},{endpoint:{url:"https://email.{Region}.{PartitionResult#dnsSuffix}",properties:li,headers:li},type:ni}],type:si}],type:si},{error:"Invalid Configuration: Missing Region",type:ti}]},yi=(e,t={})=>(0,N.sO)(gi,{endpointParams:e,logger:t.logger}),wi=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}};class Ei extends d.Kj{constructor(...[s]){const r=(e=>{(0,d.I9)(process.version);const t=(0,te.I)(e),n=()=>t().then(d.lT),s=(e=>({apiVersion:"2010-12-01",base64Decoder:e?.base64Decoder??$.E,base64Encoder:e?.base64Encoder??$.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??yi,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??Wo,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new I.f}],logger:e?.logger??new d.N4,serviceId:e?.serviceId??"SES",urlParser:e?.urlParser??O.D,utf8Decoder:e?.utf8Decoder??A.ar,utf8Encoder:e?.utf8Encoder??A.Pq}))(e);return(0,y.I)(process.version),{...s,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??S.n,credentialDefaultProvider:e?.credentialDefaultProvider??w.defaultProvider,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,E.mJ)({serviceId:s.serviceId,clientVersion:"3.515.0"}),maxAttempts:e?.maxAttempts??(0,b.Z)(l.qs),region:e?.region??(0,b.Z)(i.GG,i.zH),requestHandler:e?.requestHandler??new v.$c(n),retryMode:e?.retryMode??(0,b.Z)({...l.kN,default:async()=>(await n()).retryMode||P.L0}),sha256:e?.sha256??x.V.bind(null,"sha256"),streamCollector:e?.streamCollector??v.kv,useDualstackEndpoint:e?.useDualstackEndpoint??(0,b.Z)(i.e$),useFipsEndpoint:e?.useFipsEndpoint??(0,b.Z)(i.Ko)}})(s||{}),h=(f=r,{...f,useDualstackEndpoint:f.useDualstackEndpoint??!1,useFipsEndpoint:f.useFipsEndpoint??!1,defaultSigningName:"ses"});var f;const m=(0,i.TD)(h),g=(0,u.Co)(m),N=(0,l.$z)(g),M=(0,e.OV)(N);var T;const C=((e,t)=>{const n={...(0,ne.Rq)(e),...(0,d.xA)(e),...(0,se.eS)(e),...wi(e)};return t.forEach((e=>e.configure(n))),{...e,...(0,ne.$3)(n),...(0,d.uv)(n),...(0,se.jt)(n),...(s=n,{httpAuthSchemes:s.httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()})};var s})((T=(0,o.Dc)(M),{...(0,p.h)(T)}),s?.extensions||[]);super(C),this.config=C,this.middlewareStack.use((0,l.ey)(this.config)),this.middlewareStack.use((0,c.vK)(this.config)),this.middlewareStack.use((0,e.TC)(this.config)),this.middlewareStack.use((0,t.Y7)(this.config)),this.middlewareStack.use((0,n.n4)(this.config)),this.middlewareStack.use((0,o.sM)(this.config)),this.middlewareStack.use((0,a.wB)(this.config,{httpAuthSchemeParametersProvider:this.getDefaultHttpAuthSchemeParametersProvider(),identityProviderConfigProvider:this.getIdentityProviderConfigProvider()})),this.middlewareStack.use((0,a.lW)(this.config))}destroy(){super.destroy()}getDefaultHttpAuthSchemeParametersProvider(){return Ho}getIdentityProviderConfigProvider(){return async e=>new a.h$({"aws.auth#sigv4":e.credentials})}}class xi extends d.TJ{constructor(e){super(e),Object.setPrototypeOf(this,xi.prototype)}}class bi extends xi{constructor(e){super({name:"AccountSendingPausedException",$fault:"client",...e}),this.name="AccountSendingPausedException",this.$fault="client",Object.setPrototypeOf(this,bi.prototype)}}class vi extends xi{constructor(e){super({name:"AlreadyExistsException",$fault:"client",...e}),this.name="AlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,vi.prototype),this.Name=e.Name}}class Si extends xi{constructor(e){super({name:"CannotDeleteException",$fault:"client",...e}),this.name="CannotDeleteException",this.$fault="client",Object.setPrototypeOf(this,Si.prototype),this.Name=e.Name}}class Pi extends xi{constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),this.name="LimitExceededException",this.$fault="client",Object.setPrototypeOf(this,Pi.prototype)}}class Ii extends xi{constructor(e){super({name:"RuleSetDoesNotExistException",$fault:"client",...e}),this.name="RuleSetDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Ii.prototype),this.Name=e.Name}}class Oi extends xi{constructor(e){super({name:"ConfigurationSetAlreadyExistsException",$fault:"client",...e}),this.name="ConfigurationSetAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,Oi.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class $i extends xi{constructor(e){super({name:"ConfigurationSetDoesNotExistException",$fault:"client",...e}),this.name="ConfigurationSetDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,$i.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Ai extends xi{constructor(e){super({name:"ConfigurationSetSendingPausedException",$fault:"client",...e}),this.name="ConfigurationSetSendingPausedException",this.$fault="client",Object.setPrototypeOf(this,Ai.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Ni extends xi{constructor(e){super({name:"InvalidConfigurationSetException",$fault:"client",...e}),this.name="InvalidConfigurationSetException",this.$fault="client",Object.setPrototypeOf(this,Ni.prototype)}}class Mi extends xi{constructor(e){super({name:"EventDestinationAlreadyExistsException",$fault:"client",...e}),this.name="EventDestinationAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,Mi.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Ti extends xi{constructor(e){super({name:"InvalidCloudWatchDestinationException",$fault:"client",...e}),this.name="InvalidCloudWatchDestinationException",this.$fault="client",Object.setPrototypeOf(this,Ti.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Ci extends xi{constructor(e){super({name:"InvalidFirehoseDestinationException",$fault:"client",...e}),this.name="InvalidFirehoseDestinationException",this.$fault="client",Object.setPrototypeOf(this,Ci.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Ri extends xi{constructor(e){super({name:"InvalidSNSDestinationException",$fault:"client",...e}),this.name="InvalidSNSDestinationException",this.$fault="client",Object.setPrototypeOf(this,Ri.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Di extends xi{constructor(e){super({name:"InvalidTrackingOptionsException",$fault:"client",...e}),this.name="InvalidTrackingOptionsException",this.$fault="client",Object.setPrototypeOf(this,Di.prototype)}}class ki extends xi{constructor(e){super({name:"TrackingOptionsAlreadyExistsException",$fault:"client",...e}),this.name="TrackingOptionsAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,ki.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class ji extends xi{constructor(e){super({name:"CustomVerificationEmailInvalidContentException",$fault:"client",...e}),this.name="CustomVerificationEmailInvalidContentException",this.$fault="client",Object.setPrototypeOf(this,ji.prototype)}}class Fi extends xi{constructor(e){super({name:"CustomVerificationEmailTemplateAlreadyExistsException",$fault:"client",...e}),this.name="CustomVerificationEmailTemplateAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,Fi.prototype),this.CustomVerificationEmailTemplateName=e.CustomVerificationEmailTemplateName}}class qi extends xi{constructor(e){super({name:"FromEmailAddressNotVerifiedException",$fault:"client",...e}),this.name="FromEmailAddressNotVerifiedException",this.$fault="client",Object.setPrototypeOf(this,qi.prototype),this.FromEmailAddress=e.FromEmailAddress}}class zi extends xi{constructor(e){super({name:"InvalidLambdaFunctionException",$fault:"client",...e}),this.name="InvalidLambdaFunctionException",this.$fault="client",Object.setPrototypeOf(this,zi.prototype),this.FunctionArn=e.FunctionArn}}class _i extends xi{constructor(e){super({name:"InvalidS3ConfigurationException",$fault:"client",...e}),this.name="InvalidS3ConfigurationException",this.$fault="client",Object.setPrototypeOf(this,_i.prototype),this.Bucket=e.Bucket}}class Ui extends xi{constructor(e){super({name:"InvalidSnsTopicException",$fault:"client",...e}),this.name="InvalidSnsTopicException",this.$fault="client",Object.setPrototypeOf(this,Ui.prototype),this.Topic=e.Topic}}class Li extends xi{constructor(e){super({name:"RuleDoesNotExistException",$fault:"client",...e}),this.name="RuleDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Li.prototype),this.Name=e.Name}}class Ki extends xi{constructor(e){super({name:"InvalidTemplateException",$fault:"client",...e}),this.name="InvalidTemplateException",this.$fault="client",Object.setPrototypeOf(this,Ki.prototype),this.TemplateName=e.TemplateName}}class Vi extends xi{constructor(e){super({name:"CustomVerificationEmailTemplateDoesNotExistException",$fault:"client",...e}),this.name="CustomVerificationEmailTemplateDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Vi.prototype),this.CustomVerificationEmailTemplateName=e.CustomVerificationEmailTemplateName}}class Bi extends xi{constructor(e){super({name:"EventDestinationDoesNotExistException",$fault:"client",...e}),this.name="EventDestinationDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Bi.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Hi extends xi{constructor(e){super({name:"TrackingOptionsDoesNotExistException",$fault:"client",...e}),this.name="TrackingOptionsDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Hi.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Wi extends xi{constructor(e){super({name:"TemplateDoesNotExistException",$fault:"client",...e}),this.name="TemplateDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Wi.prototype),this.TemplateName=e.TemplateName}}class Gi extends xi{constructor(e){super({name:"InvalidDeliveryOptionsException",$fault:"client",...e}),this.name="InvalidDeliveryOptionsException",this.$fault="client",Object.setPrototypeOf(this,Gi.prototype)}}class Qi extends xi{constructor(e){super({name:"InvalidPolicyException",$fault:"client",...e}),this.name="InvalidPolicyException",this.$fault="client",Object.setPrototypeOf(this,Qi.prototype)}}class Zi extends xi{constructor(e){super({name:"InvalidRenderingParameterException",$fault:"client",...e}),this.name="InvalidRenderingParameterException",this.$fault="client",Object.setPrototypeOf(this,Zi.prototype),this.TemplateName=e.TemplateName}}class Ji extends xi{constructor(e){super({name:"MailFromDomainNotVerifiedException",$fault:"client",...e}),this.name="MailFromDomainNotVerifiedException",this.$fault="client",Object.setPrototypeOf(this,Ji.prototype)}}class Xi extends xi{constructor(e){super({name:"MessageRejected",$fault:"client",...e}),this.name="MessageRejected",this.$fault="client",Object.setPrototypeOf(this,Xi.prototype)}}class Yi extends xi{constructor(e){super({name:"MissingRenderingAttributeException",$fault:"client",...e}),this.name="MissingRenderingAttributeException",this.$fault="client",Object.setPrototypeOf(this,Yi.prototype),this.TemplateName=e.TemplateName}}class ea extends xi{constructor(e){super({name:"ProductionAccessNotGrantedException",$fault:"client",...e}),this.name="ProductionAccessNotGrantedException",this.$fault="client",Object.setPrototypeOf(this,ea.prototype)}}const ta=async(e,t)=>{const n=Oc;let s;return s=cu({...Ua(e,t),[Ac]:Qc,[su]:$c}),Ic(t,n,"/",void 0,s)},na=async(e,t)=>{if(e.statusCode>=300)return sa(e,t);const n=await iu(e.body,t);let s={};return s=Ec(n.SendEmailResult,t),{$metadata:Sc(e),...s}},sa=async(e,t)=>{const n={...e,body:await au(e.body,t)},s=uu(e,n.body);switch(s){case"AlreadyExists":case"com.amazonaws.ses#AlreadyExistsException":throw await oa(n,t);case"LimitExceeded":case"com.amazonaws.ses#LimitExceededException":throw await Aa(n,t);case"RuleSetDoesNotExist":case"com.amazonaws.ses#RuleSetDoesNotExistException":throw await Da(n,t);case"ConfigurationSetAlreadyExists":case"com.amazonaws.ses#ConfigurationSetAlreadyExistsException":throw await aa(n,t);case"InvalidConfigurationSet":case"com.amazonaws.ses#InvalidConfigurationSetException":throw await ya(n,t);case"ConfigurationSetDoesNotExist":case"com.amazonaws.ses#ConfigurationSetDoesNotExistException":throw await ca(n,t);case"EventDestinationAlreadyExists":case"com.amazonaws.ses#EventDestinationAlreadyExistsException":throw await ha(n,t);case"InvalidCloudWatchDestination":case"com.amazonaws.ses#InvalidCloudWatchDestinationException":throw await ga(n,t);case"InvalidFirehoseDestination":case"com.amazonaws.ses#InvalidFirehoseDestinationException":throw await Ea(n,t);case"InvalidSNSDestination":case"com.amazonaws.ses#InvalidSNSDestinationException":throw await Pa(n,t);case"InvalidTrackingOptions":case"com.amazonaws.ses#InvalidTrackingOptionsException":throw await $a(n,t);case"TrackingOptionsAlreadyExistsException":case"com.amazonaws.ses#TrackingOptionsAlreadyExistsException":throw await ja(n,t);case"CustomVerificationEmailInvalidContent":case"com.amazonaws.ses#CustomVerificationEmailInvalidContentException":throw await la(n,t);case"CustomVerificationEmailTemplateAlreadyExists":case"com.amazonaws.ses#CustomVerificationEmailTemplateAlreadyExistsException":throw await da(n,t);case"FromEmailAddressNotVerified":case"com.amazonaws.ses#FromEmailAddressNotVerifiedException":throw await ma(n,t);case"InvalidLambdaFunction":case"com.amazonaws.ses#InvalidLambdaFunctionException":throw await xa(n,t);case"InvalidS3Configuration":case"com.amazonaws.ses#InvalidS3ConfigurationException":throw await Sa(n,t);case"InvalidSnsTopic":case"com.amazonaws.ses#InvalidSnsTopicException":throw await Ia(n,t);case"RuleDoesNotExist":case"com.amazonaws.ses#RuleDoesNotExistException":throw await Ra(n,t);case"InvalidTemplate":case"com.amazonaws.ses#InvalidTemplateException":throw await Oa(n,t);case"EventDestinationDoesNotExist":case"com.amazonaws.ses#EventDestinationDoesNotExistException":throw await fa(n,t);case"TrackingOptionsDoesNotExistException":case"com.amazonaws.ses#TrackingOptionsDoesNotExistException":throw await Fa(n,t);case"CannotDelete":case"com.amazonaws.ses#CannotDeleteException":throw await ia(n,t);case"CustomVerificationEmailTemplateDoesNotExist":case"com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":throw await pa(n,t);case"TemplateDoesNotExist":case"com.amazonaws.ses#TemplateDoesNotExistException":throw await ka(n,t);case"InvalidDeliveryOptions":case"com.amazonaws.ses#InvalidDeliveryOptionsException":throw await wa(n,t);case"InvalidPolicy":case"com.amazonaws.ses#InvalidPolicyException":throw await ba(n,t);case"MessageRejected":case"com.amazonaws.ses#MessageRejected":throw await Ma(n,t);case"AccountSendingPausedException":case"com.amazonaws.ses#AccountSendingPausedException":throw await ra(n,t);case"ConfigurationSetSendingPausedException":case"com.amazonaws.ses#ConfigurationSetSendingPausedException":throw await ua(n,t);case"MailFromDomainNotVerifiedException":case"com.amazonaws.ses#MailFromDomainNotVerifiedException":throw await Na(n,t);case"ProductionAccessNotGranted":case"com.amazonaws.ses#ProductionAccessNotGrantedException":throw await Ca(n,t);case"InvalidRenderingParameter":case"com.amazonaws.ses#InvalidRenderingParameterException":throw await va(n,t);case"MissingRenderingAttribute":case"com.amazonaws.ses#MissingRenderingAttributeException":throw await Ta(n,t);default:const r=n.body;return Pc({output:e,parsedBody:r.Error,errorCode:s})}},ra=async(e,t)=>{const n=e.body,s=La(n.Error,t),r=new bi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},oa=async(e,t)=>{const n=e.body,s=Ka(n.Error,t),r=new vi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ia=async(e,t)=>{const n=e.body,s=Va(n.Error,t),r=new Si({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},aa=async(e,t)=>{const n=e.body,s=Ba(n.Error,t),r=new Oi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ca=async(e,t)=>{const n=e.body,s=Ha(n.Error,t),r=new $i({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ua=async(e,t)=>{const n=e.body,s=Wa(n.Error,t),r=new Ai({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},la=async(e,t)=>{const n=e.body,s=Ga(n.Error,t),r=new ji({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},da=async(e,t)=>{const n=e.body,s=Qa(n.Error,t),r=new Fi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},pa=async(e,t)=>{const n=e.body,s=Za(n.Error,t),r=new Vi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ha=async(e,t)=>{const n=e.body,s=Ja(n.Error,t),r=new Mi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},fa=async(e,t)=>{const n=e.body,s=Xa(n.Error,t),r=new Bi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ma=async(e,t)=>{const n=e.body,s=Ya(n.Error,t),r=new qi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ga=async(e,t)=>{const n=e.body,s=ec(n.Error,t),r=new Ti({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ya=async(e,t)=>{const n=e.body,s=tc(n.Error,t),r=new Ni({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},wa=async(e,t)=>{const n=e.body,s=nc(n.Error,t),r=new Gi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Ea=async(e,t)=>{const n=e.body,s=sc(n.Error,t),r=new Ci({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},xa=async(e,t)=>{const n=e.body,s=rc(n.Error,t),r=new zi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ba=async(e,t)=>{const n=e.body,s=oc(n.Error,t),r=new Qi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},va=async(e,t)=>{const n=e.body,s=ic(n.Error,t),r=new Zi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Sa=async(e,t)=>{const n=e.body,s=ac(n.Error,t),r=new _i({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Pa=async(e,t)=>{const n=e.body,s=cc(n.Error,t),r=new Ri({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Ia=async(e,t)=>{const n=e.body,s=uc(n.Error,t),r=new Ui({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Oa=async(e,t)=>{const n=e.body,s=lc(n.Error,t),r=new Ki({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},$a=async(e,t)=>{const n=e.body,s=dc(n.Error,t),r=new Di({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Aa=async(e,t)=>{const n=e.body,s=pc(n.Error,t),r=new Pi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Na=async(e,t)=>{const n=e.body,s=hc(n.Error,t),r=new Ji({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Ma=async(e,t)=>{const n=e.body,s=fc(n.Error,t),r=new Xi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Ta=async(e,t)=>{const n=e.body,s=mc(n.Error,t),r=new Yi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Ca=async(e,t)=>{const n=e.body,s=gc(n.Error,t),r=new ea({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Ra=async(e,t)=>{const n=e.body,s=yc(n.Error,t),r=new Li({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Da=async(e,t)=>{const n=e.body,s=wc(n.Error,t),r=new Ii({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ka=async(e,t)=>{const n=e.body,s=xc(n.Error,t),r=new Wi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},ja=async(e,t)=>{const n=e.body,s=bc(n.Error,t),r=new ki({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},Fa=async(e,t)=>{const n=e.body,s=vc(n.Error,t),r=new Hi({$metadata:Sc(e),...s});return(0,d.Mw)(r,n)},qa=(e,t)=>{const n={};let s=1;for(const t of e)null!==t&&(n[`member.${s}`]=t,s++);return n},za=(e,t)=>{const n={};return null!=e[Fc]&&(n[Fc]=e[Fc]),null!=e[Cc]&&(n[Cc]=e[Cc]),n},_a=(e,t)=>{const n={};return null!=e[Vc]&&(n[Vc]=e[Vc]),null!=e[ru]&&(n[ru]=e[ru]),n},Ua=(e,t)=>{const n={};if(null!=e[Zc]&&(n[Zc]=e[Zc]),null!=e[jc]){const t=((e,t)=>{const n={};if(null!=e[Yc]){const t=qa(e[Yc]);0===e[Yc]?.length&&(n.ToAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`ToAddresses.${e}`]=t}))}if(null!=e[Rc]){const t=qa(e[Rc]);0===e[Rc]?.length&&(n.CcAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`CcAddresses.${e}`]=t}))}if(null!=e[Mc]){const t=qa(e[Mc]);0===e[Mc]?.length&&(n.BccAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`BccAddresses.${e}`]=t}))}return n})(e[jc]);Object.entries(t).forEach((([e,t])=>{n[`Destination.${e}`]=t}))}if(null!=e[Lc]){const t=((e,t)=>{const n={};if(null!=e[Jc]){const t=za(e[Jc]);Object.entries(t).forEach((([e,t])=>{n[`Subject.${e}`]=t}))}if(null!=e[Nc]){const t=((e,t)=>{const n={};if(null!=e[Xc]){const t=za(e[Xc]);Object.entries(t).forEach((([e,t])=>{n[`Text.${e}`]=t}))}if(null!=e[Uc]){const t=za(e[Uc]);Object.entries(t).forEach((([e,t])=>{n[`Html.${e}`]=t}))}return n})(e[Nc]);Object.entries(t).forEach((([e,t])=>{n[`Body.${e}`]=t}))}return n})(e[Lc]);Object.entries(t).forEach((([e,t])=>{n[`Message.${e}`]=t}))}if(null!=e[Wc]){const t=qa(e[Wc]);0===e[Wc]?.length&&(n.ReplyToAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`ReplyToAddresses.${e}`]=t}))}if(null!=e[Bc]&&(n[Bc]=e[Bc]),null!=e[Gc]&&(n[Gc]=e[Gc]),null!=e[Hc]&&(n[Hc]=e[Hc]),null!=e[tu]){const t=((e,t)=>{const n={};let s=1;for(const t of e){if(null===t)continue;const e=_a(t);Object.entries(e).forEach((([e,t])=>{n[`member.${s}.${e}`]=t})),s++}return n})(e[tu]);0===e[tu]?.length&&(n.Tags=[]),Object.entries(t).forEach((([e,t])=>{n[`Tags.${e}`]=t}))}return null!=e[Dc]&&(n[Dc]=e[Dc]),n},La=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Ka=(e,t)=>{const n={};return null!=e[Vc]&&(n[Vc]=(0,d.lK)(e[Vc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Va=(e,t)=>{const n={};return null!=e[Vc]&&(n[Vc]=(0,d.lK)(e[Vc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Ba=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Ha=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Wa=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Ga=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Qa=(e,t)=>{const n={};return null!=e[kc]&&(n[kc]=(0,d.lK)(e[kc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Za=(e,t)=>{const n={};return null!=e[kc]&&(n[kc]=(0,d.lK)(e[kc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Ja=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[qc]&&(n[qc]=(0,d.lK)(e[qc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Xa=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[qc]&&(n[qc]=(0,d.lK)(e[qc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Ya=(e,t)=>{const n={};return null!=e[_c]&&(n[_c]=(0,d.lK)(e[_c])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},ec=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[qc]&&(n[qc]=(0,d.lK)(e[qc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},tc=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},nc=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},sc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[qc]&&(n[qc]=(0,d.lK)(e[qc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},rc=(e,t)=>{const n={};return null!=e[zc]&&(n[zc]=(0,d.lK)(e[zc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},oc=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},ic=(e,t)=>{const n={};return null!=e[eu]&&(n[eu]=(0,d.lK)(e[eu])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},ac=(e,t)=>{const n={};return null!=e[Tc]&&(n[Tc]=(0,d.lK)(e[Tc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},cc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[qc]&&(n[qc]=(0,d.lK)(e[qc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},uc=(e,t)=>{const n={};return null!=e[nu]&&(n[nu]=(0,d.lK)(e[nu])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},lc=(e,t)=>{const n={};return null!=e[eu]&&(n[eu]=(0,d.lK)(e[eu])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},dc=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},pc=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},hc=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},fc=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},mc=(e,t)=>{const n={};return null!=e[eu]&&(n[eu]=(0,d.lK)(e[eu])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},gc=(e,t)=>{const n={};return null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},yc=(e,t)=>{const n={};return null!=e[Vc]&&(n[Vc]=(0,d.lK)(e[Vc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},wc=(e,t)=>{const n={};return null!=e[Vc]&&(n[Vc]=(0,d.lK)(e[Vc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Ec=(e,t)=>{const n={};return null!=e[Kc]&&(n[Kc]=(0,d.lK)(e[Kc])),n},xc=(e,t)=>{const n={};return null!=e[eu]&&(n[eu]=(0,d.lK)(e[eu])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},bc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},vc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[ou]&&(n[ou]=(0,d.lK)(e[ou])),n},Sc=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Pc=(0,d.jr)(xi),Ic=async(e,t,n,s,r)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),u={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==r&&(u.body=r),new se.Kd(u)},Oc={"content-type":"application/x-www-form-urlencoded"},$c="2010-12-01",Ac="Action",Nc="Body",Mc="BccAddresses",Tc="Bucket",Cc="Charset",Rc="CcAddresses",Dc="ConfigurationSetName",kc="CustomVerificationEmailTemplateName",jc="Destination",Fc="Data",qc="EventDestinationName",zc="FunctionArn",_c="FromEmailAddress",Uc="Html",Lc="Message",Kc="MessageId",Vc="Name",Bc="ReturnPath",Hc="ReturnPathArn",Wc="ReplyToAddresses",Gc="SourceArn",Qc="SendEmail",Zc="Source",Jc="Subject",Xc="Text",Yc="ToAddresses",eu="TemplateName",tu="Tags",nu="Topic",su="Version",ru="Value",ou="message",iu=(e,t)=>((e,t)=>(0,d.Px)(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>{if(e.length){const t=new gr.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});t.addEntity("#xD","\r"),t.addEntity("#10","\n");const n=t.parse(e),s="#text",r=Object.keys(n)[0],o=n[r];return o[s]&&(o[r]=o[s],delete o[s]),(0,d.rm)(o)}return{}})),au=async(e,t)=>{const n=await iu(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n},cu=e=>Object.entries(e).map((([e,t])=>(0,d.$6)(e)+"="+(0,d.$6)(t))).join("&"),uu=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class lu extends(d.uB.classBuilder().ep({...Go}).m((function(e,t,n,s){return[(0,ie.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions())]})).s("SimpleEmailService","SendEmail",{}).n("SESClient","SendEmailCommand").f(void 0,void 0).ser(ta).de(na).build()){}var du,pu=function(){function e(){this.sesClient=new Ei({}),this.noLastAccessDate=new Date(0).toLocaleString()}return e.prototype.notifyUser=function(e){return t=this,n=void 0,r=function(){var t,n,s,r;return function(e,t){var n,s,r,o,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,s=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(o){switch(o.label){case 0:return console.debug("Notifying ".concat(JSON.stringify(e,null,1))),t=e.lastAccess.toLocaleString()===this.noLastAccessDate?"not in the last ".concat(process.env.deleteDays," days"):e.lastAccess.toLocaleDateString(),n="I: QuickSight user ".concat(e.username," in account ").concat(process.env.accountAlias," will be deleted"),s='In order to <a href="https://aws.amazon.com/quicksight/pricing/">control costs ($24/month/user)</a>,\n    your AWS QuickSight user \''.concat(e.username,"' \n    will be deleted when you have not accessed QuickSight in ").concat(process.env.deleteDays," days. \n    CloudTrail records indicate that your last access was ").concat(t,".<br /><br />\n    \n    You can keep your user by logging in and taking actions in QuickSight. \n    Alternatively, you can do nothing, and your user will be automatically deleted. \n    Never fear, you simply log back into QuickSight and enter your e-mail, and your user gets recreated. \n    No dashboards or other resources will be deleted at this time (we may clean those up in the future, with notification, of course).<br /><br />\n    \n    Account Number: ").concat(process.env.awsAccountId,"<br />\n    Account Alias: ").concat(process.env.accountAlias,"<br />\n    Assumed Role: ").concat(e.iamRole,"<br />\n    Email: ").concat(e.email,'<br /><br />\n  \n    For further assistance, contact <a href="mailto:').concat(process.env.contact,'">').concat(process.env.contact,"</a>. Thank you and have a fantastically fun-filled day 🥳.\n    "),r=new lu({Source:"".concat(process.env.accountAlias," Cloud Account Administrator<").concat(process.env.from,">"),Destination:{ToAddresses:[e.email],CcAddresses:JSON.parse(process.env.cc)},ReplyToAddresses:[process.env.replyTo],SourceArn:process.env.sesArn,Message:{Subject:{Data:n},Body:{Html:{Data:s}}}}),[4,this.sesClient.send(r)];case 1:return o.sent(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s((function(e){e(n)}))).then(i,a)}c((r=r.apply(t,n||[])).next())}));var t,n,s,r},e}(),hu=function(e){this.arn=e.Arn,this.email=e.Email,this.role=du[e.Role],this.username=e.UserName,this.invalid="N/A"===this.username;var t=this.username.split("/"),n=t[0],s=t[1];this.iamRole=n,this.stsSession=s};!function(e){e.READER="READER",e.AUTHOR="AUTHOR",e.ADMIN="ADMIN"}(du||(du={}));const fu=async(e,t,n)=>({operation:(0,h.u)(t).operation,region:await(0,h.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),mu=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"quicksight",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},gu={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},yu="required",wu="fn",Eu="argv",xu="ref",bu="isSet",vu="booleanEquals",Su="error",Pu="endpoint",Iu="tree",Ou="PartitionResult",$u={[yu]:!1,type:"String"},Au={[yu]:!0,default:!1,type:"Boolean"},Nu={[xu]:"Endpoint"},Mu={[wu]:vu,[Eu]:[{[xu]:"UseFIPS"},!0]},Tu={[wu]:vu,[Eu]:[{[xu]:"UseDualStack"},!0]},Cu={},Ru={[wu]:"getAttr",[Eu]:[{[xu]:Ou},"supportsFIPS"]},Du={[wu]:vu,[Eu]:[!0,{[wu]:"getAttr",[Eu]:[{[xu]:Ou},"supportsDualStack"]}]},ku=[Mu],ju=[Tu],Fu=[{[xu]:"Region"}],qu={version:"1.0",parameters:{Region:$u,UseDualStack:Au,UseFIPS:Au,Endpoint:$u},rules:[{conditions:[{[wu]:bu,[Eu]:[Nu]}],rules:[{conditions:ku,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Su},{conditions:ju,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Su},{endpoint:{url:Nu,properties:Cu,headers:Cu},type:Pu}],type:Iu},{conditions:[{[wu]:bu,[Eu]:Fu}],rules:[{conditions:[{[wu]:"aws.partition",[Eu]:Fu,assign:Ou}],rules:[{conditions:[Mu,Tu],rules:[{conditions:[{[wu]:vu,[Eu]:[!0,Ru]},Du],rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Cu,headers:Cu},type:Pu}],type:Iu},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Su}],type:Iu},{conditions:ku,rules:[{conditions:[{[wu]:vu,[Eu]:[Ru,!0]}],rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Cu,headers:Cu},type:Pu}],type:Iu},{error:"FIPS is enabled but this partition does not support FIPS",type:Su}],type:Iu},{conditions:ju,rules:[{conditions:[Du],rules:[{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Cu,headers:Cu},type:Pu}],type:Iu},{error:"DualStack is enabled but this partition does not support DualStack",type:Su}],type:Iu},{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dnsSuffix}",properties:Cu,headers:Cu},type:Pu}],type:Iu}],type:Iu},{error:"Invalid Configuration: Missing Region",type:Su}]},zu=(e,t={})=>(0,N.sO)(qu,{endpointParams:e,logger:t.logger}),_u=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}};class Uu extends d.Kj{constructor(...[s]){const r=(e=>{(0,d.I9)(process.version);const t=(0,te.I)(e),n=()=>t().then(d.lT),s=(e=>({apiVersion:"2018-04-01",base64Decoder:e?.base64Decoder??$.E,base64Encoder:e?.base64Encoder??$.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??zu,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??mu,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new I.f}],logger:e?.logger??new d.N4,serviceId:e?.serviceId??"QuickSight",urlParser:e?.urlParser??O.D,utf8Decoder:e?.utf8Decoder??A.ar,utf8Encoder:e?.utf8Encoder??A.Pq}))(e);return(0,y.I)(process.version),{...s,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??S.n,credentialDefaultProvider:e?.credentialDefaultProvider??w.defaultProvider,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,E.mJ)({serviceId:s.serviceId,clientVersion:"3.515.0"}),maxAttempts:e?.maxAttempts??(0,b.Z)(l.qs),region:e?.region??(0,b.Z)(i.GG,i.zH),requestHandler:e?.requestHandler??new v.$c(n),retryMode:e?.retryMode??(0,b.Z)({...l.kN,default:async()=>(await n()).retryMode||P.L0}),sha256:e?.sha256??x.V.bind(null,"sha256"),streamCollector:e?.streamCollector??v.kv,useDualstackEndpoint:e?.useDualstackEndpoint??(0,b.Z)(i.e$),useFipsEndpoint:e?.useFipsEndpoint??(0,b.Z)(i.Ko)}})(s||{}),h=(f=r,{...f,useDualstackEndpoint:f.useDualstackEndpoint??!1,useFipsEndpoint:f.useFipsEndpoint??!1,defaultSigningName:"quicksight"});var f;const m=(0,i.TD)(h),g=(0,u.Co)(m),N=(0,l.$z)(g),M=(0,e.OV)(N);var T;const C=((e,t)=>{const n={...(0,ne.Rq)(e),...(0,d.xA)(e),...(0,se.eS)(e),..._u(e)};return t.forEach((e=>e.configure(n))),{...e,...(0,ne.$3)(n),...(0,d.uv)(n),...(0,se.jt)(n),...(s=n,{httpAuthSchemes:s.httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()})};var s})((T=(0,o.Dc)(M),{...(0,p.h)(T)}),s?.extensions||[]);super(C),this.config=C,this.middlewareStack.use((0,l.ey)(this.config)),this.middlewareStack.use((0,c.vK)(this.config)),this.middlewareStack.use((0,e.TC)(this.config)),this.middlewareStack.use((0,t.Y7)(this.config)),this.middlewareStack.use((0,n.n4)(this.config)),this.middlewareStack.use((0,o.sM)(this.config)),this.middlewareStack.use((0,a.wB)(this.config,{httpAuthSchemeParametersProvider:this.getDefaultHttpAuthSchemeParametersProvider(),identityProviderConfigProvider:this.getIdentityProviderConfigProvider()})),this.middlewareStack.use((0,a.lW)(this.config))}destroy(){super.destroy()}getDefaultHttpAuthSchemeParametersProvider(){return fu}getIdentityProviderConfigProvider(){return async e=>new a.h$({"aws.auth#sigv4":e.credentials})}}class Lu extends d.TJ{constructor(e){super(e),Object.setPrototypeOf(this,Lu.prototype)}}class Ku extends Lu{constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,Ku.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}var Vu,Bu,Hu;!function(e){e.visit=(e,t)=>void 0!==e.AmazonElasticsearchParameters?t.AmazonElasticsearchParameters(e.AmazonElasticsearchParameters):void 0!==e.AthenaParameters?t.AthenaParameters(e.AthenaParameters):void 0!==e.AuroraParameters?t.AuroraParameters(e.AuroraParameters):void 0!==e.AuroraPostgreSqlParameters?t.AuroraPostgreSqlParameters(e.AuroraPostgreSqlParameters):void 0!==e.AwsIotAnalyticsParameters?t.AwsIotAnalyticsParameters(e.AwsIotAnalyticsParameters):void 0!==e.JiraParameters?t.JiraParameters(e.JiraParameters):void 0!==e.MariaDbParameters?t.MariaDbParameters(e.MariaDbParameters):void 0!==e.MySqlParameters?t.MySqlParameters(e.MySqlParameters):void 0!==e.OracleParameters?t.OracleParameters(e.OracleParameters):void 0!==e.PostgreSqlParameters?t.PostgreSqlParameters(e.PostgreSqlParameters):void 0!==e.PrestoParameters?t.PrestoParameters(e.PrestoParameters):void 0!==e.RdsParameters?t.RdsParameters(e.RdsParameters):void 0!==e.RedshiftParameters?t.RedshiftParameters(e.RedshiftParameters):void 0!==e.S3Parameters?t.S3Parameters(e.S3Parameters):void 0!==e.ServiceNowParameters?t.ServiceNowParameters(e.ServiceNowParameters):void 0!==e.SnowflakeParameters?t.SnowflakeParameters(e.SnowflakeParameters):void 0!==e.SparkParameters?t.SparkParameters(e.SparkParameters):void 0!==e.SqlServerParameters?t.SqlServerParameters(e.SqlServerParameters):void 0!==e.TeradataParameters?t.TeradataParameters(e.TeradataParameters):void 0!==e.TwitterParameters?t.TwitterParameters(e.TwitterParameters):void 0!==e.AmazonOpenSearchParameters?t.AmazonOpenSearchParameters(e.AmazonOpenSearchParameters):void 0!==e.ExasolParameters?t.ExasolParameters(e.ExasolParameters):void 0!==e.DatabricksParameters?t.DatabricksParameters(e.DatabricksParameters):void 0!==e.StarburstParameters?t.StarburstParameters(e.StarburstParameters):void 0!==e.TrinoParameters?t.TrinoParameters(e.TrinoParameters):void 0!==e.BigQueryParameters?t.BigQueryParameters(e.BigQueryParameters):t._(e.$unknown[0],e.$unknown[1])}(Vu||(Vu={}));class Wu extends Lu{constructor(e){super({name:"InternalFailureException",$fault:"server",...e}),this.name="InternalFailureException",this.$fault="server",Object.setPrototypeOf(this,Wu.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Gu extends Lu{constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,Gu.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Qu extends Lu{constructor(e){super({name:"ResourceExistsException",$fault:"client",...e}),this.name="ResourceExistsException",this.$fault="client",Object.setPrototypeOf(this,Qu.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class Zu extends Lu{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Zu.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class Ju extends Lu{constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),this.name="ThrottlingException",this.$fault="client",Object.setPrototypeOf(this,Ju.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Xu extends Lu{constructor(e){super({name:"ConcurrentUpdatingException",$fault:"server",...e}),this.name="ConcurrentUpdatingException",this.$fault="server",Object.setPrototypeOf(this,Xu.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Yu extends Lu{constructor(e){super({name:"ConflictException",$fault:"client",...e}),this.name="ConflictException",this.$fault="client",Object.setPrototypeOf(this,Yu.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class el extends Lu{constructor(e){super({name:"ResourceUnavailableException",$fault:"server",...e}),this.name="ResourceUnavailableException",this.$fault="server",Object.setPrototypeOf(this,el.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class tl extends Lu{constructor(e){super({name:"PreconditionNotMetException",$fault:"client",...e}),this.name="PreconditionNotMetException",this.$fault="client",Object.setPrototypeOf(this,tl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class nl extends Lu{constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),this.name="LimitExceededException",this.$fault="client",Object.setPrototypeOf(this,nl.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class sl extends Lu{constructor(e){super({name:"UnsupportedUserEditionException",$fault:"client",...e}),this.name="UnsupportedUserEditionException",this.$fault="client",Object.setPrototypeOf(this,sl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}(Bu||(Bu={})).visit=(e,t)=>void 0!==e.ProjectOperation?t.ProjectOperation(e.ProjectOperation):void 0!==e.FilterOperation?t.FilterOperation(e.FilterOperation):void 0!==e.CreateColumnsOperation?t.CreateColumnsOperation(e.CreateColumnsOperation):void 0!==e.RenameColumnOperation?t.RenameColumnOperation(e.RenameColumnOperation):void 0!==e.CastColumnTypeOperation?t.CastColumnTypeOperation(e.CastColumnTypeOperation):void 0!==e.TagColumnOperation?t.TagColumnOperation(e.TagColumnOperation):void 0!==e.UntagColumnOperation?t.UntagColumnOperation(e.UntagColumnOperation):void 0!==e.OverrideDatasetParameterOperation?t.OverrideDatasetParameterOperation(e.OverrideDatasetParameterOperation):t._(e.$unknown[0],e.$unknown[1]),function(e){e.visit=(e,t)=>void 0!==e.RelationalTable?t.RelationalTable(e.RelationalTable):void 0!==e.CustomSql?t.CustomSql(e.CustomSql):void 0!==e.S3Source?t.S3Source(e.S3Source):t._(e.$unknown[0],e.$unknown[1])}(Hu||(Hu={}));class rl extends Lu{constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),this.name="InvalidNextTokenException",this.$fault="client",Object.setPrototypeOf(this,rl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class ol extends Lu{constructor(e){super({name:"DomainNotWhitelistedException",$fault:"client",...e}),this.name="DomainNotWhitelistedException",this.$fault="client",Object.setPrototypeOf(this,ol.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class il extends Lu{constructor(e){super({name:"SessionLifetimeInMinutesInvalidException",$fault:"client",...e}),this.name="SessionLifetimeInMinutesInvalidException",this.$fault="client",Object.setPrototypeOf(this,il.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class al extends Lu{constructor(e){super({name:"UnsupportedPricingPlanException",$fault:"client",...e}),this.name="UnsupportedPricingPlanException",this.$fault="client",Object.setPrototypeOf(this,al.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class cl extends Lu{constructor(e){super({name:"QuickSightUserNotFoundException",$fault:"client",...e}),this.name="QuickSightUserNotFoundException",this.$fault="client",Object.setPrototypeOf(this,cl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class ul extends Lu{constructor(e){super({name:"IdentityTypeNotSupportedException",$fault:"client",...e}),this.name="IdentityTypeNotSupportedException",this.$fault="client",Object.setPrototypeOf(this,ul.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class ll extends Lu{constructor(e){super({name:"InvalidRequestException",$fault:"client",...e}),this.name="InvalidRequestException",this.$fault="client",Object.setPrototypeOf(this,ll.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}const dl=async(e,t)=>{const n=(0,a.lI)(e,t);return n.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"),n.p("UserName",(()=>e.UserName),"{UserName}",!1),n.p("AwsAccountId",(()=>e.AwsAccountId),"{AwsAccountId}",!1),n.p("Namespace",(()=>e.Namespace),"{Namespace}",!1),n.m("DELETE").h({}).b(void 0),n.build()},pl=async(e,t)=>{const n=(0,a.lI)(e,t);n.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users"),n.p("AwsAccountId",(()=>e.AwsAccountId),"{AwsAccountId}",!1),n.p("Namespace",(()=>e.Namespace),"{Namespace}",!1);const s=(0,d.Tj)({[_l]:[,e[ql]],[zl]:[()=>void 0!==e.MaxResults,()=>e[Fl].toString()]});return n.m("GET").h({}).q(s).b(void 0),n.build()},hl=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return ml(e,t);const n=(0,d.Tj)({$metadata:jl(e)}),s=(0,d.Y0)((0,d.Xk)(await Ul(e.body,t)),"body"),r=(0,d.s)(s,{RequestId:d.lK});return Object.assign(n,r),(0,d.Tj)(n,{Status:[,e.statusCode]}),n},fl=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return ml(e,t);const n=(0,d.Tj)({$metadata:jl(e)}),s=(0,d.Y0)((0,d.Xk)(await Ul(e.body,t)),"body"),r=(0,d.s)(s,{NextToken:d.lK,RequestId:d.lK,UserList:d.Ss});return Object.assign(n,r),(0,d.Tj)(n,{Status:[,e.statusCode]}),n},ml=async(e,t)=>{const n={...e,body:await Ll(e.body,t)},s=Kl(e,n.body);switch(s){case"AccessDeniedException":case"com.amazonaws.quicksight#AccessDeniedException":throw await yl(n,t);case"InternalFailureException":case"com.amazonaws.quicksight#InternalFailureException":throw await vl(n,t);case"InvalidParameterValueException":case"com.amazonaws.quicksight#InvalidParameterValueException":throw await Pl(n,t);case"ResourceExistsException":case"com.amazonaws.quicksight#ResourceExistsException":throw await Nl(n,t);case"ResourceNotFoundException":case"com.amazonaws.quicksight#ResourceNotFoundException":throw await Ml(n,t);case"ThrottlingException":case"com.amazonaws.quicksight#ThrottlingException":throw await Rl(n,t);case"ConflictException":case"com.amazonaws.quicksight#ConflictException":throw await El(n,t);case"ResourceUnavailableException":case"com.amazonaws.quicksight#ResourceUnavailableException":throw await Tl(n,t);case"PreconditionNotMetException":case"com.amazonaws.quicksight#PreconditionNotMetException":throw await $l(n,t);case"LimitExceededException":case"com.amazonaws.quicksight#LimitExceededException":throw await Ol(n,t);case"UnsupportedUserEditionException":case"com.amazonaws.quicksight#UnsupportedUserEditionException":throw await kl(n,t);case"ConcurrentUpdatingException":case"com.amazonaws.quicksight#ConcurrentUpdatingException":throw await wl(n,t);case"InvalidNextTokenException":case"com.amazonaws.quicksight#InvalidNextTokenException":throw await Sl(n,t);case"SessionLifetimeInMinutesInvalidException":case"com.amazonaws.quicksight#SessionLifetimeInMinutesInvalidException":throw await Cl(n,t);case"UnsupportedPricingPlanException":case"com.amazonaws.quicksight#UnsupportedPricingPlanException":throw await Dl(n,t);case"QuickSightUserNotFoundException":case"com.amazonaws.quicksight#QuickSightUserNotFoundException":throw await Al(n,t);case"DomainNotWhitelistedException":case"com.amazonaws.quicksight#DomainNotWhitelistedException":throw await xl(n,t);case"IdentityTypeNotSupportedException":case"com.amazonaws.quicksight#IdentityTypeNotSupportedException":throw await bl(n,t);case"InvalidRequestException":case"com.amazonaws.quicksight#InvalidRequestException":throw await Il(n,t);default:const r=n.body;return gl({output:e,parsedBody:r,errorCode:s})}},gl=(0,d.jr)(Lu),yl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new Ku({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},wl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new Xu({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},El=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new Yu({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},xl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new ol({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},bl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new ul({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},vl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new Wu({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Sl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new rl({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Pl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new Gu({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Il=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new ll({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Ol=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK,ResourceType:d.lK});Object.assign(n,r);const o=new nl({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},$l=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new tl({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Al=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new cl({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Nl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK,ResourceType:d.lK});Object.assign(n,r);const o=new Qu({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Ml=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK,ResourceType:d.lK});Object.assign(n,r);const o=new Zu({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Tl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK,ResourceType:d.lK});Object.assign(n,r);const o=new el({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Cl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new il({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Rl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new Ju({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},Dl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new al({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},kl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,r=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,r);const o=new sl({$metadata:jl(e),...n});return(0,d.Mw)(o,e.body)},jl=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Fl="MaxResults",ql="NextToken",zl="max-results",_l="next-token",Ul=(e,t)=>((e,t)=>(0,d.Px)(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),Ll=async(e,t)=>{const n=await Ul(e,t);return n.message=n.message??n.Message,n},Kl=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},s=(r=e.headers,"x-amzn-errortype",Object.keys(r).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var r;return void 0!==s?n(e.headers[s]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class Vl extends(d.uB.classBuilder().ep({...gu}).m((function(e,t,n,s){return[(0,ie.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions())]})).s("QuickSight_20180401","ListUsers",{}).n("QuickSightClient","ListUsersCommand").f(void 0,void 0).ser(pl).de(fl).build()){}class Bl extends(d.uB.classBuilder().ep({...gu}).m((function(e,t,n,s){return[(0,ie.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions())]})).s("QuickSight_20180401","DeleteUser",{}).n("QuickSightClient","DeleteUserCommand").f(void 0,void 0).ser(dl).de(hl).build()){}var Hl=function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))},Wl=function(e,t){var n,s,r,o,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,s=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},Gl=function(){function e(){this.awsAccountId=process.env.awsAccountId,this.quickSightClient=new Uu({})}return e.prototype.retrieveUsers=function(){return Hl(this,void 0,void 0,(function(){var t,n,s,r;return Wl(this,(function(o){switch(o.label){case 0:t=[],n="",o.label=1;case 1:return s=new Vl({AwsAccountId:this.awsAccountId,Namespace:e.namespace,NextToken:n}),[4,this.quickSightClient.send(s)];case 2:r=o.sent(),n=r.NextToken,r.UserList.forEach((function(e){return t.push(new hu(e))})),o.label=3;case 3:if(n)return[3,1];o.label=4;case 4:return[2,t]}}))}))},e.prototype.deleteUser=function(t){return Hl(this,void 0,void 0,(function(){var n;return Wl(this,(function(s){switch(s.label){case 0:return console.debug("Deleting ".concat(JSON.stringify(t,null,1))),n=new Bl({AwsAccountId:this.awsAccountId,Namespace:e.namespace,UserName:t.username}),[4,this.quickSightClient.send(n)];case 1:return s.sent(),[2]}}))}))},e.namespace="default",e}();const Ql=function(){return e=void 0,t=void 0,s=function(){var e,t,n,s,r,o,i,a,c,u,l,d,p,h,f,m,g,y,w,E;return function(e,t){var n,s,r,o,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,s=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(x){switch(x.label){case 0:return e=process.env,t=e.deleteDays,n=e.notifyDays,s="true"===process.env.enableNotification,r=new Date,o=new Date,r.setDate(r.getDate()-parseInt(t)),o.setDate(o.getDate()-parseInt(n)),console.info("Notifying users with last access date on: ".concat(o.toLocaleDateString()," (").concat(n," days ago).")),console.info("Deleting users with last access date on or before: ".concat(r.toLocaleDateString()," (").concat(t," days ago).")),console.info("Notification enabled? ".concat(s,".")),i=new Gl,a=new Os,c=new pu,u=new Bo,[4,i.retrieveUsers()];case 1:return l=x.sent(),[4,a.retrieveQuickSightUserEvents(r)];case 2:for(d=x.sent(),p=0,h=l;p<h.length;p++)(E=h[p]).lastAccess=a.getLastAccessDate(E,d);console.debug("QuickSight Users:\n".concat(JSON.stringify(l,null,2))),u.queueMetric({MetricName:"PriorQuickSightUsersCount",Value:l.length}),f=0,m=0,g=0,y=0,w=l,x.label=3;case 3:return y<w.length?(E=w[y]).invalid?(console.warn("Invalid user: ".concat(JSON.stringify(E))),f++,[3,8]):[3,4]:[3,9];case 4:return E.lastAccess<r?(m++,[4,i.deleteUser(E)]):[3,6];case 5:return x.sent(),[3,8];case 6:return s&&E.role!==du.READER&&E.lastAccess.toLocaleDateString()===o.toLocaleDateString()?(g++,[4,c.notifyUser(E)]):[3,8];case 7:x.sent(),x.label=8;case 8:return y++,[3,3];case 9:return u.queueMetric({MetricName:"InvalidUsersCount",Value:f}),u.queueMetric({MetricName:"UsersDeletedCount",Value:m}),u.queueMetric({MetricName:"NotificationsSentCount",Value:g}),u.queueMetric({MetricName:"RemainingQuickSightUsersCount",Value:l.length-m}),[4,u.emitQueuedMetrics()];case 10:return x.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}));var e,t,n,s}})(),module.exports=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFNBQVksV0FDcEMsV0FBWSxXQUFZLFNBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksU0FDcEMsV0FBWSxXQUFZLFdBQVksU0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksU0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZ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LEVBQXVCOVIsWUFBWSxDQUFFaVMsV0FBWSw0QkFBNkJDLE1BQU92QixFQUFnQjN1RSxTQUVqR213RSxFQUFlLEVBQ2ZDLEVBQWUsRUFDZkMsRUFBb0IsTUFFSyxFQUFBMUIsMEJBQUEsWUFBbEIzRixFQUFjLE1BQ0xLLFNBRWxCbjlDLFFBQVFDLEtBQUssd0JBQWlCcEYsS0FBS0MsVUFBVWdpRCxLQUM3Q21ILFdBSEcsTUFEdUMsb0JBS2hDbkgsRUFBZW5CLFdBQWF3SCxHQUN0Q2UsSUFDQSxHQUFNWCxFQUFzQlIsV0FBV2pHLEtBRjdCLG9CQUVWLDZCQUNVb0csR0FDSnBHLEVBQWUzVCxPQUFTbVMsR0FBZThJLFFBQ3ZDdEgsRUFBZW5CLFdBQVdFLHVCQUF5QnVILEVBQVd2SCxzQkFDcEVzSSxJQUNBLEdBQU1ULEVBQW9CaEksV0FBV29CLEtBSjNCLGFBSVYsaUNBWjJCLGlCQW9CN0IsT0FKQThHLEVBQXVCOVIsWUFBWSxDQUFFaVMsV0FBWSxvQkFBcUJDLE1BQU9DLElBQzdFTCxFQUF1QjlSLFlBQVksQ0FBRWlTLFdBQVksb0JBQXFCQyxNQUFPRSxJQUM3RU4sRUFBdUI5UixZQUFZLENBQUVpUyxXQUFZLHlCQUEwQkMsTUFBT0csSUFDbEZQLEVBQXVCOVIsWUFBWSxDQUFFaVMsV0FBWSxnQ0FBaUNDLE1BQU92QixFQUFnQjN1RSxPQUFTb3dFLElBQ2xILEdBQU1OLEVBQXVCNVIsb0NBQTdCLDhCQXZEYyxrUkF3RGQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL3dlYnBhY2svcnVudGltZS9yZXF1aXJlIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLWNyeXB0by9jcmMzMi9idWlsZC9hd3NfY3JjMzIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLWNyeXB0by9jcmMzMi9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3MtY3J5cHRvL2NyYzMyL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLWNyeXB0by91dGlsL2J1aWxkL2NvbnZlcnRUb0J1ZmZlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3MtY3J5cHRvL3V0aWwvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLWNyeXB0by91dGlsL2J1aWxkL2lzRW1wdHlEYXRhLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1jcnlwdG8vdXRpbC9idWlsZC9udW1Ub1VpbnQ4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1jcnlwdG8vdXRpbC9idWlsZC91aW50MzJBcnJheUZyb20uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvY2xpZW50L2VtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2dldFNrZXdDb3JyZWN0ZWREYXRlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL2h0dHBBdXRoU2NoZW1lcy91dGlscy9nZXREYXRlSGVhZGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL2h0dHBBdXRoU2NoZW1lcy91dGlscy9nZXRVcGRhdGVkU3lzdGVtQ2xvY2tPZmZzZXQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2lzQ2xvY2tTa2V3ZWQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvaHR0cEF1dGhTY2hlbWVzL2F3c19zZGsvQXdzU2RrU2lnVjRTaWduZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtaGV4LWVuY29kaW5nL2Rpc3QtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2V2ZW50c3RyZWFtLWNvZGVjL2Rpc3QtZXMvSW50NjQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2V2ZW50c3RyZWFtLWNvZGVjL2Rpc3QtZXMvSGVhZGVyTWFyc2hhbGxlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvZXZlbnRzdHJlYW0tY29kZWMvZGlzdC1lcy9NZXNzYWdlRGVjb2RlclN0cmVhbS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvZXZlbnRzdHJlYW0tY29kZWMvZGlzdC1lcy9NZXNzYWdlRW5jb2RlclN0cmVhbS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvZXZlbnRzdHJlYW0tY29kZWMvZGlzdC1lcy9TbWl0aHlNZXNzYWdlRGVjb2RlclN0cmVhbS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvZXZlbnRzdHJlYW0tY29kZWMvZGlzdC1lcy9TbWl0aHlNZXNzYWdlRW5jb2RlclN0cmVhbS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaWduYXR1cmUtdjQvZGlzdC1lcy9jcmVkZW50aWFsRGVyaXZhdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvZ2V0Q2Fub25pY2FsSGVhZGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvZ2V0UGF5bG9hZEhhc2guanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NpZ25hdHVyZS12NC9kaXN0LWVzL2Nsb25lUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvcHJlcGFyZVJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NpZ25hdHVyZS12NC9kaXN0LWVzL1NpZ25hdHVyZVY0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaWduYXR1cmUtdjQvZGlzdC1lcy9tb3ZlSGVhZGVyc1RvUXVlcnkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NpZ25hdHVyZS12NC9kaXN0LWVzL2hlYWRlclV0aWwuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NpZ25hdHVyZS12NC9kaXN0LWVzL2dldENhbm9uaWNhbFF1ZXJ5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaWduYXR1cmUtdjQvZGlzdC1lcy91dGlsRGF0ZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NvcmUvZGlzdC1lcy9odHRwQXV0aFNjaGVtZXMvYXdzX3Nkay9yZXNvbHZlQXdzU2RrU2lnVjRDb25maWcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUvZGlzdC1lcy9yZW1vdGVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZS9kaXN0LWVzL2RlZmF1bHRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXIvZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtbG9nZ2VyL2Rpc3QtZXMvbG9nZ2VyTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtcmVjdXJzaW9uLWRldGVjdGlvbi9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50L2Rpc3QtZXMvY29uZmlndXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9hd3MvaXNWaXJ0dWFsSG9zdGFibGVTM0J1Y2tldC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvbGliL2F3cy9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2F3cy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvbGliL2F3cy9wYXJzZUFybi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudC9kaXN0LWVzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudC9kaXN0LWVzL3VzZXItYWdlbnQtbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL3JlZ2lvbi1jb25maWctcmVzb2x2ZXIvZGlzdC1lcy9leHRlbnNpb25zL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcInByb2Nlc3NcIiIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL3V0aWwtdXNlci1hZ2VudC1ub2RlL2Rpc3QtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay91dGlsLXV0ZjgtYnJvd3Nlci9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC11dGY4LWJyb3dzZXIvZGlzdC1lcy93aGF0d2dFbmNvZGluZ0FwaS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL3V0aWwtdXRmOC1icm93c2VyL2Rpc3QtZXMvcHVyZUpzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb25maWctcmVzb2x2ZXIvZGlzdC1lcy9lbmRwb2ludHNDb25maWcvTm9kZVVzZUR1YWxzdGFja0VuZHBvaW50Q29uZmlnT3B0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29uZmlnLXJlc29sdmVyL2Rpc3QtZXMvZW5kcG9pbnRzQ29uZmlnL05vZGVVc2VGaXBzRW5kcG9pbnRDb25maWdPcHRpb25zLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb25maWctcmVzb2x2ZXIvZGlzdC1lcy9lbmRwb2ludHNDb25maWcvcmVzb2x2ZUN1c3RvbUVuZHBvaW50c0NvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29uZmlnLXJlc29sdmVyL2Rpc3QtZXMvcmVnaW9uQ29uZmlnL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29uZmlnLXJlc29sdmVyL2Rpc3QtZXMvcmVnaW9uQ29uZmlnL2lzRmlwc1JlZ2lvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29uZmlnLXJlc29sdmVyL2Rpc3QtZXMvcmVnaW9uQ29uZmlnL2dldFJlYWxSZWdpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvbmZpZy1yZXNvbHZlci9kaXN0LWVzL3JlZ2lvbkNvbmZpZy9yZXNvbHZlUmVnaW9uQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lL2h0dHBBdXRoU2NoZW1lTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL21pZGRsZXdhcmUtaHR0cC1hdXRoLXNjaGVtZS9nZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL21pZGRsZXdhcmUtaHR0cC1hdXRoLXNjaGVtZS9nZXRIdHRwQXV0aFNjaGVtZVBsdWdpbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL21pZGRsZXdhcmUtaHR0cC1zaWduaW5nL2h0dHBTaWduaW5nTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL21pZGRsZXdhcmUtaHR0cC1zaWduaW5nL2dldEh0dHBTaWduaW5nTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3V0aWwtaWRlbnRpdHktYW5kLWF1dGgvRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL2h0dHBBdXRoU2NoZW1lcy9ub0F1dGguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL21lbW9pemVJZGVudGl0eVByb3ZpZGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbm9ybWFsaXplUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9wcm90b2NvbHMvcmVxdWVzdEJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2hhc2gtbm9kZS9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9pcy1hcnJheS1idWZmZXIvZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb250ZW50LWxlbmd0aC9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtZXMvc2VydmljZS1jdXN0b21pemF0aW9ucy9zMy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2FkYXB0b3JzL2NyZWF0ZUNvbmZpZ1ZhbHVlUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnQvZGlzdC1lcy9hZGFwdG9ycy9nZXRFbmRwb2ludFVybENvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2FkYXB0b3JzL3RvRW5kcG9pbnRWMS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUluc3RydWN0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2VuZHBvaW50TWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUNvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2dldEVuZHBvaW50UGx1Z2luLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtZXMvcmVzb2x2ZUVuZHBvaW50Q29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JuZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9yZWdleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtcmV0cnkvZGlzdC1lcy9jb25maWd1cmF0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1yZXRyeS9kaXN0LWVzL2lzU3RyZWFtaW5nUGF5bG9hZC9pc1N0cmVhbWluZ1BheWxvYWQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtcmV0cnkvZGlzdC1lcy9yZXRyeU1pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtcmV0cnkvZGlzdC1lcy91dGlsLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlL2Rpc3QtZXMvZGVzZXJpYWxpemVyTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1zZXJkZS9kaXN0LWVzL3NlcmlhbGl6ZXJNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlL2Rpc3QtZXMvc2VyZGVQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvZnJvbVNoYXJlZENvbmZpZ0ZpbGVzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlci9kaXN0LWVzL2NvbmZpZ0xvYWRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXIvZGlzdC1lcy9mcm9tRW52LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlci9kaXN0LWVzL2Zyb21TdGF0aWMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiaHR0cHNcIiIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXIvZGlzdC1lcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtaHR0cC1oYW5kbGVyL2Rpc3QtZXMvZ2V0LXRyYW5zZm9ybWVkLWhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtaHR0cC1oYW5kbGVyL2Rpc3QtZXMvbm9kZS1odHRwLWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3F1ZXJ5c3RyaW5nLWJ1aWxkZXIvZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXIvZGlzdC1lcy9zZXQtY29ubmVjdGlvbi10aW1lb3V0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlci9kaXN0LWVzL3NldC1zb2NrZXQtdGltZW91dC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXIvZGlzdC1lcy9zZXQtc29ja2V0LWtlZXAtYWxpdmUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtaHR0cC1oYW5kbGVyL2Rpc3QtZXMvd3JpdGUtcmVxdWVzdC1ib2R5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcImh0dHAyXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtaHR0cC1oYW5kbGVyL2Rpc3QtZXMvbm9kZS1odHRwMi1jb25uZWN0aW9uLXBvb2wuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtaHR0cC1oYW5kbGVyL2Rpc3QtZXMvc3RyZWFtLWNvbGxlY3Rvci9jb2xsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtaHR0cC1oYW5kbGVyL2Rpc3QtZXMvc3RyZWFtLWNvbGxlY3Rvci9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvcGVydHktcHJvdmlkZXIvZGlzdC1lcy9Qcm92aWRlckVycm9yLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlci9kaXN0LWVzL0NyZWRlbnRpYWxzUHJvdmlkZXJFcnJvci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvcGVydHktcHJvdmlkZXIvZGlzdC1lcy9Ub2tlblByb3ZpZGVyRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyL2Rpc3QtZXMvY2hhaW4uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyL2Rpc3QtZXMvZnJvbVN0YXRpYy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvcGVydHktcHJvdmlkZXIvZGlzdC1lcy9tZW1vaXplLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9wcm90b2NvbC1odHRwL2Rpc3QtZXMvZXh0ZW5zaW9ucy9odHRwRXh0ZW5zaW9uQ29uZmlndXJhdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvdG9jb2wtaHR0cC9kaXN0LWVzL2h0dHBSZXF1ZXN0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9wcm90b2NvbC1odHRwL2Rpc3QtZXMvaHR0cFJlc3BvbnNlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zZXJ2aWNlLWVycm9yLWNsYXNzaWZpY2F0aW9uL2Rpc3QtZXMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zZXJ2aWNlLWVycm9yLWNsYXNzaWZpY2F0aW9uL2Rpc3QtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwicGF0aFwiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtZXMvZ2V0SG9tZURpci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWVzL2dldFByb2ZpbGVOYW1lLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtZXMvZ2V0U1NPVG9rZW5GaWxlcGF0aC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWVzL2dldFNTT1Rva2VuRnJvbUZpbGUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9nZXRDb25maWdEYXRhLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtZXMvZ2V0Q29uZmlnRmlsZXBhdGguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9nZXRDcmVkZW50aWFsc0ZpbGVwYXRoLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtZXMvcGFyc2VJbmkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9zbHVycEZpbGUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9sb2FkU2hhcmVkQ29uZmlnRmlsZXMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9nZXRTc29TZXNzaW9uRGF0YS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWVzL2xvYWRTc29TZXNzaW9uRGF0YS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWVzL3BhcnNlS25vd25GaWxlcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWVzL21lcmdlQ29uZmlnRmlsZXMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9Ob09wTG9nZ2VyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXN0YWNrL2Rpc3QtZXMvTWlkZGxld2FyZVN0YWNrLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvY2xpZW50LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvY29sbGVjdC1zdHJlYW0tYm9keS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2NvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9wYXJzZS11dGlscy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2RhdGUtdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9leGNlcHRpb25zLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvZGVmYXVsdC1lcnJvci1oYW5kbGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvZGVmYXVsdHMtbW9kZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2VtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9leHRlbnNpb25zL2NoZWNrc3VtLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvZXh0ZW5zaW9ucy9yZXRyeS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2V4dGVuc2lvbnMvZGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9leHRlbmRlZC1lbmNvZGUtdXJpLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2dldC1hcnJheS1pZi1zaW5nbGUtaXRlbS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2dldC12YWx1ZS1mcm9tLXRleHQtbm9kZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2xhenktanNvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL29iamVjdC1tYXBwaW5nLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvcmVzb2x2ZS1wYXRoLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvc2VyLXV0aWxzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvc2VyZGUtanNvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdHlwZXMvZGlzdC1lcy9hdXRoL2F1dGguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3R5cGVzL2Rpc3QtZXMvYXV0aC9IdHRwQXBpS2V5QXV0aC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdHlwZXMvZGlzdC1lcy9lbmRwb2ludC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdHlwZXMvZGlzdC1lcy9leHRlbnNpb25zL2NoZWNrc3VtLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS90eXBlcy9kaXN0LWVzL2h0dHAuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3R5cGVzL2Rpc3QtZXMvbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdHlwZXMvZGlzdC1lcy9wcm9maWxlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS90eXBlcy9kaXN0LWVzL3RyYW5zZmVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91cmwtcGFyc2VyL2Rpc3QtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3F1ZXJ5c3RyaW5nLXBhcnNlci9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWVzL2Zyb21CYXNlNjQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYmFzZTY0L2Rpc3QtZXMvdG9CYXNlNjQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYm9keS1sZW5ndGgtbm9kZS9kaXN0LWVzL2NhbGN1bGF0ZUJvZHlMZW5ndGguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYnVmZmVyLWZyb20vZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1jb25maWctcHJvdmlkZXIvZGlzdC1lcy9ib29sZWFuU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvbnVtYmVyU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZGVmYXVsdHMtbW9kZS1ub2RlL2Rpc3QtZXMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZS9kaXN0LWVzL2RlZmF1bHRzTW9kZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1kZWZhdWx0cy1tb2RlLW5vZGUvZGlzdC1lcy9yZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9pc0lwQWRkcmVzcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvaXNWYWxpZEhvc3RMYWJlbC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9jdXN0b21FbmRwb2ludEZ1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9kZWJ1Zy9kZWJ1Z0lkLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2RlYnVnL3RvRGVidWdTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvdHlwZXMvRW5kcG9pbnRFcnJvci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvYm9vbGVhbkVxdWFscy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvZ2V0QXR0ci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvZ2V0QXR0clBhdGhMaXN0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9wYXJzZVVSTC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9lbmRwb2ludEZ1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvaXNTZXQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvbGliL25vdC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvc3RyaW5nRXF1YWxzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9zdWJzdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvbGliL3VyaUVuY29kZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9ldmFsdWF0ZVRlbXBsYXRlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2V2YWx1YXRlRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9nZXRSZWZlcmVuY2VWYWx1ZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9jYWxsRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvdXRpbHMvZXZhbHVhdGVDb25kaXRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvdXRpbHMvZXZhbHVhdGVDb25kaXRpb25zLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2dldEVuZHBvaW50SGVhZGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9nZXRFbmRwb2ludFByb3BlcnR5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2dldEVuZHBvaW50UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9nZXRFbmRwb2ludFVybC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9ldmFsdWF0ZUVuZHBvaW50UnVsZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9ldmFsdWF0ZUVycm9yUnVsZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9ldmFsdWF0ZVRyZWVSdWxlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2V2YWx1YXRlUnVsZXMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvcmVzb2x2ZUVuZHBvaW50LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLW1pZGRsZXdhcmUvZGlzdC1lcy9nZXRTbWl0aHlDb250ZXh0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLW1pZGRsZXdhcmUvZGlzdC1lcy9ub3JtYWxpemVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1yZXRyeS9kaXN0LWVzL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1yZXRyeS9kaXN0LWVzL0RlZmF1bHRSYXRlTGltaXRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1yZXRyeS9kaXN0LWVzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1yZXRyeS9kaXN0LWVzL2RlZmF1bHRSZXRyeVRva2VuLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXJldHJ5L2Rpc3QtZXMvU3RhbmRhcmRSZXRyeVN0cmF0ZWd5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXJldHJ5L2Rpc3QtZXMvZGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXJldHJ5L2Rpc3QtZXMvQWRhcHRpdmVSZXRyeVN0cmF0ZWd5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWVzL2Jsb2IvVWludDhBcnJheUJsb2JBZGFwdGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWVzL2Jsb2IvdHJhbnNmb3Jtcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1lcy9zZGstc3RyZWFtLW1peGluLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXVyaS1lc2NhcGUvZGlzdC1lcy9lc2NhcGUtdXJpLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXV0ZjgvZGlzdC1lcy9mcm9tVXRmOC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC11dGY4L2Rpc3QtZXMvdG9VaW50OEFycmF5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXV0ZjgvZGlzdC1lcy90b1V0ZjguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL2Z4cC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvdXRpbC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxidWlsZGVyL2pzb24yeG1sLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxidWlsZGVyL29yZGVyZWRKczJYbWwuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9Eb2NUeXBlUmVhZGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvT3B0aW9uc0J1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9PcmRlcmVkT2JqUGFyc2VyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvWE1MUGFyc2VyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvbm9kZTJqc29uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIveG1sTm9kZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL3N0cm51bS9zdHJudW0uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiYnVmZmVyXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiY2hpbGRfcHJvY2Vzc1wiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcImNyeXB0b1wiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcImZzXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiZnMvcHJvbWlzZXNcIiIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJodHRwXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwib3NcIiIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJzdHJlYW1cIiIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJ1cmxcIiIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJ1dGlsXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbC9kaXN0LWVzL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsL2Rpc3QtZXMvZW5kcG9pbnQvcnVsZXNldC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsL2Rpc3QtZXMvZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsL2Rpc3QtZXMvYXV0aC9odHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbC9kaXN0LWVzL0Nsb3VkVHJhaWxDbGllbnQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbC9kaXN0LWVzL3J1bnRpbWVDb25maWcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbC9kaXN0LWVzL3J1bnRpbWVDb25maWcuc2hhcmVkLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9ydW50aW1lRXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsL2Rpc3QtZXMvbW9kZWxzL0Nsb3VkVHJhaWxTZXJ2aWNlRXhjZXB0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9tb2RlbHMvbW9kZWxzXzAuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbC9kaXN0LWVzL3Byb3RvY29scy9Bd3NfanNvbjFfMS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsL2Rpc3QtZXMvY29tbWFuZHMvTG9va3VwRXZlbnRzQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vc3JjL0Nsb3VkVHJhaWxVc2VyRXZlbnQudHMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL3NyYy9DbG91ZFRyYWlsVXNlckV2ZW50TWFuYWdlci50cyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvbi9kaXN0LWVzL05PREVfRElTQUJMRV9SRVFVRVNUX0NPTVBSRVNTSU9OX0NPTkZJR19PUFRJT05TLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWNvbXByZXNzaW9uL2Rpc3QtZXMvTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTX0NPTkZJR19PUFRJT05TLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcInpsaWJcIiIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvbi9kaXN0LWVzL2NvbXByZXNzU3RyZWFtLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWNvbXByZXNzaW9uL2Rpc3QtZXMvY29tcHJlc3NTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtY29tcHJlc3Npb24vZGlzdC1lcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtY29tcHJlc3Npb24vZGlzdC1lcy9pc1N0cmVhbWluZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvbi9kaXN0LWVzL2NvbXByZXNzaW9uTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvbi9kaXN0LWVzL2dldENvbXByZXNzaW9uUGx1Z2luLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoL2Rpc3QtZXMvZW5kcG9pbnQvcnVsZXNldC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoL2Rpc3QtZXMvZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoL2Rpc3QtZXMvYXV0aC9odHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL0Nsb3VkV2F0Y2hDbGllbnQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL3J1bnRpbWVDb25maWcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL3J1bnRpbWVDb25maWcuc2hhcmVkLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWNvbXByZXNzaW9uL2Rpc3QtZXMvcmVzb2x2ZUNvbXByZXNzaW9uQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9ydW50aW1lRXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoL2Rpc3QtZXMvbW9kZWxzL0Nsb3VkV2F0Y2hTZXJ2aWNlRXhjZXB0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9tb2RlbHMvbW9kZWxzXzAuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL3Byb3RvY29scy9Bd3NfcXVlcnkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL2NvbW1hbmRzL1B1dE1ldHJpY0RhdGFDb21tYW5kLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9zcmMvQ2xvdWRXYXRjaE1ldHJpY0NsaWVudC50cyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtc2VzL2Rpc3QtZXMvZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL2VuZHBvaW50L3J1bGVzZXQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtc2VzL2Rpc3QtZXMvZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9hdXRoL2h0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9TRVNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtc2VzL2Rpc3QtZXMvcnVudGltZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9ydW50aW1lQ29uZmlnLnNoYXJlZC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9ydW50aW1lRXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9tb2RlbHMvU0VTU2VydmljZUV4Y2VwdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9tb2RlbHMvbW9kZWxzXzAuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtc2VzL2Rpc3QtZXMvcHJvdG9jb2xzL0F3c19xdWVyeS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9jb21tYW5kcy9TZW5kRW1haWxDb21tYW5kLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9zcmMvUXVpY2tTaWdodFVzZXIudHMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL3NyYy9Ob3RpZmljYXRpb25NYW5hZ2VyLnRzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvZW5kcG9pbnQvcnVsZXNldC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvYXV0aC9odHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL1F1aWNrU2lnaHRDbGllbnQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL3J1bnRpbWVDb25maWcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL3J1bnRpbWVDb25maWcuc2hhcmVkLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9ydW50aW1lRXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvbW9kZWxzL1F1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9tb2RlbHMvbW9kZWxzXzAuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL21vZGVscy9tb2RlbHNfMi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvbW9kZWxzL21vZGVsc18zLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9wcm90b2NvbHMvQXdzX3Jlc3RKc29uMS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvY29tbWFuZHMvTGlzdFVzZXJzQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvY29tbWFuZHMvRGVsZXRlVXNlckNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL3NyYy9RdWlja1NpZ2h0VXNlck1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL3NyYy9wcnVuZVF1aWNrU2lnaHRVc2Vycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgY2h1bmtzXG4vLyBcIjFcIiBtZWFucyBcImxvYWRlZFwiLCBvdGhlcndpc2Ugbm90IGxvYWRlZCB5ZXRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE2NzogMVxufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG52YXIgaW5zdGFsbENodW5rID0gKGNodW5rKSA9PiB7XG5cdHZhciBtb3JlTW9kdWxlcyA9IGNodW5rLm1vZHVsZXMsIGNodW5rSWRzID0gY2h1bmsuaWRzLCBydW50aW1lID0gY2h1bmsucnVudGltZTtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspXG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzW2ldXSA9IDE7XG5cbn07XG5cbi8vIHJlcXVpcmUoKSBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYucmVxdWlyZSA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHQvLyBcIjFcIiBpcyB0aGUgc2lnbmFsIGZvciBcImFscmVhZHkgbG9hZGVkXCJcblx0aWYoIWluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRpbnN0YWxsQ2h1bmsocmVxdWlyZShcIi4vXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCkpKTtcblx0XHR9IGVsc2UgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMTtcblx0fVxufTtcblxuLy8gbm8gZXh0ZXJuYWwgaW5zdGFsbCBjaHVua1xuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXdzQ3JjMzIgPSB2b2lkIDA7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciB1dGlsXzEgPSByZXF1aXJlKFwiQGF3cy1jcnlwdG8vdXRpbFwiKTtcbnZhciBpbmRleF8xID0gcmVxdWlyZShcIi4vaW5kZXhcIik7XG52YXIgQXdzQ3JjMzIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXdzQ3JjMzIoKSB7XG4gICAgICAgIHRoaXMuY3JjMzIgPSBuZXcgaW5kZXhfMS5DcmMzMigpO1xuICAgIH1cbiAgICBBd3NDcmMzMi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRvSGFzaCkge1xuICAgICAgICBpZiAoKDAsIHV0aWxfMS5pc0VtcHR5RGF0YSkodG9IYXNoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5jcmMzMi51cGRhdGUoKDAsIHV0aWxfMS5jb252ZXJ0VG9CdWZmZXIpKHRvSGFzaCkpO1xuICAgIH07XG4gICAgQXdzQ3JjMzIucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgKDAsIHV0aWxfMS5udW1Ub1VpbnQ4KSh0aGlzLmNyYzMyLmRpZ2VzdCgpKV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBd3NDcmMzMi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3JjMzIgPSBuZXcgaW5kZXhfMS5DcmMzMigpO1xuICAgIH07XG4gICAgcmV0dXJuIEF3c0NyYzMyO1xufSgpKTtcbmV4cG9ydHMuQXdzQ3JjMzIgPSBBd3NDcmMzMjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF3c19jcmMzMi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXdzQ3JjMzIgPSBleHBvcnRzLkNyYzMyID0gZXhwb3J0cy5jcmMzMiA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIHV0aWxfMSA9IHJlcXVpcmUoXCJAYXdzLWNyeXB0by91dGlsXCIpO1xuZnVuY3Rpb24gY3JjMzIoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQ3JjMzIoKS51cGRhdGUoZGF0YSkuZGlnZXN0KCk7XG59XG5leHBvcnRzLmNyYzMyID0gY3JjMzI7XG52YXIgQ3JjMzIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ3JjMzIoKSB7XG4gICAgICAgIHRoaXMuY2hlY2tzdW0gPSAweGZmZmZmZmZmO1xuICAgIH1cbiAgICBDcmMzMi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBkYXRhXzEgPSB0c2xpYl8xLl9fdmFsdWVzKGRhdGEpLCBkYXRhXzFfMSA9IGRhdGFfMS5uZXh0KCk7ICFkYXRhXzFfMS5kb25lOyBkYXRhXzFfMSA9IGRhdGFfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnl0ZSA9IGRhdGFfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tzdW0gPVxuICAgICAgICAgICAgICAgICAgICAodGhpcy5jaGVja3N1bSA+Pj4gOCkgXiBsb29rdXBUYWJsZVsodGhpcy5jaGVja3N1bSBeIGJ5dGUpICYgMHhmZl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhXzFfMSAmJiAhZGF0YV8xXzEuZG9uZSAmJiAoX2EgPSBkYXRhXzEucmV0dXJuKSkgX2EuY2FsbChkYXRhXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQ3JjMzIucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNoZWNrc3VtIF4gMHhmZmZmZmZmZikgPj4+IDA7XG4gICAgfTtcbiAgICByZXR1cm4gQ3JjMzI7XG59KCkpO1xuZXhwb3J0cy5DcmMzMiA9IENyYzMyO1xuLy8gcHJldHRpZXItaWdub3JlXG52YXIgYV9sb29rVXBUYWJsZSA9IFtcbiAgICAweDAwMDAwMDAwLCAweDc3MDczMDk2LCAweEVFMEU2MTJDLCAweDk5MDk1MUJBLFxuICAgIDB4MDc2REM0MTksIDB4NzA2QUY0OEYsIDB4RTk2M0E1MzUsIDB4OUU2NDk1QTMsXG4gICAgMHgwRURCODgzMiwgMHg3OURDQjhBNCwgMHhFMEQ1RTkxRSwgMHg5N0QyRDk4OCxcbiAgICAweDA5QjY0QzJCLCAweDdFQjE3Q0JELCAweEU3QjgyRDA3LCAweDkwQkYxRDkxLFxuICAgIDB4MURCNzEwNjQsIDB4NkFCMDIwRjIsIDB4RjNCOTcxNDgsIDB4ODRCRTQxREUsXG4gICAgMHgxQURBRDQ3RCwgMHg2RERERTRFQiwgMHhGNEQ0QjU1MSwgMHg4M0QzODVDNyxcbiAgICAweDEzNkM5ODU2LCAweDY0NkJBOEMwLCAweEZENjJGOTdBLCAweDhBNjVDOUVDLFxuICAgIDB4MTQwMTVDNEYsIDB4NjMwNjZDRDksIDB4RkEwRjNENjMsIDB4OEQwODBERjUsXG4gICAgMHgzQjZFMjBDOCwgMHg0QzY5MTA1RSwgMHhENTYwNDFFNCwgMHhBMjY3NzE3MixcbiAgICAweDNDMDNFNEQxLCAweDRCMDRENDQ3LCAweEQyMEQ4NUZELCAweEE1MEFCNTZCLFxuICAgIDB4MzVCNUE4RkEsIDB4NDJCMjk4NkMsIDB4REJCQkM5RDYsIDB4QUNCQ0Y5NDAsXG4gICAgMHgzMkQ4NkNFMywgMHg0NURGNUM3NSwgMHhEQ0Q2MERDRiwgMHhBQkQxM0Q1OSxcbiAgICAweDI2RDkzMEFDLCAweDUxREUwMDNBLCAweEM4RDc1MTgwLCAweEJGRDA2MTE2LFxuICAgIDB4MjFCNEY0QjUsIDB4NTZCM0M0MjMsIDB4Q0ZCQTk1OTksIDB4QjhCREE1MEYsXG4gICAgMHgyODAyQjg5RSwgMHg1RjA1ODgwOCwgMHhDNjBDRDlCMiwgMHhCMTBCRTkyNCxcbiAgICAweDJGNkY3Qzg3LCAweDU4Njg0QzExLCAweEMxNjExREFCLCAweEI2NjYyRDNELFxuICAgIDB4NzZEQzQxOTAsIDB4MDFEQjcxMDYsIDB4OThEMjIwQkMsIDB4RUZENTEwMkEsXG4gICAgMHg3MUIxODU4OSwgMHgwNkI2QjUxRiwgMHg5RkJGRTRBNSwgMHhFOEI4RDQzMyxcbiAgICAweDc4MDdDOUEyLCAweDBGMDBGOTM0LCAweDk2MDlBODhFLCAweEUxMEU5ODE4LFxuICAgIDB4N0Y2QTBEQkIsIDB4MDg2RDNEMkQsIDB4OTE2NDZDOTcsIDB4RTY2MzVDMDEsXG4gICAgMHg2QjZCNTFGNCwgMHgxQzZDNjE2MiwgMHg4NTY1MzBEOCwgMHhGMjYyMDA0RSxcbiAgICAweDZDMDY5NUVELCAweDFCMDFBNTdCLCAweDgyMDhGNEMxLCAweEY1MEZDNDU3LFxuICAgIDB4NjVCMEQ5QzYsIDB4MTJCN0U5NTAsIDB4OEJCRUI4RUEsIDB4RkNCOTg4N0MsXG4gICAgMHg2MkREMURERiwgMHgxNURBMkQ0OSwgMHg4Q0QzN0NGMywgMHhGQkQ0NEM2NSxcbiAgICAweDREQjI2MTU4LCAweDNBQjU1MUNFLCAweEEzQkMwMDc0LCAweEQ0QkIzMEUyLFxuICAgIDB4NEFERkE1NDEsIDB4M0REODk1RDcsIDB4QTREMUM0NkQsIDB4RDNENkY0RkIsXG4gICAgMHg0MzY5RTk2QSwgMHgzNDZFRDlGQywgMHhBRDY3ODg0NiwgMHhEQTYwQjhEMCxcbiAgICAweDQ0MDQyRDczLCAweDMzMDMxREU1LCAweEFBMEE0QzVGLCAweEREMEQ3Q0M5LFxuICAgIDB4NTAwNTcxM0MsIDB4MjcwMjQxQUEsIDB4QkUwQjEwMTAsIDB4QzkwQzIwODYsXG4gICAgMHg1NzY4QjUyNSwgMHgyMDZGODVCMywgMHhCOTY2RDQwOSwgMHhDRTYxRTQ5RixcbiAgICAweDVFREVGOTBFLCAweDI5RDlDOTk4LCAweEIwRDA5ODIyLCAweEM3RDdBOEI0LFxuICAgIDB4NTlCMzNEMTcsIDB4MkVCNDBEODEsIDB4QjdCRDVDM0IsIDB4QzBCQTZDQUQsXG4gICAgMHhFREI4ODMyMCwgMHg5QUJGQjNCNiwgMHgwM0I2RTIwQywgMHg3NEIxRDI5QSxcbiAgICAweEVBRDU0NzM5LCAweDlERDI3N0FGLCAweDA0REIyNjE1LCAweDczREMxNjgzLFxuICAgIDB4RTM2MzBCMTIsIDB4OTQ2NDNCODQsIDB4MEQ2RDZBM0UsIDB4N0E2QTVBQTgsXG4gICAgMHhFNDBFQ0YwQiwgMHg5MzA5RkY5RCwgMHgwQTAwQUUyNywgMHg3RDA3OUVCMSxcbiAgICAweEYwMEY5MzQ0LCAweDg3MDhBM0QyLCAweDFFMDFGMjY4LCAweDY5MDZDMkZFLFxuICAgIDB4Rjc2MjU3NUQsIDB4ODA2NTY3Q0IsIDB4MTk2QzM2NzEsIDB4NkU2QjA2RTcsXG4gICAgMHhGRUQ0MUI3NiwgMHg4OUQzMkJFMCwgMHgxMERBN0E1QSwgMHg2N0RENEFDQyxcbiAgICAweEY5QjlERjZGLCAweDhFQkVFRkY5LCAweDE3QjdCRTQzLCAweDYwQjA4RUQ1LFxuICAgIDB4RDZENkEzRTgsIDB4QTFEMTkzN0UsIDB4MzhEOEMyQzQsIDB4NEZERkYyNTIsXG4gICAgMHhEMUJCNjdGMSwgMHhBNkJDNTc2NywgMHgzRkI1MDZERCwgMHg0OEIyMzY0QixcbiAgICAweEQ4MEQyQkRBLCAweEFGMEExQjRDLCAweDM2MDM0QUY2LCAweDQxMDQ3QTYwLFxuICAgIDB4REY2MEVGQzMsIDB4QTg2N0RGNTUsIDB4MzE2RThFRUYsIDB4NDY2OUJFNzksXG4gICAgMHhDQjYxQjM4QywgMHhCQzY2ODMxQSwgMHgyNTZGRDJBMCwgMHg1MjY4RTIzNixcbiAgICAweENDMEM3Nzk1LCAweEJCMEI0NzAzLCAweDIyMDIxNkI5LCAweDU1MDUyNjJGLFxuICAgIDB4QzVCQTNCQkUsIDB4QjJCRDBCMjgsIDB4MkJCNDVBOTIsIDB4NUNCMzZBMDQsXG4gICAgMHhDMkQ3RkZBNywgMHhCNUQwQ0YzMSwgMHgyQ0Q5OUU4QiwgMHg1QkRFQUUxRCxcbiAgICAweDlCNjRDMkIwLCAweEVDNjNGMjI2LCAweDc1NkFBMzlDLCAweDAyNkQ5MzBBLFxuICAgIDB4OUMwOTA2QTksIDB4RUIwRTM2M0YsIDB4NzIwNzY3ODUsIDB4MDUwMDU3MTMsXG4gICAgMHg5NUJGNEE4MiwgMHhFMkI4N0ExNCwgMHg3QkIxMkJBRSwgMHgwQ0I2MUIzOCxcbiAgICAweDkyRDI4RTlCLCAweEU1RDVCRTBELCAweDdDRENFRkI3LCAweDBCREJERjIxLFxuICAgIDB4ODZEM0QyRDQsIDB4RjFENEUyNDIsIDB4NjhEREIzRjgsIDB4MUZEQTgzNkUsXG4gICAgMHg4MUJFMTZDRCwgMHhGNkI5MjY1QiwgMHg2RkIwNzdFMSwgMHgxOEI3NDc3NyxcbiAgICAweDg4MDg1QUU2LCAweEZGMEY2QTcwLCAweDY2MDYzQkNBLCAweDExMDEwQjVDLFxuICAgIDB4OEY2NTlFRkYsIDB4Rjg2MkFFNjksIDB4NjE2QkZGRDMsIDB4MTY2Q0NGNDUsXG4gICAgMHhBMDBBRTI3OCwgMHhENzBERDJFRSwgMHg0RTA0ODM1NCwgMHgzOTAzQjNDMixcbiAgICAweEE3NjcyNjYxLCAweEQwNjAxNkY3LCAweDQ5Njk0NzRELCAweDNFNkU3N0RCLFxuICAgIDB4QUVEMTZBNEEsIDB4RDlENjVBREMsIDB4NDBERjBCNjYsIDB4MzdEODNCRjAsXG4gICAgMHhBOUJDQUU1MywgMHhERUJCOUVDNSwgMHg0N0IyQ0Y3RiwgMHgzMEI1RkZFOSxcbiAgICAweEJEQkRGMjFDLCAweENBQkFDMjhBLCAweDUzQjM5MzMwLCAweDI0QjRBM0E2LFxuICAgIDB4QkFEMDM2MDUsIDB4Q0RENzA2OTMsIDB4NTRERTU3MjksIDB4MjNEOTY3QkYsXG4gICAgMHhCMzY2N0EyRSwgMHhDNDYxNEFCOCwgMHg1RDY4MUIwMiwgMHgyQTZGMkI5NCxcbiAgICAweEI0MEJCRTM3LCAweEMzMEM4RUExLCAweDVBMDVERjFCLCAweDJEMDJFRjhELFxuXTtcbnZhciBsb29rdXBUYWJsZSA9ICgwLCB1dGlsXzEudWludDMyQXJyYXlGcm9tKShhX2xvb2tVcFRhYmxlKTtcbnZhciBhd3NfY3JjMzJfMSA9IHJlcXVpcmUoXCIuL2F3c19jcmMzMlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF3c0NyYzMyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhd3NfY3JjMzJfMS5Bd3NDcmMzMjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20gSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbnZlcnRUb0J1ZmZlciA9IHZvaWQgMDtcbnZhciB1dGlsX3V0ZjhfYnJvd3Nlcl8xID0gcmVxdWlyZShcIkBhd3Mtc2RrL3V0aWwtdXRmOC1icm93c2VyXCIpO1xuLy8gUXVpY2sgcG9seWZpbGxcbnZhciBmcm9tVXRmOCA9IHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgQnVmZmVyLmZyb21cbiAgICA/IGZ1bmN0aW9uIChpbnB1dCkgeyByZXR1cm4gQnVmZmVyLmZyb20oaW5wdXQsIFwidXRmOFwiKTsgfVxuICAgIDogdXRpbF91dGY4X2Jyb3dzZXJfMS5mcm9tVXRmODtcbmZ1bmN0aW9uIGNvbnZlcnRUb0J1ZmZlcihkYXRhKSB7XG4gICAgLy8gQWxyZWFkeSBhIFVpbnQ4LCBkbyBub3RoaW5nXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGZyb21VdGY4KGRhdGEpO1xuICAgIH1cbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xufVxuZXhwb3J0cy5jb252ZXJ0VG9CdWZmZXIgPSBjb252ZXJ0VG9CdWZmZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0VG9CdWZmZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudWludDMyQXJyYXlGcm9tID0gZXhwb3J0cy5udW1Ub1VpbnQ4ID0gZXhwb3J0cy5pc0VtcHR5RGF0YSA9IGV4cG9ydHMuY29udmVydFRvQnVmZmVyID0gdm9pZCAwO1xudmFyIGNvbnZlcnRUb0J1ZmZlcl8xID0gcmVxdWlyZShcIi4vY29udmVydFRvQnVmZmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29udmVydFRvQnVmZmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb252ZXJ0VG9CdWZmZXJfMS5jb252ZXJ0VG9CdWZmZXI7IH0gfSk7XG52YXIgaXNFbXB0eURhdGFfMSA9IHJlcXVpcmUoXCIuL2lzRW1wdHlEYXRhXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNFbXB0eURhdGFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRW1wdHlEYXRhXzEuaXNFbXB0eURhdGE7IH0gfSk7XG52YXIgbnVtVG9VaW50OF8xID0gcmVxdWlyZShcIi4vbnVtVG9VaW50OFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm51bVRvVWludDhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bVRvVWludDhfMS5udW1Ub1VpbnQ4OyB9IH0pO1xudmFyIHVpbnQzMkFycmF5RnJvbV8xID0gcmVxdWlyZShcIi4vdWludDMyQXJyYXlGcm9tXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidWludDMyQXJyYXlGcm9tXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1aW50MzJBcnJheUZyb21fMS51aW50MzJBcnJheUZyb207IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBBbWF6b24uY29tIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0VtcHR5RGF0YSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzRW1wdHlEYXRhKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YS5ieXRlTGVuZ3RoID09PSAwO1xufVxuZXhwb3J0cy5pc0VtcHR5RGF0YSA9IGlzRW1wdHlEYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNFbXB0eURhdGEuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubnVtVG9VaW50OCA9IHZvaWQgMDtcbmZ1bmN0aW9uIG51bVRvVWludDgobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgKG51bSAmIDB4ZmYwMDAwMDApID4+IDI0LFxuICAgICAgICAobnVtICYgMHgwMGZmMDAwMCkgPj4gMTYsXG4gICAgICAgIChudW0gJiAweDAwMDBmZjAwKSA+PiA4LFxuICAgICAgICBudW0gJiAweDAwMDAwMGZmLFxuICAgIF0pO1xufVxuZXhwb3J0cy5udW1Ub1VpbnQ4ID0gbnVtVG9VaW50ODtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bVRvVWludDguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudWludDMyQXJyYXlGcm9tID0gdm9pZCAwO1xuLy8gSUUgMTEgZG9lcyBub3Qgc3VwcG9ydCBBcnJheS5mcm9tLCBzbyB3ZSBkbyBpdCBtYW51YWxseVxuZnVuY3Rpb24gdWludDMyQXJyYXlGcm9tKGFfbG9va1VwVGFibGUpIHtcbiAgICBpZiAoIVVpbnQzMkFycmF5LmZyb20pIHtcbiAgICAgICAgdmFyIHJldHVybl9hcnJheSA9IG5ldyBVaW50MzJBcnJheShhX2xvb2tVcFRhYmxlLmxlbmd0aCk7XG4gICAgICAgIHZhciBhX2luZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGFfaW5kZXggPCBhX2xvb2tVcFRhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuX2FycmF5W2FfaW5kZXhdID0gYV9sb29rVXBUYWJsZVthX2luZGV4XTtcbiAgICAgICAgICAgIGFfaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0dXJuX2FycmF5O1xuICAgIH1cbiAgICByZXR1cm4gVWludDMyQXJyYXkuZnJvbShhX2xvb2tVcFRhYmxlKTtcbn1cbmV4cG9ydHMudWludDMyQXJyYXlGcm9tID0gdWludDMyQXJyYXlGcm9tO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dWludDMyQXJyYXlGcm9tLmpzLm1hcCIsImxldCB3YXJuaW5nRW1pdHRlZCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gPSAodmVyc2lvbikgPT4ge1xuICAgIGlmICh2ZXJzaW9uICYmICF3YXJuaW5nRW1pdHRlZCAmJiBwYXJzZUludCh2ZXJzaW9uLnN1YnN0cmluZygxLCB2ZXJzaW9uLmluZGV4T2YoXCIuXCIpKSkgPCAxNikge1xuICAgICAgICB3YXJuaW5nRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcoYE5vZGVEZXByZWNhdGlvbldhcm5pbmc6IFRoZSBBV1MgU0RLIGZvciBKYXZhU2NyaXB0ICh2Mykgd2lsbFxubm8gbG9uZ2VyIHN1cHBvcnQgTm9kZS5qcyAxNC54IG9uIE1heSAxLCAyMDI0LlxuXG5UbyBjb250aW51ZSByZWNlaXZpbmcgdXBkYXRlcyB0byBBV1Mgc2VydmljZXMsIGJ1ZyBmaXhlcywgYW5kIHNlY3VyaXR5XG51cGRhdGVzIHBsZWFzZSB1cGdyYWRlIHRvIGFuIGFjdGl2ZSBOb2RlLmpzIExUUyB2ZXJzaW9uLlxuXG5Nb3JlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBhdDogaHR0cHM6Ly9hLmNvL2R6cjJBSmRgKTtcbiAgICB9XG59O1xuIiwiZXhwb3J0IGNvbnN0IGdldFNrZXdDb3JyZWN0ZWREYXRlID0gKHN5c3RlbUNsb2NrT2Zmc2V0KSA9PiBuZXcgRGF0ZShEYXRlLm5vdygpICsgc3lzdGVtQ2xvY2tPZmZzZXQpO1xuIiwiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuZXhwb3J0IGNvbnN0IGdldERhdGVIZWFkZXIgPSAocmVzcG9uc2UpID0+IEh0dHBSZXNwb25zZS5pc0luc3RhbmNlKHJlc3BvbnNlKSA/IHJlc3BvbnNlLmhlYWRlcnM/LmRhdGUgPz8gcmVzcG9uc2UuaGVhZGVycz8uRGF0ZSA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGlzQ2xvY2tTa2V3ZWQgfSBmcm9tIFwiLi9pc0Nsb2NrU2tld2VkXCI7XG5leHBvcnQgY29uc3QgZ2V0VXBkYXRlZFN5c3RlbUNsb2NrT2Zmc2V0ID0gKGNsb2NrVGltZSwgY3VycmVudFN5c3RlbUNsb2NrT2Zmc2V0KSA9PiB7XG4gICAgY29uc3QgY2xvY2tUaW1lSW5NcyA9IERhdGUucGFyc2UoY2xvY2tUaW1lKTtcbiAgICBpZiAoaXNDbG9ja1NrZXdlZChjbG9ja1RpbWVJbk1zLCBjdXJyZW50U3lzdGVtQ2xvY2tPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBjbG9ja1RpbWVJbk1zIC0gRGF0ZS5ub3coKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRTeXN0ZW1DbG9ja09mZnNldDtcbn07XG4iLCJpbXBvcnQgeyBnZXRTa2V3Q29ycmVjdGVkRGF0ZSB9IGZyb20gXCIuL2dldFNrZXdDb3JyZWN0ZWREYXRlXCI7XG5leHBvcnQgY29uc3QgaXNDbG9ja1NrZXdlZCA9IChjbG9ja1RpbWUsIHN5c3RlbUNsb2NrT2Zmc2V0KSA9PiBNYXRoLmFicyhnZXRTa2V3Q29ycmVjdGVkRGF0ZShzeXN0ZW1DbG9ja09mZnNldCkuZ2V0VGltZSgpIC0gY2xvY2tUaW1lKSA+PSAzMDAwMDA7XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGdldERhdGVIZWFkZXIsIGdldFNrZXdDb3JyZWN0ZWREYXRlLCBnZXRVcGRhdGVkU3lzdGVtQ2xvY2tPZmZzZXQgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmNvbnN0IHRocm93U2lnbmluZ1Byb3BlcnR5RXJyb3IgPSAobmFtZSwgcHJvcGVydHkpID0+IHtcbiAgICBpZiAoIXByb3BlcnR5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvcGVydHkgXFxgJHtuYW1lfVxcYCBpcyBub3QgcmVzb2x2ZWQgZm9yIEFXUyBTREsgU2lnVjRBdXRoYCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9wZXJ0eTtcbn07XG5jb25zdCB2YWxpZGF0ZVNpZ25pbmdQcm9wZXJ0aWVzID0gYXN5bmMgKHNpZ25pbmdQcm9wZXJ0aWVzKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHRocm93U2lnbmluZ1Byb3BlcnR5RXJyb3IoXCJjb250ZXh0XCIsIHNpZ25pbmdQcm9wZXJ0aWVzLmNvbnRleHQpO1xuICAgIGNvbnN0IGNvbmZpZyA9IHRocm93U2lnbmluZ1Byb3BlcnR5RXJyb3IoXCJjb25maWdcIiwgc2lnbmluZ1Byb3BlcnRpZXMuY29uZmlnKTtcbiAgICBjb25zdCBhdXRoU2NoZW1lID0gY29udGV4dC5lbmRwb2ludFYyPy5wcm9wZXJ0aWVzPy5hdXRoU2NoZW1lcz8uWzBdO1xuICAgIGNvbnN0IHNpZ25lckZ1bmN0aW9uID0gdGhyb3dTaWduaW5nUHJvcGVydHlFcnJvcihcInNpZ25lclwiLCBjb25maWcuc2lnbmVyKTtcbiAgICBjb25zdCBzaWduZXIgPSBhd2FpdCBzaWduZXJGdW5jdGlvbihhdXRoU2NoZW1lKTtcbiAgICBjb25zdCBzaWduaW5nUmVnaW9uID0gc2lnbmluZ1Byb3BlcnRpZXM/LnNpZ25pbmdSZWdpb247XG4gICAgY29uc3Qgc2lnbmluZ05hbWUgPSBzaWduaW5nUHJvcGVydGllcz8uc2lnbmluZ05hbWU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBzaWduZXIsXG4gICAgICAgIHNpZ25pbmdSZWdpb24sXG4gICAgICAgIHNpZ25pbmdOYW1lLFxuICAgIH07XG59O1xuZXhwb3J0IGNsYXNzIEF3c1Nka1NpZ1Y0U2lnbmVyIHtcbiAgICBhc3luYyBzaWduKGh0dHBSZXF1ZXN0LCBpZGVudGl0eSwgc2lnbmluZ1Byb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKCFIdHRwUmVxdWVzdC5pc0luc3RhbmNlKGh0dHBSZXF1ZXN0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlcXVlc3QgaXMgbm90IGFuIGluc3RhbmNlIG9mIGBIdHRwUmVxdWVzdGAgYW5kIGNhbm5vdCBiZSBzaWduZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBjb25maWcsIHNpZ25lciwgc2lnbmluZ1JlZ2lvbiwgc2lnbmluZ05hbWUgfSA9IGF3YWl0IHZhbGlkYXRlU2lnbmluZ1Byb3BlcnRpZXMoc2lnbmluZ1Byb3BlcnRpZXMpO1xuICAgICAgICBjb25zdCBzaWduZWRSZXF1ZXN0ID0gYXdhaXQgc2lnbmVyLnNpZ24oaHR0cFJlcXVlc3QsIHtcbiAgICAgICAgICAgIHNpZ25pbmdEYXRlOiBnZXRTa2V3Q29ycmVjdGVkRGF0ZShjb25maWcuc3lzdGVtQ2xvY2tPZmZzZXQpLFxuICAgICAgICAgICAgc2lnbmluZ1JlZ2lvbjogc2lnbmluZ1JlZ2lvbixcbiAgICAgICAgICAgIHNpZ25pbmdTZXJ2aWNlOiBzaWduaW5nTmFtZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzaWduZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBlcnJvckhhbmRsZXIoc2lnbmluZ1Byb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyVGltZSA9IGVycm9yLlNlcnZlclRpbWUgPz8gZ2V0RGF0ZUhlYWRlcihlcnJvci4kcmVzcG9uc2UpO1xuICAgICAgICAgICAgaWYgKHNlcnZlclRpbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aHJvd1NpZ25pbmdQcm9wZXJ0eUVycm9yKFwiY29uZmlnXCIsIHNpZ25pbmdQcm9wZXJ0aWVzLmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0ID0gZ2V0VXBkYXRlZFN5c3RlbUNsb2NrT2Zmc2V0KHNlcnZlclRpbWUsIGNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3VjY2Vzc0hhbmRsZXIoaHR0cFJlc3BvbnNlLCBzaWduaW5nUHJvcGVydGllcykge1xuICAgICAgICBjb25zdCBkYXRlSGVhZGVyID0gZ2V0RGF0ZUhlYWRlcihodHRwUmVzcG9uc2UpO1xuICAgICAgICBpZiAoZGF0ZUhlYWRlcikge1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gdGhyb3dTaWduaW5nUHJvcGVydHlFcnJvcihcImNvbmZpZ1wiLCBzaWduaW5nUHJvcGVydGllcy5jb25maWcpO1xuICAgICAgICAgICAgY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0ID0gZ2V0VXBkYXRlZFN5c3RlbUNsb2NrT2Zmc2V0KGRhdGVIZWFkZXIsIGNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY29uc3QgQVdTU0RLU2lnVjRTaWduZXIgPSBBd3NTZGtTaWdWNFNpZ25lcjtcbiIsImNvbnN0IFNIT1JUX1RPX0hFWCA9IHt9O1xuY29uc3QgSEVYX1RPX1NIT1JUID0ge307XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgbGV0IGVuY29kZWRCeXRlID0gaS50b1N0cmluZygxNikudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZW5jb2RlZEJ5dGUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVuY29kZWRCeXRlID0gYDAke2VuY29kZWRCeXRlfWA7XG4gICAgfVxuICAgIFNIT1JUX1RPX0hFWFtpXSA9IGVuY29kZWRCeXRlO1xuICAgIEhFWF9UT19TSE9SVFtlbmNvZGVkQnl0ZV0gPSBpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21IZXgoZW5jb2RlZCkge1xuICAgIGlmIChlbmNvZGVkLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGV4IGVuY29kZWQgc3RyaW5ncyBtdXN0IGhhdmUgYW4gZXZlbiBudW1iZXIgbGVuZ3RoXCIpO1xuICAgIH1cbiAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShlbmNvZGVkLmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBjb25zdCBlbmNvZGVkQnl0ZSA9IGVuY29kZWQuc2xpY2UoaSwgaSArIDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChlbmNvZGVkQnl0ZSBpbiBIRVhfVE9fU0hPUlQpIHtcbiAgICAgICAgICAgIG91dFtpIC8gMl0gPSBIRVhfVE9fU0hPUlRbZW5jb2RlZEJ5dGVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGVjb2RlIHVucmVjb2duaXplZCBzZXF1ZW5jZSAke2VuY29kZWRCeXRlfSBhcyBoZXhhZGVjaW1hbGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9IZXgoYnl0ZXMpIHtcbiAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICBvdXQgKz0gU0hPUlRfVE9fSEVYW2J5dGVzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImltcG9ydCB7IHRvSGV4IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1oZXgtZW5jb2RpbmdcIjtcbmV4cG9ydCBjbGFzcyBJbnQ2NCB7XG4gICAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5ieXRlcyA9IGJ5dGVzO1xuICAgICAgICBpZiAoYnl0ZXMuYnl0ZUxlbmd0aCAhPT0gOCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50NjQgYnVmZmVycyBtdXN0IGJlIGV4YWN0bHkgOCBieXRlc1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZnJvbU51bWJlcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA+IDkyMjMzNzIwMzY4NTQ3NzYwMDAgfHwgbnVtYmVyIDwgLTkyMjMzNzIwMzY4NTQ3NzYwMDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtudW1iZXJ9IGlzIHRvbyBsYXJnZSAob3IsIGlmIG5lZ2F0aXZlLCB0b28gc21hbGwpIHRvIHJlcHJlc2VudCBhcyBhbiBJbnQ2NGApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgICAgIGZvciAobGV0IGkgPSA3LCByZW1haW5pbmcgPSBNYXRoLmFicyhNYXRoLnJvdW5kKG51bWJlcikpOyBpID4gLTEgJiYgcmVtYWluaW5nID4gMDsgaS0tLCByZW1haW5pbmcgLz0gMjU2KSB7XG4gICAgICAgICAgICBieXRlc1tpXSA9IHJlbWFpbmluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgbmVnYXRlKGJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEludDY0KGJ5dGVzKTtcbiAgICB9XG4gICAgdmFsdWVPZigpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSB0aGlzLmJ5dGVzLnNsaWNlKDApO1xuICAgICAgICBjb25zdCBuZWdhdGl2ZSA9IGJ5dGVzWzBdICYgMGIxMDAwMDAwMDtcbiAgICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgICAgICBuZWdhdGUoYnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUludCh0b0hleChieXRlcyksIDE2KSAqIChuZWdhdGl2ZSA/IC0xIDogMSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBuZWdhdGUoYnl0ZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICBieXRlc1tpXSBePSAweGZmO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gNzsgaSA+IC0xOyBpLS0pIHtcbiAgICAgICAgYnl0ZXNbaV0rKztcbiAgICAgICAgaWYgKGJ5dGVzW2ldICE9PSAwKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZnJvbUhleCwgdG9IZXggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZ1wiO1xuaW1wb3J0IHsgSW50NjQgfSBmcm9tIFwiLi9JbnQ2NFwiO1xuZXhwb3J0IGNsYXNzIEhlYWRlck1hcnNoYWxsZXIge1xuICAgIGNvbnN0cnVjdG9yKHRvVXRmOCwgZnJvbVV0ZjgpIHtcbiAgICAgICAgdGhpcy50b1V0ZjggPSB0b1V0Zjg7XG4gICAgICAgIHRoaXMuZnJvbVV0ZjggPSBmcm9tVXRmODtcbiAgICB9XG4gICAgZm9ybWF0KGhlYWRlcnMpIHtcbiAgICAgICAgY29uc3QgY2h1bmtzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSB0aGlzLmZyb21VdGY4KGhlYWRlck5hbWUpO1xuICAgICAgICAgICAgY2h1bmtzLnB1c2goVWludDhBcnJheS5mcm9tKFtieXRlcy5ieXRlTGVuZ3RoXSksIGJ5dGVzLCB0aGlzLmZvcm1hdEhlYWRlclZhbHVlKGhlYWRlcnNbaGVhZGVyTmFtZV0pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShjaHVua3MucmVkdWNlKChjYXJyeSwgYnl0ZXMpID0+IGNhcnJ5ICsgYnl0ZXMuYnl0ZUxlbmd0aCwgMCkpO1xuICAgICAgICBsZXQgcG9zaXRpb24gPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rcykge1xuICAgICAgICAgICAgb3V0LnNldChjaHVuaywgcG9zaXRpb24pO1xuICAgICAgICAgICAgcG9zaXRpb24gKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBmb3JtYXRIZWFkZXJWYWx1ZShoZWFkZXIpIHtcbiAgICAgICAgc3dpdGNoIChoZWFkZXIudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFtoZWFkZXIudmFsdWUgPyAwIDogMV0pO1xuICAgICAgICAgICAgY2FzZSBcImJ5dGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFsyLCBoZWFkZXIudmFsdWVdKTtcbiAgICAgICAgICAgIGNhc2UgXCJzaG9ydFwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IHNob3J0VmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMykpO1xuICAgICAgICAgICAgICAgIHNob3J0Vmlldy5zZXRVaW50OCgwLCAzKTtcbiAgICAgICAgICAgICAgICBzaG9ydFZpZXcuc2V0SW50MTYoMSwgaGVhZGVyLnZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHNob3J0Vmlldy5idWZmZXIpO1xuICAgICAgICAgICAgY2FzZSBcImludGVnZXJcIjpcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRWaWV3ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig1KSk7XG4gICAgICAgICAgICAgICAgaW50Vmlldy5zZXRVaW50OCgwLCA0KTtcbiAgICAgICAgICAgICAgICBpbnRWaWV3LnNldEludDMyKDEsIGhlYWRlci52YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShpbnRWaWV3LmJ1ZmZlcik7XG4gICAgICAgICAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgICAgICAgICAgIGNvbnN0IGxvbmdCeXRlcyA9IG5ldyBVaW50OEFycmF5KDkpO1xuICAgICAgICAgICAgICAgIGxvbmdCeXRlc1swXSA9IDU7XG4gICAgICAgICAgICAgICAgbG9uZ0J5dGVzLnNldChoZWFkZXIudmFsdWUuYnl0ZXMsIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsb25nQnl0ZXM7XG4gICAgICAgICAgICBjYXNlIFwiYmluYXJ5XCI6XG4gICAgICAgICAgICAgICAgY29uc3QgYmluVmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMyArIGhlYWRlci52YWx1ZS5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgYmluVmlldy5zZXRVaW50OCgwLCA2KTtcbiAgICAgICAgICAgICAgICBiaW5WaWV3LnNldFVpbnQxNigxLCBoZWFkZXIudmFsdWUuYnl0ZUxlbmd0aCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpbkJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYmluVmlldy5idWZmZXIpO1xuICAgICAgICAgICAgICAgIGJpbkJ5dGVzLnNldChoZWFkZXIudmFsdWUsIDMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBiaW5CeXRlcztcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICBjb25zdCB1dGY4Qnl0ZXMgPSB0aGlzLmZyb21VdGY4KGhlYWRlci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyVmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMyArIHV0ZjhCeXRlcy5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgc3RyVmlldy5zZXRVaW50OCgwLCA3KTtcbiAgICAgICAgICAgICAgICBzdHJWaWV3LnNldFVpbnQxNigxLCB1dGY4Qnl0ZXMuYnl0ZUxlbmd0aCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ckJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoc3RyVmlldy5idWZmZXIpO1xuICAgICAgICAgICAgICAgIHN0ckJ5dGVzLnNldCh1dGY4Qnl0ZXMsIDMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJCeXRlcztcbiAgICAgICAgICAgIGNhc2UgXCJ0aW1lc3RhbXBcIjpcbiAgICAgICAgICAgICAgICBjb25zdCB0c0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoOSk7XG4gICAgICAgICAgICAgICAgdHNCeXRlc1swXSA9IDg7XG4gICAgICAgICAgICAgICAgdHNCeXRlcy5zZXQoSW50NjQuZnJvbU51bWJlcihoZWFkZXIudmFsdWUudmFsdWVPZigpKS5ieXRlcywgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzQnl0ZXM7XG4gICAgICAgICAgICBjYXNlIFwidXVpZFwiOlxuICAgICAgICAgICAgICAgIGlmICghVVVJRF9QQVRURVJOLnRlc3QoaGVhZGVyLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgVVVJRCByZWNlaXZlZDogJHtoZWFkZXIudmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHV1aWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KDE3KTtcbiAgICAgICAgICAgICAgICB1dWlkQnl0ZXNbMF0gPSA5O1xuICAgICAgICAgICAgICAgIHV1aWRCeXRlcy5zZXQoZnJvbUhleChoZWFkZXIudmFsdWUucmVwbGFjZSgvXFwtL2csIFwiXCIpKSwgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV1aWRCeXRlcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXJzZShoZWFkZXJzKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IHt9O1xuICAgICAgICBsZXQgcG9zaXRpb24gPSAwO1xuICAgICAgICB3aGlsZSAocG9zaXRpb24gPCBoZWFkZXJzLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVMZW5ndGggPSBoZWFkZXJzLmdldFVpbnQ4KHBvc2l0aW9uKyspO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMudG9VdGY4KG5ldyBVaW50OEFycmF5KGhlYWRlcnMuYnVmZmVyLCBoZWFkZXJzLmJ5dGVPZmZzZXQgKyBwb3NpdGlvbiwgbmFtZUxlbmd0aCkpO1xuICAgICAgICAgICAgcG9zaXRpb24gKz0gbmFtZUxlbmd0aDtcbiAgICAgICAgICAgIHN3aXRjaCAoaGVhZGVycy5nZXRVaW50OChwb3NpdGlvbisrKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgb3V0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQk9PTEVBTl9UQUcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBCT09MRUFOX1RBRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBCWVRFX1RBRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBoZWFkZXJzLmdldEludDgocG9zaXRpb24rKyksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgb3V0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogU0hPUlRfVEFHLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGhlYWRlcnMuZ2V0SW50MTYocG9zaXRpb24sIGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBJTlRfVEFHLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGhlYWRlcnMuZ2V0SW50MzIocG9zaXRpb24sIGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBMT05HX1RBRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgSW50NjQobmV3IFVpbnQ4QXJyYXkoaGVhZGVycy5idWZmZXIsIGhlYWRlcnMuYnl0ZU9mZnNldCArIHBvc2l0aW9uLCA4KSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IDg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmluYXJ5TGVuZ3RoID0gaGVhZGVycy5nZXRVaW50MTYocG9zaXRpb24sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgb3V0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQklOQVJZX1RBRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgVWludDhBcnJheShoZWFkZXJzLmJ1ZmZlciwgaGVhZGVycy5ieXRlT2Zmc2V0ICsgcG9zaXRpb24sIGJpbmFyeUxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IGJpbmFyeUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdMZW5ndGggPSBoZWFkZXJzLmdldFVpbnQxNihwb3NpdGlvbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSAyO1xuICAgICAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBTVFJJTkdfVEFHLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudG9VdGY4KG5ldyBVaW50OEFycmF5KGhlYWRlcnMuYnVmZmVyLCBoZWFkZXJzLmJ5dGVPZmZzZXQgKyBwb3NpdGlvbiwgc3RyaW5nTGVuZ3RoKSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IHN0cmluZ0xlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBUSU1FU1RBTVBfVEFHLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKG5ldyBJbnQ2NChuZXcgVWludDhBcnJheShoZWFkZXJzLmJ1ZmZlciwgaGVhZGVycy5ieXRlT2Zmc2V0ICsgcG9zaXRpb24sIDgpKS52YWx1ZU9mKCkpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSA4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHV1aWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KGhlYWRlcnMuYnVmZmVyLCBoZWFkZXJzLmJ5dGVPZmZzZXQgKyBwb3NpdGlvbiwgMTYpO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSAxNjtcbiAgICAgICAgICAgICAgICAgICAgb3V0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVVJRF9UQUcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYCR7dG9IZXgodXVpZEJ5dGVzLnN1YmFycmF5KDAsIDQpKX0tJHt0b0hleCh1dWlkQnl0ZXMuc3ViYXJyYXkoNCwgNikpfS0ke3RvSGV4KHV1aWRCeXRlcy5zdWJhcnJheSg2LCA4KSl9LSR7dG9IZXgodXVpZEJ5dGVzLnN1YmFycmF5KDgsIDEwKSl9LSR7dG9IZXgodXVpZEJ5dGVzLnN1YmFycmF5KDEwKSl9YCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgaGVhZGVyIHR5cGUgdGFnYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG52YXIgSEVBREVSX1ZBTFVFX1RZUEU7XG4oZnVuY3Rpb24gKEhFQURFUl9WQUxVRV9UWVBFKSB7XG4gICAgSEVBREVSX1ZBTFVFX1RZUEVbSEVBREVSX1ZBTFVFX1RZUEVbXCJib29sVHJ1ZVwiXSA9IDBdID0gXCJib29sVHJ1ZVwiO1xuICAgIEhFQURFUl9WQUxVRV9UWVBFW0hFQURFUl9WQUxVRV9UWVBFW1wiYm9vbEZhbHNlXCJdID0gMV0gPSBcImJvb2xGYWxzZVwiO1xuICAgIEhFQURFUl9WQUxVRV9UWVBFW0hFQURFUl9WQUxVRV9UWVBFW1wiYnl0ZVwiXSA9IDJdID0gXCJieXRlXCI7XG4gICAgSEVBREVSX1ZBTFVFX1RZUEVbSEVBREVSX1ZBTFVFX1RZUEVbXCJzaG9ydFwiXSA9IDNdID0gXCJzaG9ydFwiO1xuICAgIEhFQURFUl9WQUxVRV9UWVBFW0hFQURFUl9WQUxVRV9UWVBFW1wiaW50ZWdlclwiXSA9IDRdID0gXCJpbnRlZ2VyXCI7XG4gICAgSEVBREVSX1ZBTFVFX1RZUEVbSEVBREVSX1ZBTFVFX1RZUEVbXCJsb25nXCJdID0gNV0gPSBcImxvbmdcIjtcbiAgICBIRUFERVJfVkFMVUVfVFlQRVtIRUFERVJfVkFMVUVfVFlQRVtcImJ5dGVBcnJheVwiXSA9IDZdID0gXCJieXRlQXJyYXlcIjtcbiAgICBIRUFERVJfVkFMVUVfVFlQRVtIRUFERVJfVkFMVUVfVFlQRVtcInN0cmluZ1wiXSA9IDddID0gXCJzdHJpbmdcIjtcbiAgICBIRUFERVJfVkFMVUVfVFlQRVtIRUFERVJfVkFMVUVfVFlQRVtcInRpbWVzdGFtcFwiXSA9IDhdID0gXCJ0aW1lc3RhbXBcIjtcbiAgICBIRUFERVJfVkFMVUVfVFlQRVtIRUFERVJfVkFMVUVfVFlQRVtcInV1aWRcIl0gPSA5XSA9IFwidXVpZFwiO1xufSkoSEVBREVSX1ZBTFVFX1RZUEUgfHwgKEhFQURFUl9WQUxVRV9UWVBFID0ge30pKTtcbmNvbnN0IEJPT0xFQU5fVEFHID0gXCJib29sZWFuXCI7XG5jb25zdCBCWVRFX1RBRyA9IFwiYnl0ZVwiO1xuY29uc3QgU0hPUlRfVEFHID0gXCJzaG9ydFwiO1xuY29uc3QgSU5UX1RBRyA9IFwiaW50ZWdlclwiO1xuY29uc3QgTE9OR19UQUcgPSBcImxvbmdcIjtcbmNvbnN0IEJJTkFSWV9UQUcgPSBcImJpbmFyeVwiO1xuY29uc3QgU1RSSU5HX1RBRyA9IFwic3RyaW5nXCI7XG5jb25zdCBUSU1FU1RBTVBfVEFHID0gXCJ0aW1lc3RhbXBcIjtcbmNvbnN0IFVVSURfVEFHID0gXCJ1dWlkXCI7XG5jb25zdCBVVUlEX1BBVFRFUk4gPSAvXlthLWYwLTldezh9LVthLWYwLTldezR9LVthLWYwLTldezR9LVthLWYwLTldezR9LVthLWYwLTldezEyfSQvO1xuIiwiZXhwb3J0IGNsYXNzIE1lc3NhZ2VEZWNvZGVyU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzeW5jSXRlcmF0b3IoKTtcbiAgICB9XG4gICAgYXN5bmMgKmFzeW5jSXRlcmF0b3IoKSB7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgYnl0ZXMgb2YgdGhpcy5vcHRpb25zLmlucHV0U3RyZWFtKSB7XG4gICAgICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy5vcHRpb25zLmRlY29kZXIuZGVjb2RlKGJ5dGVzKTtcbiAgICAgICAgICAgIHlpZWxkIGRlY29kZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgTWVzc2FnZUVuY29kZXJTdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXN5bmNJdGVyYXRvcigpO1xuICAgIH1cbiAgICBhc3luYyAqYXN5bmNJdGVyYXRvcigpIHtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBtc2cgb2YgdGhpcy5vcHRpb25zLm1lc3NhZ2VTdHJlYW0pIHtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWQgPSB0aGlzLm9wdGlvbnMuZW5jb2Rlci5lbmNvZGUobXNnKTtcbiAgICAgICAgICAgIHlpZWxkIGVuY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmNsdWRlRW5kRnJhbWUpIHtcbiAgICAgICAgICAgIHlpZWxkIG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFNtaXRoeU1lc3NhZ2VEZWNvZGVyU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzeW5jSXRlcmF0b3IoKTtcbiAgICB9XG4gICAgYXN5bmMgKmFzeW5jSXRlcmF0b3IoKSB7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgbWVzc2FnZSBvZiB0aGlzLm9wdGlvbnMubWVzc2FnZVN0cmVhbSkge1xuICAgICAgICAgICAgY29uc3QgZGVzZXJpYWxpemVkID0gYXdhaXQgdGhpcy5vcHRpb25zLmRlc2VyaWFsaXplcihtZXNzYWdlKTtcbiAgICAgICAgICAgIGlmIChkZXNlcmlhbGl6ZWQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHlpZWxkIGRlc2VyaWFsaXplZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBTbWl0aHlNZXNzYWdlRW5jb2RlclN0cmVhbSB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3luY0l0ZXJhdG9yKCk7XG4gICAgfVxuICAgIGFzeW5jICphc3luY0l0ZXJhdG9yKCkge1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHRoaXMub3B0aW9ucy5pbnB1dFN0cmVhbSkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZEJ1ZiA9IHRoaXMub3B0aW9ucy5zZXJpYWxpemVyKGNodW5rKTtcbiAgICAgICAgICAgIHlpZWxkIHBheWxvYWRCdWY7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgQUxHT1JJVEhNX1FVRVJZX1BBUkFNID0gXCJYLUFtei1BbGdvcml0aG1cIjtcbmV4cG9ydCBjb25zdCBDUkVERU5USUFMX1FVRVJZX1BBUkFNID0gXCJYLUFtei1DcmVkZW50aWFsXCI7XG5leHBvcnQgY29uc3QgQU1aX0RBVEVfUVVFUllfUEFSQU0gPSBcIlgtQW16LURhdGVcIjtcbmV4cG9ydCBjb25zdCBTSUdORURfSEVBREVSU19RVUVSWV9QQVJBTSA9IFwiWC1BbXotU2lnbmVkSGVhZGVyc1wiO1xuZXhwb3J0IGNvbnN0IEVYUElSRVNfUVVFUllfUEFSQU0gPSBcIlgtQW16LUV4cGlyZXNcIjtcbmV4cG9ydCBjb25zdCBTSUdOQVRVUkVfUVVFUllfUEFSQU0gPSBcIlgtQW16LVNpZ25hdHVyZVwiO1xuZXhwb3J0IGNvbnN0IFRPS0VOX1FVRVJZX1BBUkFNID0gXCJYLUFtei1TZWN1cml0eS1Ub2tlblwiO1xuZXhwb3J0IGNvbnN0IFJFR0lPTl9TRVRfUEFSQU0gPSBcIlgtQW16LVJlZ2lvbi1TZXRcIjtcbmV4cG9ydCBjb25zdCBBVVRIX0hFQURFUiA9IFwiYXV0aG9yaXphdGlvblwiO1xuZXhwb3J0IGNvbnN0IEFNWl9EQVRFX0hFQURFUiA9IEFNWl9EQVRFX1FVRVJZX1BBUkFNLnRvTG93ZXJDYXNlKCk7XG5leHBvcnQgY29uc3QgREFURV9IRUFERVIgPSBcImRhdGVcIjtcbmV4cG9ydCBjb25zdCBHRU5FUkFURURfSEVBREVSUyA9IFtBVVRIX0hFQURFUiwgQU1aX0RBVEVfSEVBREVSLCBEQVRFX0hFQURFUl07XG5leHBvcnQgY29uc3QgU0lHTkFUVVJFX0hFQURFUiA9IFNJR05BVFVSRV9RVUVSWV9QQVJBTS50b0xvd2VyQ2FzZSgpO1xuZXhwb3J0IGNvbnN0IFNIQTI1Nl9IRUFERVIgPSBcIngtYW16LWNvbnRlbnQtc2hhMjU2XCI7XG5leHBvcnQgY29uc3QgVE9LRU5fSEVBREVSID0gVE9LRU5fUVVFUllfUEFSQU0udG9Mb3dlckNhc2UoKTtcbmV4cG9ydCBjb25zdCBIT1NUX0hFQURFUiA9IFwiaG9zdFwiO1xuZXhwb3J0IGNvbnN0IEFMV0FZU19VTlNJR05BQkxFX0hFQURFUlMgPSB7XG4gICAgYXV0aG9yaXphdGlvbjogdHJ1ZSxcbiAgICBcImNhY2hlLWNvbnRyb2xcIjogdHJ1ZSxcbiAgICBjb25uZWN0aW9uOiB0cnVlLFxuICAgIGV4cGVjdDogdHJ1ZSxcbiAgICBmcm9tOiB0cnVlLFxuICAgIFwia2VlcC1hbGl2ZVwiOiB0cnVlLFxuICAgIFwibWF4LWZvcndhcmRzXCI6IHRydWUsXG4gICAgcHJhZ21hOiB0cnVlLFxuICAgIHJlZmVyZXI6IHRydWUsXG4gICAgdGU6IHRydWUsXG4gICAgdHJhaWxlcjogdHJ1ZSxcbiAgICBcInRyYW5zZmVyLWVuY29kaW5nXCI6IHRydWUsXG4gICAgdXBncmFkZTogdHJ1ZSxcbiAgICBcInVzZXItYWdlbnRcIjogdHJ1ZSxcbiAgICBcIngtYW16bi10cmFjZS1pZFwiOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBQUk9YWV9IRUFERVJfUEFUVEVSTiA9IC9ecHJveHktLztcbmV4cG9ydCBjb25zdCBTRUNfSEVBREVSX1BBVFRFUk4gPSAvXnNlYy0vO1xuZXhwb3J0IGNvbnN0IFVOU0lHTkFCTEVfUEFUVEVSTlMgPSBbL15wcm94eS0vaSwgL15zZWMtL2ldO1xuZXhwb3J0IGNvbnN0IEFMR09SSVRITV9JREVOVElGSUVSID0gXCJBV1M0LUhNQUMtU0hBMjU2XCI7XG5leHBvcnQgY29uc3QgQUxHT1JJVEhNX0lERU5USUZJRVJfVjRBID0gXCJBV1M0LUVDRFNBLVAyNTYtU0hBMjU2XCI7XG5leHBvcnQgY29uc3QgRVZFTlRfQUxHT1JJVEhNX0lERU5USUZJRVIgPSBcIkFXUzQtSE1BQy1TSEEyNTYtUEFZTE9BRFwiO1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX1BBWUxPQUQgPSBcIlVOU0lHTkVELVBBWUxPQURcIjtcbmV4cG9ydCBjb25zdCBNQVhfQ0FDSEVfU0laRSA9IDUwO1xuZXhwb3J0IGNvbnN0IEtFWV9UWVBFX0lERU5USUZJRVIgPSBcImF3czRfcmVxdWVzdFwiO1xuZXhwb3J0IGNvbnN0IE1BWF9QUkVTSUdORURfVFRMID0gNjAgKiA2MCAqIDI0ICogNztcbiIsImltcG9ydCB7IHRvSGV4IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1oZXgtZW5jb2RpbmdcIjtcbmltcG9ydCB7IHRvVWludDhBcnJheSB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXRmOFwiO1xuaW1wb3J0IHsgS0VZX1RZUEVfSURFTlRJRklFUiwgTUFYX0NBQ0hFX1NJWkUgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmNvbnN0IHNpZ25pbmdLZXlDYWNoZSA9IHt9O1xuY29uc3QgY2FjaGVRdWV1ZSA9IFtdO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNjb3BlID0gKHNob3J0RGF0ZSwgcmVnaW9uLCBzZXJ2aWNlKSA9PiBgJHtzaG9ydERhdGV9LyR7cmVnaW9ufS8ke3NlcnZpY2V9LyR7S0VZX1RZUEVfSURFTlRJRklFUn1gO1xuZXhwb3J0IGNvbnN0IGdldFNpZ25pbmdLZXkgPSBhc3luYyAoc2hhMjU2Q29uc3RydWN0b3IsIGNyZWRlbnRpYWxzLCBzaG9ydERhdGUsIHJlZ2lvbiwgc2VydmljZSkgPT4ge1xuICAgIGNvbnN0IGNyZWRzSGFzaCA9IGF3YWl0IGhtYWMoc2hhMjU2Q29uc3RydWN0b3IsIGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwgY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQpO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7c2hvcnREYXRlfToke3JlZ2lvbn06JHtzZXJ2aWNlfToke3RvSGV4KGNyZWRzSGFzaCl9OiR7Y3JlZGVudGlhbHMuc2Vzc2lvblRva2VufWA7XG4gICAgaWYgKGNhY2hlS2V5IGluIHNpZ25pbmdLZXlDYWNoZSkge1xuICAgICAgICByZXR1cm4gc2lnbmluZ0tleUNhY2hlW2NhY2hlS2V5XTtcbiAgICB9XG4gICAgY2FjaGVRdWV1ZS5wdXNoKGNhY2hlS2V5KTtcbiAgICB3aGlsZSAoY2FjaGVRdWV1ZS5sZW5ndGggPiBNQVhfQ0FDSEVfU0laRSkge1xuICAgICAgICBkZWxldGUgc2lnbmluZ0tleUNhY2hlW2NhY2hlUXVldWUuc2hpZnQoKV07XG4gICAgfVxuICAgIGxldCBrZXkgPSBgQVdTNCR7Y3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5fWA7XG4gICAgZm9yIChjb25zdCBzaWduYWJsZSBvZiBbc2hvcnREYXRlLCByZWdpb24sIHNlcnZpY2UsIEtFWV9UWVBFX0lERU5USUZJRVJdKSB7XG4gICAgICAgIGtleSA9IGF3YWl0IGhtYWMoc2hhMjU2Q29uc3RydWN0b3IsIGtleSwgc2lnbmFibGUpO1xuICAgIH1cbiAgICByZXR1cm4gKHNpZ25pbmdLZXlDYWNoZVtjYWNoZUtleV0gPSBrZXkpO1xufTtcbmV4cG9ydCBjb25zdCBjbGVhckNyZWRlbnRpYWxDYWNoZSA9ICgpID0+IHtcbiAgICBjYWNoZVF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgT2JqZWN0LmtleXMoc2lnbmluZ0tleUNhY2hlKS5mb3JFYWNoKChjYWNoZUtleSkgPT4ge1xuICAgICAgICBkZWxldGUgc2lnbmluZ0tleUNhY2hlW2NhY2hlS2V5XTtcbiAgICB9KTtcbn07XG5jb25zdCBobWFjID0gKGN0b3IsIHNlY3JldCwgZGF0YSkgPT4ge1xuICAgIGNvbnN0IGhhc2ggPSBuZXcgY3RvcihzZWNyZXQpO1xuICAgIGhhc2gudXBkYXRlKHRvVWludDhBcnJheShkYXRhKSk7XG4gICAgcmV0dXJuIGhhc2guZGlnZXN0KCk7XG59O1xuIiwiaW1wb3J0IHsgQUxXQVlTX1VOU0lHTkFCTEVfSEVBREVSUywgUFJPWFlfSEVBREVSX1BBVFRFUk4sIFNFQ19IRUFERVJfUEFUVEVSTiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGNvbnN0IGdldENhbm9uaWNhbEhlYWRlcnMgPSAoeyBoZWFkZXJzIH0sIHVuc2lnbmFibGVIZWFkZXJzLCBzaWduYWJsZUhlYWRlcnMpID0+IHtcbiAgICBjb25zdCBjYW5vbmljYWwgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoaGVhZGVycykuc29ydCgpKSB7XG4gICAgICAgIGlmIChoZWFkZXJzW2hlYWRlck5hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2Fub25pY2FsSGVhZGVyTmFtZSA9IGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGNhbm9uaWNhbEhlYWRlck5hbWUgaW4gQUxXQVlTX1VOU0lHTkFCTEVfSEVBREVSUyB8fFxuICAgICAgICAgICAgdW5zaWduYWJsZUhlYWRlcnM/LmhhcyhjYW5vbmljYWxIZWFkZXJOYW1lKSB8fFxuICAgICAgICAgICAgUFJPWFlfSEVBREVSX1BBVFRFUk4udGVzdChjYW5vbmljYWxIZWFkZXJOYW1lKSB8fFxuICAgICAgICAgICAgU0VDX0hFQURFUl9QQVRURVJOLnRlc3QoY2Fub25pY2FsSGVhZGVyTmFtZSkpIHtcbiAgICAgICAgICAgIGlmICghc2lnbmFibGVIZWFkZXJzIHx8IChzaWduYWJsZUhlYWRlcnMgJiYgIXNpZ25hYmxlSGVhZGVycy5oYXMoY2Fub25pY2FsSGVhZGVyTmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2Fub25pY2FsW2Nhbm9uaWNhbEhlYWRlck5hbWVdID0gaGVhZGVyc1toZWFkZXJOYW1lXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCBcIiBcIik7XG4gICAgfVxuICAgIHJldHVybiBjYW5vbmljYWw7XG59O1xuIiwiaW1wb3J0IHsgaXNBcnJheUJ1ZmZlciB9IGZyb20gXCJAc21pdGh5L2lzLWFycmF5LWJ1ZmZlclwiO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZ1wiO1xuaW1wb3J0IHsgdG9VaW50OEFycmF5IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBTSEEyNTZfSEVBREVSLCBVTlNJR05FRF9QQVlMT0FEIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgY29uc3QgZ2V0UGF5bG9hZEhhc2ggPSBhc3luYyAoeyBoZWFkZXJzLCBib2R5IH0sIGhhc2hDb25zdHJ1Y3RvcikgPT4ge1xuICAgIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgICAgICBpZiAoaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpID09PSBTSEEyNTZfSEVBREVSKSB7XG4gICAgICAgICAgICByZXR1cm4gaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYm9keSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFwiZTNiMGM0NDI5OGZjMWMxNDlhZmJmNGM4OTk2ZmI5MjQyN2FlNDFlNDY0OWI5MzRjYTQ5NTk5MWI3ODUyYjg1NVwiO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkgfHwgaXNBcnJheUJ1ZmZlcihib2R5KSkge1xuICAgICAgICBjb25zdCBoYXNoQ3RvciA9IG5ldyBoYXNoQ29uc3RydWN0b3IoKTtcbiAgICAgICAgaGFzaEN0b3IudXBkYXRlKHRvVWludDhBcnJheShib2R5KSk7XG4gICAgICAgIHJldHVybiB0b0hleChhd2FpdCBoYXNoQ3Rvci5kaWdlc3QoKSk7XG4gICAgfVxuICAgIHJldHVybiBVTlNJR05FRF9QQVlMT0FEO1xufTtcbiIsImV4cG9ydCBjb25zdCBjbG9uZVJlcXVlc3QgPSAoeyBoZWFkZXJzLCBxdWVyeSwgLi4ucmVzdCB9KSA9PiAoe1xuICAgIC4uLnJlc3QsXG4gICAgaGVhZGVyczogeyAuLi5oZWFkZXJzIH0sXG4gICAgcXVlcnk6IHF1ZXJ5ID8gY2xvbmVRdWVyeShxdWVyeSkgOiB1bmRlZmluZWQsXG59KTtcbmV4cG9ydCBjb25zdCBjbG9uZVF1ZXJ5ID0gKHF1ZXJ5KSA9PiBPYmplY3Qua2V5cyhxdWVyeSkucmVkdWNlKChjYXJyeSwgcGFyYW1OYW1lKSA9PiB7XG4gICAgY29uc3QgcGFyYW0gPSBxdWVyeVtwYXJhbU5hbWVdO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNhcnJ5LFxuICAgICAgICBbcGFyYW1OYW1lXTogQXJyYXkuaXNBcnJheShwYXJhbSkgPyBbLi4ucGFyYW1dIDogcGFyYW0sXG4gICAgfTtcbn0sIHt9KTtcbiIsImltcG9ydCB7IGNsb25lUmVxdWVzdCB9IGZyb20gXCIuL2Nsb25lUmVxdWVzdFwiO1xuaW1wb3J0IHsgR0VORVJBVEVEX0hFQURFUlMgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBjb25zdCBwcmVwYXJlUmVxdWVzdCA9IChyZXF1ZXN0KSA9PiB7XG4gICAgcmVxdWVzdCA9IHR5cGVvZiByZXF1ZXN0LmNsb25lID09PSBcImZ1bmN0aW9uXCIgPyByZXF1ZXN0LmNsb25lKCkgOiBjbG9uZVJlcXVlc3QocmVxdWVzdCk7XG4gICAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKHJlcXVlc3QuaGVhZGVycykpIHtcbiAgICAgICAgaWYgKEdFTkVSQVRFRF9IRUFERVJTLmluZGV4T2YoaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XG4gICAgICAgICAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzW2hlYWRlck5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0O1xufTtcbiIsImltcG9ydCB7IEhlYWRlck1hcnNoYWxsZXIgfSBmcm9tIFwiQHNtaXRoeS9ldmVudHN0cmVhbS1jb2RlY1wiO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZ1wiO1xuaW1wb3J0IHsgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmltcG9ydCB7IGZyb21VdGY4LCB0b1VpbnQ4QXJyYXksIHRvVXRmOCB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXRmOFwiO1xuaW1wb3J0IHsgQUxHT1JJVEhNX0lERU5USUZJRVIsIEFMR09SSVRITV9RVUVSWV9QQVJBTSwgQU1aX0RBVEVfSEVBREVSLCBBTVpfREFURV9RVUVSWV9QQVJBTSwgQVVUSF9IRUFERVIsIENSRURFTlRJQUxfUVVFUllfUEFSQU0sIEVWRU5UX0FMR09SSVRITV9JREVOVElGSUVSLCBFWFBJUkVTX1FVRVJZX1BBUkFNLCBNQVhfUFJFU0lHTkVEX1RUTCwgU0hBMjU2X0hFQURFUiwgU0lHTkFUVVJFX1FVRVJZX1BBUkFNLCBTSUdORURfSEVBREVSU19RVUVSWV9QQVJBTSwgVE9LRU5fSEVBREVSLCBUT0tFTl9RVUVSWV9QQVJBTSwgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGNyZWF0ZVNjb3BlLCBnZXRTaWduaW5nS2V5IH0gZnJvbSBcIi4vY3JlZGVudGlhbERlcml2YXRpb25cIjtcbmltcG9ydCB7IGdldENhbm9uaWNhbEhlYWRlcnMgfSBmcm9tIFwiLi9nZXRDYW5vbmljYWxIZWFkZXJzXCI7XG5pbXBvcnQgeyBnZXRDYW5vbmljYWxRdWVyeSB9IGZyb20gXCIuL2dldENhbm9uaWNhbFF1ZXJ5XCI7XG5pbXBvcnQgeyBnZXRQYXlsb2FkSGFzaCB9IGZyb20gXCIuL2dldFBheWxvYWRIYXNoXCI7XG5pbXBvcnQgeyBoYXNIZWFkZXIgfSBmcm9tIFwiLi9oZWFkZXJVdGlsXCI7XG5pbXBvcnQgeyBtb3ZlSGVhZGVyc1RvUXVlcnkgfSBmcm9tIFwiLi9tb3ZlSGVhZGVyc1RvUXVlcnlcIjtcbmltcG9ydCB7IHByZXBhcmVSZXF1ZXN0IH0gZnJvbSBcIi4vcHJlcGFyZVJlcXVlc3RcIjtcbmltcG9ydCB7IGlzbzg2MDEgfSBmcm9tIFwiLi91dGlsRGF0ZVwiO1xuZXhwb3J0IGNsYXNzIFNpZ25hdHVyZVY0IHtcbiAgICBjb25zdHJ1Y3Rvcih7IGFwcGx5Q2hlY2tzdW0sIGNyZWRlbnRpYWxzLCByZWdpb24sIHNlcnZpY2UsIHNoYTI1NiwgdXJpRXNjYXBlUGF0aCA9IHRydWUsIH0pIHtcbiAgICAgICAgdGhpcy5oZWFkZXJNYXJzaGFsbGVyID0gbmV3IEhlYWRlck1hcnNoYWxsZXIodG9VdGY4LCBmcm9tVXRmOCk7XG4gICAgICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7XG4gICAgICAgIHRoaXMuc2hhMjU2ID0gc2hhMjU2O1xuICAgICAgICB0aGlzLnVyaUVzY2FwZVBhdGggPSB1cmlFc2NhcGVQYXRoO1xuICAgICAgICB0aGlzLmFwcGx5Q2hlY2tzdW0gPSB0eXBlb2YgYXBwbHlDaGVja3N1bSA9PT0gXCJib29sZWFuXCIgPyBhcHBseUNoZWNrc3VtIDogdHJ1ZTtcbiAgICAgICAgdGhpcy5yZWdpb25Qcm92aWRlciA9IG5vcm1hbGl6ZVByb3ZpZGVyKHJlZ2lvbik7XG4gICAgICAgIHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyID0gbm9ybWFsaXplUHJvdmlkZXIoY3JlZGVudGlhbHMpO1xuICAgIH1cbiAgICBhc3luYyBwcmVzaWduKG9yaWdpbmFsUmVxdWVzdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgc2lnbmluZ0RhdGUgPSBuZXcgRGF0ZSgpLCBleHBpcmVzSW4gPSAzNjAwLCB1bnNpZ25hYmxlSGVhZGVycywgdW5ob2lzdGFibGVIZWFkZXJzLCBzaWduYWJsZUhlYWRlcnMsIHNpZ25pbmdSZWdpb24sIHNpZ25pbmdTZXJ2aWNlLCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBhd2FpdCB0aGlzLmNyZWRlbnRpYWxQcm92aWRlcigpO1xuICAgICAgICB0aGlzLnZhbGlkYXRlUmVzb2x2ZWRDcmVkZW50aWFscyhjcmVkZW50aWFscyk7XG4gICAgICAgIGNvbnN0IHJlZ2lvbiA9IHNpZ25pbmdSZWdpb24gPz8gKGF3YWl0IHRoaXMucmVnaW9uUHJvdmlkZXIoKSk7XG4gICAgICAgIGNvbnN0IHsgbG9uZ0RhdGUsIHNob3J0RGF0ZSB9ID0gZm9ybWF0RGF0ZShzaWduaW5nRGF0ZSk7XG4gICAgICAgIGlmIChleHBpcmVzSW4gPiBNQVhfUFJFU0lHTkVEX1RUTCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiU2lnbmF0dXJlIHZlcnNpb24gNCBwcmVzaWduZWQgVVJMc1wiICsgXCIgbXVzdCBoYXZlIGFuIGV4cGlyYXRpb24gZGF0ZSBsZXNzIHRoYW4gb25lIHdlZWsgaW5cIiArIFwiIHRoZSBmdXR1cmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NvcGUgPSBjcmVhdGVTY29wZShzaG9ydERhdGUsIHJlZ2lvbiwgc2lnbmluZ1NlcnZpY2UgPz8gdGhpcy5zZXJ2aWNlKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG1vdmVIZWFkZXJzVG9RdWVyeShwcmVwYXJlUmVxdWVzdChvcmlnaW5hbFJlcXVlc3QpLCB7IHVuaG9pc3RhYmxlSGVhZGVycyB9KTtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbikge1xuICAgICAgICAgICAgcmVxdWVzdC5xdWVyeVtUT0tFTl9RVUVSWV9QQVJBTV0gPSBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdC5xdWVyeVtBTEdPUklUSE1fUVVFUllfUEFSQU1dID0gQUxHT1JJVEhNX0lERU5USUZJRVI7XG4gICAgICAgIHJlcXVlc3QucXVlcnlbQ1JFREVOVElBTF9RVUVSWV9QQVJBTV0gPSBgJHtjcmVkZW50aWFscy5hY2Nlc3NLZXlJZH0vJHtzY29wZX1gO1xuICAgICAgICByZXF1ZXN0LnF1ZXJ5W0FNWl9EQVRFX1FVRVJZX1BBUkFNXSA9IGxvbmdEYXRlO1xuICAgICAgICByZXF1ZXN0LnF1ZXJ5W0VYUElSRVNfUVVFUllfUEFSQU1dID0gZXhwaXJlc0luLnRvU3RyaW5nKDEwKTtcbiAgICAgICAgY29uc3QgY2Fub25pY2FsSGVhZGVycyA9IGdldENhbm9uaWNhbEhlYWRlcnMocmVxdWVzdCwgdW5zaWduYWJsZUhlYWRlcnMsIHNpZ25hYmxlSGVhZGVycyk7XG4gICAgICAgIHJlcXVlc3QucXVlcnlbU0lHTkVEX0hFQURFUlNfUVVFUllfUEFSQU1dID0gZ2V0Q2Fub25pY2FsSGVhZGVyTGlzdChjYW5vbmljYWxIZWFkZXJzKTtcbiAgICAgICAgcmVxdWVzdC5xdWVyeVtTSUdOQVRVUkVfUVVFUllfUEFSQU1dID0gYXdhaXQgdGhpcy5nZXRTaWduYXR1cmUobG9uZ0RhdGUsIHNjb3BlLCB0aGlzLmdldFNpZ25pbmdLZXkoY3JlZGVudGlhbHMsIHJlZ2lvbiwgc2hvcnREYXRlLCBzaWduaW5nU2VydmljZSksIHRoaXMuY3JlYXRlQ2Fub25pY2FsUmVxdWVzdChyZXF1ZXN0LCBjYW5vbmljYWxIZWFkZXJzLCBhd2FpdCBnZXRQYXlsb2FkSGFzaChvcmlnaW5hbFJlcXVlc3QsIHRoaXMuc2hhMjU2KSkpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9XG4gICAgYXN5bmMgc2lnbih0b1NpZ24sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0b1NpZ24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZ25TdHJpbmcodG9TaWduLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0b1NpZ24uaGVhZGVycyAmJiB0b1NpZ24ucGF5bG9hZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbkV2ZW50KHRvU2lnbiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodG9TaWduLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZ25NZXNzYWdlKHRvU2lnbiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaWduUmVxdWVzdCh0b1NpZ24sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHNpZ25FdmVudCh7IGhlYWRlcnMsIHBheWxvYWQgfSwgeyBzaWduaW5nRGF0ZSA9IG5ldyBEYXRlKCksIHByaW9yU2lnbmF0dXJlLCBzaWduaW5nUmVnaW9uLCBzaWduaW5nU2VydmljZSB9KSB7XG4gICAgICAgIGNvbnN0IHJlZ2lvbiA9IHNpZ25pbmdSZWdpb24gPz8gKGF3YWl0IHRoaXMucmVnaW9uUHJvdmlkZXIoKSk7XG4gICAgICAgIGNvbnN0IHsgc2hvcnREYXRlLCBsb25nRGF0ZSB9ID0gZm9ybWF0RGF0ZShzaWduaW5nRGF0ZSk7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gY3JlYXRlU2NvcGUoc2hvcnREYXRlLCByZWdpb24sIHNpZ25pbmdTZXJ2aWNlID8/IHRoaXMuc2VydmljZSk7XG4gICAgICAgIGNvbnN0IGhhc2hlZFBheWxvYWQgPSBhd2FpdCBnZXRQYXlsb2FkSGFzaCh7IGhlYWRlcnM6IHt9LCBib2R5OiBwYXlsb2FkIH0sIHRoaXMuc2hhMjU2KTtcbiAgICAgICAgY29uc3QgaGFzaCA9IG5ldyB0aGlzLnNoYTI1NigpO1xuICAgICAgICBoYXNoLnVwZGF0ZShoZWFkZXJzKTtcbiAgICAgICAgY29uc3QgaGFzaGVkSGVhZGVycyA9IHRvSGV4KGF3YWl0IGhhc2guZGlnZXN0KCkpO1xuICAgICAgICBjb25zdCBzdHJpbmdUb1NpZ24gPSBbXG4gICAgICAgICAgICBFVkVOVF9BTEdPUklUSE1fSURFTlRJRklFUixcbiAgICAgICAgICAgIGxvbmdEYXRlLFxuICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICBwcmlvclNpZ25hdHVyZSxcbiAgICAgICAgICAgIGhhc2hlZEhlYWRlcnMsXG4gICAgICAgICAgICBoYXNoZWRQYXlsb2FkLFxuICAgICAgICBdLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25TdHJpbmcoc3RyaW5nVG9TaWduLCB7IHNpZ25pbmdEYXRlLCBzaWduaW5nUmVnaW9uOiByZWdpb24sIHNpZ25pbmdTZXJ2aWNlIH0pO1xuICAgIH1cbiAgICBhc3luYyBzaWduTWVzc2FnZShzaWduYWJsZU1lc3NhZ2UsIHsgc2lnbmluZ0RhdGUgPSBuZXcgRGF0ZSgpLCBzaWduaW5nUmVnaW9uLCBzaWduaW5nU2VydmljZSB9KSB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnNpZ25FdmVudCh7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlck1hcnNoYWxsZXIuZm9ybWF0KHNpZ25hYmxlTWVzc2FnZS5tZXNzYWdlLmhlYWRlcnMpLFxuICAgICAgICAgICAgcGF5bG9hZDogc2lnbmFibGVNZXNzYWdlLm1lc3NhZ2UuYm9keSxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgc2lnbmluZ0RhdGUsXG4gICAgICAgICAgICBzaWduaW5nUmVnaW9uLFxuICAgICAgICAgICAgc2lnbmluZ1NlcnZpY2UsXG4gICAgICAgICAgICBwcmlvclNpZ25hdHVyZTogc2lnbmFibGVNZXNzYWdlLnByaW9yU2lnbmF0dXJlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoc2lnbmF0dXJlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBzaWduYWJsZU1lc3NhZ2UubWVzc2FnZSwgc2lnbmF0dXJlIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzaWduU3RyaW5nKHN0cmluZ1RvU2lnbiwgeyBzaWduaW5nRGF0ZSA9IG5ldyBEYXRlKCksIHNpZ25pbmdSZWdpb24sIHNpZ25pbmdTZXJ2aWNlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF3YWl0IHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyKCk7XG4gICAgICAgIHRoaXMudmFsaWRhdGVSZXNvbHZlZENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgcmVnaW9uID0gc2lnbmluZ1JlZ2lvbiA/PyAoYXdhaXQgdGhpcy5yZWdpb25Qcm92aWRlcigpKTtcbiAgICAgICAgY29uc3QgeyBzaG9ydERhdGUgfSA9IGZvcm1hdERhdGUoc2lnbmluZ0RhdGUpO1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IHRoaXMuc2hhMjU2KGF3YWl0IHRoaXMuZ2V0U2lnbmluZ0tleShjcmVkZW50aWFscywgcmVnaW9uLCBzaG9ydERhdGUsIHNpZ25pbmdTZXJ2aWNlKSk7XG4gICAgICAgIGhhc2gudXBkYXRlKHRvVWludDhBcnJheShzdHJpbmdUb1NpZ24pKTtcbiAgICAgICAgcmV0dXJuIHRvSGV4KGF3YWl0IGhhc2guZGlnZXN0KCkpO1xuICAgIH1cbiAgICBhc3luYyBzaWduUmVxdWVzdChyZXF1ZXN0VG9TaWduLCB7IHNpZ25pbmdEYXRlID0gbmV3IERhdGUoKSwgc2lnbmFibGVIZWFkZXJzLCB1bnNpZ25hYmxlSGVhZGVycywgc2lnbmluZ1JlZ2lvbiwgc2lnbmluZ1NlcnZpY2UsIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF3YWl0IHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyKCk7XG4gICAgICAgIHRoaXMudmFsaWRhdGVSZXNvbHZlZENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgcmVnaW9uID0gc2lnbmluZ1JlZ2lvbiA/PyAoYXdhaXQgdGhpcy5yZWdpb25Qcm92aWRlcigpKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHByZXBhcmVSZXF1ZXN0KHJlcXVlc3RUb1NpZ24pO1xuICAgICAgICBjb25zdCB7IGxvbmdEYXRlLCBzaG9ydERhdGUgfSA9IGZvcm1hdERhdGUoc2lnbmluZ0RhdGUpO1xuICAgICAgICBjb25zdCBzY29wZSA9IGNyZWF0ZVNjb3BlKHNob3J0RGF0ZSwgcmVnaW9uLCBzaWduaW5nU2VydmljZSA/PyB0aGlzLnNlcnZpY2UpO1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnNbQU1aX0RBVEVfSEVBREVSXSA9IGxvbmdEYXRlO1xuICAgICAgICBpZiAoY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbVE9LRU5fSEVBREVSXSA9IGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXlsb2FkSGFzaCA9IGF3YWl0IGdldFBheWxvYWRIYXNoKHJlcXVlc3QsIHRoaXMuc2hhMjU2KTtcbiAgICAgICAgaWYgKCFoYXNIZWFkZXIoU0hBMjU2X0hFQURFUiwgcmVxdWVzdC5oZWFkZXJzKSAmJiB0aGlzLmFwcGx5Q2hlY2tzdW0pIHtcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVyc1tTSEEyNTZfSEVBREVSXSA9IHBheWxvYWRIYXNoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbm9uaWNhbEhlYWRlcnMgPSBnZXRDYW5vbmljYWxIZWFkZXJzKHJlcXVlc3QsIHVuc2lnbmFibGVIZWFkZXJzLCBzaWduYWJsZUhlYWRlcnMpO1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLmdldFNpZ25hdHVyZShsb25nRGF0ZSwgc2NvcGUsIHRoaXMuZ2V0U2lnbmluZ0tleShjcmVkZW50aWFscywgcmVnaW9uLCBzaG9ydERhdGUsIHNpZ25pbmdTZXJ2aWNlKSwgdGhpcy5jcmVhdGVDYW5vbmljYWxSZXF1ZXN0KHJlcXVlc3QsIGNhbm9uaWNhbEhlYWRlcnMsIHBheWxvYWRIYXNoKSk7XG4gICAgICAgIHJlcXVlc3QuaGVhZGVyc1tBVVRIX0hFQURFUl0gPVxuICAgICAgICAgICAgYCR7QUxHT1JJVEhNX0lERU5USUZJRVJ9IGAgK1xuICAgICAgICAgICAgICAgIGBDcmVkZW50aWFsPSR7Y3JlZGVudGlhbHMuYWNjZXNzS2V5SWR9LyR7c2NvcGV9LCBgICtcbiAgICAgICAgICAgICAgICBgU2lnbmVkSGVhZGVycz0ke2dldENhbm9uaWNhbEhlYWRlckxpc3QoY2Fub25pY2FsSGVhZGVycyl9LCBgICtcbiAgICAgICAgICAgICAgICBgU2lnbmF0dXJlPSR7c2lnbmF0dXJlfWA7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbiAgICBjcmVhdGVDYW5vbmljYWxSZXF1ZXN0KHJlcXVlc3QsIGNhbm9uaWNhbEhlYWRlcnMsIHBheWxvYWRIYXNoKSB7XG4gICAgICAgIGNvbnN0IHNvcnRlZEhlYWRlcnMgPSBPYmplY3Qua2V5cyhjYW5vbmljYWxIZWFkZXJzKS5zb3J0KCk7XG4gICAgICAgIHJldHVybiBgJHtyZXF1ZXN0Lm1ldGhvZH1cbiR7dGhpcy5nZXRDYW5vbmljYWxQYXRoKHJlcXVlc3QpfVxuJHtnZXRDYW5vbmljYWxRdWVyeShyZXF1ZXN0KX1cbiR7c29ydGVkSGVhZGVycy5tYXAoKG5hbWUpID0+IGAke25hbWV9OiR7Y2Fub25pY2FsSGVhZGVyc1tuYW1lXX1gKS5qb2luKFwiXFxuXCIpfVxuXG4ke3NvcnRlZEhlYWRlcnMuam9pbihcIjtcIil9XG4ke3BheWxvYWRIYXNofWA7XG4gICAgfVxuICAgIGFzeW5jIGNyZWF0ZVN0cmluZ1RvU2lnbihsb25nRGF0ZSwgY3JlZGVudGlhbFNjb3BlLCBjYW5vbmljYWxSZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgdGhpcy5zaGEyNTYoKTtcbiAgICAgICAgaGFzaC51cGRhdGUodG9VaW50OEFycmF5KGNhbm9uaWNhbFJlcXVlc3QpKTtcbiAgICAgICAgY29uc3QgaGFzaGVkUmVxdWVzdCA9IGF3YWl0IGhhc2guZGlnZXN0KCk7XG4gICAgICAgIHJldHVybiBgJHtBTEdPUklUSE1fSURFTlRJRklFUn1cbiR7bG9uZ0RhdGV9XG4ke2NyZWRlbnRpYWxTY29wZX1cbiR7dG9IZXgoaGFzaGVkUmVxdWVzdCl9YDtcbiAgICB9XG4gICAgZ2V0Q2Fub25pY2FsUGF0aCh7IHBhdGggfSkge1xuICAgICAgICBpZiAodGhpcy51cmlFc2NhcGVQYXRoKSB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkUGF0aFNlZ21lbnRzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdGhTZWdtZW50IG9mIHBhdGguc3BsaXQoXCIvXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGhTZWdtZW50Py5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoU2VnbWVudCA9PT0gXCIuXCIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoU2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQYXRoU2VnbWVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkUGF0aFNlZ21lbnRzLnB1c2gocGF0aFNlZ21lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYCR7cGF0aD8uc3RhcnRzV2l0aChcIi9cIikgPyBcIi9cIiA6IFwiXCJ9JHtub3JtYWxpemVkUGF0aFNlZ21lbnRzLmpvaW4oXCIvXCIpfSR7bm9ybWFsaXplZFBhdGhTZWdtZW50cy5sZW5ndGggPiAwICYmIHBhdGg/LmVuZHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIn1gO1xuICAgICAgICAgICAgY29uc3QgZG91YmxlRW5jb2RlZCA9IGVuY29kZVVSSUNvbXBvbmVudChub3JtYWxpemVkUGF0aCk7XG4gICAgICAgICAgICByZXR1cm4gZG91YmxlRW5jb2RlZC5yZXBsYWNlKC8lMkYvZywgXCIvXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBhc3luYyBnZXRTaWduYXR1cmUobG9uZ0RhdGUsIGNyZWRlbnRpYWxTY29wZSwga2V5UHJvbWlzZSwgY2Fub25pY2FsUmVxdWVzdCkge1xuICAgICAgICBjb25zdCBzdHJpbmdUb1NpZ24gPSBhd2FpdCB0aGlzLmNyZWF0ZVN0cmluZ1RvU2lnbihsb25nRGF0ZSwgY3JlZGVudGlhbFNjb3BlLCBjYW5vbmljYWxSZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgaGFzaCA9IG5ldyB0aGlzLnNoYTI1Nihhd2FpdCBrZXlQcm9taXNlKTtcbiAgICAgICAgaGFzaC51cGRhdGUodG9VaW50OEFycmF5KHN0cmluZ1RvU2lnbikpO1xuICAgICAgICByZXR1cm4gdG9IZXgoYXdhaXQgaGFzaC5kaWdlc3QoKSk7XG4gICAgfVxuICAgIGdldFNpZ25pbmdLZXkoY3JlZGVudGlhbHMsIHJlZ2lvbiwgc2hvcnREYXRlLCBzZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBnZXRTaWduaW5nS2V5KHRoaXMuc2hhMjU2LCBjcmVkZW50aWFscywgc2hvcnREYXRlLCByZWdpb24sIHNlcnZpY2UgfHwgdGhpcy5zZXJ2aWNlKTtcbiAgICB9XG4gICAgdmFsaWRhdGVSZXNvbHZlZENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY3JlZGVudGlhbHMgIT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgIHR5cGVvZiBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZCAhPT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAgICAgdHlwZW9mIGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVzb2x2ZWQgY3JlZGVudGlhbCBvYmplY3QgaXMgbm90IHZhbGlkXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgZm9ybWF0RGF0ZSA9IChub3cpID0+IHtcbiAgICBjb25zdCBsb25nRGF0ZSA9IGlzbzg2MDEobm93KS5yZXBsYWNlKC9bXFwtOl0vZywgXCJcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG9uZ0RhdGUsXG4gICAgICAgIHNob3J0RGF0ZTogbG9uZ0RhdGUuc2xpY2UoMCwgOCksXG4gICAgfTtcbn07XG5jb25zdCBnZXRDYW5vbmljYWxIZWFkZXJMaXN0ID0gKGhlYWRlcnMpID0+IE9iamVjdC5rZXlzKGhlYWRlcnMpLnNvcnQoKS5qb2luKFwiO1wiKTtcbiIsImltcG9ydCB7IGNsb25lUmVxdWVzdCB9IGZyb20gXCIuL2Nsb25lUmVxdWVzdFwiO1xuZXhwb3J0IGNvbnN0IG1vdmVIZWFkZXJzVG9RdWVyeSA9IChyZXF1ZXN0LCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7IGhlYWRlcnMsIHF1ZXJ5ID0ge30gfSA9IHR5cGVvZiByZXF1ZXN0LmNsb25lID09PSBcImZ1bmN0aW9uXCIgPyByZXF1ZXN0LmNsb25lKCkgOiBjbG9uZVJlcXVlc3QocmVxdWVzdCk7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgICAgIGNvbnN0IGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAobG5hbWUuc2xpY2UoMCwgNikgPT09IFwieC1hbXotXCIgJiYgIW9wdGlvbnMudW5ob2lzdGFibGVIZWFkZXJzPy5oYXMobG5hbWUpKSB7XG4gICAgICAgICAgICBxdWVyeVtuYW1lXSA9IGhlYWRlcnNbbmFtZV07XG4gICAgICAgICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5yZXF1ZXN0LFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBxdWVyeSxcbiAgICB9O1xufTtcbiIsImV4cG9ydCBjb25zdCBoYXNIZWFkZXIgPSAoc291Z2h0SGVhZGVyLCBoZWFkZXJzKSA9PiB7XG4gICAgc291Z2h0SGVhZGVyID0gc291Z2h0SGVhZGVyLnRvTG93ZXJDYXNlKCk7XG4gICAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgICAgIGlmIChzb3VnaHRIZWFkZXIgPT09IGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCBjb25zdCBnZXRIZWFkZXJWYWx1ZSA9IChzb3VnaHRIZWFkZXIsIGhlYWRlcnMpID0+IHtcbiAgICBzb3VnaHRIZWFkZXIgPSBzb3VnaHRIZWFkZXIudG9Mb3dlckNhc2UoKTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoaGVhZGVycykpIHtcbiAgICAgICAgaWYgKHNvdWdodEhlYWRlciA9PT0gaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbmV4cG9ydCBjb25zdCBkZWxldGVIZWFkZXIgPSAoc291Z2h0SGVhZGVyLCBoZWFkZXJzKSA9PiB7XG4gICAgc291Z2h0SGVhZGVyID0gc291Z2h0SGVhZGVyLnRvTG93ZXJDYXNlKCk7XG4gICAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgICAgIGlmIChzb3VnaHRIZWFkZXIgPT09IGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyTmFtZV07XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiaW1wb3J0IHsgZXNjYXBlVXJpIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11cmktZXNjYXBlXCI7XG5pbXBvcnQgeyBTSUdOQVRVUkVfSEVBREVSIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgY29uc3QgZ2V0Q2Fub25pY2FsUXVlcnkgPSAoeyBxdWVyeSA9IHt9IH0pID0+IHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgY29uc3Qgc2VyaWFsaXplZCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHF1ZXJ5KS5zb3J0KCkpIHtcbiAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBTSUdOQVRVUkVfSEVBREVSKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBxdWVyeVtrZXldO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBgJHtlc2NhcGVVcmkoa2V5KX09JHtlc2NhcGVVcmkodmFsdWUpfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgLnNsaWNlKDApXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgoZW5jb2RlZCwgdmFsdWUpID0+IGVuY29kZWQuY29uY2F0KFtgJHtlc2NhcGVVcmkoa2V5KX09JHtlc2NhcGVVcmkodmFsdWUpfWBdKSwgW10pXG4gICAgICAgICAgICAgICAgLnNvcnQoKVxuICAgICAgICAgICAgICAgIC5qb2luKFwiJlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5c1xuICAgICAgICAubWFwKChrZXkpID0+IHNlcmlhbGl6ZWRba2V5XSlcbiAgICAgICAgLmZpbHRlcigoc2VyaWFsaXplZCkgPT4gc2VyaWFsaXplZClcbiAgICAgICAgLmpvaW4oXCImXCIpO1xufTtcbiIsImV4cG9ydCBjb25zdCBpc284NjAxID0gKHRpbWUpID0+IHRvRGF0ZSh0aW1lKVxuICAgIC50b0lTT1N0cmluZygpXG4gICAgLnJlcGxhY2UoL1xcLlxcZHszfVokLywgXCJaXCIpO1xuZXhwb3J0IGNvbnN0IHRvRGF0ZSA9ICh0aW1lKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0aW1lID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aW1lICogMTAwMCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGltZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoTnVtYmVyKHRpbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoTnVtYmVyKHRpbWUpICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRpbWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGltZTtcbn07XG4iLCJpbXBvcnQgeyBkb2VzSWRlbnRpdHlSZXF1aXJlUmVmcmVzaCwgaXNJZGVudGl0eUV4cGlyZWQsIG1lbW9pemVJZGVudGl0eVByb3ZpZGVyLCBub3JtYWxpemVQcm92aWRlciwgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBTaWduYXR1cmVWNCB9IGZyb20gXCJAc21pdGh5L3NpZ25hdHVyZS12NFwiO1xuZXhwb3J0IGNvbnN0IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBsZXQgbm9ybWFsaXplZENyZWRzO1xuICAgIGlmIChjb25maWcuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgbm9ybWFsaXplZENyZWRzID0gbWVtb2l6ZUlkZW50aXR5UHJvdmlkZXIoY29uZmlnLmNyZWRlbnRpYWxzLCBpc0lkZW50aXR5RXhwaXJlZCwgZG9lc0lkZW50aXR5UmVxdWlyZVJlZnJlc2gpO1xuICAgIH1cbiAgICBpZiAoIW5vcm1hbGl6ZWRDcmVkcykge1xuICAgICAgICBpZiAoY29uZmlnLmNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIpIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRDcmVkcyA9IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5jcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZywge1xuICAgICAgICAgICAgICAgIHBhcmVudENsaWVudENvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRDcmVkcyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgY3JlZGVudGlhbHNgIGlzIG1pc3NpbmdcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsgc2lnbmluZ0VzY2FwZVBhdGggPSB0cnVlLCBzeXN0ZW1DbG9ja09mZnNldCA9IGNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCB8fCAwLCBzaGEyNTYsIH0gPSBjb25maWc7XG4gICAgbGV0IHNpZ25lcjtcbiAgICBpZiAoY29uZmlnLnNpZ25lcikge1xuICAgICAgICBzaWduZXIgPSBub3JtYWxpemVQcm92aWRlcihjb25maWcuc2lnbmVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29uZmlnLnJlZ2lvbkluZm9Qcm92aWRlcikge1xuICAgICAgICBzaWduZXIgPSAoKSA9PiBub3JtYWxpemVQcm92aWRlcihjb25maWcucmVnaW9uKSgpXG4gICAgICAgICAgICAudGhlbihhc3luYyAocmVnaW9uKSA9PiBbXG4gICAgICAgICAgICAoYXdhaXQgY29uZmlnLnJlZ2lvbkluZm9Qcm92aWRlcihyZWdpb24sIHtcbiAgICAgICAgICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IGF3YWl0IGNvbmZpZy51c2VGaXBzRW5kcG9pbnQoKSxcbiAgICAgICAgICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogYXdhaXQgY29uZmlnLnVzZUR1YWxzdGFja0VuZHBvaW50KCksXG4gICAgICAgICAgICB9KSkgfHwge30sXG4gICAgICAgICAgICByZWdpb24sXG4gICAgICAgIF0pXG4gICAgICAgICAgICAudGhlbigoW3JlZ2lvbkluZm8sIHJlZ2lvbl0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2lnbmluZ1JlZ2lvbiwgc2lnbmluZ1NlcnZpY2UgfSA9IHJlZ2lvbkluZm87XG4gICAgICAgICAgICBjb25maWcuc2lnbmluZ1JlZ2lvbiA9IGNvbmZpZy5zaWduaW5nUmVnaW9uIHx8IHNpZ25pbmdSZWdpb24gfHwgcmVnaW9uO1xuICAgICAgICAgICAgY29uZmlnLnNpZ25pbmdOYW1lID0gY29uZmlnLnNpZ25pbmdOYW1lIHx8IHNpZ25pbmdTZXJ2aWNlIHx8IGNvbmZpZy5zZXJ2aWNlSWQ7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBub3JtYWxpemVkQ3JlZHMsXG4gICAgICAgICAgICAgICAgcmVnaW9uOiBjb25maWcuc2lnbmluZ1JlZ2lvbixcbiAgICAgICAgICAgICAgICBzZXJ2aWNlOiBjb25maWcuc2lnbmluZ05hbWUsXG4gICAgICAgICAgICAgICAgc2hhMjU2LFxuICAgICAgICAgICAgICAgIHVyaUVzY2FwZVBhdGg6IHNpZ25pbmdFc2NhcGVQYXRoLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IFNpZ25lckN0b3IgPSBjb25maWcuc2lnbmVyQ29uc3RydWN0b3IgfHwgU2lnbmF0dXJlVjQ7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNpZ25lckN0b3IocGFyYW1zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzaWduZXIgPSBhc3luYyAoYXV0aFNjaGVtZSkgPT4ge1xuICAgICAgICAgICAgYXV0aFNjaGVtZSA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ3Y0XCIsXG4gICAgICAgICAgICAgICAgc2lnbmluZ05hbWU6IGNvbmZpZy5zaWduaW5nTmFtZSB8fCBjb25maWcuZGVmYXVsdFNpZ25pbmdOYW1lLFxuICAgICAgICAgICAgICAgIHNpZ25pbmdSZWdpb246IGF3YWl0IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5yZWdpb24pKCksXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgICAgICB9LCBhdXRoU2NoZW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25pbmdSZWdpb24gPSBhdXRoU2NoZW1lLnNpZ25pbmdSZWdpb247XG4gICAgICAgICAgICBjb25zdCBzaWduaW5nU2VydmljZSA9IGF1dGhTY2hlbWUuc2lnbmluZ05hbWU7XG4gICAgICAgICAgICBjb25maWcuc2lnbmluZ1JlZ2lvbiA9IGNvbmZpZy5zaWduaW5nUmVnaW9uIHx8IHNpZ25pbmdSZWdpb247XG4gICAgICAgICAgICBjb25maWcuc2lnbmluZ05hbWUgPSBjb25maWcuc2lnbmluZ05hbWUgfHwgc2lnbmluZ1NlcnZpY2UgfHwgY29uZmlnLnNlcnZpY2VJZDtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IG5vcm1hbGl6ZWRDcmVkcyxcbiAgICAgICAgICAgICAgICByZWdpb246IGNvbmZpZy5zaWduaW5nUmVnaW9uLFxuICAgICAgICAgICAgICAgIHNlcnZpY2U6IGNvbmZpZy5zaWduaW5nTmFtZSxcbiAgICAgICAgICAgICAgICBzaGEyNTYsXG4gICAgICAgICAgICAgICAgdXJpRXNjYXBlUGF0aDogc2lnbmluZ0VzY2FwZVBhdGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgU2lnbmVyQ3RvciA9IGNvbmZpZy5zaWduZXJDb25zdHJ1Y3RvciB8fCBTaWduYXR1cmVWNDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmVyQ3RvcihwYXJhbXMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIHN5c3RlbUNsb2NrT2Zmc2V0LFxuICAgICAgICBzaWduaW5nRXNjYXBlUGF0aCxcbiAgICAgICAgY3JlZGVudGlhbHM6IG5vcm1hbGl6ZWRDcmVkcyxcbiAgICAgICAgc2lnbmVyLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVBV1NTREtTaWdWNENvbmZpZyA9IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZztcbiIsImltcG9ydCB7IGNoYWluLCBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IgfSBmcm9tIFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiO1xuZXhwb3J0IGNvbnN0IEVOVl9JTURTX0RJU0FCTEVEID0gXCJBV1NfRUMyX01FVEFEQVRBX0RJU0FCTEVEXCI7XG5leHBvcnQgY29uc3QgcmVtb3RlUHJvdmlkZXIgPSBhc3luYyAoaW5pdCkgPT4ge1xuICAgIGNvbnN0IHsgRU5WX0NNRFNfRlVMTF9VUkksIEVOVl9DTURTX1JFTEFUSVZFX1VSSSwgZnJvbUNvbnRhaW5lck1ldGFkYXRhLCBmcm9tSW5zdGFuY2VNZXRhZGF0YSB9ID0gYXdhaXQgaW1wb3J0KFwiQHNtaXRoeS9jcmVkZW50aWFsLXByb3ZpZGVyLWltZHNcIik7XG4gICAgaWYgKHByb2Nlc3MuZW52W0VOVl9DTURTX1JFTEFUSVZFX1VSSV0gfHwgcHJvY2Vzcy5lbnZbRU5WX0NNRFNfRlVMTF9VUkldKSB7XG4gICAgICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZVwiLCBcInJlbW90ZVByb3ZpZGVyOjpmcm9tSHR0cC9mcm9tQ29udGFpbmVyTWV0YWRhdGFcIik7XG4gICAgICAgIGNvbnN0IHsgZnJvbUh0dHAgfSA9IGF3YWl0IGltcG9ydChcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaHR0cFwiKTtcbiAgICAgICAgcmV0dXJuIGNoYWluKGZyb21IdHRwKGluaXQpLCBmcm9tQ29udGFpbmVyTWV0YWRhdGEoaW5pdCkpO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnZbRU5WX0lNRFNfRElTQUJMRURdKSB7XG4gICAgICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiRUMyIEluc3RhbmNlIE1ldGFkYXRhIFNlcnZpY2UgYWNjZXNzIGRpc2FibGVkXCIpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGVcIiwgXCJyZW1vdGVQcm92aWRlcjo6ZnJvbUluc3RhbmNlTWV0YWRhdGFcIik7XG4gICAgcmV0dXJuIGZyb21JbnN0YW5jZU1ldGFkYXRhKGluaXQpO1xufTtcbiIsImltcG9ydCB7IGNoYWluLCBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IsIG1lbW9pemUgfSBmcm9tIFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiO1xuaW1wb3J0IHsgRU5WX1BST0ZJTEUgfSBmcm9tIFwiQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyXCI7XG5pbXBvcnQgeyByZW1vdGVQcm92aWRlciB9IGZyb20gXCIuL3JlbW90ZVByb3ZpZGVyXCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdFByb3ZpZGVyID0gKGluaXQgPSB7fSkgPT4gbWVtb2l6ZShjaGFpbiguLi4oaW5pdC5wcm9maWxlIHx8IHByb2Nlc3MuZW52W0VOVl9QUk9GSUxFXVxuICAgID8gW11cbiAgICA6IFtcbiAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaW5pdC5sb2dnZXI/LmRlYnVnKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlXCIsIFwiZGVmYXVsdFByb3ZpZGVyOjpmcm9tRW52XCIpO1xuICAgICAgICAgICAgY29uc3QgeyBmcm9tRW52IH0gPSBhd2FpdCBpbXBvcnQoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWVudlwiKTtcbiAgICAgICAgICAgIHJldHVybiBmcm9tRW52KGluaXQpKCk7XG4gICAgICAgIH0sXG4gICAgXSksIGFzeW5jICgpID0+IHtcbiAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGVcIiwgXCJkZWZhdWx0UHJvdmlkZXI6OmZyb21TU09cIik7XG4gICAgY29uc3QgeyBzc29TdGFydFVybCwgc3NvQWNjb3VudElkLCBzc29SZWdpb24sIHNzb1JvbGVOYW1lLCBzc29TZXNzaW9uIH0gPSBpbml0O1xuICAgIGlmICghc3NvU3RhcnRVcmwgJiYgIXNzb0FjY291bnRJZCAmJiAhc3NvUmVnaW9uICYmICFzc29Sb2xlTmFtZSAmJiAhc3NvU2Vzc2lvbikge1xuICAgICAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiU2tpcHBpbmcgU1NPIHByb3ZpZGVyIGluIGRlZmF1bHQgY2hhaW4gKGlucHV0cyBkbyBub3QgaW5jbHVkZSBTU08gZmllbGRzKS5cIik7XG4gICAgfVxuICAgIGNvbnN0IHsgZnJvbVNTTyB9ID0gYXdhaXQgaW1wb3J0KFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1zc29cIik7XG4gICAgcmV0dXJuIGZyb21TU08oaW5pdCkoKTtcbn0sIGFzeW5jICgpID0+IHtcbiAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGVcIiwgXCJkZWZhdWx0UHJvdmlkZXI6OmZyb21JbmlcIik7XG4gICAgY29uc3QgeyBmcm9tSW5pIH0gPSBhd2FpdCBpbXBvcnQoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWluaVwiKTtcbiAgICByZXR1cm4gZnJvbUluaShpbml0KSgpO1xufSwgYXN5bmMgKCkgPT4ge1xuICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZVwiLCBcImRlZmF1bHRQcm92aWRlcjo6ZnJvbVByb2Nlc3NcIik7XG4gICAgY29uc3QgeyBmcm9tUHJvY2VzcyB9ID0gYXdhaXQgaW1wb3J0KFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1wcm9jZXNzXCIpO1xuICAgIHJldHVybiBmcm9tUHJvY2Vzcyhpbml0KSgpO1xufSwgYXN5bmMgKCkgPT4ge1xuICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZVwiLCBcImRlZmF1bHRQcm92aWRlcjo6ZnJvbVRva2VuRmlsZVwiKTtcbiAgICBjb25zdCB7IGZyb21Ub2tlbkZpbGUgfSA9IGF3YWl0IGltcG9ydChcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItd2ViLWlkZW50aXR5XCIpO1xuICAgIHJldHVybiBmcm9tVG9rZW5GaWxlKGluaXQpKCk7XG59LCBhc3luYyAoKSA9PiB7XG4gICAgaW5pdC5sb2dnZXI/LmRlYnVnKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlXCIsIFwiZGVmYXVsdFByb3ZpZGVyOjpyZW1vdGVQcm92aWRlclwiKTtcbiAgICByZXR1cm4gKGF3YWl0IHJlbW90ZVByb3ZpZGVyKGluaXQpKSgpO1xufSwgYXN5bmMgKCkgPT4ge1xuICAgIHRocm93IG5ldyBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoXCJDb3VsZCBub3QgbG9hZCBjcmVkZW50aWFscyBmcm9tIGFueSBwcm92aWRlcnNcIiwgZmFsc2UpO1xufSksIGNyZWRlbnRpYWxzVHJlYXRlZEFzRXhwaXJlZCwgY3JlZGVudGlhbHNXaWxsTmVlZFJlZnJlc2gpO1xuZXhwb3J0IGNvbnN0IGNyZWRlbnRpYWxzV2lsbE5lZWRSZWZyZXNoID0gKGNyZWRlbnRpYWxzKSA9PiBjcmVkZW50aWFscz8uZXhwaXJhdGlvbiAhPT0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IGNyZWRlbnRpYWxzVHJlYXRlZEFzRXhwaXJlZCA9IChjcmVkZW50aWFscykgPT4gY3JlZGVudGlhbHM/LmV4cGlyYXRpb24gIT09IHVuZGVmaW5lZCAmJiBjcmVkZW50aWFscy5leHBpcmF0aW9uLmdldFRpbWUoKSAtIERhdGUubm93KCkgPCAzMDAwMDA7XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlSG9zdEhlYWRlckNvbmZpZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dDtcbn1cbmV4cG9ydCBjb25zdCBob3N0SGVhZGVyTWlkZGxld2FyZSA9IChvcHRpb25zKSA9PiAobmV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UoYXJncy5yZXF1ZXN0KSlcbiAgICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgIGNvbnN0IHsgaGFuZGxlclByb3RvY29sID0gXCJcIiB9ID0gb3B0aW9ucy5yZXF1ZXN0SGFuZGxlci5tZXRhZGF0YSB8fCB7fTtcbiAgICBpZiAoaGFuZGxlclByb3RvY29sLmluZGV4T2YoXCJoMlwiKSA+PSAwICYmICFyZXF1ZXN0LmhlYWRlcnNbXCI6YXV0aG9yaXR5XCJdKSB7XG4gICAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJob3N0XCJdO1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnNbXCI6YXV0aG9yaXR5XCJdID0gcmVxdWVzdC5ob3N0bmFtZSArIChyZXF1ZXN0LnBvcnQgPyBcIjpcIiArIHJlcXVlc3QucG9ydCA6IFwiXCIpO1xuICAgIH1cbiAgICBlbHNlIGlmICghcmVxdWVzdC5oZWFkZXJzW1wiaG9zdFwiXSkge1xuICAgICAgICBsZXQgaG9zdCA9IHJlcXVlc3QuaG9zdG5hbWU7XG4gICAgICAgIGlmIChyZXF1ZXN0LnBvcnQgIT0gbnVsbClcbiAgICAgICAgICAgIGhvc3QgKz0gYDoke3JlcXVlc3QucG9ydH1gO1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnNbXCJob3N0XCJdID0gaG9zdDtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG59O1xuZXhwb3J0IGNvbnN0IGhvc3RIZWFkZXJNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBuYW1lOiBcImhvc3RIZWFkZXJNaWRkbGV3YXJlXCIsXG4gICAgc3RlcDogXCJidWlsZFwiLFxuICAgIHByaW9yaXR5OiBcImxvd1wiLFxuICAgIHRhZ3M6IFtcIkhPU1RcIl0sXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuZXhwb3J0IGNvbnN0IGdldEhvc3RIZWFkZXJQbHVnaW4gPSAob3B0aW9ucykgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGQoaG9zdEhlYWRlck1pZGRsZXdhcmUob3B0aW9ucyksIGhvc3RIZWFkZXJNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIiwiZXhwb3J0IGNvbnN0IGxvZ2dlck1pZGRsZXdhcmUgPSAoKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG5leHQoYXJncyk7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50TmFtZSwgY29tbWFuZE5hbWUsIGxvZ2dlciwgZHluYW1vRGJEb2N1bWVudENsaWVudE9wdGlvbnMgPSB7fSB9ID0gY29udGV4dDtcbiAgICAgICAgY29uc3QgeyBvdmVycmlkZUlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nLCBvdmVycmlkZU91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyB9ID0gZHluYW1vRGJEb2N1bWVudENsaWVudE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gb3ZlcnJpZGVJbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyA/PyBjb250ZXh0LmlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nO1xuICAgICAgICBjb25zdCBvdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPSBvdmVycmlkZU91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyA/PyBjb250ZXh0Lm91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZztcbiAgICAgICAgY29uc3QgeyAkbWV0YWRhdGEsIC4uLm91dHB1dFdpdGhvdXRNZXRhZGF0YSB9ID0gcmVzcG9uc2Uub3V0cHV0O1xuICAgICAgICBsb2dnZXI/LmluZm8/Lih7XG4gICAgICAgICAgICBjbGllbnROYW1lLFxuICAgICAgICAgICAgY29tbWFuZE5hbWUsXG4gICAgICAgICAgICBpbnB1dDogaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2coYXJncy5pbnB1dCksXG4gICAgICAgICAgICBvdXRwdXQ6IG91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyhvdXRwdXRXaXRob3V0TWV0YWRhdGEpLFxuICAgICAgICAgICAgbWV0YWRhdGE6ICRtZXRhZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50TmFtZSwgY29tbWFuZE5hbWUsIGxvZ2dlciwgZHluYW1vRGJEb2N1bWVudENsaWVudE9wdGlvbnMgPSB7fSB9ID0gY29udGV4dDtcbiAgICAgICAgY29uc3QgeyBvdmVycmlkZUlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nIH0gPSBkeW5hbW9EYkRvY3VtZW50Q2xpZW50T3B0aW9ucztcbiAgICAgICAgY29uc3QgaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPSBvdmVycmlkZUlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nID8/IGNvbnRleHQuaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2c7XG4gICAgICAgIGxvZ2dlcj8uZXJyb3I/Lih7XG4gICAgICAgICAgICBjbGllbnROYW1lLFxuICAgICAgICAgICAgY29tbWFuZE5hbWUsXG4gICAgICAgICAgICBpbnB1dDogaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2coYXJncy5pbnB1dCksXG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgIG1ldGFkYXRhOiBlcnJvci4kbWV0YWRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59O1xuZXhwb3J0IGNvbnN0IGxvZ2dlck1pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIG5hbWU6IFwibG9nZ2VyTWlkZGxld2FyZVwiLFxuICAgIHRhZ3M6IFtcIkxPR0dFUlwiXSxcbiAgICBzdGVwOiBcImluaXRpYWxpemVcIixcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5leHBvcnQgY29uc3QgZ2V0TG9nZ2VyUGx1Z2luID0gKG9wdGlvbnMpID0+ICh7XG4gICAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICAgICAgY2xpZW50U3RhY2suYWRkKGxvZ2dlck1pZGRsZXdhcmUoKSwgbG9nZ2VyTWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuY29uc3QgVFJBQ0VfSURfSEVBREVSX05BTUUgPSBcIlgtQW16bi1UcmFjZS1JZFwiO1xuY29uc3QgRU5WX0xBTUJEQV9GVU5DVElPTl9OQU1FID0gXCJBV1NfTEFNQkRBX0ZVTkNUSU9OX05BTUVcIjtcbmNvbnN0IEVOVl9UUkFDRV9JRCA9IFwiX1hfQU1aTl9UUkFDRV9JRFwiO1xuZXhwb3J0IGNvbnN0IHJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmUgPSAob3B0aW9ucykgPT4gKG5leHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgIGlmICghSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSB8fFxuICAgICAgICBvcHRpb25zLnJ1bnRpbWUgIT09IFwibm9kZVwiIHx8XG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShUUkFDRV9JRF9IRUFERVJfTkFNRSkpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IHByb2Nlc3MuZW52W0VOVl9MQU1CREFfRlVOQ1RJT05fTkFNRV07XG4gICAgY29uc3QgdHJhY2VJZCA9IHByb2Nlc3MuZW52W0VOVl9UUkFDRV9JRF07XG4gICAgY29uc3Qgbm9uRW1wdHlTdHJpbmcgPSAoc3RyKSA9PiB0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiICYmIHN0ci5sZW5ndGggPiAwO1xuICAgIGlmIChub25FbXB0eVN0cmluZyhmdW5jdGlvbk5hbWUpICYmIG5vbkVtcHR5U3RyaW5nKHRyYWNlSWQpKSB7XG4gICAgICAgIHJlcXVlc3QuaGVhZGVyc1tUUkFDRV9JRF9IRUFERVJfTkFNRV0gPSB0cmFjZUlkO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgIC4uLmFyZ3MsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IGFkZFJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIHN0ZXA6IFwiYnVpbGRcIixcbiAgICB0YWdzOiBbXCJSRUNVUlNJT05fREVURUNUSU9OXCJdLFxuICAgIG5hbWU6IFwicmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZVwiLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxuICAgIHByaW9yaXR5OiBcImxvd1wiLFxufTtcbmV4cG9ydCBjb25zdCBnZXRSZWN1cnNpb25EZXRlY3Rpb25QbHVnaW4gPSAob3B0aW9ucykgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGQocmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZShvcHRpb25zKSwgYWRkUmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsImV4cG9ydCBmdW5jdGlvbiByZXNvbHZlVXNlckFnZW50Q29uZmlnKGlucHV0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5wdXQsXG4gICAgICAgIGN1c3RvbVVzZXJBZ2VudDogdHlwZW9mIGlucHV0LmN1c3RvbVVzZXJBZ2VudCA9PT0gXCJzdHJpbmdcIiA/IFtbaW5wdXQuY3VzdG9tVXNlckFnZW50XV0gOiBpbnB1dC5jdXN0b21Vc2VyQWdlbnQsXG4gICAgfTtcbn1cbiIsImltcG9ydCB7IGlzVmFsaWRIb3N0TGFiZWwgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWVuZHBvaW50c1wiO1xuaW1wb3J0IHsgaXNJcEFkZHJlc3MgfSBmcm9tIFwiLi4vaXNJcEFkZHJlc3NcIjtcbmV4cG9ydCBjb25zdCBpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0ID0gKHZhbHVlLCBhbGxvd1N1YkRvbWFpbnMgPSBmYWxzZSkgPT4ge1xuICAgIGlmIChhbGxvd1N1YkRvbWFpbnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBsYWJlbCBvZiB2YWx1ZS5zcGxpdChcIi5cIikpIHtcbiAgICAgICAgICAgIGlmICghaXNWaXJ0dWFsSG9zdGFibGVTM0J1Y2tldChsYWJlbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghaXNWYWxpZEhvc3RMYWJlbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodmFsdWUubGVuZ3RoIDwgMyB8fCB2YWx1ZS5sZW5ndGggPiA2Mykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAhPT0gdmFsdWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc0lwQWRkcmVzcyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4iLCJpbXBvcnQgcGFydGl0aW9uc0luZm8gZnJvbSBcIi4vcGFydGl0aW9ucy5qc29uXCI7XG5sZXQgc2VsZWN0ZWRQYXJ0aXRpb25zSW5mbyA9IHBhcnRpdGlvbnNJbmZvO1xubGV0IHNlbGVjdGVkVXNlckFnZW50UHJlZml4ID0gXCJcIjtcbmV4cG9ydCBjb25zdCBwYXJ0aXRpb24gPSAodmFsdWUpID0+IHtcbiAgICBjb25zdCB7IHBhcnRpdGlvbnMgfSA9IHNlbGVjdGVkUGFydGl0aW9uc0luZm87XG4gICAgZm9yIChjb25zdCBwYXJ0aXRpb24gb2YgcGFydGl0aW9ucykge1xuICAgICAgICBjb25zdCB7IHJlZ2lvbnMsIG91dHB1dHMgfSA9IHBhcnRpdGlvbjtcbiAgICAgICAgZm9yIChjb25zdCBbcmVnaW9uLCByZWdpb25EYXRhXSBvZiBPYmplY3QuZW50cmllcyhyZWdpb25zKSkge1xuICAgICAgICAgICAgaWYgKHJlZ2lvbiA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5vdXRwdXRzLFxuICAgICAgICAgICAgICAgICAgICAuLi5yZWdpb25EYXRhLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBwYXJ0aXRpb24gb2YgcGFydGl0aW9ucykge1xuICAgICAgICBjb25zdCB7IHJlZ2lvblJlZ2V4LCBvdXRwdXRzIH0gPSBwYXJ0aXRpb247XG4gICAgICAgIGlmIChuZXcgUmVnRXhwKHJlZ2lvblJlZ2V4KS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5vdXRwdXRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBERUZBVUxUX1BBUlRJVElPTiA9IHBhcnRpdGlvbnMuZmluZCgocGFydGl0aW9uKSA9PiBwYXJ0aXRpb24uaWQgPT09IFwiYXdzXCIpO1xuICAgIGlmICghREVGQVVMVF9QQVJUSVRJT04pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvdmlkZWQgcmVnaW9uIHdhcyBub3QgZm91bmQgaW4gdGhlIHBhcnRpdGlvbiBhcnJheSBvciByZWdleCxcIiArXG4gICAgICAgICAgICBcIiBhbmQgZGVmYXVsdCBwYXJ0aXRpb24gd2l0aCBpZCAnYXdzJyBkb2Vzbid0IGV4aXN0LlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uREVGQVVMVF9QQVJUSVRJT04ub3V0cHV0cyxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBzZXRQYXJ0aXRpb25JbmZvID0gKHBhcnRpdGlvbnNJbmZvLCB1c2VyQWdlbnRQcmVmaXggPSBcIlwiKSA9PiB7XG4gICAgc2VsZWN0ZWRQYXJ0aXRpb25zSW5mbyA9IHBhcnRpdGlvbnNJbmZvO1xuICAgIHNlbGVjdGVkVXNlckFnZW50UHJlZml4ID0gdXNlckFnZW50UHJlZml4O1xufTtcbmV4cG9ydCBjb25zdCB1c2VEZWZhdWx0UGFydGl0aW9uSW5mbyA9ICgpID0+IHtcbiAgICBzZXRQYXJ0aXRpb25JbmZvKHBhcnRpdGlvbnNJbmZvLCBcIlwiKTtcbn07XG5leHBvcnQgY29uc3QgZ2V0VXNlckFnZW50UHJlZml4ID0gKCkgPT4gc2VsZWN0ZWRVc2VyQWdlbnRQcmVmaXg7XG4iLCJpbXBvcnQgeyBjdXN0b21FbmRwb2ludEZ1bmN0aW9ucyB9IGZyb20gXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0IH0gZnJvbSBcIi4vbGliL2F3cy9pc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0XCI7XG5pbXBvcnQgeyBwYXJzZUFybiB9IGZyb20gXCIuL2xpYi9hd3MvcGFyc2VBcm5cIjtcbmltcG9ydCB7IHBhcnRpdGlvbiB9IGZyb20gXCIuL2xpYi9hd3MvcGFydGl0aW9uXCI7XG5jb25zdCBhd3NFbmRwb2ludEZ1bmN0aW9ucyA9IHtcbiAgICBpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0OiBpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0LFxuICAgIHBhcnNlQXJuOiBwYXJzZUFybixcbiAgICBwYXJ0aXRpb246IHBhcnRpdGlvbixcbn07XG5jdXN0b21FbmRwb2ludEZ1bmN0aW9ucy5hd3MgPSBhd3NFbmRwb2ludEZ1bmN0aW9ucztcbiIsImV4cG9ydCBjb25zdCBwYXJzZUFybiA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdmFsdWUuc3BsaXQoXCI6XCIpO1xuICAgIGlmIChzZWdtZW50cy5sZW5ndGggPCA2KVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBbYXJuLCBwYXJ0aXRpb24sIHNlcnZpY2UsIHJlZ2lvbiwgYWNjb3VudElkLCAuLi5yZXNvdXJjZUlkXSA9IHNlZ21lbnRzO1xuICAgIGlmIChhcm4gIT09IFwiYXJuXCIgfHwgcGFydGl0aW9uID09PSBcIlwiIHx8IHNlcnZpY2UgPT09IFwiXCIgfHwgcmVzb3VyY2VJZFswXSA9PT0gXCJcIilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFydGl0aW9uLFxuICAgICAgICBzZXJ2aWNlLFxuICAgICAgICByZWdpb24sXG4gICAgICAgIGFjY291bnRJZCxcbiAgICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2VJZFswXS5pbmNsdWRlcyhcIi9cIikgPyByZXNvdXJjZUlkWzBdLnNwbGl0KFwiL1wiKSA6IHJlc291cmNlSWQsXG4gICAgfTtcbn07XG4iLCJleHBvcnQgY29uc3QgVVNFUl9BR0VOVCA9IFwidXNlci1hZ2VudFwiO1xuZXhwb3J0IGNvbnN0IFhfQU1aX1VTRVJfQUdFTlQgPSBcIngtYW16LXVzZXItYWdlbnRcIjtcbmV4cG9ydCBjb25zdCBTUEFDRSA9IFwiIFwiO1xuZXhwb3J0IGNvbnN0IFVBX05BTUVfU0VQQVJBVE9SID0gXCIvXCI7XG5leHBvcnQgY29uc3QgVUFfTkFNRV9FU0NBUEVfUkVHRVggPSAvW15cXCFcXCRcXCVcXCZcXCdcXCpcXCtcXC1cXC5cXF5cXF9cXGBcXHxcXH5cXGRcXHddL2c7XG5leHBvcnQgY29uc3QgVUFfVkFMVUVfRVNDQVBFX1JFR0VYID0gL1teXFwhXFwkXFwlXFwmXFwnXFwqXFwrXFwtXFwuXFxeXFxfXFxgXFx8XFx+XFxkXFx3XFwjXS9nO1xuZXhwb3J0IGNvbnN0IFVBX0VTQ0FQRV9DSEFSID0gXCItXCI7XG4iLCJpbXBvcnQgeyBnZXRVc2VyQWdlbnRQcmVmaXggfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1lbmRwb2ludHNcIjtcbmltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgU1BBQ0UsIFVBX0VTQ0FQRV9DSEFSLCBVQV9OQU1FX0VTQ0FQRV9SRUdFWCwgVUFfTkFNRV9TRVBBUkFUT1IsIFVBX1ZBTFVFX0VTQ0FQRV9SRUdFWCwgVVNFUl9BR0VOVCwgWF9BTVpfVVNFUl9BR0VOVCwgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBjb25zdCB1c2VyQWdlbnRNaWRkbGV3YXJlID0gKG9wdGlvbnMpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpXG4gICAgICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICAgIGNvbnN0IHsgaGVhZGVycyB9ID0gcmVxdWVzdDtcbiAgICBjb25zdCB1c2VyQWdlbnQgPSBjb250ZXh0Py51c2VyQWdlbnQ/Lm1hcChlc2NhcGVVc2VyQWdlbnQpIHx8IFtdO1xuICAgIGNvbnN0IGRlZmF1bHRVc2VyQWdlbnQgPSAoYXdhaXQgb3B0aW9ucy5kZWZhdWx0VXNlckFnZW50UHJvdmlkZXIoKSkubWFwKGVzY2FwZVVzZXJBZ2VudCk7XG4gICAgY29uc3QgY3VzdG9tVXNlckFnZW50ID0gb3B0aW9ucz8uY3VzdG9tVXNlckFnZW50Py5tYXAoZXNjYXBlVXNlckFnZW50KSB8fCBbXTtcbiAgICBjb25zdCBwcmVmaXggPSBnZXRVc2VyQWdlbnRQcmVmaXgoKTtcbiAgICBjb25zdCBzZGtVc2VyQWdlbnRWYWx1ZSA9IChwcmVmaXggPyBbcHJlZml4XSA6IFtdKVxuICAgICAgICAuY29uY2F0KFsuLi5kZWZhdWx0VXNlckFnZW50LCAuLi51c2VyQWdlbnQsIC4uLmN1c3RvbVVzZXJBZ2VudF0pXG4gICAgICAgIC5qb2luKFNQQUNFKTtcbiAgICBjb25zdCBub3JtYWxVQVZhbHVlID0gW1xuICAgICAgICAuLi5kZWZhdWx0VXNlckFnZW50LmZpbHRlcigoc2VjdGlvbikgPT4gc2VjdGlvbi5zdGFydHNXaXRoKFwiYXdzLXNkay1cIikpLFxuICAgICAgICAuLi5jdXN0b21Vc2VyQWdlbnQsXG4gICAgXS5qb2luKFNQQUNFKTtcbiAgICBpZiAob3B0aW9ucy5ydW50aW1lICE9PSBcImJyb3dzZXJcIikge1xuICAgICAgICBpZiAobm9ybWFsVUFWYWx1ZSkge1xuICAgICAgICAgICAgaGVhZGVyc1tYX0FNWl9VU0VSX0FHRU5UXSA9IGhlYWRlcnNbWF9BTVpfVVNFUl9BR0VOVF1cbiAgICAgICAgICAgICAgICA/IGAke2hlYWRlcnNbVVNFUl9BR0VOVF19ICR7bm9ybWFsVUFWYWx1ZX1gXG4gICAgICAgICAgICAgICAgOiBub3JtYWxVQVZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcnNbVVNFUl9BR0VOVF0gPSBzZGtVc2VyQWdlbnRWYWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGhlYWRlcnNbWF9BTVpfVVNFUl9BR0VOVF0gPSBzZGtVc2VyQWdlbnRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAuLi5hcmdzLFxuICAgICAgICByZXF1ZXN0LFxuICAgIH0pO1xufTtcbmNvbnN0IGVzY2FwZVVzZXJBZ2VudCA9ICh1c2VyQWdlbnRQYWlyKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IHVzZXJBZ2VudFBhaXJbMF1cbiAgICAgICAgLnNwbGl0KFVBX05BTUVfU0VQQVJBVE9SKVxuICAgICAgICAubWFwKChwYXJ0KSA9PiBwYXJ0LnJlcGxhY2UoVUFfTkFNRV9FU0NBUEVfUkVHRVgsIFVBX0VTQ0FQRV9DSEFSKSlcbiAgICAgICAgLmpvaW4oVUFfTkFNRV9TRVBBUkFUT1IpO1xuICAgIGNvbnN0IHZlcnNpb24gPSB1c2VyQWdlbnRQYWlyWzFdPy5yZXBsYWNlKFVBX1ZBTFVFX0VTQ0FQRV9SRUdFWCwgVUFfRVNDQVBFX0NIQVIpO1xuICAgIGNvbnN0IHByZWZpeFNlcGFyYXRvckluZGV4ID0gbmFtZS5pbmRleE9mKFVBX05BTUVfU0VQQVJBVE9SKTtcbiAgICBjb25zdCBwcmVmaXggPSBuYW1lLnN1YnN0cmluZygwLCBwcmVmaXhTZXBhcmF0b3JJbmRleCk7XG4gICAgbGV0IHVhTmFtZSA9IG5hbWUuc3Vic3RyaW5nKHByZWZpeFNlcGFyYXRvckluZGV4ICsgMSk7XG4gICAgaWYgKHByZWZpeCA9PT0gXCJhcGlcIikge1xuICAgICAgICB1YU5hbWUgPSB1YU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIFtwcmVmaXgsIHVhTmFtZSwgdmVyc2lvbl1cbiAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAmJiBpdGVtLmxlbmd0aCA+IDApXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBgJHthY2N9LyR7aXRlbX1gO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YWNjfSMke2l0ZW19YDtcbiAgICAgICAgfVxuICAgIH0sIFwiXCIpO1xufTtcbmV4cG9ydCBjb25zdCBnZXRVc2VyQWdlbnRNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBuYW1lOiBcImdldFVzZXJBZ2VudE1pZGRsZXdhcmVcIixcbiAgICBzdGVwOiBcImJ1aWxkXCIsXG4gICAgcHJpb3JpdHk6IFwibG93XCIsXG4gICAgdGFnczogW1wiU0VUX1VTRVJfQUdFTlRcIiwgXCJVU0VSX0FHRU5UXCJdLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBnZXRVc2VyQWdlbnRQbHVnaW4gPSAoY29uZmlnKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZCh1c2VyQWdlbnRNaWRkbGV3YXJlKGNvbmZpZyksIGdldFVzZXJBZ2VudE1pZGRsZXdhcmVPcHRpb25zKTtcbiAgICB9LFxufSk7XG4iLCJleHBvcnQgY29uc3QgZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IChydW50aW1lQ29uZmlnKSA9PiB7XG4gICAgbGV0IHJ1bnRpbWVDb25maWdSZWdpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChydW50aW1lQ29uZmlnLnJlZ2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb24gaXMgbWlzc2luZyBmcm9tIHJ1bnRpbWVDb25maWdcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVnaW9uID0gcnVudGltZUNvbmZpZy5yZWdpb247XG4gICAgICAgIGlmICh0eXBlb2YgcmVnaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpb24oKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldFJlZ2lvbihyZWdpb24pIHtcbiAgICAgICAgICAgIHJ1bnRpbWVDb25maWdSZWdpb24gPSByZWdpb247XG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBydW50aW1lQ29uZmlnUmVnaW9uO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uID0gKGF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWdpb246IGF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ucmVnaW9uKCksXG4gICAgfTtcbn07XG4iLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcInByb2Nlc3NcIik7IiwiaW1wb3J0IHsgbG9hZENvbmZpZyB9IGZyb20gXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBwbGF0Zm9ybSwgcmVsZWFzZSB9IGZyb20gXCJvc1wiO1xuaW1wb3J0IHsgZW52LCB2ZXJzaW9ucyB9IGZyb20gXCJwcm9jZXNzXCI7XG5pbXBvcnQgeyBpc0NydEF2YWlsYWJsZSB9IGZyb20gXCIuL2lzLWNydC1hdmFpbGFibGVcIjtcbmV4cG9ydCB7IGNydEF2YWlsYWJpbGl0eSB9IGZyb20gXCIuL2NydC1hdmFpbGFiaWxpdHlcIjtcbmV4cG9ydCBjb25zdCBVQV9BUFBfSURfRU5WX05BTUUgPSBcIkFXU19TREtfVUFfQVBQX0lEXCI7XG5leHBvcnQgY29uc3QgVUFfQVBQX0lEX0lOSV9OQU1FID0gXCJzZGstdWEtYXBwLWlkXCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdFVzZXJBZ2VudCA9ICh7IHNlcnZpY2VJZCwgY2xpZW50VmVyc2lvbiB9KSA9PiB7XG4gICAgY29uc3Qgc2VjdGlvbnMgPSBbXG4gICAgICAgIFtcImF3cy1zZGstanNcIiwgY2xpZW50VmVyc2lvbl0sXG4gICAgICAgIFtcInVhXCIsIFwiMi4wXCJdLFxuICAgICAgICBbYG9zLyR7cGxhdGZvcm0oKX1gLCByZWxlYXNlKCldLFxuICAgICAgICBbXCJsYW5nL2pzXCJdLFxuICAgICAgICBbXCJtZC9ub2RlanNcIiwgYCR7dmVyc2lvbnMubm9kZX1gXSxcbiAgICBdO1xuICAgIGNvbnN0IGNydEF2YWlsYWJsZSA9IGlzQ3J0QXZhaWxhYmxlKCk7XG4gICAgaWYgKGNydEF2YWlsYWJsZSkge1xuICAgICAgICBzZWN0aW9ucy5wdXNoKGNydEF2YWlsYWJsZSk7XG4gICAgfVxuICAgIGlmIChzZXJ2aWNlSWQpIHtcbiAgICAgICAgc2VjdGlvbnMucHVzaChbYGFwaS8ke3NlcnZpY2VJZH1gLCBjbGllbnRWZXJzaW9uXSk7XG4gICAgfVxuICAgIGlmIChlbnYuQVdTX0VYRUNVVElPTl9FTlYpIHtcbiAgICAgICAgc2VjdGlvbnMucHVzaChbYGV4ZWMtZW52LyR7ZW52LkFXU19FWEVDVVRJT05fRU5WfWBdKTtcbiAgICB9XG4gICAgY29uc3QgYXBwSWRQcm9taXNlID0gbG9hZENvbmZpZyh7XG4gICAgICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4gZW52W1VBX0FQUF9JRF9FTlZfTkFNRV0sXG4gICAgICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IHByb2ZpbGVbVUFfQVBQX0lEX0lOSV9OQU1FXSxcbiAgICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLFxuICAgIH0pKCk7XG4gICAgbGV0IHJlc29sdmVkVXNlckFnZW50ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICghcmVzb2x2ZWRVc2VyQWdlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFwcElkID0gYXdhaXQgYXBwSWRQcm9taXNlO1xuICAgICAgICAgICAgcmVzb2x2ZWRVc2VyQWdlbnQgPSBhcHBJZCA/IFsuLi5zZWN0aW9ucywgW2BhcHAvJHthcHBJZH1gXV0gOiBbLi4uc2VjdGlvbnNdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlZFVzZXJBZ2VudDtcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IGZyb21VdGY4IGFzIGpzRnJvbVV0ZjgsIHRvVXRmOCBhcyBqc1RvVXRmOCB9IGZyb20gXCIuL3B1cmVKc1wiO1xuaW1wb3J0IHsgZnJvbVV0ZjggYXMgdGV4dEVuY29kZXJGcm9tVXRmOCwgdG9VdGY4IGFzIHRleHRFbmNvZGVyVG9VdGY4IH0gZnJvbSBcIi4vd2hhdHdnRW5jb2RpbmdBcGlcIjtcbmV4cG9ydCBjb25zdCBmcm9tVXRmOCA9IChpbnB1dCkgPT4gdHlwZW9mIFRleHRFbmNvZGVyID09PSBcImZ1bmN0aW9uXCIgPyB0ZXh0RW5jb2RlckZyb21VdGY4KGlucHV0KSA6IGpzRnJvbVV0ZjgoaW5wdXQpO1xuZXhwb3J0IGNvbnN0IHRvVXRmOCA9IChpbnB1dCkgPT4gdHlwZW9mIFRleHREZWNvZGVyID09PSBcImZ1bmN0aW9uXCIgPyB0ZXh0RW5jb2RlclRvVXRmOChpbnB1dCkgOiBqc1RvVXRmOChpbnB1dCk7XG4iLCJleHBvcnQgZnVuY3Rpb24gZnJvbVV0ZjgoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGlucHV0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1V0ZjgoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIikuZGVjb2RlKGlucHV0KTtcbn1cbiIsImV4cG9ydCBjb25zdCBmcm9tVXRmOCA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IGJ5dGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGlucHV0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5wdXQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKHZhbHVlIDwgMHg4MCkge1xuICAgICAgICAgICAgYnl0ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPCAweDgwMCkge1xuICAgICAgICAgICAgYnl0ZXMucHVzaCgodmFsdWUgPj4gNikgfCAwYjExMDAwMDAwLCAodmFsdWUgJiAwYjExMTExMSkgfCAwYjEwMDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpICsgMSA8IGlucHV0Lmxlbmd0aCAmJiAodmFsdWUgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKGlucHV0LmNoYXJDb2RlQXQoaSArIDEpICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgICAgICBjb25zdCBzdXJyb2dhdGVQYWlyID0gMHgxMDAwMCArICgodmFsdWUgJiAwYjExMTExMTExMTEpIDw8IDEwKSArIChpbnB1dC5jaGFyQ29kZUF0KCsraSkgJiAwYjExMTExMTExMTEpO1xuICAgICAgICAgICAgYnl0ZXMucHVzaCgoc3Vycm9nYXRlUGFpciA+PiAxOCkgfCAwYjExMTEwMDAwLCAoKHN1cnJvZ2F0ZVBhaXIgPj4gMTIpICYgMGIxMTExMTEpIHwgMGIxMDAwMDAwMCwgKChzdXJyb2dhdGVQYWlyID4+IDYpICYgMGIxMTExMTEpIHwgMGIxMDAwMDAwMCwgKHN1cnJvZ2F0ZVBhaXIgJiAwYjExMTExMSkgfCAwYjEwMDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVzLnB1c2goKHZhbHVlID4+IDEyKSB8IDBiMTExMDAwMDAsICgodmFsdWUgPj4gNikgJiAwYjExMTExMSkgfCAwYjEwMDAwMDAwLCAodmFsdWUgJiAwYjExMTExMSkgfCAwYjEwMDAwMDAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3QgdG9VdGY4ID0gKGlucHV0KSA9PiB7XG4gICAgbGV0IGRlY29kZWQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbnB1dC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBieXRlID0gaW5wdXRbaV07XG4gICAgICAgIGlmIChieXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgZGVjb2RlZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKDBiMTEwMDAwMDAgPD0gYnl0ZSAmJiBieXRlIDwgMGIxMTEwMDAwMCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dEJ5dGUgPSBpbnB1dFsrK2ldO1xuICAgICAgICAgICAgZGVjb2RlZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYnl0ZSAmIDBiMTExMTEpIDw8IDYpIHwgKG5leHRCeXRlICYgMGIxMTExMTEpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgwYjExMTEwMDAwIDw9IGJ5dGUgJiYgYnl0ZSA8IDBiMTAxMTAxMTAxKSB7XG4gICAgICAgICAgICBjb25zdCBzdXJyb2dhdGVQYWlyID0gW2J5dGUsIGlucHV0WysraV0sIGlucHV0WysraV0sIGlucHV0WysraV1dO1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZCA9IFwiJVwiICsgc3Vycm9nYXRlUGFpci5tYXAoKGJ5dGVWYWx1ZSkgPT4gYnl0ZVZhbHVlLnRvU3RyaW5nKDE2KSkuam9pbihcIiVcIik7XG4gICAgICAgICAgICBkZWNvZGVkICs9IGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlY29kZWQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGJ5dGUgJiAwYjExMTEpIDw8IDEyKSB8ICgoaW5wdXRbKytpXSAmIDBiMTExMTExKSA8PCA2KSB8IChpbnB1dFsrK2ldICYgMGIxMTExMTEpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlZDtcbn07XG4iLCJpbXBvcnQgeyBib29sZWFuU2VsZWN0b3IsIFNlbGVjdG9yVHlwZSB9IGZyb20gXCJAc21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyXCI7XG5leHBvcnQgY29uc3QgRU5WX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlQgPSBcIkFXU19VU0VfRFVBTFNUQUNLX0VORFBPSU5UXCI7XG5leHBvcnQgY29uc3QgQ09ORklHX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlQgPSBcInVzZV9kdWFsc3RhY2tfZW5kcG9pbnRcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlQgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMgPSB7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiBib29sZWFuU2VsZWN0b3IoZW52LCBFTlZfVVNFX0RVQUxTVEFDS19FTkRQT0lOVCwgU2VsZWN0b3JUeXBlLkVOViksXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4gYm9vbGVhblNlbGVjdG9yKHByb2ZpbGUsIENPTkZJR19VU0VfRFVBTFNUQUNLX0VORFBPSU5ULCBTZWxlY3RvclR5cGUuQ09ORklHKSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbn07XG4iLCJpbXBvcnQgeyBib29sZWFuU2VsZWN0b3IsIFNlbGVjdG9yVHlwZSB9IGZyb20gXCJAc21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyXCI7XG5leHBvcnQgY29uc3QgRU5WX1VTRV9GSVBTX0VORFBPSU5UID0gXCJBV1NfVVNFX0ZJUFNfRU5EUE9JTlRcIjtcbmV4cG9ydCBjb25zdCBDT05GSUdfVVNFX0ZJUFNfRU5EUE9JTlQgPSBcInVzZV9maXBzX2VuZHBvaW50XCI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9VU0VfRklQU19FTkRQT0lOVCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMgPSB7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiBib29sZWFuU2VsZWN0b3IoZW52LCBFTlZfVVNFX0ZJUFNfRU5EUE9JTlQsIFNlbGVjdG9yVHlwZS5FTlYpLFxuICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IGJvb2xlYW5TZWxlY3Rvcihwcm9maWxlLCBDT05GSUdfVVNFX0ZJUFNfRU5EUE9JTlQsIFNlbGVjdG9yVHlwZS5DT05GSUcpLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxufTtcbiIsImltcG9ydCB7IG5vcm1hbGl6ZVByb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgcmVzb2x2ZUN1c3RvbUVuZHBvaW50c0NvbmZpZyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgZW5kcG9pbnQsIHVybFBhcnNlciB9ID0gaW5wdXQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5wdXQsXG4gICAgICAgIHRsczogaW5wdXQudGxzID8/IHRydWUsXG4gICAgICAgIGVuZHBvaW50OiBub3JtYWxpemVQcm92aWRlcih0eXBlb2YgZW5kcG9pbnQgPT09IFwic3RyaW5nXCIgPyB1cmxQYXJzZXIoZW5kcG9pbnQpIDogZW5kcG9pbnQpLFxuICAgICAgICBpc0N1c3RvbUVuZHBvaW50OiB0cnVlLFxuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogbm9ybWFsaXplUHJvdmlkZXIoaW5wdXQudXNlRHVhbHN0YWNrRW5kcG9pbnQgPz8gZmFsc2UpLFxuICAgIH07XG59O1xuIiwiZXhwb3J0IGNvbnN0IFJFR0lPTl9FTlZfTkFNRSA9IFwiQVdTX1JFR0lPTlwiO1xuZXhwb3J0IGNvbnN0IFJFR0lPTl9JTklfTkFNRSA9IFwicmVnaW9uXCI7XG5leHBvcnQgY29uc3QgTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMgPSB7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiBlbnZbUkVHSU9OX0VOVl9OQU1FXSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiBwcm9maWxlW1JFR0lPTl9JTklfTkFNRV0sXG4gICAgZGVmYXVsdDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb24gaXMgbWlzc2luZ1wiKTtcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TID0ge1xuICAgIHByZWZlcnJlZEZpbGU6IFwiY3JlZGVudGlhbHNcIixcbn07XG4iLCJleHBvcnQgY29uc3QgaXNGaXBzUmVnaW9uID0gKHJlZ2lvbikgPT4gdHlwZW9mIHJlZ2lvbiA9PT0gXCJzdHJpbmdcIiAmJiAocmVnaW9uLnN0YXJ0c1dpdGgoXCJmaXBzLVwiKSB8fCByZWdpb24uZW5kc1dpdGgoXCItZmlwc1wiKSk7XG4iLCJpbXBvcnQgeyBpc0ZpcHNSZWdpb24gfSBmcm9tIFwiLi9pc0ZpcHNSZWdpb25cIjtcbmV4cG9ydCBjb25zdCBnZXRSZWFsUmVnaW9uID0gKHJlZ2lvbikgPT4gaXNGaXBzUmVnaW9uKHJlZ2lvbilcbiAgICA/IFtcImZpcHMtYXdzLWdsb2JhbFwiLCBcImF3cy1maXBzXCJdLmluY2x1ZGVzKHJlZ2lvbilcbiAgICAgICAgPyBcInVzLWVhc3QtMVwiXG4gICAgICAgIDogcmVnaW9uLnJlcGxhY2UoL2ZpcHMtKGRrci18cHJvZC0pP3wtZmlwcy8sIFwiXCIpXG4gICAgOiByZWdpb247XG4iLCJpbXBvcnQgeyBnZXRSZWFsUmVnaW9uIH0gZnJvbSBcIi4vZ2V0UmVhbFJlZ2lvblwiO1xuaW1wb3J0IHsgaXNGaXBzUmVnaW9uIH0gZnJvbSBcIi4vaXNGaXBzUmVnaW9uXCI7XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJlZ2lvbkNvbmZpZyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgcmVnaW9uLCB1c2VGaXBzRW5kcG9pbnQgfSA9IGlucHV0O1xuICAgIGlmICghcmVnaW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZ2lvbiBpcyBtaXNzaW5nXCIpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pbnB1dCxcbiAgICAgICAgcmVnaW9uOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlZ2lvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRSZWFsUmVnaW9uKHJlZ2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlZFJlZ2lvbiA9IGF3YWl0IHJlZ2lvbigpO1xuICAgICAgICAgICAgcmV0dXJuIGdldFJlYWxSZWdpb24ocHJvdmlkZWRSZWdpb24pO1xuICAgICAgICB9LFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVkUmVnaW9uID0gdHlwZW9mIHJlZ2lvbiA9PT0gXCJzdHJpbmdcIiA/IHJlZ2lvbiA6IGF3YWl0IHJlZ2lvbigpO1xuICAgICAgICAgICAgaWYgKGlzRmlwc1JlZ2lvbihwcm92aWRlZFJlZ2lvbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdXNlRmlwc0VuZHBvaW50ICE9PSBcImZ1bmN0aW9uXCIgPyBQcm9taXNlLnJlc29sdmUoISF1c2VGaXBzRW5kcG9pbnQpIDogdXNlRmlwc0VuZHBvaW50KCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBTTUlUSFlfQ09OVEVYVF9LRVksIH0gZnJvbSBcIkBzbWl0aHkvdHlwZXNcIjtcbmltcG9ydCB7IGdldFNtaXRoeUNvbnRleHQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmZ1bmN0aW9uIGNvbnZlcnRIdHRwQXV0aFNjaGVtZXNUb01hcChodHRwQXV0aFNjaGVtZXMpIHtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBzY2hlbWUgb2YgaHR0cEF1dGhTY2hlbWVzKSB7XG4gICAgICAgIG1hcC5zZXQoc2NoZW1lLnNjaGVtZUlkLCBzY2hlbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufVxuZXhwb3J0IGNvbnN0IGh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZSA9IChjb25maWcsIG13T3B0aW9ucykgPT4gKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyKGF3YWl0IG13T3B0aW9ucy5odHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcihjb25maWcsIGNvbnRleHQsIGFyZ3MuaW5wdXQpKTtcbiAgICBjb25zdCBhdXRoU2NoZW1lcyA9IGNvbnZlcnRIdHRwQXV0aFNjaGVtZXNUb01hcChjb25maWcuaHR0cEF1dGhTY2hlbWVzKTtcbiAgICBjb25zdCBzbWl0aHlDb250ZXh0ID0gZ2V0U21pdGh5Q29udGV4dChjb250ZXh0KTtcbiAgICBjb25zdCBmYWlsdXJlUmVhc29ucyA9IFtdO1xuICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgc2NoZW1lID0gYXV0aFNjaGVtZXMuZ2V0KG9wdGlvbi5zY2hlbWVJZCk7XG4gICAgICAgIGlmICghc2NoZW1lKSB7XG4gICAgICAgICAgICBmYWlsdXJlUmVhc29ucy5wdXNoKGBIdHRwQXV0aFNjaGVtZSBcXGAke29wdGlvbi5zY2hlbWVJZH1cXGAgd2FzIG5vdCBlbmFibGVkIGZvciB0aGlzIHNlcnZpY2UuYCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZGVudGl0eVByb3ZpZGVyID0gc2NoZW1lLmlkZW50aXR5UHJvdmlkZXIoYXdhaXQgbXdPcHRpb25zLmlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcihjb25maWcpKTtcbiAgICAgICAgaWYgKCFpZGVudGl0eVByb3ZpZGVyKSB7XG4gICAgICAgICAgICBmYWlsdXJlUmVhc29ucy5wdXNoKGBIdHRwQXV0aFNjaGVtZSBcXGAke29wdGlvbi5zY2hlbWVJZH1cXGAgZGlkIG5vdCBoYXZlIGFuIElkZW50aXR5UHJvdmlkZXIgY29uZmlndXJlZC5gKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgaWRlbnRpdHlQcm9wZXJ0aWVzID0ge30sIHNpZ25pbmdQcm9wZXJ0aWVzID0ge30gfSA9IG9wdGlvbi5wcm9wZXJ0aWVzRXh0cmFjdG9yPy4oY29uZmlnLCBjb250ZXh0KSB8fCB7fTtcbiAgICAgICAgb3B0aW9uLmlkZW50aXR5UHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24ob3B0aW9uLmlkZW50aXR5UHJvcGVydGllcyB8fCB7fSwgaWRlbnRpdHlQcm9wZXJ0aWVzKTtcbiAgICAgICAgb3B0aW9uLnNpZ25pbmdQcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbihvcHRpb24uc2lnbmluZ1Byb3BlcnRpZXMgfHwge30sIHNpZ25pbmdQcm9wZXJ0aWVzKTtcbiAgICAgICAgc21pdGh5Q29udGV4dC5zZWxlY3RlZEh0dHBBdXRoU2NoZW1lID0ge1xuICAgICAgICAgICAgaHR0cEF1dGhPcHRpb246IG9wdGlvbixcbiAgICAgICAgICAgIGlkZW50aXR5OiBhd2FpdCBpZGVudGl0eVByb3ZpZGVyKG9wdGlvbi5pZGVudGl0eVByb3BlcnRpZXMpLFxuICAgICAgICAgICAgc2lnbmVyOiBzY2hlbWUuc2lnbmVyLFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKCFzbWl0aHlDb250ZXh0LnNlbGVjdGVkSHR0cEF1dGhTY2hlbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZhaWx1cmVSZWFzb25zLmpvaW4oXCJcXG5cIikpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dChhcmdzKTtcbn07XG4iLCJpbXBvcnQgeyBlbmRwb2ludE1pZGRsZXdhcmVPcHRpb25zIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlIH0gZnJvbSBcIi4vaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgaHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBzdGVwOiBcInNlcmlhbGl6ZVwiLFxuICAgIHRhZ3M6IFtcIkhUVFBfQVVUSF9TQ0hFTUVcIl0sXG4gICAgbmFtZTogXCJodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVcIixcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICByZWxhdGlvbjogXCJiZWZvcmVcIixcbiAgICB0b01pZGRsZXdhcmU6IGVuZHBvaW50TWlkZGxld2FyZU9wdGlvbnMubmFtZSxcbn07XG5leHBvcnQgY29uc3QgZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4gPSAoY29uZmlnLCB7IGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLCBpZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIsIH0pID0+ICh7XG4gICAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICAgICAgY2xpZW50U3RhY2suYWRkUmVsYXRpdmVUbyhodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmUoY29uZmlnLCB7XG4gICAgICAgICAgICBodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcixcbiAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcixcbiAgICAgICAgfSksIGh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0TWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1zZXJkZVwiO1xuaW1wb3J0IHsgaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlIH0gZnJvbSBcIi4vaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBzdGVwOiBcInNlcmlhbGl6ZVwiLFxuICAgIHRhZ3M6IFtcIkhUVFBfQVVUSF9TQ0hFTUVcIl0sXG4gICAgbmFtZTogXCJodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVcIixcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICByZWxhdGlvbjogXCJiZWZvcmVcIixcbiAgICB0b01pZGRsZXdhcmU6IHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uLm5hbWUsXG59O1xuZXhwb3J0IGNvbnN0IGdldEh0dHBBdXRoU2NoZW1lUGx1Z2luID0gKGNvbmZpZywgeyBodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciwgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyLCB9KSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8oaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlKGNvbmZpZywge1xuICAgICAgICAgICAgaHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsXG4gICAgICAgICAgICBpZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIsXG4gICAgICAgIH0pLCBodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVPcHRpb25zKTtcbiAgICB9LFxufSk7XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IFNNSVRIWV9DT05URVhUX0tFWSwgfSBmcm9tIFwiQHNtaXRoeS90eXBlc1wiO1xuaW1wb3J0IHsgZ2V0U21pdGh5Q29udGV4dCB9IGZyb20gXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiO1xuY29uc3QgZGVmYXVsdEVycm9ySGFuZGxlciA9IChzaWduaW5nUHJvcGVydGllcykgPT4gKGVycm9yKSA9PiB7XG4gICAgdGhyb3cgZXJyb3I7XG59O1xuY29uc3QgZGVmYXVsdFN1Y2Nlc3NIYW5kbGVyID0gKGh0dHBSZXNwb25zZSwgc2lnbmluZ1Byb3BlcnRpZXMpID0+IHsgfTtcbmV4cG9ydCBjb25zdCBodHRwU2lnbmluZ01pZGRsZXdhcmUgPSAoY29uZmlnKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UoYXJncy5yZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgICB9XG4gICAgY29uc3Qgc21pdGh5Q29udGV4dCA9IGdldFNtaXRoeUNvbnRleHQoY29udGV4dCk7XG4gICAgY29uc3Qgc2NoZW1lID0gc21pdGh5Q29udGV4dC5zZWxlY3RlZEh0dHBBdXRoU2NoZW1lO1xuICAgIGlmICghc2NoZW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gSHR0cEF1dGhTY2hlbWUgd2FzIHNlbGVjdGVkOiB1bmFibGUgdG8gc2lnbiByZXF1ZXN0YCk7XG4gICAgfVxuICAgIGNvbnN0IHsgaHR0cEF1dGhPcHRpb246IHsgc2lnbmluZ1Byb3BlcnRpZXMgPSB7fSB9LCBpZGVudGl0eSwgc2lnbmVyLCB9ID0gc2NoZW1lO1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IG5leHQoe1xuICAgICAgICAuLi5hcmdzLFxuICAgICAgICByZXF1ZXN0OiBhd2FpdCBzaWduZXIuc2lnbihhcmdzLnJlcXVlc3QsIGlkZW50aXR5LCBzaWduaW5nUHJvcGVydGllcyksXG4gICAgfSkuY2F0Y2goKHNpZ25lci5lcnJvckhhbmRsZXIgfHwgZGVmYXVsdEVycm9ySGFuZGxlcikoc2lnbmluZ1Byb3BlcnRpZXMpKTtcbiAgICAoc2lnbmVyLnN1Y2Nlc3NIYW5kbGVyIHx8IGRlZmF1bHRTdWNjZXNzSGFuZGxlcikob3V0cHV0LnJlc3BvbnNlLCBzaWduaW5nUHJvcGVydGllcyk7XG4gICAgcmV0dXJuIG91dHB1dDtcbn07XG4iLCJpbXBvcnQgeyByZXRyeU1pZGRsZXdhcmVPcHRpb25zIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgaHR0cFNpZ25pbmdNaWRkbGV3YXJlIH0gZnJvbSBcIi4vaHR0cFNpZ25pbmdNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgaHR0cFNpZ25pbmdNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBzdGVwOiBcImZpbmFsaXplUmVxdWVzdFwiLFxuICAgIHRhZ3M6IFtcIkhUVFBfU0lHTklOR1wiXSxcbiAgICBuYW1lOiBcImh0dHBTaWduaW5nTWlkZGxld2FyZVwiLFxuICAgIGFsaWFzZXM6IFtcImFwaUtleU1pZGRsZXdhcmVcIiwgXCJ0b2tlbk1pZGRsZXdhcmVcIiwgXCJhd3NBdXRoTWlkZGxld2FyZVwiXSxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICByZWxhdGlvbjogXCJhZnRlclwiLFxuICAgIHRvTWlkZGxld2FyZTogcmV0cnlNaWRkbGV3YXJlT3B0aW9ucy5uYW1lLFxufTtcbmV4cG9ydCBjb25zdCBnZXRIdHRwU2lnbmluZ1BsdWdpbiA9IChjb25maWcpID0+ICh7XG4gICAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICAgICAgY2xpZW50U3RhY2suYWRkUmVsYXRpdmVUbyhodHRwU2lnbmluZ01pZGRsZXdhcmUoY29uZmlnKSwgaHR0cFNpZ25pbmdNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIiwiZXhwb3J0IGNsYXNzIERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5hdXRoU2NoZW1lcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29uZmlnKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGhTY2hlbWVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRJZGVudGl0eVByb3ZpZGVyKHNjaGVtZUlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF1dGhTY2hlbWVzLmdldChzY2hlbWVJZCk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIE5vQXV0aFNpZ25lciB7XG4gICAgYXN5bmMgc2lnbihodHRwUmVxdWVzdCwgaWRlbnRpdHksIHNpZ25pbmdQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHJldHVybiBodHRwUmVxdWVzdDtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgY3JlYXRlSXNJZGVudGl0eUV4cGlyZWRGdW5jdGlvbiA9IChleHBpcmF0aW9uTXMpID0+IChpZGVudGl0eSkgPT4gZG9lc0lkZW50aXR5UmVxdWlyZVJlZnJlc2goaWRlbnRpdHkpICYmIGlkZW50aXR5LmV4cGlyYXRpb24uZ2V0VGltZSgpIC0gRGF0ZS5ub3coKSA8IGV4cGlyYXRpb25NcztcbmV4cG9ydCBjb25zdCBFWFBJUkFUSU9OX01TID0gMzAwMDAwO1xuZXhwb3J0IGNvbnN0IGlzSWRlbnRpdHlFeHBpcmVkID0gY3JlYXRlSXNJZGVudGl0eUV4cGlyZWRGdW5jdGlvbihFWFBJUkFUSU9OX01TKTtcbmV4cG9ydCBjb25zdCBkb2VzSWRlbnRpdHlSZXF1aXJlUmVmcmVzaCA9IChpZGVudGl0eSkgPT4gaWRlbnRpdHkuZXhwaXJhdGlvbiAhPT0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IG1lbW9pemVJZGVudGl0eVByb3ZpZGVyID0gKHByb3ZpZGVyLCBpc0V4cGlyZWQsIHJlcXVpcmVzUmVmcmVzaCkgPT4ge1xuICAgIGlmIChwcm92aWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRQcm92aWRlciA9IHR5cGVvZiBwcm92aWRlciAhPT0gXCJmdW5jdGlvblwiID8gYXN5bmMgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHByb3ZpZGVyKSA6IHByb3ZpZGVyO1xuICAgIGxldCByZXNvbHZlZDtcbiAgICBsZXQgcGVuZGluZztcbiAgICBsZXQgaGFzUmVzdWx0O1xuICAgIGxldCBpc0NvbnN0YW50ID0gZmFsc2U7XG4gICAgY29uc3QgY29hbGVzY2VQcm92aWRlciA9IGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgICAgIGlmICghcGVuZGluZykge1xuICAgICAgICAgICAgcGVuZGluZyA9IG5vcm1hbGl6ZWRQcm92aWRlcihvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSBhd2FpdCBwZW5kaW5nO1xuICAgICAgICAgICAgaGFzUmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlzQ29uc3RhbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH07XG4gICAgaWYgKGlzRXhwaXJlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgaWYgKCFoYXNSZXN1bHQgfHwgb3B0aW9ucz8uZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSBhd2FpdCBjb2FsZXNjZVByb3ZpZGVyKG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFoYXNSZXN1bHQgfHwgb3B0aW9ucz8uZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ29uc3RhbnQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcXVpcmVzUmVmcmVzaChyZXNvbHZlZCkpIHtcbiAgICAgICAgICAgIGlzQ29uc3RhbnQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0V4cGlyZWQocmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICBhd2FpdCBjb2FsZXNjZVByb3ZpZGVyKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9O1xufTtcbiIsImV4cG9ydCBjb25zdCBub3JtYWxpemVQcm92aWRlciA9IChpbnB1dCkgPT4ge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIGNvbnN0IHByb21pc2lmaWVkID0gUHJvbWlzZS5yZXNvbHZlKGlucHV0KTtcbiAgICByZXR1cm4gKCkgPT4gcHJvbWlzaWZpZWQ7XG59O1xuIiwiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyByZXNvbHZlZFBhdGggfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdEJ1aWxkZXIoaW5wdXQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3RCdWlsZGVyKGlucHV0LCBjb250ZXh0KTtcbn1cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0QnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0ge307XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJcIjtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0ge307XG4gICAgICAgIHRoaXMucGF0aCA9IFwiXCI7XG4gICAgICAgIHRoaXMuYm9keSA9IG51bGw7XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLnJlc29sdmVQYXRoU3RhY2sgPSBbXTtcbiAgICB9XG4gICAgYXN5bmMgYnVpbGQoKSB7XG4gICAgICAgIGNvbnN0IHsgaG9zdG5hbWUsIHByb3RvY29sID0gXCJodHRwc1wiLCBwb3J0LCBwYXRoOiBiYXNlUGF0aCB9ID0gYXdhaXQgdGhpcy5jb250ZXh0LmVuZHBvaW50KCk7XG4gICAgICAgIHRoaXMucGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICBmb3IgKGNvbnN0IHJlc29sdmVQYXRoIG9mIHRoaXMucmVzb2x2ZVBhdGhTdGFjaykge1xuICAgICAgICAgICAgcmVzb2x2ZVBhdGgodGhpcy5wYXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEh0dHBSZXF1ZXN0KHtcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdG5hbWUgfHwgaG9zdG5hbWUsXG4gICAgICAgICAgICBwb3J0LFxuICAgICAgICAgICAgbWV0aG9kOiB0aGlzLm1ldGhvZCxcbiAgICAgICAgICAgIHBhdGg6IHRoaXMucGF0aCxcbiAgICAgICAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJ5LFxuICAgICAgICAgICAgYm9keTogdGhpcy5ib2R5LFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaG4oaG9zdG5hbWUpIHtcbiAgICAgICAgdGhpcy5ob3N0bmFtZSA9IGhvc3RuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYnAodXJpTGFiZWwpIHtcbiAgICAgICAgdGhpcy5yZXNvbHZlUGF0aFN0YWNrLnB1c2goKGJhc2VQYXRoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhdGggPSBgJHtiYXNlUGF0aD8uZW5kc1dpdGgoXCIvXCIpID8gYmFzZVBhdGguc2xpY2UoMCwgLTEpIDogYmFzZVBhdGggfHwgXCJcIn1gICsgdXJpTGFiZWw7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcChtZW1iZXJOYW1lLCBsYWJlbFZhbHVlUHJvdmlkZXIsIHVyaUxhYmVsLCBpc0dyZWVkeUxhYmVsKSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZVBhdGhTdGFjay5wdXNoKChwYXRoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhdGggPSByZXNvbHZlZFBhdGgocGF0aCwgdGhpcy5pbnB1dCwgbWVtYmVyTmFtZSwgbGFiZWxWYWx1ZVByb3ZpZGVyLCB1cmlMYWJlbCwgaXNHcmVlZHlMYWJlbCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaChoZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBxKHF1ZXJ5KSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGIoYm9keSkge1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbShtZXRob2QpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGZyb21BcnJheUJ1ZmZlciwgZnJvbVN0cmluZyB9IGZyb20gXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIjtcbmltcG9ydCB7IHRvVWludDhBcnJheSB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXRmOFwiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlclwiO1xuaW1wb3J0IHsgY3JlYXRlSGFzaCwgY3JlYXRlSG1hYyB9IGZyb20gXCJjcnlwdG9cIjtcbmV4cG9ydCBjbGFzcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihhbGdvcml0aG1JZGVudGlmaWVyLCBzZWNyZXQpIHtcbiAgICAgICAgdGhpcy5hbGdvcml0aG1JZGVudGlmaWVyID0gYWxnb3JpdGhtSWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy5zZWNyZXQgPSBzZWNyZXQ7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gICAgdXBkYXRlKHRvSGFzaCwgZW5jb2RpbmcpIHtcbiAgICAgICAgdGhpcy5oYXNoLnVwZGF0ZSh0b1VpbnQ4QXJyYXkoY2FzdFNvdXJjZURhdGEodG9IYXNoLCBlbmNvZGluZykpKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuaGFzaC5kaWdlc3QoKSk7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmhhc2ggPSB0aGlzLnNlY3JldFxuICAgICAgICAgICAgPyBjcmVhdGVIbWFjKHRoaXMuYWxnb3JpdGhtSWRlbnRpZmllciwgY2FzdFNvdXJjZURhdGEodGhpcy5zZWNyZXQpKVxuICAgICAgICAgICAgOiBjcmVhdGVIYXNoKHRoaXMuYWxnb3JpdGhtSWRlbnRpZmllcik7XG4gICAgfVxufVxuZnVuY3Rpb24gY2FzdFNvdXJjZURhdGEodG9DYXN0LCBlbmNvZGluZykge1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodG9DYXN0KSkge1xuICAgICAgICByZXR1cm4gdG9DYXN0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRvQ2FzdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZnJvbVN0cmluZyh0b0Nhc3QsIGVuY29kaW5nKTtcbiAgICB9XG4gICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh0b0Nhc3QpKSB7XG4gICAgICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodG9DYXN0LmJ1ZmZlciwgdG9DYXN0LmJ5dGVPZmZzZXQsIHRvQ2FzdC5ieXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0b0Nhc3QpO1xufVxuIiwiZXhwb3J0IGNvbnN0IGlzQXJyYXlCdWZmZXIgPSAoYXJnKSA9PiAodHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgYXJnIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8XG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIjtcbiIsImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuY29uc3QgQ09OVEVOVF9MRU5HVEhfSEVBREVSID0gXCJjb250ZW50LWxlbmd0aFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlKGJvZHlMZW5ndGhDaGVja2VyKSB7XG4gICAgcmV0dXJuIChuZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXJncy5yZXF1ZXN0O1xuICAgICAgICBpZiAoSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkge1xuICAgICAgICAgICAgY29uc3QgeyBib2R5LCBoZWFkZXJzIH0gPSByZXF1ZXN0O1xuICAgICAgICAgICAgaWYgKGJvZHkgJiZcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXJzKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChzdHIpID0+IHN0ci50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICAgICAuaW5kZXhPZihDT05URU5UX0xFTkdUSF9IRUFERVIpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGJvZHlMZW5ndGhDaGVja2VyKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5yZXF1ZXN0LmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBbQ09OVEVOVF9MRU5HVEhfSEVBREVSXTogU3RyaW5nKGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBjb250ZW50TGVuZ3RoTWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gICAgc3RlcDogXCJidWlsZFwiLFxuICAgIHRhZ3M6IFtcIlNFVF9DT05URU5UX0xFTkdUSFwiLCBcIkNPTlRFTlRfTEVOR1RIXCJdLFxuICAgIG5hbWU6IFwiY29udGVudExlbmd0aE1pZGRsZXdhcmVcIixcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5leHBvcnQgY29uc3QgZ2V0Q29udGVudExlbmd0aFBsdWdpbiA9IChvcHRpb25zKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZChjb250ZW50TGVuZ3RoTWlkZGxld2FyZShvcHRpb25zLmJvZHlMZW5ndGhDaGVja2VyKSwgY29udGVudExlbmd0aE1pZGRsZXdhcmVPcHRpb25zKTtcbiAgICB9LFxufSk7XG4iLCJleHBvcnQgY29uc3QgcmVzb2x2ZVBhcmFtc0ZvclMzID0gYXN5bmMgKGVuZHBvaW50UGFyYW1zKSA9PiB7XG4gICAgY29uc3QgYnVja2V0ID0gZW5kcG9pbnRQYXJhbXM/LkJ1Y2tldCB8fCBcIlwiO1xuICAgIGlmICh0eXBlb2YgZW5kcG9pbnRQYXJhbXMuQnVja2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVuZHBvaW50UGFyYW1zLkJ1Y2tldCA9IGJ1Y2tldC5yZXBsYWNlKC8jL2csIGVuY29kZVVSSUNvbXBvbmVudChcIiNcIikpLnJlcGxhY2UoL1xcPy9nLCBlbmNvZGVVUklDb21wb25lbnQoXCI/XCIpKTtcbiAgICB9XG4gICAgaWYgKGlzQXJuQnVja2V0TmFtZShidWNrZXQpKSB7XG4gICAgICAgIGlmIChlbmRwb2ludFBhcmFtcy5Gb3JjZVBhdGhTdHlsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGF0aC1zdHlsZSBhZGRyZXNzaW5nIGNhbm5vdCBiZSB1c2VkIHdpdGggQVJOIGJ1Y2tldHNcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoIWlzRG5zQ29tcGF0aWJsZUJ1Y2tldE5hbWUoYnVja2V0KSB8fFxuICAgICAgICAoYnVja2V0LmluZGV4T2YoXCIuXCIpICE9PSAtMSAmJiAhU3RyaW5nKGVuZHBvaW50UGFyYW1zLkVuZHBvaW50KS5zdGFydHNXaXRoKFwiaHR0cDpcIikpIHx8XG4gICAgICAgIGJ1Y2tldC50b0xvd2VyQ2FzZSgpICE9PSBidWNrZXQgfHxcbiAgICAgICAgYnVja2V0Lmxlbmd0aCA8IDMpIHtcbiAgICAgICAgZW5kcG9pbnRQYXJhbXMuRm9yY2VQYXRoU3R5bGUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZW5kcG9pbnRQYXJhbXMuRGlzYWJsZU11bHRpUmVnaW9uQWNjZXNzUG9pbnRzKSB7XG4gICAgICAgIGVuZHBvaW50UGFyYW1zLmRpc2FibGVNdWx0aVJlZ2lvbkFjY2Vzc1BvaW50cyA9IHRydWU7XG4gICAgICAgIGVuZHBvaW50UGFyYW1zLkRpc2FibGVNUkFQID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZHBvaW50UGFyYW1zO1xufTtcbmNvbnN0IERPTUFJTl9QQVRURVJOID0gL15bYS16MC05XVthLXowLTlcXC5cXC1dezEsNjF9W2EtejAtOV0kLztcbmNvbnN0IElQX0FERFJFU1NfUEFUVEVSTiA9IC8oXFxkK1xcLil7M31cXGQrLztcbmNvbnN0IERPVFNfUEFUVEVSTiA9IC9cXC5cXC4vO1xuZXhwb3J0IGNvbnN0IERPVF9QQVRURVJOID0gL1xcLi87XG5leHBvcnQgY29uc3QgUzNfSE9TVE5BTUVfUEFUVEVSTiA9IC9eKC4rXFwuKT9zMygtZmlwcyk/KFxcLmR1YWxzdGFjayk/Wy4tXShbYS16MC05LV0rKVxcLi87XG5leHBvcnQgY29uc3QgaXNEbnNDb21wYXRpYmxlQnVja2V0TmFtZSA9IChidWNrZXROYW1lKSA9PiBET01BSU5fUEFUVEVSTi50ZXN0KGJ1Y2tldE5hbWUpICYmICFJUF9BRERSRVNTX1BBVFRFUk4udGVzdChidWNrZXROYW1lKSAmJiAhRE9UU19QQVRURVJOLnRlc3QoYnVja2V0TmFtZSk7XG5leHBvcnQgY29uc3QgaXNBcm5CdWNrZXROYW1lID0gKGJ1Y2tldE5hbWUpID0+IHtcbiAgICBjb25zdCBbYXJuLCBwYXJ0aXRpb24sIHNlcnZpY2UsIHJlZ2lvbiwgYWNjb3VudCwgdHlwZU9ySWRdID0gYnVja2V0TmFtZS5zcGxpdChcIjpcIik7XG4gICAgY29uc3QgaXNBcm4gPSBhcm4gPT09IFwiYXJuXCIgJiYgYnVja2V0TmFtZS5zcGxpdChcIjpcIikubGVuZ3RoID49IDY7XG4gICAgY29uc3QgaXNWYWxpZEFybiA9IFthcm4sIHBhcnRpdGlvbiwgc2VydmljZSwgYWNjb3VudCwgdHlwZU9ySWRdLmZpbHRlcihCb29sZWFuKS5sZW5ndGggPT09IDU7XG4gICAgaWYgKGlzQXJuICYmICFpc1ZhbGlkQXJuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBBUk46ICR7YnVja2V0TmFtZX0gd2FzIGFuIGludmFsaWQgQVJOLmApO1xuICAgIH1cbiAgICByZXR1cm4gYXJuID09PSBcImFyblwiICYmICEhcGFydGl0aW9uICYmICEhc2VydmljZSAmJiAhIWFjY291bnQgJiYgISF0eXBlT3JJZDtcbn07XG4iLCJleHBvcnQgY29uc3QgY3JlYXRlQ29uZmlnVmFsdWVQcm92aWRlciA9IChjb25maWdLZXksIGNhbm9uaWNhbEVuZHBvaW50UGFyYW1LZXksIGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNvbmZpZ1Byb3ZpZGVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb25maWdWYWx1ZSA9IGNvbmZpZ1tjb25maWdLZXldID8/IGNvbmZpZ1tjYW5vbmljYWxFbmRwb2ludFBhcmFtS2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWdWYWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnVmFsdWUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnVmFsdWU7XG4gICAgfTtcbiAgICBpZiAoY29uZmlnS2V5ID09PSBcImNyZWRlbnRpYWxTY29wZVwiIHx8IGNhbm9uaWNhbEVuZHBvaW50UGFyYW1LZXkgPT09IFwiQ3JlZGVudGlhbFNjb3BlXCIpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gdHlwZW9mIGNvbmZpZy5jcmVkZW50aWFscyA9PT0gXCJmdW5jdGlvblwiID8gYXdhaXQgY29uZmlnLmNyZWRlbnRpYWxzKCkgOiBjb25maWcuY3JlZGVudGlhbHM7XG4gICAgICAgICAgICBjb25zdCBjb25maWdWYWx1ZSA9IGNyZWRlbnRpYWxzPy5jcmVkZW50aWFsU2NvcGUgPz8gY3JlZGVudGlhbHM/LkNyZWRlbnRpYWxTY29wZTtcbiAgICAgICAgICAgIHJldHVybiBjb25maWdWYWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZ0tleSA9PT0gXCJlbmRwb2ludFwiIHx8IGNhbm9uaWNhbEVuZHBvaW50UGFyYW1LZXkgPT09IFwiZW5kcG9pbnRcIikge1xuICAgICAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBhd2FpdCBjb25maWdQcm92aWRlcigpO1xuICAgICAgICAgICAgaWYgKGVuZHBvaW50ICYmIHR5cGVvZiBlbmRwb2ludCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGlmIChcInVybFwiIGluIGVuZHBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmRwb2ludC51cmwuaHJlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFwiaG9zdG5hbWVcIiBpbiBlbmRwb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgcGF0aCB9ID0gZW5kcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdG5hbWV9JHtwb3J0ID8gXCI6XCIgKyBwb3J0IDogXCJcIn0ke3BhdGh9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW5kcG9pbnQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjb25maWdQcm92aWRlcjtcbn07XG4iLCJpbXBvcnQgeyBDT05GSUdfUFJFRklYX1NFUEFSQVRPUiB9IGZyb20gXCJAc21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXJcIjtcbmNvbnN0IEVOVl9FTkRQT0lOVF9VUkwgPSBcIkFXU19FTkRQT0lOVF9VUkxcIjtcbmNvbnN0IENPTkZJR19FTkRQT0lOVF9VUkwgPSBcImVuZHBvaW50X3VybFwiO1xuZXhwb3J0IGNvbnN0IGdldEVuZHBvaW50VXJsQ29uZmlnID0gKHNlcnZpY2VJZCkgPT4gKHtcbiAgICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IHtcbiAgICAgICAgY29uc3Qgc2VydmljZVN1ZmZpeFBhcnRzID0gc2VydmljZUlkLnNwbGl0KFwiIFwiKS5tYXAoKHcpID0+IHcudG9VcHBlckNhc2UoKSk7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VFbmRwb2ludFVybCA9IGVudltbRU5WX0VORFBPSU5UX1VSTCwgLi4uc2VydmljZVN1ZmZpeFBhcnRzXS5qb2luKFwiX1wiKV07XG4gICAgICAgIGlmIChzZXJ2aWNlRW5kcG9pbnRVcmwpXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZUVuZHBvaW50VXJsO1xuICAgICAgICBjb25zdCBlbmRwb2ludFVybCA9IGVudltFTlZfRU5EUE9JTlRfVVJMXTtcbiAgICAgICAgaWYgKGVuZHBvaW50VXJsKVxuICAgICAgICAgICAgcmV0dXJuIGVuZHBvaW50VXJsO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSwgY29uZmlnKSA9PiB7XG4gICAgICAgIGlmIChjb25maWcgJiYgcHJvZmlsZS5zZXJ2aWNlcykge1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZXNTZWN0aW9uID0gY29uZmlnW1tcInNlcnZpY2VzXCIsIHByb2ZpbGUuc2VydmljZXNdLmpvaW4oQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpXTtcbiAgICAgICAgICAgIGlmIChzZXJ2aWNlc1NlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJ2aWNlUHJlZml4UGFydHMgPSBzZXJ2aWNlSWQuc3BsaXQoXCIgXCIpLm1hcCgodykgPT4gdy50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmRwb2ludFVybCA9IHNlcnZpY2VzU2VjdGlvbltbc2VydmljZVByZWZpeFBhcnRzLmpvaW4oXCJfXCIpLCBDT05GSUdfRU5EUE9JTlRfVVJMXS5qb2luKENPTkZJR19QUkVGSVhfU0VQQVJBVE9SKV07XG4gICAgICAgICAgICAgICAgaWYgKGVuZHBvaW50VXJsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5kcG9pbnRVcmw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW5kcG9pbnRVcmwgPSBwcm9maWxlW0NPTkZJR19FTkRQT0lOVF9VUkxdO1xuICAgICAgICBpZiAoZW5kcG9pbnRVcmwpXG4gICAgICAgICAgICByZXR1cm4gZW5kcG9pbnRVcmw7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBkZWZhdWx0OiB1bmRlZmluZWQsXG59KTtcbiIsImltcG9ydCB7IHBhcnNlVXJsIH0gZnJvbSBcIkBzbWl0aHkvdXJsLXBhcnNlclwiO1xuZXhwb3J0IGNvbnN0IHRvRW5kcG9pbnRWMSA9IChlbmRwb2ludCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZW5kcG9pbnQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKFwidXJsXCIgaW4gZW5kcG9pbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVVybChlbmRwb2ludC51cmwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmRwb2ludDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlVXJsKGVuZHBvaW50KTtcbn07XG4iLCJpbXBvcnQgeyByZXNvbHZlUGFyYW1zRm9yUzMgfSBmcm9tIFwiLi4vc2VydmljZS1jdXN0b21pemF0aW9uc1wiO1xuaW1wb3J0IHsgY3JlYXRlQ29uZmlnVmFsdWVQcm92aWRlciB9IGZyb20gXCIuL2NyZWF0ZUNvbmZpZ1ZhbHVlUHJvdmlkZXJcIjtcbmltcG9ydCB7IGdldEVuZHBvaW50RnJvbUNvbmZpZyB9IGZyb20gXCIuL2dldEVuZHBvaW50RnJvbUNvbmZpZ1wiO1xuaW1wb3J0IHsgdG9FbmRwb2ludFYxIH0gZnJvbSBcIi4vdG9FbmRwb2ludFYxXCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRGcm9tSW5zdHJ1Y3Rpb25zID0gYXN5bmMgKGNvbW1hbmRJbnB1dCwgaW5zdHJ1Y3Rpb25zU3VwcGxpZXIsIGNsaWVudENvbmZpZywgY29udGV4dCkgPT4ge1xuICAgIGlmICghY2xpZW50Q29uZmlnLmVuZHBvaW50KSB7XG4gICAgICAgIGNvbnN0IGVuZHBvaW50RnJvbUNvbmZpZyA9IGF3YWl0IGdldEVuZHBvaW50RnJvbUNvbmZpZyhjbGllbnRDb25maWcuc2VydmljZUlkIHx8IFwiXCIpO1xuICAgICAgICBpZiAoZW5kcG9pbnRGcm9tQ29uZmlnKSB7XG4gICAgICAgICAgICBjbGllbnRDb25maWcuZW5kcG9pbnQgPSAoKSA9PiBQcm9taXNlLnJlc29sdmUodG9FbmRwb2ludFYxKGVuZHBvaW50RnJvbUNvbmZpZykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGVuZHBvaW50UGFyYW1zID0gYXdhaXQgcmVzb2x2ZVBhcmFtcyhjb21tYW5kSW5wdXQsIGluc3RydWN0aW9uc1N1cHBsaWVyLCBjbGllbnRDb25maWcpO1xuICAgIGlmICh0eXBlb2YgY2xpZW50Q29uZmlnLmVuZHBvaW50UHJvdmlkZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb25maWcuZW5kcG9pbnRQcm92aWRlciBpcyBub3Qgc2V0LlwiKTtcbiAgICB9XG4gICAgY29uc3QgZW5kcG9pbnQgPSBjbGllbnRDb25maWcuZW5kcG9pbnRQcm92aWRlcihlbmRwb2ludFBhcmFtcywgY29udGV4dCk7XG4gICAgcmV0dXJuIGVuZHBvaW50O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlUGFyYW1zID0gYXN5bmMgKGNvbW1hbmRJbnB1dCwgaW5zdHJ1Y3Rpb25zU3VwcGxpZXIsIGNsaWVudENvbmZpZykgPT4ge1xuICAgIGNvbnN0IGVuZHBvaW50UGFyYW1zID0ge307XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb25zID0gaW5zdHJ1Y3Rpb25zU3VwcGxpZXI/LmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zPy4oKSB8fCB7fTtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBpbnN0cnVjdGlvbl0gb2YgT2JqZWN0LmVudHJpZXMoaW5zdHJ1Y3Rpb25zKSkge1xuICAgICAgICBzd2l0Y2ggKGluc3RydWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzdGF0aWNDb250ZXh0UGFyYW1zXCI6XG4gICAgICAgICAgICAgICAgZW5kcG9pbnRQYXJhbXNbbmFtZV0gPSBpbnN0cnVjdGlvbi52YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjb250ZXh0UGFyYW1zXCI6XG4gICAgICAgICAgICAgICAgZW5kcG9pbnRQYXJhbXNbbmFtZV0gPSBjb21tYW5kSW5wdXRbaW5zdHJ1Y3Rpb24ubmFtZV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2xpZW50Q29udGV4dFBhcmFtc1wiOlxuICAgICAgICAgICAgY2FzZSBcImJ1aWx0SW5QYXJhbXNcIjpcbiAgICAgICAgICAgICAgICBlbmRwb2ludFBhcmFtc1tuYW1lXSA9IGF3YWl0IGNyZWF0ZUNvbmZpZ1ZhbHVlUHJvdmlkZXIoaW5zdHJ1Y3Rpb24ubmFtZSwgbmFtZSwgY2xpZW50Q29uZmlnKSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgZW5kcG9pbnQgcGFyYW1ldGVyIGluc3RydWN0aW9uOiBcIiArIEpTT04uc3RyaW5naWZ5KGluc3RydWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKGluc3RydWN0aW9ucykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW5kcG9pbnRQYXJhbXMsIGNsaWVudENvbmZpZyk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcoY2xpZW50Q29uZmlnLnNlcnZpY2VJZCkudG9Mb3dlckNhc2UoKSA9PT0gXCJzM1wiKSB7XG4gICAgICAgIGF3YWl0IHJlc29sdmVQYXJhbXNGb3JTMyhlbmRwb2ludFBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBlbmRwb2ludFBhcmFtcztcbn07XG4iLCJpbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5pbXBvcnQgeyBnZXRFbmRwb2ludEZyb21JbnN0cnVjdGlvbnMgfSBmcm9tIFwiLi9hZGFwdG9ycy9nZXRFbmRwb2ludEZyb21JbnN0cnVjdGlvbnNcIjtcbmV4cG9ydCBjb25zdCBlbmRwb2ludE1pZGRsZXdhcmUgPSAoeyBjb25maWcsIGluc3RydWN0aW9ucywgfSkgPT4ge1xuICAgIHJldHVybiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBhd2FpdCBnZXRFbmRwb2ludEZyb21JbnN0cnVjdGlvbnMoYXJncy5pbnB1dCwge1xuICAgICAgICAgICAgZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RydWN0aW9ucztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIHsgLi4uY29uZmlnIH0sIGNvbnRleHQpO1xuICAgICAgICBjb250ZXh0LmVuZHBvaW50VjIgPSBlbmRwb2ludDtcbiAgICAgICAgY29udGV4dC5hdXRoU2NoZW1lcyA9IGVuZHBvaW50LnByb3BlcnRpZXM/LmF1dGhTY2hlbWVzO1xuICAgICAgICBjb25zdCBhdXRoU2NoZW1lID0gY29udGV4dC5hdXRoU2NoZW1lcz8uWzBdO1xuICAgICAgICBpZiAoYXV0aFNjaGVtZSkge1xuICAgICAgICAgICAgY29udGV4dFtcInNpZ25pbmdfcmVnaW9uXCJdID0gYXV0aFNjaGVtZS5zaWduaW5nUmVnaW9uO1xuICAgICAgICAgICAgY29udGV4dFtcInNpZ25pbmdfc2VydmljZVwiXSA9IGF1dGhTY2hlbWUuc2lnbmluZ05hbWU7XG4gICAgICAgICAgICBjb25zdCBzbWl0aHlDb250ZXh0ID0gZ2V0U21pdGh5Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGh0dHBBdXRoT3B0aW9uID0gc21pdGh5Q29udGV4dD8uc2VsZWN0ZWRIdHRwQXV0aFNjaGVtZT8uaHR0cEF1dGhPcHRpb247XG4gICAgICAgICAgICBpZiAoaHR0cEF1dGhPcHRpb24pIHtcbiAgICAgICAgICAgICAgICBodHRwQXV0aE9wdGlvbi5zaWduaW5nUHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oaHR0cEF1dGhPcHRpb24uc2lnbmluZ1Byb3BlcnRpZXMgfHwge30sIHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmluZ19yZWdpb246IGF1dGhTY2hlbWUuc2lnbmluZ1JlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgc2lnbmluZ1JlZ2lvbjogYXV0aFNjaGVtZS5zaWduaW5nUmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICBzaWduaW5nX3NlcnZpY2U6IGF1dGhTY2hlbWUuc2lnbmluZ05hbWUsXG4gICAgICAgICAgICAgICAgICAgIHNpZ25pbmdOYW1lOiBhdXRoU2NoZW1lLnNpZ25pbmdOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzaWduaW5nUmVnaW9uU2V0OiBhdXRoU2NoZW1lLnNpZ25pbmdSZWdpb25TZXQsXG4gICAgICAgICAgICAgICAgfSwgYXV0aFNjaGVtZS5wcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICB9KTtcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IGxvYWRDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlclwiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnRVcmxDb25maWcgfSBmcm9tIFwiLi9nZXRFbmRwb2ludFVybENvbmZpZ1wiO1xuZXhwb3J0IGNvbnN0IGdldEVuZHBvaW50RnJvbUNvbmZpZyA9IGFzeW5jIChzZXJ2aWNlSWQpID0+IGxvYWRDb25maWcoZ2V0RW5kcG9pbnRVcmxDb25maWcoc2VydmljZUlkKSkoKTtcbiIsImltcG9ydCB7IHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1zZXJkZVwiO1xuaW1wb3J0IHsgZW5kcG9pbnRNaWRkbGV3YXJlIH0gZnJvbSBcIi4vZW5kcG9pbnRNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgZW5kcG9pbnRNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBzdGVwOiBcInNlcmlhbGl6ZVwiLFxuICAgIHRhZ3M6IFtcIkVORFBPSU5UX1BBUkFNRVRFUlNcIiwgXCJFTkRQT0lOVF9WMlwiLCBcIkVORFBPSU5UXCJdLFxuICAgIG5hbWU6IFwiZW5kcG9pbnRWMk1pZGRsZXdhcmVcIixcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICByZWxhdGlvbjogXCJiZWZvcmVcIixcbiAgICB0b01pZGRsZXdhcmU6IHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uLm5hbWUsXG59O1xuZXhwb3J0IGNvbnN0IGdldEVuZHBvaW50UGx1Z2luID0gKGNvbmZpZywgaW5zdHJ1Y3Rpb25zKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8oZW5kcG9pbnRNaWRkbGV3YXJlKHtcbiAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgIGluc3RydWN0aW9ucyxcbiAgICAgICAgfSksIGVuZHBvaW50TWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IG5vcm1hbGl6ZVByb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5pbXBvcnQgeyB0b0VuZHBvaW50VjEgfSBmcm9tIFwiLi9hZGFwdG9ycy90b0VuZHBvaW50VjFcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlRW5kcG9pbnRDb25maWcgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0bHMgPSBpbnB1dC50bHMgPz8gdHJ1ZTtcbiAgICBjb25zdCB7IGVuZHBvaW50IH0gPSBpbnB1dDtcbiAgICBjb25zdCBjdXN0b21FbmRwb2ludFByb3ZpZGVyID0gZW5kcG9pbnQgIT0gbnVsbCA/IGFzeW5jICgpID0+IHRvRW5kcG9pbnRWMShhd2FpdCBub3JtYWxpemVQcm92aWRlcihlbmRwb2ludCkoKSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgaXNDdXN0b21FbmRwb2ludCA9ICEhZW5kcG9pbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5wdXQsXG4gICAgICAgIGVuZHBvaW50OiBjdXN0b21FbmRwb2ludFByb3ZpZGVyLFxuICAgICAgICB0bHMsXG4gICAgICAgIGlzQ3VzdG9tRW5kcG9pbnQsXG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBub3JtYWxpemVQcm92aWRlcihpbnB1dC51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBmYWxzZSksXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogbm9ybWFsaXplUHJvdmlkZXIoaW5wdXQudXNlRmlwc0VuZHBvaW50ID8/IGZhbHNlKSxcbiAgICB9O1xufTtcbiIsImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmNvbnN0IHJuZHM4UG9vbCA9IG5ldyBVaW50OEFycmF5KDI1Nik7IC8vICMgb2YgcmFuZG9tIHZhbHVlcyB0byBwcmUtYWxsb2NhdGVcblxubGV0IHBvb2xQdHIgPSBybmRzOFBvb2wubGVuZ3RoO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAocG9vbFB0ciA+IHJuZHM4UG9vbC5sZW5ndGggLSAxNikge1xuICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhybmRzOFBvb2wpO1xuICAgIHBvb2xQdHIgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJuZHM4UG9vbC5zbGljZShwb29sUHRyLCBwb29sUHRyICs9IDE2KTtcbn0iLCJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICBjb25zdCB1dWlkID0gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiaW1wb3J0IHsgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmltcG9ydCB7IEFkYXB0aXZlUmV0cnlTdHJhdGVneSwgREVGQVVMVF9NQVhfQVRURU1QVFMsIERFRkFVTFRfUkVUUllfTU9ERSwgUkVUUllfTU9ERVMsIFN0YW5kYXJkUmV0cnlTdHJhdGVneSwgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXJldHJ5XCI7XG5leHBvcnQgY29uc3QgRU5WX01BWF9BVFRFTVBUUyA9IFwiQVdTX01BWF9BVFRFTVBUU1wiO1xuZXhwb3J0IGNvbnN0IENPTkZJR19NQVhfQVRURU1QVFMgPSBcIm1heF9hdHRlbXB0c1wiO1xuZXhwb3J0IGNvbnN0IE5PREVfTUFYX0FUVEVNUFRfQ09ORklHX09QVElPTlMgPSB7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZW52W0VOVl9NQVhfQVRURU1QVFNdO1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgbWF4QXR0ZW1wdCA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihtYXhBdHRlbXB0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbnZpcm9ubWVudCB2YXJpYWJsZSAke0VOVl9NQVhfQVRURU1QVFN9IG1hc3QgYmUgYSBudW1iZXIsIGdvdCBcIiR7dmFsdWV9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4QXR0ZW1wdDtcbiAgICB9LFxuICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwcm9maWxlW0NPTkZJR19NQVhfQVRURU1QVFNdO1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgbWF4QXR0ZW1wdCA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihtYXhBdHRlbXB0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTaGFyZWQgY29uZmlnIGZpbGUgZW50cnkgJHtDT05GSUdfTUFYX0FUVEVNUFRTfSBtYXN0IGJlIGEgbnVtYmVyLCBnb3QgXCIke3ZhbHVlfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heEF0dGVtcHQ7XG4gICAgfSxcbiAgICBkZWZhdWx0OiBERUZBVUxUX01BWF9BVFRFTVBUUyxcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJldHJ5Q29uZmlnID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgeyByZXRyeVN0cmF0ZWd5IH0gPSBpbnB1dDtcbiAgICBjb25zdCBtYXhBdHRlbXB0cyA9IG5vcm1hbGl6ZVByb3ZpZGVyKGlucHV0Lm1heEF0dGVtcHRzID8/IERFRkFVTFRfTUFYX0FUVEVNUFRTKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pbnB1dCxcbiAgICAgICAgbWF4QXR0ZW1wdHMsXG4gICAgICAgIHJldHJ5U3RyYXRlZ3k6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXRyeVN0cmF0ZWd5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHJ5U3RyYXRlZ3k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXRyeU1vZGUgPSBhd2FpdCBub3JtYWxpemVQcm92aWRlcihpbnB1dC5yZXRyeU1vZGUpKCk7XG4gICAgICAgICAgICBpZiAocmV0cnlNb2RlID09PSBSRVRSWV9NT0RFUy5BREFQVElWRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWRhcHRpdmVSZXRyeVN0cmF0ZWd5KG1heEF0dGVtcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhbmRhcmRSZXRyeVN0cmF0ZWd5KG1heEF0dGVtcHRzKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBFTlZfUkVUUllfTU9ERSA9IFwiQVdTX1JFVFJZX01PREVcIjtcbmV4cG9ydCBjb25zdCBDT05GSUdfUkVUUllfTU9ERSA9IFwicmV0cnlfbW9kZVwiO1xuZXhwb3J0IGNvbnN0IE5PREVfUkVUUllfTU9ERV9DT05GSUdfT1BUSU9OUyA9IHtcbiAgICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IGVudltFTlZfUkVUUllfTU9ERV0sXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4gcHJvZmlsZVtDT05GSUdfUkVUUllfTU9ERV0sXG4gICAgZGVmYXVsdDogREVGQVVMVF9SRVRSWV9NT0RFLFxufTtcbiIsImltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSBcInN0cmVhbVwiO1xuZXhwb3J0IGNvbnN0IGlzU3RyZWFtaW5nUGF5bG9hZCA9IChyZXF1ZXN0KSA9PiByZXF1ZXN0Py5ib2R5IGluc3RhbmNlb2YgUmVhZGFibGUgfHxcbiAgICAodHlwZW9mIFJlYWRhYmxlU3RyZWFtICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcXVlc3Q/LmJvZHkgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbSk7XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgaXNTZXJ2ZXJFcnJvciwgaXNUaHJvdHRsaW5nRXJyb3IsIGlzVHJhbnNpZW50RXJyb3IgfSBmcm9tIFwiQHNtaXRoeS9zZXJ2aWNlLWVycm9yLWNsYXNzaWZpY2F0aW9uXCI7XG5pbXBvcnQgeyBOb09wTG9nZ2VyIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgSU5WT0NBVElPTl9JRF9IRUFERVIsIFJFUVVFU1RfSEVBREVSIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1yZXRyeVwiO1xuaW1wb3J0IHsgdjQgfSBmcm9tIFwidXVpZFwiO1xuaW1wb3J0IHsgaXNTdHJlYW1pbmdQYXlsb2FkIH0gZnJvbSBcIi4vaXNTdHJlYW1pbmdQYXlsb2FkL2lzU3RyZWFtaW5nUGF5bG9hZFwiO1xuaW1wb3J0IHsgYXNTZGtFcnJvciB9IGZyb20gXCIuL3V0aWxcIjtcbmV4cG9ydCBjb25zdCByZXRyeU1pZGRsZXdhcmUgPSAob3B0aW9ucykgPT4gKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgbGV0IHJldHJ5U3RyYXRlZ3kgPSBhd2FpdCBvcHRpb25zLnJldHJ5U3RyYXRlZ3koKTtcbiAgICBjb25zdCBtYXhBdHRlbXB0cyA9IGF3YWl0IG9wdGlvbnMubWF4QXR0ZW1wdHMoKTtcbiAgICBpZiAoaXNSZXRyeVN0cmF0ZWd5VjIocmV0cnlTdHJhdGVneSkpIHtcbiAgICAgICAgcmV0cnlTdHJhdGVneSA9IHJldHJ5U3RyYXRlZ3k7XG4gICAgICAgIGxldCByZXRyeVRva2VuID0gYXdhaXQgcmV0cnlTdHJhdGVneS5hY3F1aXJlSW5pdGlhbFJldHJ5VG9rZW4oY29udGV4dFtcInBhcnRpdGlvbl9pZFwiXSk7XG4gICAgICAgIGxldCBsYXN0RXJyb3IgPSBuZXcgRXJyb3IoKTtcbiAgICAgICAgbGV0IGF0dGVtcHRzID0gMDtcbiAgICAgICAgbGV0IHRvdGFsUmV0cnlEZWxheSA9IDA7XG4gICAgICAgIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgICAgICAgY29uc3QgaXNSZXF1ZXN0ID0gSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KTtcbiAgICAgICAgaWYgKGlzUmVxdWVzdCkge1xuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzW0lOVk9DQVRJT05fSURfSEVBREVSXSA9IHY0KCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbUkVRVUVTVF9IRUFERVJdID0gYGF0dGVtcHQ9JHthdHRlbXB0cyArIDF9OyBtYXg9JHttYXhBdHRlbXB0c31gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IHJlc3BvbnNlLCBvdXRwdXQgfSA9IGF3YWl0IG5leHQoYXJncyk7XG4gICAgICAgICAgICAgICAgcmV0cnlTdHJhdGVneS5yZWNvcmRTdWNjZXNzKHJldHJ5VG9rZW4pO1xuICAgICAgICAgICAgICAgIG91dHB1dC4kbWV0YWRhdGEuYXR0ZW1wdHMgPSBhdHRlbXB0cyArIDE7XG4gICAgICAgICAgICAgICAgb3V0cHV0LiRtZXRhZGF0YS50b3RhbFJldHJ5RGVsYXkgPSB0b3RhbFJldHJ5RGVsYXk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcmVzcG9uc2UsIG91dHB1dCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXRyeUVycm9ySW5mbyA9IGdldFJldHJ5RXJyb3JJbmZvKGUpO1xuICAgICAgICAgICAgICAgIGxhc3RFcnJvciA9IGFzU2RrRXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVxdWVzdCAmJiBpc1N0cmVhbWluZ1BheWxvYWQocmVxdWVzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgKGNvbnRleHQubG9nZ2VyIGluc3RhbmNlb2YgTm9PcExvZ2dlciA/IGNvbnNvbGUgOiBjb250ZXh0LmxvZ2dlcik/Lndhcm4oXCJBbiBlcnJvciB3YXMgZW5jb3VudGVyZWQgaW4gYSBub24tcmV0cnlhYmxlIHN0cmVhbWluZyByZXF1ZXN0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbGFzdEVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXRyeVRva2VuID0gYXdhaXQgcmV0cnlTdHJhdGVneS5yZWZyZXNoUmV0cnlUb2tlbkZvclJldHJ5KHJldHJ5VG9rZW4sIHJldHJ5RXJyb3JJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKHJlZnJlc2hFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxhc3RFcnJvci4kbWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFcnJvci4kbWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXN0RXJyb3IuJG1ldGFkYXRhLmF0dGVtcHRzID0gYXR0ZW1wdHMgKyAxO1xuICAgICAgICAgICAgICAgICAgICBsYXN0RXJyb3IuJG1ldGFkYXRhLnRvdGFsUmV0cnlEZWxheSA9IHRvdGFsUmV0cnlEZWxheTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbGFzdEVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhdHRlbXB0cyA9IHJldHJ5VG9rZW4uZ2V0UmV0cnlDb3VudCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gcmV0cnlUb2tlbi5nZXRSZXRyeURlbGF5KCk7XG4gICAgICAgICAgICAgICAgdG90YWxSZXRyeURlbGF5ICs9IGRlbGF5O1xuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHJ5U3RyYXRlZ3kgPSByZXRyeVN0cmF0ZWd5O1xuICAgICAgICBpZiAocmV0cnlTdHJhdGVneT8ubW9kZSlcbiAgICAgICAgICAgIGNvbnRleHQudXNlckFnZW50ID0gWy4uLihjb250ZXh0LnVzZXJBZ2VudCB8fCBbXSksIFtcImNmZy9yZXRyeS1tb2RlXCIsIHJldHJ5U3RyYXRlZ3kubW9kZV1dO1xuICAgICAgICByZXR1cm4gcmV0cnlTdHJhdGVneS5yZXRyeShuZXh0LCBhcmdzKTtcbiAgICB9XG59O1xuY29uc3QgaXNSZXRyeVN0cmF0ZWd5VjIgPSAocmV0cnlTdHJhdGVneSkgPT4gdHlwZW9mIHJldHJ5U3RyYXRlZ3kuYWNxdWlyZUluaXRpYWxSZXRyeVRva2VuICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHJldHJ5U3RyYXRlZ3kucmVmcmVzaFJldHJ5VG9rZW5Gb3JSZXRyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiByZXRyeVN0cmF0ZWd5LnJlY29yZFN1Y2Nlc3MgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBnZXRSZXRyeUVycm9ySW5mbyA9IChlcnJvcikgPT4ge1xuICAgIGNvbnN0IGVycm9ySW5mbyA9IHtcbiAgICAgICAgZXJyb3JUeXBlOiBnZXRSZXRyeUVycm9yVHlwZShlcnJvciksXG4gICAgfTtcbiAgICBjb25zdCByZXRyeUFmdGVySGludCA9IGdldFJldHJ5QWZ0ZXJIaW50KGVycm9yLiRyZXNwb25zZSk7XG4gICAgaWYgKHJldHJ5QWZ0ZXJIaW50KSB7XG4gICAgICAgIGVycm9ySW5mby5yZXRyeUFmdGVySGludCA9IHJldHJ5QWZ0ZXJIaW50O1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JJbmZvO1xufTtcbmNvbnN0IGdldFJldHJ5RXJyb3JUeXBlID0gKGVycm9yKSA9PiB7XG4gICAgaWYgKGlzVGhyb3R0bGluZ0Vycm9yKGVycm9yKSlcbiAgICAgICAgcmV0dXJuIFwiVEhST1RUTElOR1wiO1xuICAgIGlmIChpc1RyYW5zaWVudEVycm9yKGVycm9yKSlcbiAgICAgICAgcmV0dXJuIFwiVFJBTlNJRU5UXCI7XG4gICAgaWYgKGlzU2VydmVyRXJyb3IoZXJyb3IpKVxuICAgICAgICByZXR1cm4gXCJTRVJWRVJfRVJST1JcIjtcbiAgICByZXR1cm4gXCJDTElFTlRfRVJST1JcIjtcbn07XG5leHBvcnQgY29uc3QgcmV0cnlNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBuYW1lOiBcInJldHJ5TWlkZGxld2FyZVwiLFxuICAgIHRhZ3M6IFtcIlJFVFJZXCJdLFxuICAgIHN0ZXA6IFwiZmluYWxpemVSZXF1ZXN0XCIsXG4gICAgcHJpb3JpdHk6IFwiaGlnaFwiLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBnZXRSZXRyeVBsdWdpbiA9IChvcHRpb25zKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZChyZXRyeU1pZGRsZXdhcmUob3B0aW9ucyksIHJldHJ5TWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbmV4cG9ydCBjb25zdCBnZXRSZXRyeUFmdGVySGludCA9IChyZXNwb25zZSkgPT4ge1xuICAgIGlmICghSHR0cFJlc3BvbnNlLmlzSW5zdGFuY2UocmVzcG9uc2UpKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgcmV0cnlBZnRlckhlYWRlck5hbWUgPSBPYmplY3Qua2V5cyhyZXNwb25zZS5oZWFkZXJzKS5maW5kKChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpID09PSBcInJldHJ5LWFmdGVyXCIpO1xuICAgIGlmICghcmV0cnlBZnRlckhlYWRlck5hbWUpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCByZXRyeUFmdGVyID0gcmVzcG9uc2UuaGVhZGVyc1tyZXRyeUFmdGVySGVhZGVyTmFtZV07XG4gICAgY29uc3QgcmV0cnlBZnRlclNlY29uZHMgPSBOdW1iZXIocmV0cnlBZnRlcik7XG4gICAgaWYgKCFOdW1iZXIuaXNOYU4ocmV0cnlBZnRlclNlY29uZHMpKVxuICAgICAgICByZXR1cm4gbmV3IERhdGUocmV0cnlBZnRlclNlY29uZHMgKiAxMDAwKTtcbiAgICBjb25zdCByZXRyeUFmdGVyRGF0ZSA9IG5ldyBEYXRlKHJldHJ5QWZ0ZXIpO1xuICAgIHJldHVybiByZXRyeUFmdGVyRGF0ZTtcbn07XG4iLCJleHBvcnQgY29uc3QgYXNTZGtFcnJvciA9IChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgT2JqZWN0KVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoKSwgZXJyb3IpO1xuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiBuZXcgRXJyb3IoYEFXUyBTREsgZXJyb3Igd3JhcHBlciBmb3IgJHtlcnJvcn1gKTtcbn07XG4iLCJleHBvcnQgY29uc3QgZGVzZXJpYWxpemVyTWlkZGxld2FyZSA9IChvcHRpb25zLCBkZXNlcmlhbGl6ZXIpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIGNvbnN0IHsgcmVzcG9uc2UgfSA9IGF3YWl0IG5leHQoYXJncyk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gYXdhaXQgZGVzZXJpYWxpemVyKHJlc3BvbnNlLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgb3V0cHV0OiBwYXJzZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsIFwiJHJlc3BvbnNlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghKFwiJG1ldGFkYXRhXCIgaW4gZXJyb3IpKSB7XG4gICAgICAgICAgICBjb25zdCBoaW50ID0gYERlc2VyaWFsaXphdGlvbiBlcnJvcjogdG8gc2VlIHRoZSByYXcgcmVzcG9uc2UsIGluc3BlY3QgdGhlIGhpZGRlbiBmaWVsZCB7ZXJyb3J9LiRyZXNwb25zZSBvbiB0aGlzIG9iamVjdC5gO1xuICAgICAgICAgICAgZXJyb3IubWVzc2FnZSArPSBcIlxcbiAgXCIgKyBoaW50O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn07XG4iLCJleHBvcnQgY29uc3Qgc2VyaWFsaXplck1pZGRsZXdhcmUgPSAob3B0aW9ucywgc2VyaWFsaXplcikgPT4gKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBjb250ZXh0LmVuZHBvaW50VjI/LnVybCAmJiBvcHRpb25zLnVybFBhcnNlclxuICAgICAgICA/IGFzeW5jICgpID0+IG9wdGlvbnMudXJsUGFyc2VyKGNvbnRleHQuZW5kcG9pbnRWMi51cmwpXG4gICAgICAgIDogb3B0aW9ucy5lbmRwb2ludDtcbiAgICBpZiAoIWVuZHBvaW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbGlkIGVuZHBvaW50IHByb3ZpZGVyIGF2YWlsYWJsZS5cIik7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBzZXJpYWxpemVyKGFyZ3MuaW5wdXQsIHsgLi4ub3B0aW9ucywgZW5kcG9pbnQgfSk7XG4gICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAuLi5hcmdzLFxuICAgICAgICByZXF1ZXN0LFxuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IGRlc2VyaWFsaXplck1pZGRsZXdhcmUgfSBmcm9tIFwiLi9kZXNlcmlhbGl6ZXJNaWRkbGV3YXJlXCI7XG5pbXBvcnQgeyBzZXJpYWxpemVyTWlkZGxld2FyZSB9IGZyb20gXCIuL3NlcmlhbGl6ZXJNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgZGVzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiA9IHtcbiAgICBuYW1lOiBcImRlc2VyaWFsaXplck1pZGRsZXdhcmVcIixcbiAgICBzdGVwOiBcImRlc2VyaWFsaXplXCIsXG4gICAgdGFnczogW1wiREVTRVJJQUxJWkVSXCJdLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiA9IHtcbiAgICBuYW1lOiBcInNlcmlhbGl6ZXJNaWRkbGV3YXJlXCIsXG4gICAgc3RlcDogXCJzZXJpYWxpemVcIixcbiAgICB0YWdzOiBbXCJTRVJJQUxJWkVSXCJdLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXJkZVBsdWdpbihjb25maWcsIHNlcmlhbGl6ZXIsIGRlc2VyaWFsaXplcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwcGx5VG9TdGFjazogKGNvbW1hbmRTdGFjaykgPT4ge1xuICAgICAgICAgICAgY29tbWFuZFN0YWNrLmFkZChkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlKGNvbmZpZywgZGVzZXJpYWxpemVyKSwgZGVzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbik7XG4gICAgICAgICAgICBjb21tYW5kU3RhY2suYWRkKHNlcmlhbGl6ZXJNaWRkbGV3YXJlKGNvbmZpZywgc2VyaWFsaXplciksIHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIH0gZnJvbSBcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IGdldFByb2ZpbGVOYW1lLCBsb2FkU2hhcmVkQ29uZmlnRmlsZXMgfSBmcm9tIFwiQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyXCI7XG5leHBvcnQgY29uc3QgZnJvbVNoYXJlZENvbmZpZ0ZpbGVzID0gKGNvbmZpZ1NlbGVjdG9yLCB7IHByZWZlcnJlZEZpbGUgPSBcImNvbmZpZ1wiLCAuLi5pbml0IH0gPSB7fSkgPT4gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb2ZpbGUgPSBnZXRQcm9maWxlTmFtZShpbml0KTtcbiAgICBjb25zdCB7IGNvbmZpZ0ZpbGUsIGNyZWRlbnRpYWxzRmlsZSB9ID0gYXdhaXQgbG9hZFNoYXJlZENvbmZpZ0ZpbGVzKGluaXQpO1xuICAgIGNvbnN0IHByb2ZpbGVGcm9tQ3JlZGVudGlhbHMgPSBjcmVkZW50aWFsc0ZpbGVbcHJvZmlsZV0gfHwge307XG4gICAgY29uc3QgcHJvZmlsZUZyb21Db25maWcgPSBjb25maWdGaWxlW3Byb2ZpbGVdIHx8IHt9O1xuICAgIGNvbnN0IG1lcmdlZFByb2ZpbGUgPSBwcmVmZXJyZWRGaWxlID09PSBcImNvbmZpZ1wiXG4gICAgICAgID8geyAuLi5wcm9maWxlRnJvbUNyZWRlbnRpYWxzLCAuLi5wcm9maWxlRnJvbUNvbmZpZyB9XG4gICAgICAgIDogeyAuLi5wcm9maWxlRnJvbUNvbmZpZywgLi4ucHJvZmlsZUZyb21DcmVkZW50aWFscyB9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNmZ0ZpbGUgPSBwcmVmZXJyZWRGaWxlID09PSBcImNvbmZpZ1wiID8gY29uZmlnRmlsZSA6IGNyZWRlbnRpYWxzRmlsZTtcbiAgICAgICAgY29uc3QgY29uZmlnVmFsdWUgPSBjb25maWdTZWxlY3RvcihtZXJnZWRQcm9maWxlLCBjZmdGaWxlKTtcbiAgICAgICAgaWYgKGNvbmZpZ1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25maWdWYWx1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihlLm1lc3NhZ2UgfHwgYENhbm5vdCBsb2FkIGNvbmZpZyBmb3IgcHJvZmlsZSAke3Byb2ZpbGV9IGluIFNESyBjb25maWd1cmF0aW9uIGZpbGVzIHdpdGggZ2V0dGVyOiAke2NvbmZpZ1NlbGVjdG9yfWApO1xuICAgIH1cbn07XG4iLCJpbXBvcnQgeyBjaGFpbiwgbWVtb2l6ZSB9IGZyb20gXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBmcm9tRW52IH0gZnJvbSBcIi4vZnJvbUVudlwiO1xuaW1wb3J0IHsgZnJvbVNoYXJlZENvbmZpZ0ZpbGVzIH0gZnJvbSBcIi4vZnJvbVNoYXJlZENvbmZpZ0ZpbGVzXCI7XG5pbXBvcnQgeyBmcm9tU3RhdGljIH0gZnJvbSBcIi4vZnJvbVN0YXRpY1wiO1xuZXhwb3J0IGNvbnN0IGxvYWRDb25maWcgPSAoeyBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3IsIGNvbmZpZ0ZpbGVTZWxlY3RvciwgZGVmYXVsdDogZGVmYXVsdFZhbHVlIH0sIGNvbmZpZ3VyYXRpb24gPSB7fSkgPT4gbWVtb2l6ZShjaGFpbihmcm9tRW52KGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvciksIGZyb21TaGFyZWRDb25maWdGaWxlcyhjb25maWdGaWxlU2VsZWN0b3IsIGNvbmZpZ3VyYXRpb24pLCBmcm9tU3RhdGljKGRlZmF1bHRWYWx1ZSkpKTtcbiIsImltcG9ydCB7IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciB9IGZyb20gXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5leHBvcnQgY29uc3QgZnJvbUVudiA9IChlbnZWYXJTZWxlY3RvcikgPT4gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGVudlZhclNlbGVjdG9yKHByb2Nlc3MuZW52KTtcbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKGUubWVzc2FnZSB8fCBgQ2Fubm90IGxvYWQgY29uZmlnIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzIHdpdGggZ2V0dGVyOiAke2VudlZhclNlbGVjdG9yfWApO1xuICAgIH1cbn07XG4iLCJpbXBvcnQgeyBmcm9tU3RhdGljIGFzIGNvbnZlcnRUb1Byb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIjtcbmNvbnN0IGlzRnVuY3Rpb24gPSAoZnVuYykgPT4gdHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIjtcbmV4cG9ydCBjb25zdCBmcm9tU3RhdGljID0gKGRlZmF1bHRWYWx1ZSkgPT4gaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpID8gYXN5bmMgKCkgPT4gYXdhaXQgZGVmYXVsdFZhbHVlKCkgOiBjb252ZXJ0VG9Qcm92aWRlcihkZWZhdWx0VmFsdWUpO1xuIiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJodHRwc1wiKTsiLCJleHBvcnQgY29uc3QgTk9ERUpTX1RJTUVPVVRfRVJST1JfQ09ERVMgPSBbXCJFQ09OTlJFU0VUXCIsIFwiRVBJUEVcIiwgXCJFVElNRURPVVRcIl07XG4iLCJjb25zdCBnZXRUcmFuc2Zvcm1lZEhlYWRlcnMgPSAoaGVhZGVycykgPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVkSGVhZGVycyA9IHt9O1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgICAgICBjb25zdCBoZWFkZXJWYWx1ZXMgPSBoZWFkZXJzW25hbWVdO1xuICAgICAgICB0cmFuc2Zvcm1lZEhlYWRlcnNbbmFtZV0gPSBBcnJheS5pc0FycmF5KGhlYWRlclZhbHVlcykgPyBoZWFkZXJWYWx1ZXMuam9pbihcIixcIikgOiBoZWFkZXJWYWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm1lZEhlYWRlcnM7XG59O1xuZXhwb3J0IHsgZ2V0VHJhbnNmb3JtZWRIZWFkZXJzIH07XG4iLCJpbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBidWlsZFF1ZXJ5U3RyaW5nIH0gZnJvbSBcIkBzbWl0aHkvcXVlcnlzdHJpbmctYnVpbGRlclwiO1xuaW1wb3J0IHsgQWdlbnQgYXMgaEFnZW50LCByZXF1ZXN0IGFzIGhSZXF1ZXN0IH0gZnJvbSBcImh0dHBcIjtcbmltcG9ydCB7IEFnZW50IGFzIGhzQWdlbnQsIHJlcXVlc3QgYXMgaHNSZXF1ZXN0IH0gZnJvbSBcImh0dHBzXCI7XG5pbXBvcnQgeyBOT0RFSlNfVElNRU9VVF9FUlJPUl9DT0RFUyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgZ2V0VHJhbnNmb3JtZWRIZWFkZXJzIH0gZnJvbSBcIi4vZ2V0LXRyYW5zZm9ybWVkLWhlYWRlcnNcIjtcbmltcG9ydCB7IHNldENvbm5lY3Rpb25UaW1lb3V0IH0gZnJvbSBcIi4vc2V0LWNvbm5lY3Rpb24tdGltZW91dFwiO1xuaW1wb3J0IHsgc2V0U29ja2V0S2VlcEFsaXZlIH0gZnJvbSBcIi4vc2V0LXNvY2tldC1rZWVwLWFsaXZlXCI7XG5pbXBvcnQgeyBzZXRTb2NrZXRUaW1lb3V0IH0gZnJvbSBcIi4vc2V0LXNvY2tldC10aW1lb3V0XCI7XG5pbXBvcnQgeyB3cml0ZVJlcXVlc3RCb2R5IH0gZnJvbSBcIi4vd3JpdGUtcmVxdWVzdC1ib2R5XCI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9SRVFVRVNUX1RJTUVPVVQgPSAwO1xuZXhwb3J0IGNsYXNzIE5vZGVIdHRwSGFuZGxlciB7XG4gICAgc3RhdGljIGNyZWF0ZShpbnN0YW5jZU9yT3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlT3JPcHRpb25zPy5oYW5kbGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlT3JPcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTm9kZUh0dHBIYW5kbGVyKGluc3RhbmNlT3JPcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0geyBoYW5kbGVyUHJvdG9jb2w6IFwiaHR0cC8xLjFcIiB9O1xuICAgICAgICB0aGlzLmNvbmZpZ1Byb3ZpZGVyID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKF9vcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNvbHZlRGVmYXVsdENvbmZpZyhfb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc29sdmVEZWZhdWx0Q29uZmlnKG9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlc29sdmVEZWZhdWx0Q29uZmlnKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyByZXF1ZXN0VGltZW91dCwgY29ubmVjdGlvblRpbWVvdXQsIHNvY2tldFRpbWVvdXQsIGh0dHBBZ2VudCwgaHR0cHNBZ2VudCB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgY29uc3Qga2VlcEFsaXZlID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgbWF4U29ja2V0cyA9IDUwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29ubmVjdGlvblRpbWVvdXQsXG4gICAgICAgICAgICByZXF1ZXN0VGltZW91dDogcmVxdWVzdFRpbWVvdXQgPz8gc29ja2V0VGltZW91dCxcbiAgICAgICAgICAgIGh0dHBBZ2VudDogaHR0cEFnZW50IHx8IG5ldyBoQWdlbnQoeyBrZWVwQWxpdmUsIG1heFNvY2tldHMgfSksXG4gICAgICAgICAgICBodHRwc0FnZW50OiBodHRwc0FnZW50IHx8IG5ldyBoc0FnZW50KHsga2VlcEFsaXZlLCBtYXhTb2NrZXRzIH0pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmNvbmZpZz8uaHR0cEFnZW50Py5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuY29uZmlnPy5odHRwc0FnZW50Py5kZXN0cm95KCk7XG4gICAgfVxuICAgIGFzeW5jIGhhbmRsZShyZXF1ZXN0LCB7IGFib3J0U2lnbmFsIH0gPSB7fSkge1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IGF3YWl0IHRoaXMuY29uZmlnUHJvdmlkZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChfcmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGV0IHdyaXRlUmVxdWVzdEJvZHlQcm9taXNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZSA9IGFzeW5jIChhcmcpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZTtcbiAgICAgICAgICAgICAgICBfcmVzb2x2ZShhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlamVjdCA9IGFzeW5jIChhcmcpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZTtcbiAgICAgICAgICAgICAgICBfcmVqZWN0KGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbmZpZykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vZGUgSFRUUCByZXF1ZXN0IGhhbmRsZXIgY29uZmlnIGlzIG5vdCByZXNvbHZlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhYm9ydFNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJSZXF1ZXN0IGFib3J0ZWRcIik7XG4gICAgICAgICAgICAgICAgYWJvcnRFcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGFib3J0RXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlzU1NMID0gcmVxdWVzdC5wcm90b2NvbCA9PT0gXCJodHRwczpcIjtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gYnVpbGRRdWVyeVN0cmluZyhyZXF1ZXN0LnF1ZXJ5IHx8IHt9KTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHJlcXVlc3QudXNlcm5hbWUgIT0gbnVsbCB8fCByZXF1ZXN0LnBhc3N3b3JkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VybmFtZSA9IHJlcXVlc3QudXNlcm5hbWUgPz8gXCJcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXNzd29yZCA9IHJlcXVlc3QucGFzc3dvcmQgPz8gXCJcIjtcbiAgICAgICAgICAgICAgICBhdXRoID0gYCR7dXNlcm5hbWV9OiR7cGFzc3dvcmR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwYXRoID0gcmVxdWVzdC5wYXRoO1xuICAgICAgICAgICAgaWYgKHF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgcGF0aCArPSBgPyR7cXVlcnlTdHJpbmd9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgcGF0aCArPSBgIyR7cmVxdWVzdC5mcmFnbWVudH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgbm9kZUh0dHBzT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgaG9zdDogcmVxdWVzdC5ob3N0bmFtZSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgcG9ydDogcmVxdWVzdC5wb3J0LFxuICAgICAgICAgICAgICAgIGFnZW50OiBpc1NTTCA/IHRoaXMuY29uZmlnLmh0dHBzQWdlbnQgOiB0aGlzLmNvbmZpZy5odHRwQWdlbnQsXG4gICAgICAgICAgICAgICAgYXV0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0RnVuYyA9IGlzU1NMID8gaHNSZXF1ZXN0IDogaFJlcXVlc3Q7XG4gICAgICAgICAgICBjb25zdCByZXEgPSByZXF1ZXN0RnVuYyhub2RlSHR0cHNPcHRpb25zLCAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaHR0cFJlc3BvbnNlID0gbmV3IEh0dHBSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlcy5zdGF0dXNDb2RlIHx8IC0xLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlcy5zdGF0dXNNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBnZXRUcmFuc2Zvcm1lZEhlYWRlcnMocmVzLmhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiByZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7IHJlc3BvbnNlOiBodHRwUmVzcG9uc2UgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcS5vbihcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoTk9ERUpTX1RJTUVPVVRfRVJST1JfQ09ERVMuaW5jbHVkZXMoZXJyLmNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChPYmplY3QuYXNzaWduKGVyciwgeyBuYW1lOiBcIlRpbWVvdXRFcnJvclwiIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0Q29ubmVjdGlvblRpbWVvdXQocmVxLCByZWplY3QsIHRoaXMuY29uZmlnLmNvbm5lY3Rpb25UaW1lb3V0KTtcbiAgICAgICAgICAgIHNldFNvY2tldFRpbWVvdXQocmVxLCByZWplY3QsIHRoaXMuY29uZmlnLnJlcXVlc3RUaW1lb3V0KTtcbiAgICAgICAgICAgIGlmIChhYm9ydFNpZ25hbCkge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsLm9uYWJvcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcS5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhYm9ydEVycm9yID0gbmV3IEVycm9yKFwiUmVxdWVzdCBhYm9ydGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBhYm9ydEVycm9yLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGFib3J0RXJyb3IpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBodHRwQWdlbnQgPSBub2RlSHR0cHNPcHRpb25zLmFnZW50O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBodHRwQWdlbnQgPT09IFwib2JqZWN0XCIgJiYgXCJrZWVwQWxpdmVcIiBpbiBodHRwQWdlbnQpIHtcbiAgICAgICAgICAgICAgICBzZXRTb2NrZXRLZWVwQWxpdmUocmVxLCB7XG4gICAgICAgICAgICAgICAgICAgIGtlZXBBbGl2ZTogaHR0cEFnZW50LmtlZXBBbGl2ZSxcbiAgICAgICAgICAgICAgICAgICAga2VlcEFsaXZlTXNlY3M6IGh0dHBBZ2VudC5rZWVwQWxpdmVNc2VjcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdyaXRlUmVxdWVzdEJvZHlQcm9taXNlID0gd3JpdGVSZXF1ZXN0Qm9keShyZXEsIHJlcXVlc3QsIHRoaXMuY29uZmlnLnJlcXVlc3RUaW1lb3V0KS5jYXRjaChfcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZUh0dHBDbGllbnRDb25maWcoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb25maWdQcm92aWRlciA9IHRoaXMuY29uZmlnUHJvdmlkZXIudGhlbigoY29uZmlnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBba2V5XTogdmFsdWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaHR0cEhhbmRsZXJDb25maWdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcgPz8ge307XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZXNjYXBlVXJpIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11cmktZXNjYXBlXCI7XG5leHBvcnQgZnVuY3Rpb24gYnVpbGRRdWVyeVN0cmluZyhxdWVyeSkge1xuICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHF1ZXJ5KS5zb3J0KCkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBxdWVyeVtrZXldO1xuICAgICAgICBrZXkgPSBlc2NhcGVVcmkoa2V5KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaUxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goYCR7a2V5fT0ke2VzY2FwZVVyaSh2YWx1ZVtpXSl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgcXNFbnRyeSA9IGtleTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBxc0VudHJ5ICs9IGA9JHtlc2NhcGVVcmkodmFsdWUpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHFzRW50cnkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKFwiJlwiKTtcbn1cbiIsImV4cG9ydCBjb25zdCBzZXRDb25uZWN0aW9uVGltZW91dCA9IChyZXF1ZXN0LCByZWplY3QsIHRpbWVvdXRJbk1zID0gMCkgPT4ge1xuICAgIGlmICghdGltZW91dEluTXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmVxdWVzdC5kZXN0cm95KCk7XG4gICAgICAgIHJlamVjdChPYmplY3QuYXNzaWduKG5ldyBFcnJvcihgU29ja2V0IHRpbWVkIG91dCB3aXRob3V0IGVzdGFibGlzaGluZyBhIGNvbm5lY3Rpb24gd2l0aGluICR7dGltZW91dEluTXN9IG1zYCksIHtcbiAgICAgICAgICAgIG5hbWU6IFwiVGltZW91dEVycm9yXCIsXG4gICAgICAgIH0pKTtcbiAgICB9LCB0aW1lb3V0SW5Ncyk7XG4gICAgcmVxdWVzdC5vbihcInNvY2tldFwiLCAoc29ja2V0KSA9PiB7XG4gICAgICAgIGlmIChzb2NrZXQuY29ubmVjdGluZykge1xuICAgICAgICAgICAgc29ja2V0Lm9uKFwiY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IHNldFNvY2tldFRpbWVvdXQgPSAocmVxdWVzdCwgcmVqZWN0LCB0aW1lb3V0SW5NcyA9IDApID0+IHtcbiAgICByZXF1ZXN0LnNldFRpbWVvdXQodGltZW91dEluTXMsICgpID0+IHtcbiAgICAgICAgcmVxdWVzdC5kZXN0cm95KCk7XG4gICAgICAgIHJlamVjdChPYmplY3QuYXNzaWduKG5ldyBFcnJvcihgQ29ubmVjdGlvbiB0aW1lZCBvdXQgYWZ0ZXIgJHt0aW1lb3V0SW5Nc30gbXNgKSwgeyBuYW1lOiBcIlRpbWVvdXRFcnJvclwiIH0pKTtcbiAgICB9KTtcbn07XG4iLCJleHBvcnQgY29uc3Qgc2V0U29ja2V0S2VlcEFsaXZlID0gKHJlcXVlc3QsIHsga2VlcEFsaXZlLCBrZWVwQWxpdmVNc2VjcyB9KSA9PiB7XG4gICAgaWYgKGtlZXBBbGl2ZSAhPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3Qub24oXCJzb2NrZXRcIiwgKHNvY2tldCkgPT4ge1xuICAgICAgICBzb2NrZXQuc2V0S2VlcEFsaXZlKGtlZXBBbGl2ZSwga2VlcEFsaXZlTXNlY3MgfHwgMCk7XG4gICAgfSk7XG59O1xuIiwiaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5jb25zdCBNSU5fV0FJVF9USU1FID0gMTAwMDtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3cml0ZVJlcXVlc3RCb2R5KGh0dHBSZXF1ZXN0LCByZXF1ZXN0LCBtYXhDb250aW51ZVRpbWVvdXRNcyA9IE1JTl9XQUlUX1RJTUUpIHtcbiAgICBjb25zdCBoZWFkZXJzID0gcmVxdWVzdC5oZWFkZXJzID8/IHt9O1xuICAgIGNvbnN0IGV4cGVjdCA9IGhlYWRlcnNbXCJFeHBlY3RcIl0gfHwgaGVhZGVyc1tcImV4cGVjdFwiXTtcbiAgICBsZXQgdGltZW91dElkID0gLTE7XG4gICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XG4gICAgaWYgKGV4cGVjdCA9PT0gXCIxMDAtY29udGludWVcIikge1xuICAgICAgICBhd2FpdCBQcm9taXNlLnJhY2UoW1xuICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBOdW1iZXIoc2V0VGltZW91dChyZXNvbHZlLCBNYXRoLm1heChNSU5fV0FJVF9USU1FLCBtYXhDb250aW51ZVRpbWVvdXRNcykpKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICBodHRwUmVxdWVzdC5vbihcImNvbnRpbnVlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBodHRwUmVxdWVzdC5vbihcImVycm9yXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICAgIHdyaXRlQm9keShodHRwUmVxdWVzdCwgcmVxdWVzdC5ib2R5KTtcbiAgICB9XG59XG5mdW5jdGlvbiB3cml0ZUJvZHkoaHR0cFJlcXVlc3QsIGJvZHkpIHtcbiAgICBpZiAoYm9keSBpbnN0YW5jZW9mIFJlYWRhYmxlKSB7XG4gICAgICAgIGJvZHkucGlwZShodHRwUmVxdWVzdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJvZHkpIHtcbiAgICAgICAgaHR0cFJlcXVlc3QuZW5kKEJ1ZmZlci5mcm9tKGJvZHkpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGh0dHBSZXF1ZXN0LmVuZCgpO1xuICAgIH1cbn1cbiIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiaHR0cDJcIik7IiwiZXhwb3J0IGNsYXNzIE5vZGVIdHRwMkNvbm5lY3Rpb25Qb29sIHtcbiAgICBjb25zdHJ1Y3RvcihzZXNzaW9ucykge1xuICAgICAgICB0aGlzLnNlc3Npb25zID0gW107XG4gICAgICAgIHRoaXMuc2Vzc2lvbnMgPSBzZXNzaW9ucyA/PyBbXTtcbiAgICB9XG4gICAgcG9sbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2Vzc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvbnMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvZmZlckxhc3Qoc2Vzc2lvbikge1xuICAgICAgICB0aGlzLnNlc3Npb25zLnB1c2goc2Vzc2lvbik7XG4gICAgfVxuICAgIGNvbnRhaW5zKHNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvbnMuaW5jbHVkZXMoc2Vzc2lvbik7XG4gICAgfVxuICAgIHJlbW92ZShzZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbnMgPSB0aGlzLnNlc3Npb25zLmZpbHRlcigocykgPT4gcyAhPT0gc2Vzc2lvbik7XG4gICAgfVxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uc1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgfVxuICAgIGRlc3Ryb3koY29ubmVjdGlvbikge1xuICAgICAgICBmb3IgKGNvbnN0IHNlc3Npb24gb2YgdGhpcy5zZXNzaW9ucykge1xuICAgICAgICAgICAgaWYgKHNlc3Npb24gPT09IGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24uZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFdyaXRhYmxlIH0gZnJvbSBcInN0cmVhbVwiO1xuZXhwb3J0IGNsYXNzIENvbGxlY3RvciBleHRlbmRzIFdyaXRhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5idWZmZXJlZEJ5dGVzID0gW107XG4gICAgfVxuICAgIF93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyZWRCeXRlcy5wdXNoKGNodW5rKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb2xsZWN0b3IgfSBmcm9tIFwiLi9jb2xsZWN0b3JcIjtcbmV4cG9ydCBjb25zdCBzdHJlYW1Db2xsZWN0b3IgPSAoc3RyZWFtKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgY29sbGVjdG9yID0gbmV3IENvbGxlY3RvcigpO1xuICAgIHN0cmVhbS5waXBlKGNvbGxlY3Rvcik7XG4gICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgICAgICBjb2xsZWN0b3IuZW5kKCk7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgIH0pO1xuICAgIGNvbGxlY3Rvci5vbihcImVycm9yXCIsIHJlamVjdCk7XG4gICAgY29sbGVjdG9yLm9uKFwiZmluaXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KHRoaXMuYnVmZmVyZWRCeXRlcykpO1xuICAgICAgICByZXNvbHZlKGJ5dGVzKTtcbiAgICB9KTtcbn0pO1xuIiwiZXhwb3J0IGNsYXNzIFByb3ZpZGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgdHJ5TmV4dExpbmsgPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnRyeU5leHRMaW5rID0gdHJ5TmV4dExpbms7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUHJvdmlkZXJFcnJvclwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUHJvdmlkZXJFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbShlcnJvciwgdHJ5TmV4dExpbmsgPSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzKGVycm9yLm1lc3NhZ2UsIHRyeU5leHRMaW5rKSwgZXJyb3IpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFByb3ZpZGVyRXJyb3IgfSBmcm9tIFwiLi9Qcm92aWRlckVycm9yXCI7XG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIGV4dGVuZHMgUHJvdmlkZXJFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgdHJ5TmV4dExpbmsgPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHRyeU5leHRMaW5rKTtcbiAgICAgICAgdGhpcy50cnlOZXh0TGluayA9IHRyeU5leHRMaW5rO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvclwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUHJvdmlkZXJFcnJvciB9IGZyb20gXCIuL1Byb3ZpZGVyRXJyb3JcIjtcbmV4cG9ydCBjbGFzcyBUb2tlblByb3ZpZGVyRXJyb3IgZXh0ZW5kcyBQcm92aWRlckVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCB0cnlOZXh0TGluayA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgdHJ5TmV4dExpbmspO1xuICAgICAgICB0aGlzLnRyeU5leHRMaW5rID0gdHJ5TmV4dExpbms7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVG9rZW5Qcm92aWRlckVycm9yXCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUb2tlblByb3ZpZGVyRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQcm92aWRlckVycm9yIH0gZnJvbSBcIi4vUHJvdmlkZXJFcnJvclwiO1xuZXhwb3J0IGNvbnN0IGNoYWluID0gKC4uLnByb3ZpZGVycykgPT4gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChwcm92aWRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBQcm92aWRlckVycm9yKFwiTm8gcHJvdmlkZXJzIGluIGNoYWluXCIpO1xuICAgIH1cbiAgICBsZXQgbGFzdFByb3ZpZGVyRXJyb3I7XG4gICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBwcm92aWRlcnMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXdhaXQgcHJvdmlkZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBjcmVkZW50aWFscztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBsYXN0UHJvdmlkZXJFcnJvciA9IGVycjtcbiAgICAgICAgICAgIGlmIChlcnI/LnRyeU5leHRMaW5rKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbGFzdFByb3ZpZGVyRXJyb3I7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGZyb21TdGF0aWMgPSAoc3RhdGljVmFsdWUpID0+ICgpID0+IFByb21pc2UucmVzb2x2ZShzdGF0aWNWYWx1ZSk7XG4iLCJleHBvcnQgY29uc3QgbWVtb2l6ZSA9IChwcm92aWRlciwgaXNFeHBpcmVkLCByZXF1aXJlc1JlZnJlc2gpID0+IHtcbiAgICBsZXQgcmVzb2x2ZWQ7XG4gICAgbGV0IHBlbmRpbmc7XG4gICAgbGV0IGhhc1Jlc3VsdDtcbiAgICBsZXQgaXNDb25zdGFudCA9IGZhbHNlO1xuICAgIGNvbnN0IGNvYWxlc2NlUHJvdmlkZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICghcGVuZGluZykge1xuICAgICAgICAgICAgcGVuZGluZyA9IHByb3ZpZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gYXdhaXQgcGVuZGluZztcbiAgICAgICAgICAgIGhhc1Jlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICBpc0NvbnN0YW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9O1xuICAgIGlmIChpc0V4cGlyZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGlmICghaGFzUmVzdWx0IHx8IG9wdGlvbnM/LmZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkID0gYXdhaXQgY29hbGVzY2VQcm92aWRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFoYXNSZXN1bHQgfHwgb3B0aW9ucz8uZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDb25zdGFudCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXF1aXJlc1JlZnJlc2ggJiYgIXJlcXVpcmVzUmVmcmVzaChyZXNvbHZlZCkpIHtcbiAgICAgICAgICAgIGlzQ29uc3RhbnQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0V4cGlyZWQocmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICBhd2FpdCBjb2FsZXNjZVByb3ZpZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH07XG59O1xuIiwiZXhwb3J0IGNvbnN0IGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IChydW50aW1lQ29uZmlnKSA9PiB7XG4gICAgbGV0IGh0dHBIYW5kbGVyID0gcnVudGltZUNvbmZpZy5odHRwSGFuZGxlcjtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRIdHRwSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgICAgICAgICBodHRwSGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBIYW5kbGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIGh0dHBIYW5kbGVyO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVIdHRwQ2xpZW50Q29uZmlnKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGh0dHBIYW5kbGVyLnVwZGF0ZUh0dHBDbGllbnRDb25maWcoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBIYW5kbGVyQ29uZmlncygpIHtcbiAgICAgICAgICAgIHJldHVybiBodHRwSGFuZGxlci5odHRwSGFuZGxlckNvbmZpZ3MoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnID0gKGh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGh0dHBIYW5kbGVyOiBodHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24uaHR0cEhhbmRsZXIoKSxcbiAgICB9O1xufTtcbiIsImV4cG9ydCBjbGFzcyBIdHRwUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCI7XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgPSBvcHRpb25zLmhvc3RuYW1lIHx8IFwibG9jYWxob3N0XCI7XG4gICAgICAgIHRoaXMucG9ydCA9IG9wdGlvbnMucG9ydDtcbiAgICAgICAgdGhpcy5xdWVyeSA9IG9wdGlvbnMucXVlcnkgfHwge307XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcbiAgICAgICAgdGhpcy5ib2R5ID0gb3B0aW9ucy5ib2R5O1xuICAgICAgICB0aGlzLnByb3RvY29sID0gb3B0aW9ucy5wcm90b2NvbFxuICAgICAgICAgICAgPyBvcHRpb25zLnByb3RvY29sLnNsaWNlKC0xKSAhPT0gXCI6XCJcbiAgICAgICAgICAgICAgICA/IGAke29wdGlvbnMucHJvdG9jb2x9OmBcbiAgICAgICAgICAgICAgICA6IG9wdGlvbnMucHJvdG9jb2xcbiAgICAgICAgICAgIDogXCJodHRwczpcIjtcbiAgICAgICAgdGhpcy5wYXRoID0gb3B0aW9ucy5wYXRoID8gKG9wdGlvbnMucGF0aC5jaGFyQXQoMCkgIT09IFwiL1wiID8gYC8ke29wdGlvbnMucGF0aH1gIDogb3B0aW9ucy5wYXRoKSA6IFwiL1wiO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gb3B0aW9ucy51c2VybmFtZTtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IG9wdGlvbnMucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuZnJhZ21lbnQgPSBvcHRpb25zLmZyYWdtZW50O1xuICAgIH1cbiAgICBzdGF0aWMgaXNJbnN0YW5jZShyZXF1ZXN0KSB7XG4gICAgICAgIGlmICghcmVxdWVzdClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgcmVxID0gcmVxdWVzdDtcbiAgICAgICAgcmV0dXJuIChcIm1ldGhvZFwiIGluIHJlcSAmJlxuICAgICAgICAgICAgXCJwcm90b2NvbFwiIGluIHJlcSAmJlxuICAgICAgICAgICAgXCJob3N0bmFtZVwiIGluIHJlcSAmJlxuICAgICAgICAgICAgXCJwYXRoXCIgaW4gcmVxICYmXG4gICAgICAgICAgICB0eXBlb2YgcmVxW1wicXVlcnlcIl0gPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIHR5cGVvZiByZXFbXCJoZWFkZXJzXCJdID09PSBcIm9iamVjdFwiKTtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBIdHRwUmVxdWVzdCh7XG4gICAgICAgICAgICAuLi50aGlzLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi50aGlzLmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjbG9uZWQucXVlcnkpXG4gICAgICAgICAgICBjbG9uZWQucXVlcnkgPSBjbG9uZVF1ZXJ5KGNsb25lZC5xdWVyeSk7XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xvbmVRdWVyeShxdWVyeSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhxdWVyeSkucmVkdWNlKChjYXJyeSwgcGFyYW1OYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtID0gcXVlcnlbcGFyYW1OYW1lXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNhcnJ5LFxuICAgICAgICAgICAgW3BhcmFtTmFtZV06IEFycmF5LmlzQXJyYXkocGFyYW0pID8gWy4uLnBhcmFtXSA6IHBhcmFtLFxuICAgICAgICB9O1xuICAgIH0sIHt9KTtcbn1cbiIsImV4cG9ydCBjbGFzcyBIdHRwUmVzcG9uc2Uge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gb3B0aW9ucy5zdGF0dXNDb2RlO1xuICAgICAgICB0aGlzLnJlYXNvbiA9IG9wdGlvbnMucmVhc29uO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307XG4gICAgICAgIHRoaXMuYm9keSA9IG9wdGlvbnMuYm9keTtcbiAgICB9XG4gICAgc3RhdGljIGlzSW5zdGFuY2UocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJlc3Auc3RhdHVzQ29kZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgcmVzcC5oZWFkZXJzID09PSBcIm9iamVjdFwiO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBDTE9DS19TS0VXX0VSUk9SX0NPREVTID0gW1xuICAgIFwiQXV0aEZhaWx1cmVcIixcbiAgICBcIkludmFsaWRTaWduYXR1cmVFeGNlcHRpb25cIixcbiAgICBcIlJlcXVlc3RFeHBpcmVkXCIsXG4gICAgXCJSZXF1ZXN0SW5UaGVGdXR1cmVcIixcbiAgICBcIlJlcXVlc3RUaW1lVG9vU2tld2VkXCIsXG4gICAgXCJTaWduYXR1cmVEb2VzTm90TWF0Y2hcIixcbl07XG5leHBvcnQgY29uc3QgVEhST1RUTElOR19FUlJPUl9DT0RFUyA9IFtcbiAgICBcIkJhbmR3aWR0aExpbWl0RXhjZWVkZWRcIixcbiAgICBcIkVDMlRocm90dGxlZEV4Y2VwdGlvblwiLFxuICAgIFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgIFwiUHJpb3JSZXF1ZXN0Tm90Q29tcGxldGVcIixcbiAgICBcIlByb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgXCJSZXF1ZXN0TGltaXRFeGNlZWRlZFwiLFxuICAgIFwiUmVxdWVzdFRocm90dGxlZFwiLFxuICAgIFwiUmVxdWVzdFRocm90dGxlZEV4Y2VwdGlvblwiLFxuICAgIFwiU2xvd0Rvd25cIixcbiAgICBcIlRocm90dGxlZEV4Y2VwdGlvblwiLFxuICAgIFwiVGhyb3R0bGluZ1wiLFxuICAgIFwiVGhyb3R0bGluZ0V4Y2VwdGlvblwiLFxuICAgIFwiVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uXCIsXG4gICAgXCJUcmFuc2FjdGlvbkluUHJvZ3Jlc3NFeGNlcHRpb25cIixcbl07XG5leHBvcnQgY29uc3QgVFJBTlNJRU5UX0VSUk9SX0NPREVTID0gW1wiVGltZW91dEVycm9yXCIsIFwiUmVxdWVzdFRpbWVvdXRcIiwgXCJSZXF1ZXN0VGltZW91dEV4Y2VwdGlvblwiXTtcbmV4cG9ydCBjb25zdCBUUkFOU0lFTlRfRVJST1JfU1RBVFVTX0NPREVTID0gWzUwMCwgNTAyLCA1MDMsIDUwNF07XG5leHBvcnQgY29uc3QgTk9ERUpTX1RJTUVPVVRfRVJST1JfQ09ERVMgPSBbXCJFQ09OTlJFU0VUXCIsIFwiRUNPTk5SRUZVU0VEXCIsIFwiRVBJUEVcIiwgXCJFVElNRURPVVRcIl07XG4iLCJpbXBvcnQgeyBDTE9DS19TS0VXX0VSUk9SX0NPREVTLCBOT0RFSlNfVElNRU9VVF9FUlJPUl9DT0RFUywgVEhST1RUTElOR19FUlJPUl9DT0RFUywgVFJBTlNJRU5UX0VSUk9SX0NPREVTLCBUUkFOU0lFTlRfRVJST1JfU1RBVFVTX0NPREVTLCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGNvbnN0IGlzUmV0cnlhYmxlQnlUcmFpdCA9IChlcnJvcikgPT4gZXJyb3IuJHJldHJ5YWJsZSAhPT0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IGlzQ2xvY2tTa2V3RXJyb3IgPSAoZXJyb3IpID0+IENMT0NLX1NLRVdfRVJST1JfQ09ERVMuaW5jbHVkZXMoZXJyb3IubmFtZSk7XG5leHBvcnQgY29uc3QgaXNUaHJvdHRsaW5nRXJyb3IgPSAoZXJyb3IpID0+IGVycm9yLiRtZXRhZGF0YT8uaHR0cFN0YXR1c0NvZGUgPT09IDQyOSB8fFxuICAgIFRIUk9UVExJTkdfRVJST1JfQ09ERVMuaW5jbHVkZXMoZXJyb3IubmFtZSkgfHxcbiAgICBlcnJvci4kcmV0cnlhYmxlPy50aHJvdHRsaW5nID09IHRydWU7XG5leHBvcnQgY29uc3QgaXNUcmFuc2llbnRFcnJvciA9IChlcnJvcikgPT4gVFJBTlNJRU5UX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVycm9yLm5hbWUpIHx8XG4gICAgTk9ERUpTX1RJTUVPVVRfRVJST1JfQ09ERVMuaW5jbHVkZXMoZXJyb3I/LmNvZGUgfHwgXCJcIikgfHxcbiAgICBUUkFOU0lFTlRfRVJST1JfU1RBVFVTX0NPREVTLmluY2x1ZGVzKGVycm9yLiRtZXRhZGF0YT8uaHR0cFN0YXR1c0NvZGUgfHwgMCk7XG5leHBvcnQgY29uc3QgaXNTZXJ2ZXJFcnJvciA9IChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvci4kbWV0YWRhdGE/Lmh0dHBTdGF0dXNDb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9IGVycm9yLiRtZXRhZGF0YS5odHRwU3RhdHVzQ29kZTtcbiAgICAgICAgaWYgKDUwMCA8PSBzdGF0dXNDb2RlICYmIHN0YXR1c0NvZGUgPD0gNTk5ICYmICFpc1RyYW5zaWVudEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuIiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJwYXRoXCIpOyIsImltcG9ydCB7IGhvbWVkaXIgfSBmcm9tIFwib3NcIjtcbmltcG9ydCB7IHNlcCB9IGZyb20gXCJwYXRoXCI7XG5jb25zdCBob21lRGlyQ2FjaGUgPSB7fTtcbmNvbnN0IGdldEhvbWVEaXJDYWNoZUtleSA9ICgpID0+IHtcbiAgICBpZiAocHJvY2VzcyAmJiBwcm9jZXNzLmdldGV1aWQpIHtcbiAgICAgICAgcmV0dXJuIGAke3Byb2Nlc3MuZ2V0ZXVpZCgpfWA7XG4gICAgfVxuICAgIHJldHVybiBcIkRFRkFVTFRcIjtcbn07XG5leHBvcnQgY29uc3QgZ2V0SG9tZURpciA9ICgpID0+IHtcbiAgICBjb25zdCB7IEhPTUUsIFVTRVJQUk9GSUxFLCBIT01FUEFUSCwgSE9NRURSSVZFID0gYEM6JHtzZXB9YCB9ID0gcHJvY2Vzcy5lbnY7XG4gICAgaWYgKEhPTUUpXG4gICAgICAgIHJldHVybiBIT01FO1xuICAgIGlmIChVU0VSUFJPRklMRSlcbiAgICAgICAgcmV0dXJuIFVTRVJQUk9GSUxFO1xuICAgIGlmIChIT01FUEFUSClcbiAgICAgICAgcmV0dXJuIGAke0hPTUVEUklWRX0ke0hPTUVQQVRIfWA7XG4gICAgY29uc3QgaG9tZURpckNhY2hlS2V5ID0gZ2V0SG9tZURpckNhY2hlS2V5KCk7XG4gICAgaWYgKCFob21lRGlyQ2FjaGVbaG9tZURpckNhY2hlS2V5XSlcbiAgICAgICAgaG9tZURpckNhY2hlW2hvbWVEaXJDYWNoZUtleV0gPSBob21lZGlyKCk7XG4gICAgcmV0dXJuIGhvbWVEaXJDYWNoZVtob21lRGlyQ2FjaGVLZXldO1xufTtcbiIsImV4cG9ydCBjb25zdCBFTlZfUFJPRklMRSA9IFwiQVdTX1BST0ZJTEVcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1BST0ZJTEUgPSBcImRlZmF1bHRcIjtcbmV4cG9ydCBjb25zdCBnZXRQcm9maWxlTmFtZSA9IChpbml0KSA9PiBpbml0LnByb2ZpbGUgfHwgcHJvY2Vzcy5lbnZbRU5WX1BST0ZJTEVdIHx8IERFRkFVTFRfUFJPRklMRTtcbiIsImltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tIFwiY3J5cHRvXCI7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGdldEhvbWVEaXIgfSBmcm9tIFwiLi9nZXRIb21lRGlyXCI7XG5leHBvcnQgY29uc3QgZ2V0U1NPVG9rZW5GaWxlcGF0aCA9IChpZCkgPT4ge1xuICAgIGNvbnN0IGhhc2hlciA9IGNyZWF0ZUhhc2goXCJzaGExXCIpO1xuICAgIGNvbnN0IGNhY2hlTmFtZSA9IGhhc2hlci51cGRhdGUoaWQpLmRpZ2VzdChcImhleFwiKTtcbiAgICByZXR1cm4gam9pbihnZXRIb21lRGlyKCksIFwiLmF3c1wiLCBcInNzb1wiLCBcImNhY2hlXCIsIGAke2NhY2hlTmFtZX0uanNvbmApO1xufTtcbiIsImltcG9ydCB7IHByb21pc2VzIGFzIGZzUHJvbWlzZXMgfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IGdldFNTT1Rva2VuRmlsZXBhdGggfSBmcm9tIFwiLi9nZXRTU09Ub2tlbkZpbGVwYXRoXCI7XG5jb25zdCB7IHJlYWRGaWxlIH0gPSBmc1Byb21pc2VzO1xuZXhwb3J0IGNvbnN0IGdldFNTT1Rva2VuRnJvbUZpbGUgPSBhc3luYyAoaWQpID0+IHtcbiAgICBjb25zdCBzc29Ub2tlbkZpbGVwYXRoID0gZ2V0U1NPVG9rZW5GaWxlcGF0aChpZCk7XG4gICAgY29uc3Qgc3NvVG9rZW5UZXh0ID0gYXdhaXQgcmVhZEZpbGUoc3NvVG9rZW5GaWxlcGF0aCwgXCJ1dGY4XCIpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHNzb1Rva2VuVGV4dCk7XG59O1xuIiwiaW1wb3J0IHsgSW5pU2VjdGlvblR5cGUgfSBmcm9tIFwiQHNtaXRoeS90eXBlc1wiO1xuaW1wb3J0IHsgQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IgfSBmcm9tIFwiLi9sb2FkU2hhcmVkQ29uZmlnRmlsZXNcIjtcbmV4cG9ydCBjb25zdCBnZXRDb25maWdEYXRhID0gKGRhdGEpID0+IE9iamVjdC5lbnRyaWVzKGRhdGEpXG4gICAgLmZpbHRlcigoW2tleV0pID0+IHtcbiAgICBjb25zdCBpbmRleE9mU2VwYXJhdG9yID0ga2V5LmluZGV4T2YoQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpO1xuICAgIGlmIChpbmRleE9mU2VwYXJhdG9yID09PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QudmFsdWVzKEluaVNlY3Rpb25UeXBlKS5pbmNsdWRlcyhrZXkuc3Vic3RyaW5nKDAsIGluZGV4T2ZTZXBhcmF0b3IpKTtcbn0pXG4gICAgLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBjb25zdCBpbmRleE9mU2VwYXJhdG9yID0ga2V5LmluZGV4T2YoQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpO1xuICAgIGNvbnN0IHVwZGF0ZWRLZXkgPSBrZXkuc3Vic3RyaW5nKDAsIGluZGV4T2ZTZXBhcmF0b3IpID09PSBJbmlTZWN0aW9uVHlwZS5QUk9GSUxFID8ga2V5LnN1YnN0cmluZyhpbmRleE9mU2VwYXJhdG9yICsgMSkgOiBrZXk7XG4gICAgYWNjW3VwZGF0ZWRLZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGFjYztcbn0sIHtcbiAgICAuLi4oZGF0YS5kZWZhdWx0ICYmIHsgZGVmYXVsdDogZGF0YS5kZWZhdWx0IH0pLFxufSk7XG4iLCJpbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGdldEhvbWVEaXIgfSBmcm9tIFwiLi9nZXRIb21lRGlyXCI7XG5leHBvcnQgY29uc3QgRU5WX0NPTkZJR19QQVRIID0gXCJBV1NfQ09ORklHX0ZJTEVcIjtcbmV4cG9ydCBjb25zdCBnZXRDb25maWdGaWxlcGF0aCA9ICgpID0+IHByb2Nlc3MuZW52W0VOVl9DT05GSUdfUEFUSF0gfHwgam9pbihnZXRIb21lRGlyKCksIFwiLmF3c1wiLCBcImNvbmZpZ1wiKTtcbiIsImltcG9ydCB7IGpvaW4gfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgZ2V0SG9tZURpciB9IGZyb20gXCIuL2dldEhvbWVEaXJcIjtcbmV4cG9ydCBjb25zdCBFTlZfQ1JFREVOVElBTFNfUEFUSCA9IFwiQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFXCI7XG5leHBvcnQgY29uc3QgZ2V0Q3JlZGVudGlhbHNGaWxlcGF0aCA9ICgpID0+IHByb2Nlc3MuZW52W0VOVl9DUkVERU5USUFMU19QQVRIXSB8fCBqb2luKGdldEhvbWVEaXIoKSwgXCIuYXdzXCIsIFwiY3JlZGVudGlhbHNcIik7XG4iLCJpbXBvcnQgeyBJbmlTZWN0aW9uVHlwZSB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5pbXBvcnQgeyBDT05GSUdfUFJFRklYX1NFUEFSQVRPUiB9IGZyb20gXCIuL2xvYWRTaGFyZWRDb25maWdGaWxlc1wiO1xuY29uc3QgcHJlZml4S2V5UmVnZXggPSAvXihbXFx3LV0rKVxccyhbXCInXSk/KFtcXHctQFxcK1xcLiU6L10rKVxcMiQvO1xuY29uc3QgcHJvZmlsZU5hbWVCbG9ja0xpc3QgPSBbXCJfX3Byb3RvX19cIiwgXCJwcm9maWxlIF9fcHJvdG9fX1wiXTtcbmV4cG9ydCBjb25zdCBwYXJzZUluaSA9IChpbmlEYXRhKSA9PiB7XG4gICAgY29uc3QgbWFwID0ge307XG4gICAgbGV0IGN1cnJlbnRTZWN0aW9uO1xuICAgIGxldCBjdXJyZW50U3ViU2VjdGlvbjtcbiAgICBmb3IgKGNvbnN0IGluaUxpbmUgb2YgaW5pRGF0YS5zcGxpdCgvXFxyP1xcbi8pKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRMaW5lID0gaW5pTGluZS5zcGxpdCgvKF58XFxzKVs7I10vKVswXS50cmltKCk7XG4gICAgICAgIGNvbnN0IGlzU2VjdGlvbiA9IHRyaW1tZWRMaW5lWzBdID09PSBcIltcIiAmJiB0cmltbWVkTGluZVt0cmltbWVkTGluZS5sZW5ndGggLSAxXSA9PT0gXCJdXCI7XG4gICAgICAgIGlmIChpc1NlY3Rpb24pIHtcbiAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY3VycmVudFN1YlNlY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uTmFtZSA9IHRyaW1tZWRMaW5lLnN1YnN0cmluZygxLCB0cmltbWVkTGluZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBwcmVmaXhLZXlSZWdleC5leGVjKHNlY3Rpb25OYW1lKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgWywgcHJlZml4LCAsIG5hbWVdID0gbWF0Y2hlcztcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhJbmlTZWN0aW9uVHlwZSkuaW5jbHVkZXMocHJlZml4KSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VjdGlvbiA9IFtwcmVmaXgsIG5hbWVdLmpvaW4oQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uID0gc2VjdGlvbk5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvZmlsZU5hbWVCbG9ja0xpc3QuaW5jbHVkZXMoc2VjdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGb3VuZCBpbnZhbGlkIHByb2ZpbGUgbmFtZSBcIiR7c2VjdGlvbk5hbWV9XCJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50U2VjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgaW5kZXhPZkVxdWFsc1NpZ24gPSB0cmltbWVkTGluZS5pbmRleE9mKFwiPVwiKTtcbiAgICAgICAgICAgIGlmICghWzAsIC0xXS5pbmNsdWRlcyhpbmRleE9mRXF1YWxzU2lnbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbbmFtZSwgdmFsdWVdID0gW1xuICAgICAgICAgICAgICAgICAgICB0cmltbWVkTGluZS5zdWJzdHJpbmcoMCwgaW5kZXhPZkVxdWFsc1NpZ24pLnRyaW0oKSxcbiAgICAgICAgICAgICAgICAgICAgdHJpbW1lZExpbmUuc3Vic3RyaW5nKGluZGV4T2ZFcXVhbHNTaWduICsgMSkudHJpbSgpLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdWJTZWN0aW9uID0gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U3ViU2VjdGlvbiAmJiBpbmlMaW5lLnRyaW1TdGFydCgpID09PSBpbmlMaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViU2VjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXBbY3VycmVudFNlY3Rpb25dID0gbWFwW2N1cnJlbnRTZWN0aW9uXSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gY3VycmVudFN1YlNlY3Rpb24gPyBbY3VycmVudFN1YlNlY3Rpb24sIG5hbWVdLmpvaW4oQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpIDogbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgbWFwW2N1cnJlbnRTZWN0aW9uXVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG59O1xuIiwiaW1wb3J0IHsgcHJvbWlzZXMgYXMgZnNQcm9taXNlcyB9IGZyb20gXCJmc1wiO1xuY29uc3QgeyByZWFkRmlsZSB9ID0gZnNQcm9taXNlcztcbmNvbnN0IGZpbGVQcm9taXNlc0hhc2ggPSB7fTtcbmV4cG9ydCBjb25zdCBzbHVycEZpbGUgPSAocGF0aCwgb3B0aW9ucykgPT4ge1xuICAgIGlmICghZmlsZVByb21pc2VzSGFzaFtwYXRoXSB8fCBvcHRpb25zPy5pZ25vcmVDYWNoZSkge1xuICAgICAgICBmaWxlUHJvbWlzZXNIYXNoW3BhdGhdID0gcmVhZEZpbGUocGF0aCwgXCJ1dGY4XCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZVByb21pc2VzSGFzaFtwYXRoXTtcbn07XG4iLCJpbXBvcnQgeyBnZXRDb25maWdEYXRhIH0gZnJvbSBcIi4vZ2V0Q29uZmlnRGF0YVwiO1xuaW1wb3J0IHsgZ2V0Q29uZmlnRmlsZXBhdGggfSBmcm9tIFwiLi9nZXRDb25maWdGaWxlcGF0aFwiO1xuaW1wb3J0IHsgZ2V0Q3JlZGVudGlhbHNGaWxlcGF0aCB9IGZyb20gXCIuL2dldENyZWRlbnRpYWxzRmlsZXBhdGhcIjtcbmltcG9ydCB7IHBhcnNlSW5pIH0gZnJvbSBcIi4vcGFyc2VJbmlcIjtcbmltcG9ydCB7IHNsdXJwRmlsZSB9IGZyb20gXCIuL3NsdXJwRmlsZVwiO1xuY29uc3Qgc3dhbGxvd0Vycm9yID0gKCkgPT4gKHt9KTtcbmV4cG9ydCBjb25zdCBDT05GSUdfUFJFRklYX1NFUEFSQVRPUiA9IFwiLlwiO1xuZXhwb3J0IGNvbnN0IGxvYWRTaGFyZWRDb25maWdGaWxlcyA9IGFzeW5jIChpbml0ID0ge30pID0+IHtcbiAgICBjb25zdCB7IGZpbGVwYXRoID0gZ2V0Q3JlZGVudGlhbHNGaWxlcGF0aCgpLCBjb25maWdGaWxlcGF0aCA9IGdldENvbmZpZ0ZpbGVwYXRoKCkgfSA9IGluaXQ7XG4gICAgY29uc3QgcGFyc2VkRmlsZXMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHNsdXJwRmlsZShjb25maWdGaWxlcGF0aCwge1xuICAgICAgICAgICAgaWdub3JlQ2FjaGU6IGluaXQuaWdub3JlQ2FjaGUsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihwYXJzZUluaSlcbiAgICAgICAgICAgIC50aGVuKGdldENvbmZpZ0RhdGEpXG4gICAgICAgICAgICAuY2F0Y2goc3dhbGxvd0Vycm9yKSxcbiAgICAgICAgc2x1cnBGaWxlKGZpbGVwYXRoLCB7XG4gICAgICAgICAgICBpZ25vcmVDYWNoZTogaW5pdC5pZ25vcmVDYWNoZSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHBhcnNlSW5pKVxuICAgICAgICAgICAgLmNhdGNoKHN3YWxsb3dFcnJvciksXG4gICAgXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZmlnRmlsZTogcGFyc2VkRmlsZXNbMF0sXG4gICAgICAgIGNyZWRlbnRpYWxzRmlsZTogcGFyc2VkRmlsZXNbMV0sXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBJbmlTZWN0aW9uVHlwZSB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5pbXBvcnQgeyBDT05GSUdfUFJFRklYX1NFUEFSQVRPUiB9IGZyb20gXCIuL2xvYWRTaGFyZWRDb25maWdGaWxlc1wiO1xuZXhwb3J0IGNvbnN0IGdldFNzb1Nlc3Npb25EYXRhID0gKGRhdGEpID0+IE9iamVjdC5lbnRyaWVzKGRhdGEpXG4gICAgLmZpbHRlcigoW2tleV0pID0+IGtleS5zdGFydHNXaXRoKEluaVNlY3Rpb25UeXBlLlNTT19TRVNTSU9OICsgQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpKVxuICAgIC5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoeyAuLi5hY2MsIFtrZXkuc3BsaXQoQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpWzFdXTogdmFsdWUgfSksIHt9KTtcbiIsImltcG9ydCB7IGdldENvbmZpZ0ZpbGVwYXRoIH0gZnJvbSBcIi4vZ2V0Q29uZmlnRmlsZXBhdGhcIjtcbmltcG9ydCB7IGdldFNzb1Nlc3Npb25EYXRhIH0gZnJvbSBcIi4vZ2V0U3NvU2Vzc2lvbkRhdGFcIjtcbmltcG9ydCB7IHBhcnNlSW5pIH0gZnJvbSBcIi4vcGFyc2VJbmlcIjtcbmltcG9ydCB7IHNsdXJwRmlsZSB9IGZyb20gXCIuL3NsdXJwRmlsZVwiO1xuY29uc3Qgc3dhbGxvd0Vycm9yID0gKCkgPT4gKHt9KTtcbmV4cG9ydCBjb25zdCBsb2FkU3NvU2Vzc2lvbkRhdGEgPSBhc3luYyAoaW5pdCA9IHt9KSA9PiBzbHVycEZpbGUoaW5pdC5jb25maWdGaWxlcGF0aCA/PyBnZXRDb25maWdGaWxlcGF0aCgpKVxuICAgIC50aGVuKHBhcnNlSW5pKVxuICAgIC50aGVuKGdldFNzb1Nlc3Npb25EYXRhKVxuICAgIC5jYXRjaChzd2FsbG93RXJyb3IpO1xuIiwiaW1wb3J0IHsgbG9hZFNoYXJlZENvbmZpZ0ZpbGVzIH0gZnJvbSBcIi4vbG9hZFNoYXJlZENvbmZpZ0ZpbGVzXCI7XG5pbXBvcnQgeyBtZXJnZUNvbmZpZ0ZpbGVzIH0gZnJvbSBcIi4vbWVyZ2VDb25maWdGaWxlc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlS25vd25GaWxlcyA9IGFzeW5jIChpbml0KSA9PiB7XG4gICAgY29uc3QgcGFyc2VkRmlsZXMgPSBhd2FpdCBsb2FkU2hhcmVkQ29uZmlnRmlsZXMoaW5pdCk7XG4gICAgcmV0dXJuIG1lcmdlQ29uZmlnRmlsZXMocGFyc2VkRmlsZXMuY29uZmlnRmlsZSwgcGFyc2VkRmlsZXMuY3JlZGVudGlhbHNGaWxlKTtcbn07XG4iLCJleHBvcnQgY29uc3QgbWVyZ2VDb25maWdGaWxlcyA9ICguLi5maWxlcykgPT4ge1xuICAgIGNvbnN0IG1lcmdlZCA9IHt9O1xuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlc10gb2YgT2JqZWN0LmVudHJpZXMoZmlsZSkpIHtcbiAgICAgICAgICAgIGlmIChtZXJnZWRba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihtZXJnZWRba2V5XSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lcmdlZFtrZXldID0gdmFsdWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWQ7XG59O1xuIiwiZXhwb3J0IGNsYXNzIE5vT3BMb2dnZXIge1xuICAgIHRyYWNlKCkgeyB9XG4gICAgZGVidWcoKSB7IH1cbiAgICBpbmZvKCkgeyB9XG4gICAgd2FybigpIHsgfVxuICAgIGVycm9yKCkgeyB9XG59XG4iLCJjb25zdCBnZXRBbGxBbGlhc2VzID0gKG5hbWUsIGFsaWFzZXMpID0+IHtcbiAgICBjb25zdCBfYWxpYXNlcyA9IFtdO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICAgIF9hbGlhc2VzLnB1c2gobmFtZSk7XG4gICAgfVxuICAgIGlmIChhbGlhc2VzKSB7XG4gICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xuICAgICAgICAgICAgX2FsaWFzZXMucHVzaChhbGlhcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9hbGlhc2VzO1xufTtcbmNvbnN0IGdldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXMgPSAobmFtZSwgYWxpYXNlcykgPT4ge1xuICAgIHJldHVybiBgJHtuYW1lIHx8IFwiYW5vbnltb3VzXCJ9JHthbGlhc2VzICYmIGFsaWFzZXMubGVuZ3RoID4gMCA/IGAgKGEuay5hLiAke2FsaWFzZXMuam9pbihcIixcIil9KWAgOiBcIlwifWA7XG59O1xuZXhwb3J0IGNvbnN0IGNvbnN0cnVjdFN0YWNrID0gKCkgPT4ge1xuICAgIGxldCBhYnNvbHV0ZUVudHJpZXMgPSBbXTtcbiAgICBsZXQgcmVsYXRpdmVFbnRyaWVzID0gW107XG4gICAgbGV0IGlkZW50aWZ5T25SZXNvbHZlID0gZmFsc2U7XG4gICAgY29uc3QgZW50cmllc05hbWVTZXQgPSBuZXcgU2V0KCk7XG4gICAgY29uc3Qgc29ydCA9IChlbnRyaWVzKSA9PiBlbnRyaWVzLnNvcnQoKGEsIGIpID0+IHN0ZXBXZWlnaHRzW2Iuc3RlcF0gLSBzdGVwV2VpZ2h0c1thLnN0ZXBdIHx8XG4gICAgICAgIHByaW9yaXR5V2VpZ2h0c1tiLnByaW9yaXR5IHx8IFwibm9ybWFsXCJdIC0gcHJpb3JpdHlXZWlnaHRzW2EucHJpb3JpdHkgfHwgXCJub3JtYWxcIl0pO1xuICAgIGNvbnN0IHJlbW92ZUJ5TmFtZSA9ICh0b1JlbW92ZSkgPT4ge1xuICAgICAgICBsZXQgaXNSZW1vdmVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGZpbHRlckNiID0gKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhbGlhc2VzID0gZ2V0QWxsQWxpYXNlcyhlbnRyeS5uYW1lLCBlbnRyeS5hbGlhc2VzKTtcbiAgICAgICAgICAgIGlmIChhbGlhc2VzLmluY2x1ZGVzKHRvUmVtb3ZlKSkge1xuICAgICAgICAgICAgICAgIGlzUmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJpZXNOYW1lU2V0LmRlbGV0ZShhbGlhcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBhYnNvbHV0ZUVudHJpZXMgPSBhYnNvbHV0ZUVudHJpZXMuZmlsdGVyKGZpbHRlckNiKTtcbiAgICAgICAgcmVsYXRpdmVFbnRyaWVzID0gcmVsYXRpdmVFbnRyaWVzLmZpbHRlcihmaWx0ZXJDYik7XG4gICAgICAgIHJldHVybiBpc1JlbW92ZWQ7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVCeVJlZmVyZW5jZSA9ICh0b1JlbW92ZSkgPT4ge1xuICAgICAgICBsZXQgaXNSZW1vdmVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGZpbHRlckNiID0gKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBpZiAoZW50cnkubWlkZGxld2FyZSA9PT0gdG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgICBpc1JlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgZ2V0QWxsQWxpYXNlcyhlbnRyeS5uYW1lLCBlbnRyeS5hbGlhc2VzKSkge1xuICAgICAgICAgICAgICAgICAgICBlbnRyaWVzTmFtZVNldC5kZWxldGUoYWxpYXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgYWJzb2x1dGVFbnRyaWVzID0gYWJzb2x1dGVFbnRyaWVzLmZpbHRlcihmaWx0ZXJDYik7XG4gICAgICAgIHJlbGF0aXZlRW50cmllcyA9IHJlbGF0aXZlRW50cmllcy5maWx0ZXIoZmlsdGVyQ2IpO1xuICAgICAgICByZXR1cm4gaXNSZW1vdmVkO1xuICAgIH07XG4gICAgY29uc3QgY2xvbmVUbyA9ICh0b1N0YWNrKSA9PiB7XG4gICAgICAgIGFic29sdXRlRW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgdG9TdGFjay5hZGQoZW50cnkubWlkZGxld2FyZSwgeyAuLi5lbnRyeSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbGF0aXZlRW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgdG9TdGFjay5hZGRSZWxhdGl2ZVRvKGVudHJ5Lm1pZGRsZXdhcmUsIHsgLi4uZW50cnkgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0b1N0YWNrLmlkZW50aWZ5T25SZXNvbHZlPy4oc3RhY2suaWRlbnRpZnlPblJlc29sdmUoKSk7XG4gICAgICAgIHJldHVybiB0b1N0YWNrO1xuICAgIH07XG4gICAgY29uc3QgZXhwYW5kUmVsYXRpdmVNaWRkbGV3YXJlTGlzdCA9IChmcm9tKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4cGFuZGVkTWlkZGxld2FyZUxpc3QgPSBbXTtcbiAgICAgICAgZnJvbS5iZWZvcmUuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGlmIChlbnRyeS5iZWZvcmUubGVuZ3RoID09PSAwICYmIGVudHJ5LmFmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGV4cGFuZGVkTWlkZGxld2FyZUxpc3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHBhbmRlZE1pZGRsZXdhcmVMaXN0LnB1c2goLi4uZXhwYW5kUmVsYXRpdmVNaWRkbGV3YXJlTGlzdChlbnRyeSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZXhwYW5kZWRNaWRkbGV3YXJlTGlzdC5wdXNoKGZyb20pO1xuICAgICAgICBmcm9tLmFmdGVyLnJldmVyc2UoKS5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVudHJ5LmJlZm9yZS5sZW5ndGggPT09IDAgJiYgZW50cnkuYWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZXhwYW5kZWRNaWRkbGV3YXJlTGlzdC5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4cGFuZGVkTWlkZGxld2FyZUxpc3QucHVzaCguLi5leHBhbmRSZWxhdGl2ZU1pZGRsZXdhcmVMaXN0KGVudHJ5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZXhwYW5kZWRNaWRkbGV3YXJlTGlzdDtcbiAgICB9O1xuICAgIGNvbnN0IGdldE1pZGRsZXdhcmVMaXN0ID0gKGRlYnVnID0gZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEFic29sdXRlRW50cmllcyA9IFtdO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkUmVsYXRpdmVFbnRyaWVzID0gW107XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRFbnRyaWVzTmFtZU1hcCA9IHt9O1xuICAgICAgICBhYnNvbHV0ZUVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRFbnRyeSA9IHtcbiAgICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgICBiZWZvcmU6IFtdLFxuICAgICAgICAgICAgICAgIGFmdGVyOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGdldEFsbEFsaWFzZXMobm9ybWFsaXplZEVudHJ5Lm5hbWUsIG5vcm1hbGl6ZWRFbnRyeS5hbGlhc2VzKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRFbnRyaWVzTmFtZU1hcFthbGlhc10gPSBub3JtYWxpemVkRW50cnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub3JtYWxpemVkQWJzb2x1dGVFbnRyaWVzLnB1c2gobm9ybWFsaXplZEVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbGF0aXZlRW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEVudHJ5ID0ge1xuICAgICAgICAgICAgICAgIC4uLmVudHJ5LFxuICAgICAgICAgICAgICAgIGJlZm9yZTogW10sXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgZ2V0QWxsQWxpYXNlcyhub3JtYWxpemVkRW50cnkubmFtZSwgbm9ybWFsaXplZEVudHJ5LmFsaWFzZXMpKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZEVudHJpZXNOYW1lTWFwW2FsaWFzXSA9IG5vcm1hbGl6ZWRFbnRyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vcm1hbGl6ZWRSZWxhdGl2ZUVudHJpZXMucHVzaChub3JtYWxpemVkRW50cnkpO1xuICAgICAgICB9KTtcbiAgICAgICAgbm9ybWFsaXplZFJlbGF0aXZlRW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVudHJ5LnRvTWlkZGxld2FyZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvTWlkZGxld2FyZSA9IG5vcm1hbGl6ZWRFbnRyaWVzTmFtZU1hcFtlbnRyeS50b01pZGRsZXdhcmVdO1xuICAgICAgICAgICAgICAgIGlmICh0b01pZGRsZXdhcmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZW50cnkudG9NaWRkbGV3YXJlfSBpcyBub3QgZm91bmQgd2hlbiBhZGRpbmcgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzKGVudHJ5Lm5hbWUsIGVudHJ5LmFsaWFzZXMpfSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBtaWRkbGV3YXJlICR7ZW50cnkucmVsYXRpb259ICR7ZW50cnkudG9NaWRkbGV3YXJlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkucmVsYXRpb24gPT09IFwiYWZ0ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICB0b01pZGRsZXdhcmUuYWZ0ZXIucHVzaChlbnRyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5yZWxhdGlvbiA9PT0gXCJiZWZvcmVcIikge1xuICAgICAgICAgICAgICAgICAgICB0b01pZGRsZXdhcmUuYmVmb3JlLnB1c2goZW50cnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1haW5DaGFpbiA9IHNvcnQobm9ybWFsaXplZEFic29sdXRlRW50cmllcylcbiAgICAgICAgICAgIC5tYXAoZXhwYW5kUmVsYXRpdmVNaWRkbGV3YXJlTGlzdClcbiAgICAgICAgICAgIC5yZWR1Y2UoKHdob2xlTGlzdCwgZXhwYW5kZWRNaWRkbGV3YXJlTGlzdCkgPT4ge1xuICAgICAgICAgICAgd2hvbGVMaXN0LnB1c2goLi4uZXhwYW5kZWRNaWRkbGV3YXJlTGlzdCk7XG4gICAgICAgICAgICByZXR1cm4gd2hvbGVMaXN0O1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiBtYWluQ2hhaW47XG4gICAgfTtcbiAgICBjb25zdCBzdGFjayA9IHtcbiAgICAgICAgYWRkOiAobWlkZGxld2FyZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG5hbWUsIG92ZXJyaWRlLCBhbGlhc2VzOiBfYWxpYXNlcyB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgICAgIHN0ZXA6IFwiaW5pdGlhbGl6ZVwiLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiBcIm5vcm1hbFwiLFxuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmUsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBhbGlhc2VzID0gZ2V0QWxsQWxpYXNlcyhuYW1lLCBfYWxpYXNlcyk7XG4gICAgICAgICAgICBpZiAoYWxpYXNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFsaWFzZXMuc29tZSgoYWxpYXMpID0+IGVudHJpZXNOYW1lU2V0LmhhcyhhbGlhcykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3ZlcnJpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBtaWRkbGV3YXJlIG5hbWUgJyR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyhuYW1lLCBfYWxpYXNlcyl9J2ApO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvT3ZlcnJpZGVJbmRleCA9IGFic29sdXRlRW50cmllcy5maW5kSW5kZXgoKGVudHJ5KSA9PiBlbnRyeS5uYW1lID09PSBhbGlhcyB8fCBlbnRyeS5hbGlhc2VzPy5zb21lKChhKSA9PiBhID09PSBhbGlhcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvT3ZlcnJpZGVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvT3ZlcnJpZGUgPSBhYnNvbHV0ZUVudHJpZXNbdG9PdmVycmlkZUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b092ZXJyaWRlLnN0ZXAgIT09IGVudHJ5LnN0ZXAgfHwgZW50cnkucHJpb3JpdHkgIT09IHRvT3ZlcnJpZGUucHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzKHRvT3ZlcnJpZGUubmFtZSwgdG9PdmVycmlkZS5hbGlhc2VzKX1cIiBtaWRkbGV3YXJlIHdpdGggYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3RvT3ZlcnJpZGUucHJpb3JpdHl9IHByaW9yaXR5IGluICR7dG9PdmVycmlkZS5zdGVwfSBzdGVwIGNhbm5vdCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGJlIG92ZXJyaWRkZW4gYnkgXCIke2dldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXMobmFtZSwgX2FsaWFzZXMpfVwiIG1pZGRsZXdhcmUgd2l0aCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7ZW50cnkucHJpb3JpdHl9IHByaW9yaXR5IGluICR7ZW50cnkuc3RlcH0gc3RlcC5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFic29sdXRlRW50cmllcy5zcGxpY2UodG9PdmVycmlkZUluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cmllc05hbWVTZXQuYWRkKGFsaWFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhYnNvbHV0ZUVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZFJlbGF0aXZlVG86IChtaWRkbGV3YXJlLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG5hbWUsIG92ZXJyaWRlLCBhbGlhc2VzOiBfYWxpYXNlcyB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmUsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBhbGlhc2VzID0gZ2V0QWxsQWxpYXNlcyhuYW1lLCBfYWxpYXNlcyk7XG4gICAgICAgICAgICBpZiAoYWxpYXNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFsaWFzZXMuc29tZSgoYWxpYXMpID0+IGVudHJpZXNOYW1lU2V0LmhhcyhhbGlhcykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3ZlcnJpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBtaWRkbGV3YXJlIG5hbWUgJyR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyhuYW1lLCBfYWxpYXNlcyl9J2ApO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvT3ZlcnJpZGVJbmRleCA9IHJlbGF0aXZlRW50cmllcy5maW5kSW5kZXgoKGVudHJ5KSA9PiBlbnRyeS5uYW1lID09PSBhbGlhcyB8fCBlbnRyeS5hbGlhc2VzPy5zb21lKChhKSA9PiBhID09PSBhbGlhcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvT3ZlcnJpZGVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvT3ZlcnJpZGUgPSByZWxhdGl2ZUVudHJpZXNbdG9PdmVycmlkZUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b092ZXJyaWRlLnRvTWlkZGxld2FyZSAhPT0gZW50cnkudG9NaWRkbGV3YXJlIHx8IHRvT3ZlcnJpZGUucmVsYXRpb24gIT09IGVudHJ5LnJlbGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyh0b092ZXJyaWRlLm5hbWUsIHRvT3ZlcnJpZGUuYWxpYXNlcyl9XCIgbWlkZGxld2FyZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dG9PdmVycmlkZS5yZWxhdGlvbn0gXCIke3RvT3ZlcnJpZGUudG9NaWRkbGV3YXJlfVwiIG1pZGRsZXdhcmUgY2Fubm90IGJlIG92ZXJyaWRkZW4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBieSBcIiR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyhuYW1lLCBfYWxpYXNlcyl9XCIgbWlkZGxld2FyZSAke2VudHJ5LnJlbGF0aW9ufSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiJHtlbnRyeS50b01pZGRsZXdhcmV9XCIgbWlkZGxld2FyZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlRW50cmllcy5zcGxpY2UodG9PdmVycmlkZUluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cmllc05hbWVTZXQuYWRkKGFsaWFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWxhdGl2ZUVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb25lOiAoKSA9PiBjbG9uZVRvKGNvbnN0cnVjdFN0YWNrKCkpLFxuICAgICAgICB1c2U6IChwbHVnaW4pID0+IHtcbiAgICAgICAgICAgIHBsdWdpbi5hcHBseVRvU3RhY2soc3RhY2spO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmU6ICh0b1JlbW92ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0b1JlbW92ZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlQnlOYW1lKHRvUmVtb3ZlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlQnlSZWZlcmVuY2UodG9SZW1vdmUpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVCeVRhZzogKHRvUmVtb3ZlKSA9PiB7XG4gICAgICAgICAgICBsZXQgaXNSZW1vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJDYiA9IChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGFncywgbmFtZSwgYWxpYXNlczogX2FsaWFzZXMgfSA9IGVudHJ5O1xuICAgICAgICAgICAgICAgIGlmICh0YWdzICYmIHRhZ3MuaW5jbHVkZXModG9SZW1vdmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsaWFzZXMgPSBnZXRBbGxBbGlhc2VzKG5hbWUsIF9hbGlhc2VzKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzTmFtZVNldC5kZWxldGUoYWxpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlzUmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWJzb2x1dGVFbnRyaWVzID0gYWJzb2x1dGVFbnRyaWVzLmZpbHRlcihmaWx0ZXJDYik7XG4gICAgICAgICAgICByZWxhdGl2ZUVudHJpZXMgPSByZWxhdGl2ZUVudHJpZXMuZmlsdGVyKGZpbHRlckNiKTtcbiAgICAgICAgICAgIHJldHVybiBpc1JlbW92ZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmNhdDogKGZyb20pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVG8oY29uc3RydWN0U3RhY2soKSk7XG4gICAgICAgICAgICBjbG9uZWQudXNlKGZyb20pO1xuICAgICAgICAgICAgY2xvbmVkLmlkZW50aWZ5T25SZXNvbHZlKGlkZW50aWZ5T25SZXNvbHZlIHx8IGNsb25lZC5pZGVudGlmeU9uUmVzb2x2ZSgpIHx8IChmcm9tLmlkZW50aWZ5T25SZXNvbHZlPy4oKSA/PyBmYWxzZSkpO1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHlUb1N0YWNrOiBjbG9uZVRvLFxuICAgICAgICBpZGVudGlmeTogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdldE1pZGRsZXdhcmVMaXN0KHRydWUpLm1hcCgobXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGVwID0gbXcuc3RlcCA/P1xuICAgICAgICAgICAgICAgICAgICBtdy5yZWxhdGlvbiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBtdy50b01pZGRsZXdhcmU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXMobXcubmFtZSwgbXcuYWxpYXNlcykgKyBcIiAtIFwiICsgc3RlcDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBpZGVudGlmeU9uUmVzb2x2ZSh0b2dnbGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9nZ2xlID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgICAgICAgICBpZGVudGlmeU9uUmVzb2x2ZSA9IHRvZ2dsZTtcbiAgICAgICAgICAgIHJldHVybiBpZGVudGlmeU9uUmVzb2x2ZTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZTogKGhhbmRsZXIsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWlkZGxld2FyZSBvZiBnZXRNaWRkbGV3YXJlTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcCgoZW50cnkpID0+IGVudHJ5Lm1pZGRsZXdhcmUpXG4gICAgICAgICAgICAgICAgLnJldmVyc2UoKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBtaWRkbGV3YXJlKGhhbmRsZXIsIGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlkZW50aWZ5T25SZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhY2suaWRlbnRpZnkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlcjtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBzdGFjaztcbn07XG5jb25zdCBzdGVwV2VpZ2h0cyA9IHtcbiAgICBpbml0aWFsaXplOiA1LFxuICAgIHNlcmlhbGl6ZTogNCxcbiAgICBidWlsZDogMyxcbiAgICBmaW5hbGl6ZVJlcXVlc3Q6IDIsXG4gICAgZGVzZXJpYWxpemU6IDEsXG59O1xuY29uc3QgcHJpb3JpdHlXZWlnaHRzID0ge1xuICAgIGhpZ2g6IDMsXG4gICAgbm9ybWFsOiAyLFxuICAgIGxvdzogMSxcbn07XG4iLCJpbXBvcnQgeyBjb25zdHJ1Y3RTdGFjayB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtc3RhY2tcIjtcbmV4cG9ydCBjbGFzcyBDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjayA9IGNvbnN0cnVjdFN0YWNrKCk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIH1cbiAgICBzZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiLCBjYikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnNPckNiICE9PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zT3JDYiA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0eXBlb2Ygb3B0aW9uc09yQ2IgPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnNPckNiIDogY2I7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBjb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKHRoaXMubWlkZGxld2FyZVN0YWNrLCB0aGlzLmNvbmZpZywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgaGFuZGxlcihjb21tYW5kKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IGNhbGxiYWNrKG51bGwsIHJlc3VsdC5vdXRwdXQpLCAoZXJyKSA9PiBjYWxsYmFjayhlcnIpKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoY29tbWFuZCkudGhlbigocmVzdWx0KSA9PiByZXN1bHQub3V0cHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWcucmVxdWVzdEhhbmRsZXIuZGVzdHJveSlcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnJlcXVlc3RIYW5kbGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBVaW50OEFycmF5QmxvYkFkYXB0ZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXN0cmVhbVwiO1xuZXhwb3J0IGNvbnN0IGNvbGxlY3RCb2R5ID0gYXN5bmMgKHN0cmVhbUJvZHkgPSBuZXcgVWludDhBcnJheSgpLCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKHN0cmVhbUJvZHkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKHN0cmVhbUJvZHkpO1xuICAgIH1cbiAgICBpZiAoIXN0cmVhbUJvZHkpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXlCbG9iQWRhcHRlci5tdXRhdGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfVxuICAgIGNvbnN0IGZyb21Db250ZXh0ID0gY29udGV4dC5zdHJlYW1Db2xsZWN0b3Ioc3RyZWFtQm9keSk7XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXlCbG9iQWRhcHRlci5tdXRhdGUoYXdhaXQgZnJvbUNvbnRleHQpO1xufTtcbiIsImltcG9ydCB7IGNvbnN0cnVjdFN0YWNrIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1zdGFja1wiO1xuaW1wb3J0IHsgU01JVEhZX0NPTlRFWFRfS0VZIH0gZnJvbSBcIkBzbWl0aHkvdHlwZXNcIjtcbmV4cG9ydCBjbGFzcyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sgPSBjb25zdHJ1Y3RTdGFjaygpO1xuICAgIH1cbiAgICBzdGF0aWMgY2xhc3NCdWlsZGVyKCkge1xuICAgICAgICByZXR1cm4gbmV3IENsYXNzQnVpbGRlcigpO1xuICAgIH1cbiAgICByZXNvbHZlTWlkZGxld2FyZVdpdGhDb250ZXh0KGNsaWVudFN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zLCB7IG1pZGRsZXdhcmVGbiwgY2xpZW50TmFtZSwgY29tbWFuZE5hbWUsIGlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nLCBvdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2csIHNtaXRoeUNvbnRleHQsIGFkZGl0aW9uYWxDb250ZXh0LCBDb21tYW5kQ3RvciwgfSkge1xuICAgICAgICBmb3IgKGNvbnN0IG13IG9mIG1pZGRsZXdhcmVGbi5iaW5kKHRoaXMpKENvbW1hbmRDdG9yLCBjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShtdyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhY2sgPSBjbGllbnRTdGFjay5jb25jYXQodGhpcy5taWRkbGV3YXJlU3RhY2spO1xuICAgICAgICBjb25zdCB7IGxvZ2dlciB9ID0gY29uZmlndXJhdGlvbjtcbiAgICAgICAgY29uc3QgaGFuZGxlckV4ZWN1dGlvbkNvbnRleHQgPSB7XG4gICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICBjbGllbnROYW1lLFxuICAgICAgICAgICAgY29tbWFuZE5hbWUsXG4gICAgICAgICAgICBpbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyxcbiAgICAgICAgICAgIG91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyxcbiAgICAgICAgICAgIFtTTUlUSFlfQ09OVEVYVF9LRVldOiB7XG4gICAgICAgICAgICAgICAgLi4uc21pdGh5Q29udGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5hZGRpdGlvbmFsQ29udGV4dCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyByZXF1ZXN0SGFuZGxlciB9ID0gY29uZmlndXJhdGlvbjtcbiAgICAgICAgcmV0dXJuIHN0YWNrLnJlc29sdmUoKHJlcXVlc3QpID0+IHJlcXVlc3RIYW5kbGVyLmhhbmRsZShyZXF1ZXN0LnJlcXVlc3QsIG9wdGlvbnMgfHwge30pLCBoYW5kbGVyRXhlY3V0aW9uQ29udGV4dCk7XG4gICAgfVxufVxuY2xhc3MgQ2xhc3NCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5faW5pdCA9ICgpID0+IHsgfTtcbiAgICAgICAgdGhpcy5fZXAgPSB7fTtcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZUZuID0gKCkgPT4gW107XG4gICAgICAgIHRoaXMuX2NvbW1hbmROYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5fY2xpZW50TmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2FkZGl0aW9uYWxDb250ZXh0ID0ge307XG4gICAgICAgIHRoaXMuX3NtaXRoeUNvbnRleHQgPSB7fTtcbiAgICAgICAgdGhpcy5faW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAoXykgPT4gXztcbiAgICAgICAgdGhpcy5fb3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKF8pID0+IF87XG4gICAgICAgIHRoaXMuX3NlcmlhbGl6ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9kZXNlcmlhbGl6ZXIgPSBudWxsO1xuICAgIH1cbiAgICBpbml0KGNiKSB7XG4gICAgICAgIHRoaXMuX2luaXQgPSBjYjtcbiAgICB9XG4gICAgZXAoZW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fZXAgPSBlbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG0obWlkZGxld2FyZVN1cHBsaWVyKSB7XG4gICAgICAgIHRoaXMuX21pZGRsZXdhcmVGbiA9IG1pZGRsZXdhcmVTdXBwbGllcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHMoc2VydmljZSwgb3BlcmF0aW9uLCBzbWl0aHlDb250ZXh0ID0ge30pIHtcbiAgICAgICAgdGhpcy5fc21pdGh5Q29udGV4dCA9IHtcbiAgICAgICAgICAgIHNlcnZpY2UsXG4gICAgICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgICAgICAuLi5zbWl0aHlDb250ZXh0LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYyhhZGRpdGlvbmFsQ29udGV4dCA9IHt9KSB7XG4gICAgICAgIHRoaXMuX2FkZGl0aW9uYWxDb250ZXh0ID0gYWRkaXRpb25hbENvbnRleHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBuKGNsaWVudE5hbWUsIGNvbW1hbmROYW1lKSB7XG4gICAgICAgIHRoaXMuX2NsaWVudE5hbWUgPSBjbGllbnROYW1lO1xuICAgICAgICB0aGlzLl9jb21tYW5kTmFtZSA9IGNvbW1hbmROYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZihpbnB1dEZpbHRlciA9IChfKSA9PiBfLCBvdXRwdXRGaWx0ZXIgPSAoXykgPT4gXykge1xuICAgICAgICB0aGlzLl9pbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyA9IGlucHV0RmlsdGVyO1xuICAgICAgICB0aGlzLl9vdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPSBvdXRwdXRGaWx0ZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXIoc2VyaWFsaXplcikge1xuICAgICAgICB0aGlzLl9zZXJpYWxpemVyID0gc2VyaWFsaXplcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlKGRlc2VyaWFsaXplcikge1xuICAgICAgICB0aGlzLl9kZXNlcmlhbGl6ZXIgPSBkZXNlcmlhbGl6ZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBidWlsZCgpIHtcbiAgICAgICAgY29uc3QgY2xvc3VyZSA9IHRoaXM7XG4gICAgICAgIGxldCBDb21tYW5kUmVmO1xuICAgICAgICByZXR1cm4gKENvbW1hbmRSZWYgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICAgICAgICAgICAgc3RhdGljIGdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9zdXJlLl9lcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJpYWxpemUgPSBjbG9zdXJlLl9zZXJpYWxpemVyO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzZXJpYWxpemUgPSBjbG9zdXJlLl9kZXNlcmlhbGl6ZXI7XG4gICAgICAgICAgICAgICAgY2xvc3VyZS5faW5pdCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmVNaWRkbGV3YXJlKHN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZU1pZGRsZXdhcmVXaXRoQ29udGV4dChzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICBDb21tYW5kQ3RvcjogQ29tbWFuZFJlZixcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZuOiBjbG9zdXJlLl9taWRkbGV3YXJlRm4sXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudE5hbWU6IGNsb3N1cmUuX2NsaWVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmROYW1lOiBjbG9zdXJlLl9jb21tYW5kTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2c6IGNsb3N1cmUuX2lucHV0RmlsdGVyU2Vuc2l0aXZlTG9nLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2c6IGNsb3N1cmUuX291dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyxcbiAgICAgICAgICAgICAgICAgICAgc21pdGh5Q29udGV4dDogY2xvc3VyZS5fc21pdGh5Q29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbENvbnRleHQ6IGNsb3N1cmUuX2FkZGl0aW9uYWxDb250ZXh0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgU0VOU0lUSVZFX1NUUklORyA9IFwiKioqU2Vuc2l0aXZlSW5mb3JtYXRpb24qKipcIjtcbiIsImV4cG9ydCBjb25zdCBwYXJzZUJvb2xlYW4gPSAodmFsdWUpID0+IHtcbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgXCJ0cnVlXCI6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSBcImZhbHNlXCI6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBwYXJzZSBib29sZWFuIHZhbHVlIFwiJHt2YWx1ZX1cImApO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3QgZXhwZWN0Qm9vbGVhbiA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAwIHx8IHZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihzdGFja1RyYWNlV2FybmluZyhgRXhwZWN0ZWQgYm9vbGVhbiwgZ290ICR7dHlwZW9mIHZhbHVlfTogJHt2YWx1ZX1gKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IGxvd2VyID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGxvd2VyID09PSBcImZhbHNlXCIgfHwgbG93ZXIgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihzdGFja1RyYWNlV2FybmluZyhgRXhwZWN0ZWQgYm9vbGVhbiwgZ290ICR7dHlwZW9mIHZhbHVlfTogJHt2YWx1ZX1gKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyID09PSBcImZhbHNlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGJvb2xlYW4sIGdvdCAke3R5cGVvZiB2YWx1ZX06ICR7dmFsdWV9YCk7XG59O1xuZXhwb3J0IGNvbnN0IGV4cGVjdE51bWJlciA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHBhcnNlZCkpIHtcbiAgICAgICAgICAgIGlmIChTdHJpbmcocGFyc2VkKSAhPT0gU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKHN0YWNrVHJhY2VXYXJuaW5nKGBFeHBlY3RlZCBudW1iZXIgYnV0IG9ic2VydmVkIHN0cmluZzogJHt2YWx1ZX1gKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBudW1iZXIsIGdvdCAke3R5cGVvZiB2YWx1ZX06ICR7dmFsdWV9YCk7XG59O1xuY29uc3QgTUFYX0ZMT0FUID0gTWF0aC5jZWlsKDIgKiogMTI3ICogKDIgLSAyICoqIC0yMykpO1xuZXhwb3J0IGNvbnN0IGV4cGVjdEZsb2F0MzIgPSAodmFsdWUpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZCA9IGV4cGVjdE51bWJlcih2YWx1ZSk7XG4gICAgaWYgKGV4cGVjdGVkICE9PSB1bmRlZmluZWQgJiYgIU51bWJlci5pc05hTihleHBlY3RlZCkgJiYgZXhwZWN0ZWQgIT09IEluZmluaXR5ICYmIGV4cGVjdGVkICE9PSAtSW5maW5pdHkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGV4cGVjdGVkKSA+IE1BWF9GTE9BVCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgMzItYml0IGZsb2F0LCBnb3QgJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0ZWQ7XG59O1xuZXhwb3J0IGNvbnN0IGV4cGVjdExvbmcgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgIU51bWJlci5pc05hTih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBpbnRlZ2VyLCBnb3QgJHt0eXBlb2YgdmFsdWV9OiAke3ZhbHVlfWApO1xufTtcbmV4cG9ydCBjb25zdCBleHBlY3RJbnQgPSBleHBlY3RMb25nO1xuZXhwb3J0IGNvbnN0IGV4cGVjdEludDMyID0gKHZhbHVlKSA9PiBleHBlY3RTaXplZEludCh2YWx1ZSwgMzIpO1xuZXhwb3J0IGNvbnN0IGV4cGVjdFNob3J0ID0gKHZhbHVlKSA9PiBleHBlY3RTaXplZEludCh2YWx1ZSwgMTYpO1xuZXhwb3J0IGNvbnN0IGV4cGVjdEJ5dGUgPSAodmFsdWUpID0+IGV4cGVjdFNpemVkSW50KHZhbHVlLCA4KTtcbmNvbnN0IGV4cGVjdFNpemVkSW50ID0gKHZhbHVlLCBzaXplKSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBleHBlY3RMb25nKHZhbHVlKTtcbiAgICBpZiAoZXhwZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiBjYXN0SW50KGV4cGVjdGVkLCBzaXplKSAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgJHtzaXplfS1iaXQgaW50ZWdlciwgZ290ICR7dmFsdWV9YCk7XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RlZDtcbn07XG5jb25zdCBjYXN0SW50ID0gKHZhbHVlLCBzaXplKSA9PiB7XG4gICAgc3dpdGNoIChzaXplKSB7XG4gICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICByZXR1cm4gSW50MzJBcnJheS5vZih2YWx1ZSlbMF07XG4gICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICByZXR1cm4gSW50MTZBcnJheS5vZih2YWx1ZSlbMF07XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJldHVybiBJbnQ4QXJyYXkub2YodmFsdWUpWzBdO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3QgZXhwZWN0Tm9uTnVsbCA9ICh2YWx1ZSwgbG9jYXRpb24pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGEgbm9uLW51bGwgdmFsdWUgZm9yICR7bG9jYXRpb259YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGEgbm9uLW51bGwgdmFsdWVcIik7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5leHBvcnQgY29uc3QgZXhwZWN0T2JqZWN0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCByZWNlaXZlZFR5cGUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IFwiYXJyYXlcIiA6IHR5cGVvZiB2YWx1ZTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBvYmplY3QsIGdvdCAke3JlY2VpdmVkVHlwZX06ICR7dmFsdWV9YCk7XG59O1xuZXhwb3J0IGNvbnN0IGV4cGVjdFN0cmluZyA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoW1wiYm9vbGVhblwiLCBcIm51bWJlclwiLCBcImJpZ2ludFwiXS5pbmNsdWRlcyh0eXBlb2YgdmFsdWUpKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKHN0YWNrVHJhY2VXYXJuaW5nKGBFeHBlY3RlZCBzdHJpbmcsIGdvdCAke3R5cGVvZiB2YWx1ZX06ICR7dmFsdWV9YCkpO1xuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgc3RyaW5nLCBnb3QgJHt0eXBlb2YgdmFsdWV9OiAke3ZhbHVlfWApO1xufTtcbmV4cG9ydCBjb25zdCBleHBlY3RVbmlvbiA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGFzT2JqZWN0ID0gZXhwZWN0T2JqZWN0KHZhbHVlKTtcbiAgICBjb25zdCBzZXRLZXlzID0gT2JqZWN0LmVudHJpZXMoYXNPYmplY3QpXG4gICAgICAgIC5maWx0ZXIoKFssIHZdKSA9PiB2ICE9IG51bGwpXG4gICAgICAgIC5tYXAoKFtrXSkgPT4gayk7XG4gICAgaWYgKHNldEtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVuaW9ucyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgbm9uLW51bGwgbWVtYmVyLiBOb25lIHdlcmUgZm91bmQuYCk7XG4gICAgfVxuICAgIGlmIChzZXRLZXlzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5pb25zIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBub24tbnVsbCBtZW1iZXIuIEtleXMgJHtzZXRLZXlzfSB3ZXJlIG5vdCBudWxsLmApO1xuICAgIH1cbiAgICByZXR1cm4gYXNPYmplY3Q7XG59O1xuZXhwb3J0IGNvbnN0IHN0cmljdFBhcnNlRG91YmxlID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBleHBlY3ROdW1iZXIocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdE51bWJlcih2YWx1ZSk7XG59O1xuZXhwb3J0IGNvbnN0IHN0cmljdFBhcnNlRmxvYXQgPSBzdHJpY3RQYXJzZURvdWJsZTtcbmV4cG9ydCBjb25zdCBzdHJpY3RQYXJzZUZsb2F0MzIgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGV4cGVjdEZsb2F0MzIocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdEZsb2F0MzIodmFsdWUpO1xufTtcbmNvbnN0IE5VTUJFUl9SRUdFWCA9IC8oLT8oPzowfFsxLTldXFxkKikoPzpcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT8pfCgtP0luZmluaXR5KXwoTmFOKS9nO1xuY29uc3QgcGFyc2VOdW1iZXIgPSAodmFsdWUpID0+IHtcbiAgICBjb25zdCBtYXRjaGVzID0gdmFsdWUubWF0Y2goTlVNQkVSX1JFR0VYKTtcbiAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCB8fCBtYXRjaGVzWzBdLmxlbmd0aCAhPT0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHJlYWwgbnVtYmVyLCBnb3QgaW1wbGljaXQgTmFOYCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3QgbGltaXRlZFBhcnNlRG91YmxlID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0U3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdE51bWJlcih2YWx1ZSk7XG59O1xuZXhwb3J0IGNvbnN0IGhhbmRsZUZsb2F0ID0gbGltaXRlZFBhcnNlRG91YmxlO1xuZXhwb3J0IGNvbnN0IGxpbWl0ZWRQYXJzZUZsb2F0ID0gbGltaXRlZFBhcnNlRG91YmxlO1xuZXhwb3J0IGNvbnN0IGxpbWl0ZWRQYXJzZUZsb2F0MzIgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXRTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0RmxvYXQzMih2YWx1ZSk7XG59O1xuY29uc3QgcGFyc2VGbG9hdFN0cmluZyA9ICh2YWx1ZSkgPT4ge1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSBcIk5hTlwiOlxuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgY2FzZSBcIkluZmluaXR5XCI6XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICAgIGNhc2UgXCItSW5maW5pdHlcIjpcbiAgICAgICAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBwYXJzZSBmbG9hdCB2YWx1ZTogJHt2YWx1ZX1gKTtcbiAgICB9XG59O1xuZXhwb3J0IGNvbnN0IHN0cmljdFBhcnNlTG9uZyA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGV4cGVjdExvbmcocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdExvbmcodmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBzdHJpY3RQYXJzZUludCA9IHN0cmljdFBhcnNlTG9uZztcbmV4cG9ydCBjb25zdCBzdHJpY3RQYXJzZUludDMyID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZXhwZWN0SW50MzIocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdEludDMyKHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3Qgc3RyaWN0UGFyc2VTaG9ydCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGV4cGVjdFNob3J0KHBhcnNlTnVtYmVyKHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RTaG9ydCh2YWx1ZSk7XG59O1xuZXhwb3J0IGNvbnN0IHN0cmljdFBhcnNlQnl0ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGV4cGVjdEJ5dGUocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdEJ5dGUodmFsdWUpO1xufTtcbmNvbnN0IHN0YWNrVHJhY2VXYXJuaW5nID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gU3RyaW5nKG5ldyBUeXBlRXJyb3IobWVzc2FnZSkuc3RhY2sgfHwgbWVzc2FnZSlcbiAgICAgICAgLnNwbGl0KFwiXFxuXCIpXG4gICAgICAgIC5zbGljZSgwLCA1KVxuICAgICAgICAuZmlsdGVyKChzKSA9PiAhcy5pbmNsdWRlcyhcInN0YWNrVHJhY2VXYXJuaW5nXCIpKVxuICAgICAgICAuam9pbihcIlxcblwiKTtcbn07XG5leHBvcnQgY29uc3QgbG9nZ2VyID0ge1xuICAgIHdhcm46IGNvbnNvbGUud2Fybixcbn07XG4iLCJpbXBvcnQgeyBzdHJpY3RQYXJzZUJ5dGUsIHN0cmljdFBhcnNlRG91YmxlLCBzdHJpY3RQYXJzZUZsb2F0MzIsIHN0cmljdFBhcnNlU2hvcnQgfSBmcm9tIFwiLi9wYXJzZS11dGlsc1wiO1xuY29uc3QgREFZUyA9IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXTtcbmNvbnN0IE1PTlRIUyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9VdGNTdHJpbmcoZGF0ZSkge1xuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgY29uc3QgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgY29uc3QgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICBjb25zdCBkYXlPZk1vbnRoSW50ID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgY29uc3QgaG91cnNJbnQgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgY29uc3QgbWludXRlc0ludCA9IGRhdGUuZ2V0VVRDTWludXRlcygpO1xuICAgIGNvbnN0IHNlY29uZHNJbnQgPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgICBjb25zdCBkYXlPZk1vbnRoU3RyaW5nID0gZGF5T2ZNb250aEludCA8IDEwID8gYDAke2RheU9mTW9udGhJbnR9YCA6IGAke2RheU9mTW9udGhJbnR9YDtcbiAgICBjb25zdCBob3Vyc1N0cmluZyA9IGhvdXJzSW50IDwgMTAgPyBgMCR7aG91cnNJbnR9YCA6IGAke2hvdXJzSW50fWA7XG4gICAgY29uc3QgbWludXRlc1N0cmluZyA9IG1pbnV0ZXNJbnQgPCAxMCA/IGAwJHttaW51dGVzSW50fWAgOiBgJHttaW51dGVzSW50fWA7XG4gICAgY29uc3Qgc2Vjb25kc1N0cmluZyA9IHNlY29uZHNJbnQgPCAxMCA/IGAwJHtzZWNvbmRzSW50fWAgOiBgJHtzZWNvbmRzSW50fWA7XG4gICAgcmV0dXJuIGAke0RBWVNbZGF5T2ZXZWVrXX0sICR7ZGF5T2ZNb250aFN0cmluZ30gJHtNT05USFNbbW9udGhdfSAke3llYXJ9ICR7aG91cnNTdHJpbmd9OiR7bWludXRlc1N0cmluZ306JHtzZWNvbmRzU3RyaW5nfSBHTVRgO1xufVxuY29uc3QgUkZDMzMzOSA9IG5ldyBSZWdFeHAoL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVt0VF0oXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/W3paXSQvKTtcbmV4cG9ydCBjb25zdCBwYXJzZVJmYzMzMzlEYXRlVGltZSA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJGQy0zMzM5IGRhdGUtdGltZXMgbXVzdCBiZSBleHByZXNzZWQgYXMgc3RyaW5nc1wiKTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSBSRkMzMzM5LmV4ZWModmFsdWUpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgUkZDLTMzMzkgZGF0ZS10aW1lIHZhbHVlXCIpO1xuICAgIH1cbiAgICBjb25zdCBbXywgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHNdID0gbWF0Y2g7XG4gICAgY29uc3QgeWVhciA9IHN0cmljdFBhcnNlU2hvcnQoc3RyaXBMZWFkaW5nWmVyb2VzKHllYXJTdHIpKTtcbiAgICBjb25zdCBtb250aCA9IHBhcnNlRGF0ZVZhbHVlKG1vbnRoU3RyLCBcIm1vbnRoXCIsIDEsIDEyKTtcbiAgICBjb25zdCBkYXkgPSBwYXJzZURhdGVWYWx1ZShkYXlTdHIsIFwiZGF5XCIsIDEsIDMxKTtcbiAgICByZXR1cm4gYnVpbGREYXRlKHllYXIsIG1vbnRoLCBkYXksIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfSk7XG59O1xuY29uc3QgUkZDMzMzOV9XSVRIX09GRlNFVCA9IG5ldyBSZWdFeHAoL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVt0VF0oXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/KChbLStdXFxkezJ9XFw6XFxkezJ9KXxbelpdKSQvKTtcbmV4cG9ydCBjb25zdCBwYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJSRkMtMzMzOSBkYXRlLXRpbWVzIG11c3QgYmUgZXhwcmVzc2VkIGFzIHN0cmluZ3NcIik7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoID0gUkZDMzMzOV9XSVRIX09GRlNFVC5leGVjKHZhbHVlKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIFJGQy0zMzM5IGRhdGUtdGltZSB2YWx1ZVwiKTtcbiAgICB9XG4gICAgY29uc3QgW18sIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzLCBvZmZzZXRTdHJdID0gbWF0Y2g7XG4gICAgY29uc3QgeWVhciA9IHN0cmljdFBhcnNlU2hvcnQoc3RyaXBMZWFkaW5nWmVyb2VzKHllYXJTdHIpKTtcbiAgICBjb25zdCBtb250aCA9IHBhcnNlRGF0ZVZhbHVlKG1vbnRoU3RyLCBcIm1vbnRoXCIsIDEsIDEyKTtcbiAgICBjb25zdCBkYXkgPSBwYXJzZURhdGVWYWx1ZShkYXlTdHIsIFwiZGF5XCIsIDEsIDMxKTtcbiAgICBjb25zdCBkYXRlID0gYnVpbGREYXRlKHllYXIsIG1vbnRoLCBkYXksIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfSk7XG4gICAgaWYgKG9mZnNldFN0ci50b1VwcGVyQ2FzZSgpICE9IFwiWlwiKSB7XG4gICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSAtIHBhcnNlT2Zmc2V0VG9NaWxsaXNlY29uZHMob2Zmc2V0U3RyKSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufTtcbmNvbnN0IElNRl9GSVhEQVRFID0gbmV3IFJlZ0V4cCgvXig/Ok1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGR7Mn0pIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZHsxLDJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/IEdNVCQvKTtcbmNvbnN0IFJGQ184NTBfREFURSA9IG5ldyBSZWdFeHAoL14oPzpNb25kYXl8VHVlc2RheXxXZWRuZXNkYXl8VGh1cnNkYXl8RnJpZGF5fFNhdHVyZGF5fFN1bmRheSksIChcXGR7Mn0pLShKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYyktKFxcZHsyfSkgKFxcZHsxLDJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/IEdNVCQvKTtcbmNvbnN0IEFTQ19USU1FID0gbmV3IFJlZ0V4cCgvXig/Ok1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1bikgKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKSAoIFsxLTldfFxcZHsyfSkgKFxcZHsxLDJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/IChcXGR7NH0pJC8pO1xuZXhwb3J0IGNvbnN0IHBhcnNlUmZjNzIzMURhdGVUaW1lID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUkZDLTcyMzEgZGF0ZS10aW1lcyBtdXN0IGJlIGV4cHJlc3NlZCBhcyBzdHJpbmdzXCIpO1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSBJTUZfRklYREFURS5leGVjKHZhbHVlKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgY29uc3QgW18sIGRheVN0ciwgbW9udGhTdHIsIHllYXJTdHIsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzXSA9IG1hdGNoO1xuICAgICAgICByZXR1cm4gYnVpbGREYXRlKHN0cmljdFBhcnNlU2hvcnQoc3RyaXBMZWFkaW5nWmVyb2VzKHllYXJTdHIpKSwgcGFyc2VNb250aEJ5U2hvcnROYW1lKG1vbnRoU3RyKSwgcGFyc2VEYXRlVmFsdWUoZGF5U3RyLCBcImRheVwiLCAxLCAzMSksIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfSk7XG4gICAgfVxuICAgIG1hdGNoID0gUkZDXzg1MF9EQVRFLmV4ZWModmFsdWUpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCBbXywgZGF5U3RyLCBtb250aFN0ciwgeWVhclN0ciwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHNdID0gbWF0Y2g7XG4gICAgICAgIHJldHVybiBhZGp1c3RSZmM4NTBZZWFyKGJ1aWxkRGF0ZShwYXJzZVR3b0RpZ2l0WWVhcih5ZWFyU3RyKSwgcGFyc2VNb250aEJ5U2hvcnROYW1lKG1vbnRoU3RyKSwgcGFyc2VEYXRlVmFsdWUoZGF5U3RyLCBcImRheVwiLCAxLCAzMSksIHtcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIHNlY29uZHMsXG4gICAgICAgICAgICBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIG1hdGNoID0gQVNDX1RJTUUuZXhlYyh2YWx1ZSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IFtfLCBtb250aFN0ciwgZGF5U3RyLCBob3VycywgbWludXRlcywgc2Vjb25kcywgZnJhY3Rpb25hbE1pbGxpc2Vjb25kcywgeWVhclN0cl0gPSBtYXRjaDtcbiAgICAgICAgcmV0dXJuIGJ1aWxkRGF0ZShzdHJpY3RQYXJzZVNob3J0KHN0cmlwTGVhZGluZ1plcm9lcyh5ZWFyU3RyKSksIHBhcnNlTW9udGhCeVNob3J0TmFtZShtb250aFN0ciksIHBhcnNlRGF0ZVZhbHVlKGRheVN0ci50cmltTGVmdCgpLCBcImRheVwiLCAxLCAzMSksIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIFJGQy03MjMxIGRhdGUtdGltZSB2YWx1ZVwiKTtcbn07XG5leHBvcnQgY29uc3QgcGFyc2VFcG9jaFRpbWVzdGFtcCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCB2YWx1ZUFzRG91YmxlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFsdWVBc0RvdWJsZSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFsdWVBc0RvdWJsZSA9IHN0cmljdFBhcnNlRG91YmxlKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFcG9jaCB0aW1lc3RhbXBzIG11c3QgYmUgZXhwcmVzc2VkIGFzIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgb3IgdGhlaXIgc3RyaW5nIHJlcHJlc2VudGF0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlQXNEb3VibGUpIHx8IHZhbHVlQXNEb3VibGUgPT09IEluZmluaXR5IHx8IHZhbHVlQXNEb3VibGUgPT09IC1JbmZpbml0eSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXBvY2ggdGltZXN0YW1wcyBtdXN0IGJlIHZhbGlkLCBub24tSW5maW5pdGUsIG5vbi1OYU4gbnVtZXJpY3NcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZShNYXRoLnJvdW5kKHZhbHVlQXNEb3VibGUgKiAxMDAwKSk7XG59O1xuY29uc3QgYnVpbGREYXRlID0gKHllYXIsIG1vbnRoLCBkYXksIHRpbWUpID0+IHtcbiAgICBjb25zdCBhZGp1c3RlZE1vbnRoID0gbW9udGggLSAxO1xuICAgIHZhbGlkYXRlRGF5T2ZNb250aCh5ZWFyLCBhZGp1c3RlZE1vbnRoLCBkYXkpO1xuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBhZGp1c3RlZE1vbnRoLCBkYXksIHBhcnNlRGF0ZVZhbHVlKHRpbWUuaG91cnMsIFwiaG91clwiLCAwLCAyMyksIHBhcnNlRGF0ZVZhbHVlKHRpbWUubWludXRlcywgXCJtaW51dGVcIiwgMCwgNTkpLCBwYXJzZURhdGVWYWx1ZSh0aW1lLnNlY29uZHMsIFwic2Vjb25kc1wiLCAwLCA2MCksIHBhcnNlTWlsbGlzZWNvbmRzKHRpbWUuZnJhY3Rpb25hbE1pbGxpc2Vjb25kcykpKTtcbn07XG5jb25zdCBwYXJzZVR3b0RpZ2l0WWVhciA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IHRoaXNZZWFyID0gbmV3IERhdGUoKS5nZXRVVENGdWxsWWVhcigpO1xuICAgIGNvbnN0IHZhbHVlSW5UaGlzQ2VudHVyeSA9IE1hdGguZmxvb3IodGhpc1llYXIgLyAxMDApICogMTAwICsgc3RyaWN0UGFyc2VTaG9ydChzdHJpcExlYWRpbmdaZXJvZXModmFsdWUpKTtcbiAgICBpZiAodmFsdWVJblRoaXNDZW50dXJ5IDwgdGhpc1llYXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlSW5UaGlzQ2VudHVyeSArIDEwMDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlSW5UaGlzQ2VudHVyeTtcbn07XG5jb25zdCBGSUZUWV9ZRUFSU19JTl9NSUxMSVMgPSA1MCAqIDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG5jb25zdCBhZGp1c3RSZmM4NTBZZWFyID0gKGlucHV0KSA9PiB7XG4gICAgaWYgKGlucHV0LmdldFRpbWUoKSAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpID4gRklGVFlfWUVBUlNfSU5fTUlMTElTKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhpbnB1dC5nZXRVVENGdWxsWWVhcigpIC0gMTAwLCBpbnB1dC5nZXRVVENNb250aCgpLCBpbnB1dC5nZXRVVENEYXRlKCksIGlucHV0LmdldFVUQ0hvdXJzKCksIGlucHV0LmdldFVUQ01pbnV0ZXMoKSwgaW5wdXQuZ2V0VVRDU2Vjb25kcygpLCBpbnB1dC5nZXRVVENNaWxsaXNlY29uZHMoKSkpO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQ7XG59O1xuY29uc3QgcGFyc2VNb250aEJ5U2hvcnROYW1lID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgbW9udGhJZHggPSBNT05USFMuaW5kZXhPZih2YWx1ZSk7XG4gICAgaWYgKG1vbnRoSWR4IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIG1vbnRoOiAke3ZhbHVlfWApO1xuICAgIH1cbiAgICByZXR1cm4gbW9udGhJZHggKyAxO1xufTtcbmNvbnN0IERBWVNfSU5fTU9OVEggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5jb25zdCB2YWxpZGF0ZURheU9mTW9udGggPSAoeWVhciwgbW9udGgsIGRheSkgPT4ge1xuICAgIGxldCBtYXhEYXlzID0gREFZU19JTl9NT05USFttb250aF07XG4gICAgaWYgKG1vbnRoID09PSAxICYmIGlzTGVhcFllYXIoeWVhcikpIHtcbiAgICAgICAgbWF4RGF5cyA9IDI5O1xuICAgIH1cbiAgICBpZiAoZGF5ID4gbWF4RGF5cykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGRheSBmb3IgJHtNT05USFNbbW9udGhdfSBpbiAke3llYXJ9OiAke2RheX1gKTtcbiAgICB9XG59O1xuY29uc3QgaXNMZWFwWWVhciA9ICh5ZWFyKSA9PiB7XG4gICAgcmV0dXJuIHllYXIgJSA0ID09PSAwICYmICh5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xufTtcbmNvbnN0IHBhcnNlRGF0ZVZhbHVlID0gKHZhbHVlLCB0eXBlLCBsb3dlciwgdXBwZXIpID0+IHtcbiAgICBjb25zdCBkYXRlVmFsID0gc3RyaWN0UGFyc2VCeXRlKHN0cmlwTGVhZGluZ1plcm9lcyh2YWx1ZSkpO1xuICAgIGlmIChkYXRlVmFsIDwgbG93ZXIgfHwgZGF0ZVZhbCA+IHVwcGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dHlwZX0gbXVzdCBiZSBiZXR3ZWVuICR7bG93ZXJ9IGFuZCAke3VwcGVyfSwgaW5jbHVzaXZlYCk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlVmFsO1xufTtcbmNvbnN0IHBhcnNlTWlsbGlzZWNvbmRzID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiBzdHJpY3RQYXJzZUZsb2F0MzIoXCIwLlwiICsgdmFsdWUpICogMTAwMDtcbn07XG5jb25zdCBwYXJzZU9mZnNldFRvTWlsbGlzZWNvbmRzID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgZGlyZWN0aW9uU3RyID0gdmFsdWVbMF07XG4gICAgbGV0IGRpcmVjdGlvbiA9IDE7XG4gICAgaWYgKGRpcmVjdGlvblN0ciA9PSBcIitcIikge1xuICAgICAgICBkaXJlY3Rpb24gPSAxO1xuICAgIH1cbiAgICBlbHNlIGlmIChkaXJlY3Rpb25TdHIgPT0gXCItXCIpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gLTE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBPZmZzZXQgZGlyZWN0aW9uLCAke2RpcmVjdGlvblN0cn0sIG11c3QgYmUgXCIrXCIgb3IgXCItXCJgKTtcbiAgICB9XG4gICAgY29uc3QgaG91ciA9IE51bWJlcih2YWx1ZS5zdWJzdHJpbmcoMSwgMykpO1xuICAgIGNvbnN0IG1pbnV0ZSA9IE51bWJlcih2YWx1ZS5zdWJzdHJpbmcoNCwgNikpO1xuICAgIHJldHVybiBkaXJlY3Rpb24gKiAoaG91ciAqIDYwICsgbWludXRlKSAqIDYwICogMTAwMDtcbn07XG5jb25zdCBzdHJpcExlYWRpbmdaZXJvZXMgPSAodmFsdWUpID0+IHtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICB3aGlsZSAoaWR4IDwgdmFsdWUubGVuZ3RoIC0gMSAmJiB2YWx1ZS5jaGFyQXQoaWR4KSA9PT0gXCIwXCIpIHtcbiAgICAgICAgaWR4Kys7XG4gICAgfVxuICAgIGlmIChpZHggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUuc2xpY2UoaWR4KTtcbn07XG4iLCJleHBvcnQgY2xhc3MgU2VydmljZUV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMubWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTZXJ2aWNlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBvcHRpb25zLiRmYXVsdDtcbiAgICAgICAgdGhpcy4kbWV0YWRhdGEgPSBvcHRpb25zLiRtZXRhZGF0YTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uID0gKGV4Y2VwdGlvbiwgYWRkaXRpb25zID0ge30pID0+IHtcbiAgICBPYmplY3QuZW50cmllcyhhZGRpdGlvbnMpXG4gICAgICAgIC5maWx0ZXIoKFssIHZdKSA9PiB2ICE9PSB1bmRlZmluZWQpXG4gICAgICAgIC5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgICAgaWYgKGV4Y2VwdGlvbltrXSA9PSB1bmRlZmluZWQgfHwgZXhjZXB0aW9uW2tdID09PSBcIlwiKSB7XG4gICAgICAgICAgICBleGNlcHRpb25ba10gPSB2O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgbWVzc2FnZSA9IGV4Y2VwdGlvbi5tZXNzYWdlIHx8IGV4Y2VwdGlvbi5NZXNzYWdlIHx8IFwiVW5rbm93bkVycm9yXCI7XG4gICAgZXhjZXB0aW9uLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIGRlbGV0ZSBleGNlcHRpb24uTWVzc2FnZTtcbiAgICByZXR1cm4gZXhjZXB0aW9uO1xufTtcbiIsImltcG9ydCB7IGRlY29yYXRlU2VydmljZUV4Y2VwdGlvbiB9IGZyb20gXCIuL2V4Y2VwdGlvbnNcIjtcbmV4cG9ydCBjb25zdCB0aHJvd0RlZmF1bHRFcnJvciA9ICh7IG91dHB1dCwgcGFyc2VkQm9keSwgZXhjZXB0aW9uQ3RvciwgZXJyb3JDb2RlIH0pID0+IHtcbiAgICBjb25zdCAkbWV0YWRhdGEgPSBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCk7XG4gICAgY29uc3Qgc3RhdHVzQ29kZSA9ICRtZXRhZGF0YS5odHRwU3RhdHVzQ29kZSA/ICRtZXRhZGF0YS5odHRwU3RhdHVzQ29kZSArIFwiXCIgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgZXhjZXB0aW9uQ3Rvcih7XG4gICAgICAgIG5hbWU6IHBhcnNlZEJvZHk/LmNvZGUgfHwgcGFyc2VkQm9keT8uQ29kZSB8fCBlcnJvckNvZGUgfHwgc3RhdHVzQ29kZSB8fCBcIlVua25vd25FcnJvclwiLFxuICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICRtZXRhZGF0YSxcbiAgICB9KTtcbiAgICB0aHJvdyBkZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24ocmVzcG9uc2UsIHBhcnNlZEJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCB3aXRoQmFzZUV4Y2VwdGlvbiA9IChFeGNlcHRpb25DdG9yKSA9PiB7XG4gICAgcmV0dXJuICh7IG91dHB1dCwgcGFyc2VkQm9keSwgZXJyb3JDb2RlIH0pID0+IHtcbiAgICAgICAgdGhyb3dEZWZhdWx0RXJyb3IoeyBvdXRwdXQsIHBhcnNlZEJvZHksIGV4Y2VwdGlvbkN0b3I6IEV4Y2VwdGlvbkN0b3IsIGVycm9yQ29kZSB9KTtcbiAgICB9O1xufTtcbmNvbnN0IGRlc2VyaWFsaXplTWV0YWRhdGEgPSAob3V0cHV0KSA9PiAoe1xuICAgIGh0dHBTdGF0dXNDb2RlOiBvdXRwdXQuc3RhdHVzQ29kZSxcbiAgICByZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0LWlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXotcmVxdWVzdC1pZFwiXSxcbiAgICBleHRlbmRlZFJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1pZC0yXCJdLFxuICAgIGNmSWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotY2YtaWRcIl0sXG59KTtcbiIsImV4cG9ydCBjb25zdCBsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlID0gKG1vZGUpID0+IHtcbiAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBcInN0YW5kYXJkXCI6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJldHJ5TW9kZTogXCJzdGFuZGFyZFwiLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiAzMTAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImluLXJlZ2lvblwiOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXRyeU1vZGU6IFwic3RhbmRhcmRcIixcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uVGltZW91dDogMTEwMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJjcm9zcy1yZWdpb25cIjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmV0cnlNb2RlOiBcInN0YW5kYXJkXCIsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvblRpbWVvdXQ6IDMxMDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwibW9iaWxlXCI6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJldHJ5TW9kZTogXCJzdGFuZGFyZFwiLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiAzMDAwMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgfVxufTtcbiIsImxldCB3YXJuaW5nRW1pdHRlZCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gPSAodmVyc2lvbikgPT4ge1xuICAgIGlmICh2ZXJzaW9uICYmICF3YXJuaW5nRW1pdHRlZCAmJiBwYXJzZUludCh2ZXJzaW9uLnN1YnN0cmluZygxLCB2ZXJzaW9uLmluZGV4T2YoXCIuXCIpKSkgPCAxNCkge1xuICAgICAgICB3YXJuaW5nRW1pdHRlZCA9IHRydWU7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IEFsZ29yaXRobUlkIH0gZnJvbSBcIkBzbWl0aHkvdHlwZXNcIjtcbmV4cG9ydCB7IEFsZ29yaXRobUlkIH07XG5leHBvcnQgY29uc3QgZ2V0Q2hlY2tzdW1Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICBjb25zdCBjaGVja3N1bUFsZ29yaXRobXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGlkIGluIEFsZ29yaXRobUlkKSB7XG4gICAgICAgIGNvbnN0IGFsZ29yaXRobUlkID0gQWxnb3JpdGhtSWRbaWRdO1xuICAgICAgICBpZiAocnVudGltZUNvbmZpZ1thbGdvcml0aG1JZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tzdW1BbGdvcml0aG1zLnB1c2goe1xuICAgICAgICAgICAgYWxnb3JpdGhtSWQ6ICgpID0+IGFsZ29yaXRobUlkLFxuICAgICAgICAgICAgY2hlY2tzdW1Db25zdHJ1Y3RvcjogKCkgPT4gcnVudGltZUNvbmZpZ1thbGdvcml0aG1JZF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBfY2hlY2tzdW1BbGdvcml0aG1zOiBjaGVja3N1bUFsZ29yaXRobXMsXG4gICAgICAgIGFkZENoZWNrc3VtQWxnb3JpdGhtKGFsZ28pIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrc3VtQWxnb3JpdGhtcy5wdXNoKGFsZ28pO1xuICAgICAgICB9LFxuICAgICAgICBjaGVja3N1bUFsZ29yaXRobXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tzdW1BbGdvcml0aG1zO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVDaGVja3N1bVJ1bnRpbWVDb25maWcgPSAoY2xpZW50Q29uZmlnKSA9PiB7XG4gICAgY29uc3QgcnVudGltZUNvbmZpZyA9IHt9O1xuICAgIGNsaWVudENvbmZpZy5jaGVja3N1bUFsZ29yaXRobXMoKS5mb3JFYWNoKChjaGVja3N1bUFsZ29yaXRobSkgPT4ge1xuICAgICAgICBydW50aW1lQ29uZmlnW2NoZWNrc3VtQWxnb3JpdGhtLmFsZ29yaXRobUlkKCldID0gY2hlY2tzdW1BbGdvcml0aG0uY2hlY2tzdW1Db25zdHJ1Y3RvcigpO1xuICAgIH0pO1xuICAgIHJldHVybiBydW50aW1lQ29uZmlnO1xufTtcbiIsImV4cG9ydCBjb25zdCBnZXRSZXRyeUNvbmZpZ3VyYXRpb24gPSAocnVudGltZUNvbmZpZykgPT4ge1xuICAgIGxldCBfcmV0cnlTdHJhdGVneSA9IHJ1bnRpbWVDb25maWcucmV0cnlTdHJhdGVneTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRSZXRyeVN0cmF0ZWd5KHJldHJ5U3RyYXRlZ3kpIHtcbiAgICAgICAgICAgIF9yZXRyeVN0cmF0ZWd5ID0gcmV0cnlTdHJhdGVneTtcbiAgICAgICAgfSxcbiAgICAgICAgcmV0cnlTdHJhdGVneSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfcmV0cnlTdHJhdGVneTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlUmV0cnlSdW50aW1lQ29uZmlnID0gKHJldHJ5U3RyYXRlZ3lDb25maWd1cmF0aW9uKSA9PiB7XG4gICAgY29uc3QgcnVudGltZUNvbmZpZyA9IHt9O1xuICAgIHJ1bnRpbWVDb25maWcucmV0cnlTdHJhdGVneSA9IHJldHJ5U3RyYXRlZ3lDb25maWd1cmF0aW9uLnJldHJ5U3RyYXRlZ3koKTtcbiAgICByZXR1cm4gcnVudGltZUNvbmZpZztcbn07XG4iLCJpbXBvcnQgeyBnZXRDaGVja3N1bUNvbmZpZ3VyYXRpb24sIHJlc29sdmVDaGVja3N1bVJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9jaGVja3N1bVwiO1xuaW1wb3J0IHsgZ2V0UmV0cnlDb25maWd1cmF0aW9uLCByZXNvbHZlUmV0cnlSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vcmV0cnlcIjtcbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IChydW50aW1lQ29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZ2V0Q2hlY2tzdW1Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpLFxuICAgICAgICAuLi5nZXRSZXRyeUNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZyksXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdENsaWVudENvbmZpZ3VyYXRpb24gPSBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbjtcbmV4cG9ydCBjb25zdCByZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucmVzb2x2ZUNoZWNrc3VtUnVudGltZUNvbmZpZyhjb25maWcpLFxuICAgICAgICAuLi5yZXNvbHZlUmV0cnlSdW50aW1lQ29uZmlnKGNvbmZpZyksXG4gICAgfTtcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQoc3RyKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIFwiJVwiICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xufVxuIiwiZXhwb3J0IGNvbnN0IGdldEFycmF5SWZTaW5nbGVJdGVtID0gKG1heUJlQXJyYXkpID0+IEFycmF5LmlzQXJyYXkobWF5QmVBcnJheSkgPyBtYXlCZUFycmF5IDogW21heUJlQXJyYXldO1xuIiwiZXhwb3J0IGNvbnN0IGdldFZhbHVlRnJvbVRleHROb2RlID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IHRleHROb2RlTmFtZSA9IFwiI3RleHRcIjtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG9ialtrZXldW3RleHROb2RlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBvYmpba2V5XVt0ZXh0Tm9kZU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gXCJvYmplY3RcIiAmJiBvYmpba2V5XSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBnZXRWYWx1ZUZyb21UZXh0Tm9kZShvYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn07XG4iLCJleHBvcnQgY29uc3QgU3RyaW5nV3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBDbGFzcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcbiAgICBjb25zdCBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoU3RyaW5nLCBbbnVsbCwgLi4uYXJndW1lbnRzXSk7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufTtcblN0cmluZ1dyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdHJpbmcucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFN0cmluZ1dyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0sXG59KTtcbk9iamVjdC5zZXRQcm90b3R5cGVPZihTdHJpbmdXcmFwcGVyLCBTdHJpbmcpO1xuZXhwb3J0IGNsYXNzIExhenlKc29uU3RyaW5nIGV4dGVuZHMgU3RyaW5nV3JhcHBlciB7XG4gICAgZGVzZXJpYWxpemVKU09OKCkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdXBlci50b1N0cmluZygpKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gc3VwZXIudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21PYmplY3Qob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBMYXp5SnNvblN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTdHJpbmcgfHwgdHlwZW9mIG9iamVjdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMYXp5SnNvblN0cmluZyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTGF6eUpzb25TdHJpbmcoSlNPTi5zdHJpbmdpZnkob2JqZWN0KSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIG1hcChhcmcwLCBhcmcxLCBhcmcyKSB7XG4gICAgbGV0IHRhcmdldDtcbiAgICBsZXQgZmlsdGVyO1xuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBhcmcxID09PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBhcmcyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgICBpbnN0cnVjdGlvbnMgPSBhcmcwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGFyZ2V0ID0gYXJnMDtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGZpbHRlciA9IGFyZzE7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMgPSBhcmcyO1xuICAgICAgICAgICAgcmV0dXJuIG1hcFdpdGhGaWx0ZXIodGFyZ2V0LCBmaWx0ZXIsIGluc3RydWN0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMgPSBhcmcxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGluc3RydWN0aW9ucykpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGluc3RydWN0aW9uc1trZXldKSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBpbnN0cnVjdGlvbnNba2V5XTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5SW5zdHJ1Y3Rpb24odGFyZ2V0LCBudWxsLCBpbnN0cnVjdGlvbnMsIGtleSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5leHBvcnQgY29uc3QgY29udmVydE1hcCA9ICh0YXJnZXQpID0+IHtcbiAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyh0YXJnZXQgfHwge30pKSB7XG4gICAgICAgIG91dHB1dFtrXSA9IFssIHZdO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufTtcbmV4cG9ydCBjb25zdCB0YWtlID0gKHNvdXJjZSwgaW5zdHJ1Y3Rpb25zKSA9PiB7XG4gICAgY29uc3Qgb3V0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICAgIGFwcGx5SW5zdHJ1Y3Rpb24ob3V0LCBzb3VyY2UsIGluc3RydWN0aW9ucywga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn07XG5jb25zdCBtYXBXaXRoRmlsdGVyID0gKHRhcmdldCwgZmlsdGVyLCBpbnN0cnVjdGlvbnMpID0+IHtcbiAgICByZXR1cm4gbWFwKHRhcmdldCwgT2JqZWN0LmVudHJpZXMoaW5zdHJ1Y3Rpb25zKS5yZWR1Y2UoKF9pbnN0cnVjdGlvbnMsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIF9pbnN0cnVjdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgX2luc3RydWN0aW9uc1trZXldID0gW2ZpbHRlciwgdmFsdWUoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfaW5zdHJ1Y3Rpb25zW2tleV0gPSBbZmlsdGVyLCB2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9pbnN0cnVjdGlvbnM7XG4gICAgfSwge30pKTtcbn07XG5jb25zdCBhcHBseUluc3RydWN0aW9uID0gKHRhcmdldCwgc291cmNlLCBpbnN0cnVjdGlvbnMsIHRhcmdldEtleSkgPT4ge1xuICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgbGV0IGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW3RhcmdldEtleV07XG4gICAgICAgIGlmICh0eXBlb2YgaW5zdHJ1Y3Rpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBbLCBpbnN0cnVjdGlvbl07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2ZpbHRlciA9IG5vbk51bGxpc2gsIHZhbHVlRm4gPSBwYXNzLCBzb3VyY2VLZXkgPSB0YXJnZXRLZXldID0gaW5zdHJ1Y3Rpb247XG4gICAgICAgIGlmICgodHlwZW9mIGZpbHRlciA9PT0gXCJmdW5jdGlvblwiICYmIGZpbHRlcihzb3VyY2Vbc291cmNlS2V5XSkpIHx8ICh0eXBlb2YgZmlsdGVyICE9PSBcImZ1bmN0aW9uXCIgJiYgISFmaWx0ZXIpKSB7XG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0S2V5XSA9IHZhbHVlRm4oc291cmNlW3NvdXJjZUtleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IFtmaWx0ZXIsIHZhbHVlXSA9IGluc3RydWN0aW9uc1t0YXJnZXRLZXldO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBsZXQgX3ZhbHVlO1xuICAgICAgICBjb25zdCBkZWZhdWx0RmlsdGVyUGFzc2VkID0gZmlsdGVyID09PSB1bmRlZmluZWQgJiYgKF92YWx1ZSA9IHZhbHVlKCkpICE9IG51bGw7XG4gICAgICAgIGNvbnN0IGN1c3RvbUZpbHRlclBhc3NlZCA9ICh0eXBlb2YgZmlsdGVyID09PSBcImZ1bmN0aW9uXCIgJiYgISFmaWx0ZXIodm9pZCAwKSkgfHwgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIiAmJiAhIWZpbHRlcik7XG4gICAgICAgIGlmIChkZWZhdWx0RmlsdGVyUGFzc2VkKSB7XG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0S2V5XSA9IF92YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXN0b21GaWx0ZXJQYXNzZWQpIHtcbiAgICAgICAgICAgIHRhcmdldFt0YXJnZXRLZXldID0gdmFsdWUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdEZpbHRlclBhc3NlZCA9IGZpbHRlciA9PT0gdW5kZWZpbmVkICYmIHZhbHVlICE9IG51bGw7XG4gICAgICAgIGNvbnN0IGN1c3RvbUZpbHRlclBhc3NlZCA9ICh0eXBlb2YgZmlsdGVyID09PSBcImZ1bmN0aW9uXCIgJiYgISFmaWx0ZXIodmFsdWUpKSB8fCAodHlwZW9mIGZpbHRlciAhPT0gXCJmdW5jdGlvblwiICYmICEhZmlsdGVyKTtcbiAgICAgICAgaWYgKGRlZmF1bHRGaWx0ZXJQYXNzZWQgfHwgY3VzdG9tRmlsdGVyUGFzc2VkKSB7XG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0S2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IG5vbk51bGxpc2ggPSAoXykgPT4gXyAhPSBudWxsO1xuY29uc3QgcGFzcyA9IChfKSA9PiBfO1xuIiwiaW1wb3J0IHsgZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQgfSBmcm9tIFwiLi9leHRlbmRlZC1lbmNvZGUtdXJpLWNvbXBvbmVudFwiO1xuZXhwb3J0IGNvbnN0IHJlc29sdmVkUGF0aCA9IChyZXNvbHZlZFBhdGgsIGlucHV0LCBtZW1iZXJOYW1lLCBsYWJlbFZhbHVlUHJvdmlkZXIsIHVyaUxhYmVsLCBpc0dyZWVkeUxhYmVsKSA9PiB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaW5wdXRbbWVtYmVyTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBsYWJlbFZhbHVlID0gbGFiZWxWYWx1ZVByb3ZpZGVyKCk7XG4gICAgICAgIGlmIChsYWJlbFZhbHVlLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbXB0eSB2YWx1ZSBwcm92aWRlZCBmb3IgaW5wdXQgSFRUUCBsYWJlbDogXCIgKyBtZW1iZXJOYW1lICsgXCIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmVkUGF0aCA9IHJlc29sdmVkUGF0aC5yZXBsYWNlKHVyaUxhYmVsLCBpc0dyZWVkeUxhYmVsXG4gICAgICAgICAgICA/IGxhYmVsVmFsdWVcbiAgICAgICAgICAgICAgICAuc3BsaXQoXCIvXCIpXG4gICAgICAgICAgICAgICAgLm1hcCgoc2VnbWVudCkgPT4gZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQoc2VnbWVudCkpXG4gICAgICAgICAgICAgICAgLmpvaW4oXCIvXCIpXG4gICAgICAgICAgICA6IGV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50KGxhYmVsVmFsdWUpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbHVlIHByb3ZpZGVkIGZvciBpbnB1dCBIVFRQIGxhYmVsOiBcIiArIG1lbWJlck5hbWUgKyBcIi5cIik7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZFBhdGg7XG59O1xuIiwiZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZUZsb2F0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gXCJOYU5cIjtcbiAgICB9XG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlIEluZmluaXR5OlxuICAgICAgICAgICAgcmV0dXJuIFwiSW5maW5pdHlcIjtcbiAgICAgICAgY2FzZSAtSW5maW5pdHk6XG4gICAgICAgICAgICByZXR1cm4gXCItSW5maW5pdHlcIjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59O1xuIiwiZXhwb3J0IGNvbnN0IF9qc29uID0gKG9iaikgPT4ge1xuICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5maWx0ZXIoKF8pID0+IF8gIT0gbnVsbCkubWFwKF9qc29uKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9iaikpIHtcbiAgICAgICAgICAgIGlmIChvYmpba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IF9qc29uKG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufTtcbiIsImV4cG9ydCB2YXIgSHR0cEF1dGhMb2NhdGlvbjtcbihmdW5jdGlvbiAoSHR0cEF1dGhMb2NhdGlvbikge1xuICAgIEh0dHBBdXRoTG9jYXRpb25bXCJIRUFERVJcIl0gPSBcImhlYWRlclwiO1xuICAgIEh0dHBBdXRoTG9jYXRpb25bXCJRVUVSWVwiXSA9IFwicXVlcnlcIjtcbn0pKEh0dHBBdXRoTG9jYXRpb24gfHwgKEh0dHBBdXRoTG9jYXRpb24gPSB7fSkpO1xuIiwiZXhwb3J0IHZhciBIdHRwQXBpS2V5QXV0aExvY2F0aW9uO1xuKGZ1bmN0aW9uIChIdHRwQXBpS2V5QXV0aExvY2F0aW9uKSB7XG4gICAgSHR0cEFwaUtleUF1dGhMb2NhdGlvbltcIkhFQURFUlwiXSA9IFwiaGVhZGVyXCI7XG4gICAgSHR0cEFwaUtleUF1dGhMb2NhdGlvbltcIlFVRVJZXCJdID0gXCJxdWVyeVwiO1xufSkoSHR0cEFwaUtleUF1dGhMb2NhdGlvbiB8fCAoSHR0cEFwaUtleUF1dGhMb2NhdGlvbiA9IHt9KSk7XG4iLCJleHBvcnQgdmFyIEVuZHBvaW50VVJMU2NoZW1lO1xuKGZ1bmN0aW9uIChFbmRwb2ludFVSTFNjaGVtZSkge1xuICAgIEVuZHBvaW50VVJMU2NoZW1lW1wiSFRUUFwiXSA9IFwiaHR0cFwiO1xuICAgIEVuZHBvaW50VVJMU2NoZW1lW1wiSFRUUFNcIl0gPSBcImh0dHBzXCI7XG59KShFbmRwb2ludFVSTFNjaGVtZSB8fCAoRW5kcG9pbnRVUkxTY2hlbWUgPSB7fSkpO1xuIiwiZXhwb3J0IHZhciBBbGdvcml0aG1JZDtcbihmdW5jdGlvbiAoQWxnb3JpdGhtSWQpIHtcbiAgICBBbGdvcml0aG1JZFtcIk1ENVwiXSA9IFwibWQ1XCI7XG4gICAgQWxnb3JpdGhtSWRbXCJDUkMzMlwiXSA9IFwiY3JjMzJcIjtcbiAgICBBbGdvcml0aG1JZFtcIkNSQzMyQ1wiXSA9IFwiY3JjMzJjXCI7XG4gICAgQWxnb3JpdGhtSWRbXCJTSEExXCJdID0gXCJzaGExXCI7XG4gICAgQWxnb3JpdGhtSWRbXCJTSEEyNTZcIl0gPSBcInNoYTI1NlwiO1xufSkoQWxnb3JpdGhtSWQgfHwgKEFsZ29yaXRobUlkID0ge30pKTtcbmV4cG9ydCBjb25zdCBnZXRDaGVja3N1bUNvbmZpZ3VyYXRpb24gPSAocnVudGltZUNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNoZWNrc3VtQWxnb3JpdGhtcyA9IFtdO1xuICAgIGlmIChydW50aW1lQ29uZmlnLnNoYTI1NiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoZWNrc3VtQWxnb3JpdGhtcy5wdXNoKHtcbiAgICAgICAgICAgIGFsZ29yaXRobUlkOiAoKSA9PiBBbGdvcml0aG1JZC5TSEEyNTYsXG4gICAgICAgICAgICBjaGVja3N1bUNvbnN0cnVjdG9yOiAoKSA9PiBydW50aW1lQ29uZmlnLnNoYTI1NixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChydW50aW1lQ29uZmlnLm1kNSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2hlY2tzdW1BbGdvcml0aG1zLnB1c2goe1xuICAgICAgICAgICAgYWxnb3JpdGhtSWQ6ICgpID0+IEFsZ29yaXRobUlkLk1ENSxcbiAgICAgICAgICAgIGNoZWNrc3VtQ29uc3RydWN0b3I6ICgpID0+IHJ1bnRpbWVDb25maWcubWQ1LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2NoZWNrc3VtQWxnb3JpdGhtczogY2hlY2tzdW1BbGdvcml0aG1zLFxuICAgICAgICBhZGRDaGVja3N1bUFsZ29yaXRobShhbGdvKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja3N1bUFsZ29yaXRobXMucHVzaChhbGdvKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hlY2tzdW1BbGdvcml0aG1zKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrc3VtQWxnb3JpdGhtcztcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlQ2hlY2tzdW1SdW50aW1lQ29uZmlnID0gKGNsaWVudENvbmZpZykgPT4ge1xuICAgIGNvbnN0IHJ1bnRpbWVDb25maWcgPSB7fTtcbiAgICBjbGllbnRDb25maWcuY2hlY2tzdW1BbGdvcml0aG1zKCkuZm9yRWFjaCgoY2hlY2tzdW1BbGdvcml0aG0pID0+IHtcbiAgICAgICAgcnVudGltZUNvbmZpZ1tjaGVja3N1bUFsZ29yaXRobS5hbGdvcml0aG1JZCgpXSA9IGNoZWNrc3VtQWxnb3JpdGhtLmNoZWNrc3VtQ29uc3RydWN0b3IoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcnVudGltZUNvbmZpZztcbn07XG4iLCJleHBvcnQgdmFyIEZpZWxkUG9zaXRpb247XG4oZnVuY3Rpb24gKEZpZWxkUG9zaXRpb24pIHtcbiAgICBGaWVsZFBvc2l0aW9uW0ZpZWxkUG9zaXRpb25bXCJIRUFERVJcIl0gPSAwXSA9IFwiSEVBREVSXCI7XG4gICAgRmllbGRQb3NpdGlvbltGaWVsZFBvc2l0aW9uW1wiVFJBSUxFUlwiXSA9IDFdID0gXCJUUkFJTEVSXCI7XG59KShGaWVsZFBvc2l0aW9uIHx8IChGaWVsZFBvc2l0aW9uID0ge30pKTtcbiIsImV4cG9ydCBjb25zdCBTTUlUSFlfQ09OVEVYVF9LRVkgPSBcIl9fc21pdGh5X2NvbnRleHRcIjtcbiIsImV4cG9ydCB2YXIgSW5pU2VjdGlvblR5cGU7XG4oZnVuY3Rpb24gKEluaVNlY3Rpb25UeXBlKSB7XG4gICAgSW5pU2VjdGlvblR5cGVbXCJQUk9GSUxFXCJdID0gXCJwcm9maWxlXCI7XG4gICAgSW5pU2VjdGlvblR5cGVbXCJTU09fU0VTU0lPTlwiXSA9IFwic3NvLXNlc3Npb25cIjtcbiAgICBJbmlTZWN0aW9uVHlwZVtcIlNFUlZJQ0VTXCJdID0gXCJzZXJ2aWNlc1wiO1xufSkoSW5pU2VjdGlvblR5cGUgfHwgKEluaVNlY3Rpb25UeXBlID0ge30pKTtcbiIsImV4cG9ydCB2YXIgUmVxdWVzdEhhbmRsZXJQcm90b2NvbDtcbihmdW5jdGlvbiAoUmVxdWVzdEhhbmRsZXJQcm90b2NvbCkge1xuICAgIFJlcXVlc3RIYW5kbGVyUHJvdG9jb2xbXCJIVFRQXzBfOVwiXSA9IFwiaHR0cC8wLjlcIjtcbiAgICBSZXF1ZXN0SGFuZGxlclByb3RvY29sW1wiSFRUUF8xXzBcIl0gPSBcImh0dHAvMS4wXCI7XG4gICAgUmVxdWVzdEhhbmRsZXJQcm90b2NvbFtcIlREU184XzBcIl0gPSBcInRkcy84LjBcIjtcbn0pKFJlcXVlc3RIYW5kbGVyUHJvdG9jb2wgfHwgKFJlcXVlc3RIYW5kbGVyUHJvdG9jb2wgPSB7fSkpO1xuIiwiaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZyB9IGZyb20gXCJAc21pdGh5L3F1ZXJ5c3RyaW5nLXBhcnNlclwiO1xuZXhwb3J0IGNvbnN0IHBhcnNlVXJsID0gKHVybCkgPT4ge1xuICAgIGlmICh0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVVybChuZXcgVVJMKHVybCkpO1xuICAgIH1cbiAgICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSwgcG9ydCwgcHJvdG9jb2wsIHNlYXJjaCB9ID0gdXJsO1xuICAgIGxldCBxdWVyeTtcbiAgICBpZiAoc2VhcmNoKSB7XG4gICAgICAgIHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhzZWFyY2gpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgcG9ydDogcG9ydCA/IHBhcnNlSW50KHBvcnQpIDogdW5kZWZpbmVkLFxuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgcGF0aDogcGF0aG5hbWUsXG4gICAgICAgIHF1ZXJ5LFxuICAgIH07XG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcocXVlcnlzdHJpbmcpIHtcbiAgICBjb25zdCBxdWVyeSA9IHt9O1xuICAgIHF1ZXJ5c3RyaW5nID0gcXVlcnlzdHJpbmcucmVwbGFjZSgvXlxcPy8sIFwiXCIpO1xuICAgIGlmIChxdWVyeXN0cmluZykge1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcXVlcnlzdHJpbmcuc3BsaXQoXCImXCIpKSB7XG4gICAgICAgICAgICBsZXQgW2tleSwgdmFsdWUgPSBudWxsXSA9IHBhaXIuc3BsaXQoXCI9XCIpO1xuICAgICAgICAgICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gcXVlcnkpKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBxdWVyeVtrZXldID0gW3F1ZXJ5W2tleV0sIHZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVlcnk7XG59XG4iLCJpbXBvcnQgeyBmcm9tU3RyaW5nIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiO1xuY29uc3QgQkFTRTY0X1JFR0VYID0gL15bQS1aYS16MC05Ky9dKj17MCwyfSQvO1xuZXhwb3J0IGNvbnN0IGZyb21CYXNlNjQgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAoKGlucHV0Lmxlbmd0aCAqIDMpICUgNCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbmNvcnJlY3QgcGFkZGluZyBvbiBiYXNlNjQgc3RyaW5nLmApO1xuICAgIH1cbiAgICBpZiAoIUJBU0U2NF9SRUdFWC5leGVjKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGJhc2U2NCBzdHJpbmcuYCk7XG4gICAgfVxuICAgIGNvbnN0IGJ1ZmZlciA9IGZyb21TdHJpbmcoaW5wdXQsIFwiYmFzZTY0XCIpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpO1xufTtcbiIsImltcG9ydCB7IGZyb21BcnJheUJ1ZmZlciB9IGZyb20gXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIjtcbmV4cG9ydCBjb25zdCB0b0Jhc2U2NCA9IChpbnB1dCkgPT4gZnJvbUFycmF5QnVmZmVyKGlucHV0LmJ1ZmZlciwgaW5wdXQuYnl0ZU9mZnNldCwgaW5wdXQuYnl0ZUxlbmd0aCkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4iLCJpbXBvcnQgeyBmc3RhdFN5bmMsIGxzdGF0U3luYyB9IGZyb20gXCJmc1wiO1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUJvZHlMZW5ndGggPSAoYm9keSkgPT4ge1xuICAgIGlmICghYm9keSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShib2R5KS5sZW5ndGg7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBib2R5LmJ5dGVMZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGJvZHkuc2l6ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gYm9keS5zaXplO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgYm9keS5zdGFydCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgYm9keS5lbmQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkuZW5kICsgMSAtIGJvZHkuc3RhcnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBib2R5LnBhdGggPT09IFwic3RyaW5nXCIgfHwgQnVmZmVyLmlzQnVmZmVyKGJvZHkucGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIGxzdGF0U3luYyhib2R5LnBhdGgpLnNpemU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBib2R5LmZkID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBmc3RhdFN5bmMoYm9keS5mZCkuc2l6ZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCb2R5IExlbmd0aCBjb21wdXRhdGlvbiBmYWlsZWQgZm9yICR7Ym9keX1gKTtcbn07XG4iLCJpbXBvcnQgeyBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIkBzbWl0aHkvaXMtYXJyYXktYnVmZmVyXCI7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyXCI7XG5leHBvcnQgY29uc3QgZnJvbUFycmF5QnVmZmVyID0gKGlucHV0LCBvZmZzZXQgPSAwLCBsZW5ndGggPSBpbnB1dC5ieXRlTGVuZ3RoIC0gb2Zmc2V0KSA9PiB7XG4gICAgaWYgKCFpc0FycmF5QnVmZmVyKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgXCJpbnB1dFwiIGFyZ3VtZW50IG11c3QgYmUgQXJyYXlCdWZmZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgaW5wdXR9ICgke2lucHV0fSlgKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGlucHV0LCBvZmZzZXQsIGxlbmd0aCk7XG59O1xuZXhwb3J0IGNvbnN0IGZyb21TdHJpbmcgPSAoaW5wdXQsIGVuY29kaW5nKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgXCJpbnB1dFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgaW5wdXR9ICgke2lucHV0fSlgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuY29kaW5nID8gQnVmZmVyLmZyb20oaW5wdXQsIGVuY29kaW5nKSA6IEJ1ZmZlci5mcm9tKGlucHV0KTtcbn07XG4iLCJleHBvcnQgY29uc3QgYm9vbGVhblNlbGVjdG9yID0gKG9iaiwga2V5LCB0eXBlKSA9PiB7XG4gICAgaWYgKCEoa2V5IGluIG9iaikpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKG9ialtrZXldID09PSBcInRydWVcIilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKG9ialtrZXldID09PSBcImZhbHNlXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBsb2FkICR7dHlwZX0gXCIke2tleX1cIi4gRXhwZWN0ZWQgXCJ0cnVlXCIgb3IgXCJmYWxzZVwiLCBnb3QgJHtvYmpba2V5XX0uYCk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IG51bWJlclNlbGVjdG9yID0gKG9iaiwga2V5LCB0eXBlKSA9PiB7XG4gICAgaWYgKCEoa2V5IGluIG9iaikpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbnVtYmVyVmFsdWUgPSBwYXJzZUludChvYmpba2V5XSwgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4obnVtYmVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBsb2FkICR7dHlwZX0gJyR7a2V5fScuIEV4cGVjdGVkIG51bWJlciwgZ290ICcke29ialtrZXldfScuYCk7XG4gICAgfVxuICAgIHJldHVybiBudW1iZXJWYWx1ZTtcbn07XG4iLCJleHBvcnQgdmFyIFNlbGVjdG9yVHlwZTtcbihmdW5jdGlvbiAoU2VsZWN0b3JUeXBlKSB7XG4gICAgU2VsZWN0b3JUeXBlW1wiRU5WXCJdID0gXCJlbnZcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJDT05GSUdcIl0gPSBcInNoYXJlZCBjb25maWcgZW50cnlcIjtcbn0pKFNlbGVjdG9yVHlwZSB8fCAoU2VsZWN0b3JUeXBlID0ge30pKTtcbiIsImV4cG9ydCBjb25zdCBBV1NfRVhFQ1VUSU9OX0VOViA9IFwiQVdTX0VYRUNVVElPTl9FTlZcIjtcbmV4cG9ydCBjb25zdCBBV1NfUkVHSU9OX0VOViA9IFwiQVdTX1JFR0lPTlwiO1xuZXhwb3J0IGNvbnN0IEFXU19ERUZBVUxUX1JFR0lPTl9FTlYgPSBcIkFXU19ERUZBVUxUX1JFR0lPTlwiO1xuZXhwb3J0IGNvbnN0IEVOVl9JTURTX0RJU0FCTEVEID0gXCJBV1NfRUMyX01FVEFEQVRBX0RJU0FCTEVEXCI7XG5leHBvcnQgY29uc3QgREVGQVVMVFNfTU9ERV9PUFRJT05TID0gW1wiaW4tcmVnaW9uXCIsIFwiY3Jvc3MtcmVnaW9uXCIsIFwibW9iaWxlXCIsIFwic3RhbmRhcmRcIiwgXCJsZWdhY3lcIl07XG5leHBvcnQgY29uc3QgSU1EU19SRUdJT05fUEFUSCA9IFwiL2xhdGVzdC9tZXRhLWRhdGEvcGxhY2VtZW50L3JlZ2lvblwiO1xuIiwiY29uc3QgQVdTX0RFRkFVTFRTX01PREVfRU5WID0gXCJBV1NfREVGQVVMVFNfTU9ERVwiO1xuY29uc3QgQVdTX0RFRkFVTFRTX01PREVfQ09ORklHID0gXCJkZWZhdWx0c19tb2RlXCI7XG5leHBvcnQgY29uc3QgTk9ERV9ERUZBVUxUU19NT0RFX0NPTkZJR19PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4ge1xuICAgICAgICByZXR1cm4gZW52W0FXU19ERUZBVUxUU19NT0RFX0VOVl07XG4gICAgfSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiB7XG4gICAgICAgIHJldHVybiBwcm9maWxlW0FXU19ERUZBVUxUU19NT0RFX0NPTkZJR107XG4gICAgfSxcbiAgICBkZWZhdWx0OiBcImxlZ2FjeVwiLFxufTtcbiIsImltcG9ydCB7IE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TIH0gZnJvbSBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXJcIjtcbmltcG9ydCB7IG1lbW9pemUgfSBmcm9tIFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiO1xuaW1wb3J0IHsgQVdTX0RFRkFVTFRfUkVHSU9OX0VOViwgQVdTX0VYRUNVVElPTl9FTlYsIEFXU19SRUdJT05fRU5WLCBERUZBVUxUU19NT0RFX09QVElPTlMsIEVOVl9JTURTX0RJU0FCTEVELCBJTURTX1JFR0lPTl9QQVRILCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTk9ERV9ERUZBVUxUU19NT0RFX0NPTkZJR19PUFRJT05TIH0gZnJvbSBcIi4vZGVmYXVsdHNNb2RlQ29uZmlnXCI7XG5leHBvcnQgY29uc3QgcmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyA9ICh7IHJlZ2lvbiA9IGxvYWRDb25maWcoTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMpLCBkZWZhdWx0c01vZGUgPSBsb2FkQ29uZmlnKE5PREVfREVGQVVMVFNfTU9ERV9DT05GSUdfT1BUSU9OUyksIH0gPSB7fSkgPT4gbWVtb2l6ZShhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kZSA9IHR5cGVvZiBkZWZhdWx0c01vZGUgPT09IFwiZnVuY3Rpb25cIiA/IGF3YWl0IGRlZmF1bHRzTW9kZSgpIDogZGVmYXVsdHNNb2RlO1xuICAgIHN3aXRjaCAobW9kZT8udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlIFwiYXV0b1wiOlxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVOb2RlRGVmYXVsdHNNb2RlQXV0byhyZWdpb24pO1xuICAgICAgICBjYXNlIFwiaW4tcmVnaW9uXCI6XG4gICAgICAgIGNhc2UgXCJjcm9zcy1yZWdpb25cIjpcbiAgICAgICAgY2FzZSBcIm1vYmlsZVwiOlxuICAgICAgICBjYXNlIFwic3RhbmRhcmRcIjpcbiAgICAgICAgY2FzZSBcImxlZ2FjeVwiOlxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtb2RlPy50b0xvY2FsZUxvd2VyQ2FzZSgpKTtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFwibGVnYWN5XCIpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBhcmFtZXRlciBmb3IgXCJkZWZhdWx0c01vZGVcIiwgZXhwZWN0ICR7REVGQVVMVFNfTU9ERV9PUFRJT05TLmpvaW4oXCIsIFwiKX0sIGdvdCAke21vZGV9YCk7XG4gICAgfVxufSk7XG5jb25zdCByZXNvbHZlTm9kZURlZmF1bHRzTW9kZUF1dG8gPSBhc3luYyAoY2xpZW50UmVnaW9uKSA9PiB7XG4gICAgaWYgKGNsaWVudFJlZ2lvbikge1xuICAgICAgICBjb25zdCByZXNvbHZlZFJlZ2lvbiA9IHR5cGVvZiBjbGllbnRSZWdpb24gPT09IFwiZnVuY3Rpb25cIiA/IGF3YWl0IGNsaWVudFJlZ2lvbigpIDogY2xpZW50UmVnaW9uO1xuICAgICAgICBjb25zdCBpbmZlcnJlZFJlZ2lvbiA9IGF3YWl0IGluZmVyUGh5c2ljYWxSZWdpb24oKTtcbiAgICAgICAgaWYgKCFpbmZlcnJlZFJlZ2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIFwic3RhbmRhcmRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzb2x2ZWRSZWdpb24gPT09IGluZmVycmVkUmVnaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJpbi1yZWdpb25cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcImNyb3NzLXJlZ2lvblwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcInN0YW5kYXJkXCI7XG59O1xuY29uc3QgaW5mZXJQaHlzaWNhbFJlZ2lvbiA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnZbQVdTX0VYRUNVVElPTl9FTlZdICYmIChwcm9jZXNzLmVudltBV1NfUkVHSU9OX0VOVl0gfHwgcHJvY2Vzcy5lbnZbQVdTX0RFRkFVTFRfUkVHSU9OX0VOVl0pKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzLmVudltBV1NfUkVHSU9OX0VOVl0gPz8gcHJvY2Vzcy5lbnZbQVdTX0RFRkFVTFRfUkVHSU9OX0VOVl07XG4gICAgfVxuICAgIGlmICghcHJvY2Vzcy5lbnZbRU5WX0lNRFNfRElTQUJMRURdKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGdldEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludCwgaHR0cFJlcXVlc3QgfSA9IGF3YWl0IGltcG9ydChcIkBzbWl0aHkvY3JlZGVudGlhbC1wcm92aWRlci1pbWRzXCIpO1xuICAgICAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBhd2FpdCBnZXRJbnN0YW5jZU1ldGFkYXRhRW5kcG9pbnQoKTtcbiAgICAgICAgICAgIHJldHVybiAoYXdhaXQgaHR0cFJlcXVlc3QoeyAuLi5lbmRwb2ludCwgcGF0aDogSU1EU19SRUdJT05fUEFUSCB9KSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgfVxufTtcbiIsImNvbnN0IElQX1Y0X1JFR0VYID0gbmV3IFJlZ0V4cChgXig/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkpezN9JGApO1xuZXhwb3J0IGNvbnN0IGlzSXBBZGRyZXNzID0gKHZhbHVlKSA9PiBJUF9WNF9SRUdFWC50ZXN0KHZhbHVlKSB8fCAodmFsdWUuc3RhcnRzV2l0aChcIltcIikgJiYgdmFsdWUuZW5kc1dpdGgoXCJdXCIpKTtcbiIsImNvbnN0IFZBTElEX0hPU1RfTEFCRUxfUkVHRVggPSBuZXcgUmVnRXhwKGBeKD8hLiotJCkoPyEtKVthLXpBLVowLTktXXsxLDYzfSRgKTtcbmV4cG9ydCBjb25zdCBpc1ZhbGlkSG9zdExhYmVsID0gKHZhbHVlLCBhbGxvd1N1YkRvbWFpbnMgPSBmYWxzZSkgPT4ge1xuICAgIGlmICghYWxsb3dTdWJEb21haW5zKSB7XG4gICAgICAgIHJldHVybiBWQUxJRF9IT1NUX0xBQkVMX1JFR0VYLnRlc3QodmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbHMgPSB2YWx1ZS5zcGxpdChcIi5cIik7XG4gICAgZm9yIChjb25zdCBsYWJlbCBvZiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkSG9zdExhYmVsKGxhYmVsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbiIsImV4cG9ydCBjb25zdCBjdXN0b21FbmRwb2ludEZ1bmN0aW9ucyA9IHt9O1xuIiwiZXhwb3J0IGNvbnN0IGRlYnVnSWQgPSBcImVuZHBvaW50c1wiO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIHRvRGVidWdTdHJpbmcoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoXCJyZWZcIiBpbiBpbnB1dCkge1xuICAgICAgICByZXR1cm4gYCQke3RvRGVidWdTdHJpbmcoaW5wdXQucmVmKX1gO1xuICAgIH1cbiAgICBpZiAoXCJmblwiIGluIGlucHV0KSB7XG4gICAgICAgIHJldHVybiBgJHtpbnB1dC5mbn0oJHsoaW5wdXQuYXJndiB8fCBbXSkubWFwKHRvRGVidWdTdHJpbmcpLmpvaW4oXCIsIFwiKX0pYDtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGlucHV0LCBudWxsLCAyKTtcbn1cbiIsImV4cG9ydCBjbGFzcyBFbmRwb2ludEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiRW5kcG9pbnRFcnJvclwiO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBib29sZWFuRXF1YWxzID0gKHZhbHVlMSwgdmFsdWUyKSA9PiB2YWx1ZTEgPT09IHZhbHVlMjtcbiIsImltcG9ydCB7IEVuZHBvaW50RXJyb3IgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IGdldEF0dHJQYXRoTGlzdCB9IGZyb20gXCIuL2dldEF0dHJQYXRoTGlzdFwiO1xuZXhwb3J0IGNvbnN0IGdldEF0dHIgPSAodmFsdWUsIHBhdGgpID0+IGdldEF0dHJQYXRoTGlzdChwYXRoKS5yZWR1Y2UoKGFjYywgaW5kZXgpID0+IHtcbiAgICBpZiAodHlwZW9mIGFjYyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgSW5kZXggJyR7aW5kZXh9JyBpbiAnJHtwYXRofScgbm90IGZvdW5kIGluICcke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0nYCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYWNjKSkge1xuICAgICAgICByZXR1cm4gYWNjW3BhcnNlSW50KGluZGV4KV07XG4gICAgfVxuICAgIHJldHVybiBhY2NbaW5kZXhdO1xufSwgdmFsdWUpO1xuIiwiaW1wb3J0IHsgRW5kcG9pbnRFcnJvciB9IGZyb20gXCIuLi90eXBlc1wiO1xuZXhwb3J0IGNvbnN0IGdldEF0dHJQYXRoTGlzdCA9IChwYXRoKSA9PiB7XG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KFwiLlwiKTtcbiAgICBjb25zdCBwYXRoTGlzdCA9IFtdO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgICAgICBjb25zdCBzcXVhcmVCcmFja2V0SW5kZXggPSBwYXJ0LmluZGV4T2YoXCJbXCIpO1xuICAgICAgICBpZiAoc3F1YXJlQnJhY2tldEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKHBhcnQuaW5kZXhPZihcIl1cIikgIT09IHBhcnQubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBQYXRoOiAnJHtwYXRofScgZG9lcyBub3QgZW5kIHdpdGggJ10nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhcnJheUluZGV4ID0gcGFydC5zbGljZShzcXVhcmVCcmFja2V0SW5kZXggKyAxLCAtMSk7XG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHBhcnNlSW50KGFycmF5SW5kZXgpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBJbnZhbGlkIGFycmF5IGluZGV4OiAnJHthcnJheUluZGV4fScgaW4gcGF0aDogJyR7cGF0aH0nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3F1YXJlQnJhY2tldEluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcGF0aExpc3QucHVzaChwYXJ0LnNsaWNlKDAsIHNxdWFyZUJyYWNrZXRJbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF0aExpc3QucHVzaChhcnJheUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGhMaXN0LnB1c2gocGFydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhdGhMaXN0O1xufTtcbiIsImltcG9ydCB7IEVuZHBvaW50VVJMU2NoZW1lIH0gZnJvbSBcIkBzbWl0aHkvdHlwZXNcIjtcbmltcG9ydCB7IGlzSXBBZGRyZXNzIH0gZnJvbSBcIi4vaXNJcEFkZHJlc3NcIjtcbmNvbnN0IERFRkFVTFRfUE9SVFMgPSB7XG4gICAgW0VuZHBvaW50VVJMU2NoZW1lLkhUVFBdOiA4MCxcbiAgICBbRW5kcG9pbnRVUkxTY2hlbWUuSFRUUFNdOiA0NDMsXG59O1xuZXhwb3J0IGNvbnN0IHBhcnNlVVJMID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgd2hhdHdnVVJMID0gKCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVSTCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgXCJob3N0bmFtZVwiIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBob3N0bmFtZSwgcG9ydCwgcHJvdG9jb2wgPSBcIlwiLCBwYXRoID0gXCJcIiwgcXVlcnkgPSB7fSB9ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHtwcm90b2NvbH0vLyR7aG9zdG5hbWV9JHtwb3J0ID8gYDoke3BvcnR9YCA6IFwiXCJ9JHtwYXRofWApO1xuICAgICAgICAgICAgICAgIHVybC5zZWFyY2ggPSBPYmplY3QuZW50cmllcyhxdWVyeSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoW2ssIHZdKSA9PiBgJHtrfT0ke3Z9YClcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCImXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVSTCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH0pKCk7XG4gICAgaWYgKCF3aGF0d2dVUkwpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgVW5hYmxlIHRvIHBhcnNlICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfSBhcyBhIHdoYXR3ZyBVUkwuYCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB1cmxTdHJpbmcgPSB3aGF0d2dVUkwuaHJlZjtcbiAgICBjb25zdCB7IGhvc3QsIGhvc3RuYW1lLCBwYXRobmFtZSwgcHJvdG9jb2wsIHNlYXJjaCB9ID0gd2hhdHdnVVJMO1xuICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHNjaGVtZSA9IHByb3RvY29sLnNsaWNlKDAsIC0xKTtcbiAgICBpZiAoIU9iamVjdC52YWx1ZXMoRW5kcG9pbnRVUkxTY2hlbWUpLmluY2x1ZGVzKHNjaGVtZSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGlzSXAgPSBpc0lwQWRkcmVzcyhob3N0bmFtZSk7XG4gICAgY29uc3QgaW5wdXRDb250YWluc0RlZmF1bHRQb3J0ID0gdXJsU3RyaW5nLmluY2x1ZGVzKGAke2hvc3R9OiR7REVGQVVMVF9QT1JUU1tzY2hlbWVdfWApIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuaW5jbHVkZXMoYCR7aG9zdH06JHtERUZBVUxUX1BPUlRTW3NjaGVtZV19YCkpO1xuICAgIGNvbnN0IGF1dGhvcml0eSA9IGAke2hvc3R9JHtpbnB1dENvbnRhaW5zRGVmYXVsdFBvcnQgPyBgOiR7REVGQVVMVF9QT1JUU1tzY2hlbWVdfWAgOiBgYH1gO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjaGVtZSxcbiAgICAgICAgYXV0aG9yaXR5LFxuICAgICAgICBwYXRoOiBwYXRobmFtZSxcbiAgICAgICAgbm9ybWFsaXplZFBhdGg6IHBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IHBhdGhuYW1lIDogYCR7cGF0aG5hbWV9L2AsXG4gICAgICAgIGlzSXAsXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBib29sZWFuRXF1YWxzLCBnZXRBdHRyLCBpc1NldCwgaXNWYWxpZEhvc3RMYWJlbCwgbm90LCBwYXJzZVVSTCwgc3RyaW5nRXF1YWxzLCBzdWJzdHJpbmcsIHVyaUVuY29kZSwgfSBmcm9tIFwiLi4vbGliXCI7XG5leHBvcnQgY29uc3QgZW5kcG9pbnRGdW5jdGlvbnMgPSB7XG4gICAgYm9vbGVhbkVxdWFscyxcbiAgICBnZXRBdHRyLFxuICAgIGlzU2V0LFxuICAgIGlzVmFsaWRIb3N0TGFiZWwsXG4gICAgbm90LFxuICAgIHBhcnNlVVJMLFxuICAgIHN0cmluZ0VxdWFscyxcbiAgICBzdWJzdHJpbmcsXG4gICAgdXJpRW5jb2RlLFxufTtcbiIsImV4cG9ydCBjb25zdCBpc1NldCA9ICh2YWx1ZSkgPT4gdmFsdWUgIT0gbnVsbDtcbiIsImV4cG9ydCBjb25zdCBub3QgPSAodmFsdWUpID0+ICF2YWx1ZTtcbiIsImV4cG9ydCBjb25zdCBzdHJpbmdFcXVhbHMgPSAodmFsdWUxLCB2YWx1ZTIpID0+IHZhbHVlMSA9PT0gdmFsdWUyO1xuIiwiZXhwb3J0IGNvbnN0IHN1YnN0cmluZyA9IChpbnB1dCwgc3RhcnQsIHN0b3AsIHJldmVyc2UpID0+IHtcbiAgICBpZiAoc3RhcnQgPj0gc3RvcCB8fCBpbnB1dC5sZW5ndGggPCBzdG9wKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoIXJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZyhzdGFydCwgc3RvcCk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcoaW5wdXQubGVuZ3RoIC0gc3RvcCwgaW5wdXQubGVuZ3RoIC0gc3RhcnQpO1xufTtcbiIsImV4cG9ydCBjb25zdCB1cmlFbmNvZGUgPSAodmFsdWUpID0+IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkucmVwbGFjZSgvWyEqJygpXS9nLCAoYykgPT4gYCUke2MuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKTtcbiIsImltcG9ydCB7IGdldEF0dHIgfSBmcm9tIFwiLi4vbGliXCI7XG5leHBvcnQgY29uc3QgZXZhbHVhdGVUZW1wbGF0ZSA9ICh0ZW1wbGF0ZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGV2YWx1YXRlZFRlbXBsYXRlQXJyID0gW107XG4gICAgY29uc3QgdGVtcGxhdGVDb250ZXh0ID0ge1xuICAgICAgICAuLi5vcHRpb25zLmVuZHBvaW50UGFyYW1zLFxuICAgICAgICAuLi5vcHRpb25zLnJlZmVyZW5jZVJlY29yZCxcbiAgICB9O1xuICAgIGxldCBjdXJyZW50SW5kZXggPSAwO1xuICAgIHdoaWxlIChjdXJyZW50SW5kZXggPCB0ZW1wbGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qgb3BlbmluZ0JyYWNlSW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKFwie1wiLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICBpZiAob3BlbmluZ0JyYWNlSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBldmFsdWF0ZWRUZW1wbGF0ZUFyci5wdXNoKHRlbXBsYXRlLnNsaWNlKGN1cnJlbnRJbmRleCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZXZhbHVhdGVkVGVtcGxhdGVBcnIucHVzaCh0ZW1wbGF0ZS5zbGljZShjdXJyZW50SW5kZXgsIG9wZW5pbmdCcmFjZUluZGV4KSk7XG4gICAgICAgIGNvbnN0IGNsb3NpbmdCcmFjZUluZGV4ID0gdGVtcGxhdGUuaW5kZXhPZihcIn1cIiwgb3BlbmluZ0JyYWNlSW5kZXgpO1xuICAgICAgICBpZiAoY2xvc2luZ0JyYWNlSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBldmFsdWF0ZWRUZW1wbGF0ZUFyci5wdXNoKHRlbXBsYXRlLnNsaWNlKG9wZW5pbmdCcmFjZUluZGV4KSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGVtcGxhdGVbb3BlbmluZ0JyYWNlSW5kZXggKyAxXSA9PT0gXCJ7XCIgJiYgdGVtcGxhdGVbY2xvc2luZ0JyYWNlSW5kZXggKyAxXSA9PT0gXCJ9XCIpIHtcbiAgICAgICAgICAgIGV2YWx1YXRlZFRlbXBsYXRlQXJyLnB1c2godGVtcGxhdGUuc2xpY2Uob3BlbmluZ0JyYWNlSW5kZXggKyAxLCBjbG9zaW5nQnJhY2VJbmRleCkpO1xuICAgICAgICAgICAgY3VycmVudEluZGV4ID0gY2xvc2luZ0JyYWNlSW5kZXggKyAyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlck5hbWUgPSB0ZW1wbGF0ZS5zdWJzdHJpbmcob3BlbmluZ0JyYWNlSW5kZXggKyAxLCBjbG9zaW5nQnJhY2VJbmRleCk7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJOYW1lLmluY2x1ZGVzKFwiI1wiKSkge1xuICAgICAgICAgICAgY29uc3QgW3JlZk5hbWUsIGF0dHJOYW1lXSA9IHBhcmFtZXRlck5hbWUuc3BsaXQoXCIjXCIpO1xuICAgICAgICAgICAgZXZhbHVhdGVkVGVtcGxhdGVBcnIucHVzaChnZXRBdHRyKHRlbXBsYXRlQ29udGV4dFtyZWZOYW1lXSwgYXR0ck5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV2YWx1YXRlZFRlbXBsYXRlQXJyLnB1c2godGVtcGxhdGVDb250ZXh0W3BhcmFtZXRlck5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50SW5kZXggPSBjbG9zaW5nQnJhY2VJbmRleCArIDE7XG4gICAgfVxuICAgIHJldHVybiBldmFsdWF0ZWRUZW1wbGF0ZUFyci5qb2luKFwiXCIpO1xufTtcbiIsImltcG9ydCB7IEVuZHBvaW50RXJyb3IgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IGNhbGxGdW5jdGlvbiB9IGZyb20gXCIuL2NhbGxGdW5jdGlvblwiO1xuaW1wb3J0IHsgZXZhbHVhdGVUZW1wbGF0ZSB9IGZyb20gXCIuL2V2YWx1YXRlVGVtcGxhdGVcIjtcbmltcG9ydCB7IGdldFJlZmVyZW5jZVZhbHVlIH0gZnJvbSBcIi4vZ2V0UmVmZXJlbmNlVmFsdWVcIjtcbmV4cG9ydCBjb25zdCBldmFsdWF0ZUV4cHJlc3Npb24gPSAob2JqLCBrZXlOYW1lLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGV2YWx1YXRlVGVtcGxhdGUob2JqLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAob2JqW1wiZm5cIl0pIHtcbiAgICAgICAgcmV0dXJuIGNhbGxGdW5jdGlvbihvYmosIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmpbXCJyZWZcIl0pIHtcbiAgICAgICAgcmV0dXJuIGdldFJlZmVyZW5jZVZhbHVlKG9iaiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGAnJHtrZXlOYW1lfSc6ICR7U3RyaW5nKG9iail9IGlzIG5vdCBhIHN0cmluZywgZnVuY3Rpb24gb3IgcmVmZXJlbmNlLmApO1xufTtcbiIsImV4cG9ydCBjb25zdCBnZXRSZWZlcmVuY2VWYWx1ZSA9ICh7IHJlZiB9LCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgcmVmZXJlbmNlUmVjb3JkID0ge1xuICAgICAgICAuLi5vcHRpb25zLmVuZHBvaW50UGFyYW1zLFxuICAgICAgICAuLi5vcHRpb25zLnJlZmVyZW5jZVJlY29yZCxcbiAgICB9O1xuICAgIHJldHVybiByZWZlcmVuY2VSZWNvcmRbcmVmXTtcbn07XG4iLCJpbXBvcnQgeyBjdXN0b21FbmRwb2ludEZ1bmN0aW9ucyB9IGZyb20gXCIuL2N1c3RvbUVuZHBvaW50RnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBlbmRwb2ludEZ1bmN0aW9ucyB9IGZyb20gXCIuL2VuZHBvaW50RnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBldmFsdWF0ZUV4cHJlc3Npb24gfSBmcm9tIFwiLi9ldmFsdWF0ZUV4cHJlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBjYWxsRnVuY3Rpb24gPSAoeyBmbiwgYXJndiB9LCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgZXZhbHVhdGVkQXJncyA9IGFyZ3YubWFwKChhcmcpID0+IFtcImJvb2xlYW5cIiwgXCJudW1iZXJcIl0uaW5jbHVkZXModHlwZW9mIGFyZykgPyBhcmcgOiBldmFsdWF0ZUV4cHJlc3Npb24oYXJnLCBcImFyZ1wiLCBvcHRpb25zKSk7XG4gICAgY29uc3QgZm5TZWdtZW50cyA9IGZuLnNwbGl0KFwiLlwiKTtcbiAgICBpZiAoZm5TZWdtZW50c1swXSBpbiBjdXN0b21FbmRwb2ludEZ1bmN0aW9ucyAmJiBmblNlZ21lbnRzWzFdICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zW2ZuU2VnbWVudHNbMF1dW2ZuU2VnbWVudHNbMV1dKC4uLmV2YWx1YXRlZEFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gZW5kcG9pbnRGdW5jdGlvbnNbZm5dKC4uLmV2YWx1YXRlZEFyZ3MpO1xufTtcbiIsImltcG9ydCB7IGRlYnVnSWQsIHRvRGVidWdTdHJpbmcgfSBmcm9tIFwiLi4vZGVidWdcIjtcbmltcG9ydCB7IEVuZHBvaW50RXJyb3IgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IGNhbGxGdW5jdGlvbiB9IGZyb20gXCIuL2NhbGxGdW5jdGlvblwiO1xuZXhwb3J0IGNvbnN0IGV2YWx1YXRlQ29uZGl0aW9uID0gKHsgYXNzaWduLCAuLi5mbkFyZ3MgfSwgb3B0aW9ucykgPT4ge1xuICAgIGlmIChhc3NpZ24gJiYgYXNzaWduIGluIG9wdGlvbnMucmVmZXJlbmNlUmVjb3JkKSB7XG4gICAgICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGAnJHthc3NpZ259JyBpcyBhbHJlYWR5IGRlZmluZWQgaW4gUmVmZXJlbmNlIFJlY29yZC5gKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBjYWxsRnVuY3Rpb24oZm5BcmdzLCBvcHRpb25zKTtcbiAgICBvcHRpb25zLmxvZ2dlcj8uZGVidWc/LihkZWJ1Z0lkLCBgZXZhbHVhdGVDb25kaXRpb246ICR7dG9EZWJ1Z1N0cmluZyhmbkFyZ3MpfSA9ICR7dG9EZWJ1Z1N0cmluZyh2YWx1ZSl9YCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB2YWx1ZSA9PT0gXCJcIiA/IHRydWUgOiAhIXZhbHVlLFxuICAgICAgICAuLi4oYXNzaWduICE9IG51bGwgJiYgeyB0b0Fzc2lnbjogeyBuYW1lOiBhc3NpZ24sIHZhbHVlIH0gfSksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBkZWJ1Z0lkLCB0b0RlYnVnU3RyaW5nIH0gZnJvbSBcIi4uL2RlYnVnXCI7XG5pbXBvcnQgeyBldmFsdWF0ZUNvbmRpdGlvbiB9IGZyb20gXCIuL2V2YWx1YXRlQ29uZGl0aW9uXCI7XG5leHBvcnQgY29uc3QgZXZhbHVhdGVDb25kaXRpb25zID0gKGNvbmRpdGlvbnMgPSBbXSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGNvbmRpdGlvbnNSZWZlcmVuY2VSZWNvcmQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGNvbmRpdGlvbiBvZiBjb25kaXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgcmVzdWx0LCB0b0Fzc2lnbiB9ID0gZXZhbHVhdGVDb25kaXRpb24oY29uZGl0aW9uLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgcmVmZXJlbmNlUmVjb3JkOiB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5yZWZlcmVuY2VSZWNvcmQsXG4gICAgICAgICAgICAgICAgLi4uY29uZGl0aW9uc1JlZmVyZW5jZVJlY29yZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgcmVzdWx0IH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvQXNzaWduKSB7XG4gICAgICAgICAgICBjb25kaXRpb25zUmVmZXJlbmNlUmVjb3JkW3RvQXNzaWduLm5hbWVdID0gdG9Bc3NpZ24udmFsdWU7XG4gICAgICAgICAgICBvcHRpb25zLmxvZ2dlcj8uZGVidWc/LihkZWJ1Z0lkLCBgYXNzaWduOiAke3RvQXNzaWduLm5hbWV9IDo9ICR7dG9EZWJ1Z1N0cmluZyh0b0Fzc2lnbi52YWx1ZSl9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWZlcmVuY2VSZWNvcmQ6IGNvbmRpdGlvbnNSZWZlcmVuY2VSZWNvcmQgfTtcbn07XG4iLCJpbXBvcnQgeyBFbmRwb2ludEVycm9yIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBldmFsdWF0ZUV4cHJlc3Npb24gfSBmcm9tIFwiLi9ldmFsdWF0ZUV4cHJlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBnZXRFbmRwb2ludEhlYWRlcnMgPSAoaGVhZGVycywgb3B0aW9ucykgPT4gT2JqZWN0LmVudHJpZXMoaGVhZGVycykucmVkdWNlKChhY2MsIFtoZWFkZXJLZXksIGhlYWRlclZhbF0pID0+ICh7XG4gICAgLi4uYWNjLFxuICAgIFtoZWFkZXJLZXldOiBoZWFkZXJWYWwubWFwKChoZWFkZXJWYWxFbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9jZXNzZWRFeHByID0gZXZhbHVhdGVFeHByZXNzaW9uKGhlYWRlclZhbEVudHJ5LCBcIkhlYWRlciB2YWx1ZSBlbnRyeVwiLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzZWRFeHByICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgSGVhZGVyICcke2hlYWRlcktleX0nIHZhbHVlICcke3Byb2Nlc3NlZEV4cHJ9JyBpcyBub3QgYSBzdHJpbmdgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkRXhwcjtcbiAgICB9KSxcbn0pLCB7fSk7XG4iLCJpbXBvcnQgeyBFbmRwb2ludEVycm9yIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBldmFsdWF0ZVRlbXBsYXRlIH0gZnJvbSBcIi4vZXZhbHVhdGVUZW1wbGF0ZVwiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzXCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRQcm9wZXJ0eSA9IChwcm9wZXJ0eSwgb3B0aW9ucykgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BlcnR5KSkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHkubWFwKChwcm9wZXJ0eUVudHJ5KSA9PiBnZXRFbmRwb2ludFByb3BlcnR5KHByb3BlcnR5RW50cnksIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcGVydHkpIHtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIGV2YWx1YXRlVGVtcGxhdGUocHJvcGVydHksIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgVW5leHBlY3RlZCBlbmRwb2ludCBwcm9wZXJ0eTogJHtwcm9wZXJ0eX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZXRFbmRwb2ludFByb3BlcnRpZXMocHJvcGVydHksIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYFVuZXhwZWN0ZWQgZW5kcG9pbnQgcHJvcGVydHkgdHlwZTogJHt0eXBlb2YgcHJvcGVydHl9YCk7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IGdldEVuZHBvaW50UHJvcGVydHkgfSBmcm9tIFwiLi9nZXRFbmRwb2ludFByb3BlcnR5XCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzID0gKHByb3BlcnRpZXMsIG9wdGlvbnMpID0+IE9iamVjdC5lbnRyaWVzKHByb3BlcnRpZXMpLnJlZHVjZSgoYWNjLCBbcHJvcGVydHlLZXksIHByb3BlcnR5VmFsXSkgPT4gKHtcbiAgICAuLi5hY2MsXG4gICAgW3Byb3BlcnR5S2V5XTogZ2V0RW5kcG9pbnRQcm9wZXJ0eShwcm9wZXJ0eVZhbCwgb3B0aW9ucyksXG59KSwge30pO1xuIiwiaW1wb3J0IHsgRW5kcG9pbnRFcnJvciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgZXZhbHVhdGVFeHByZXNzaW9uIH0gZnJvbSBcIi4vZXZhbHVhdGVFeHByZXNzaW9uXCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRVcmwgPSAoZW5kcG9pbnRVcmwsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBleHByZXNzaW9uID0gZXZhbHVhdGVFeHByZXNzaW9uKGVuZHBvaW50VXJsLCBcIkVuZHBvaW50IFVSTFwiLCBvcHRpb25zKTtcbiAgICBpZiAodHlwZW9mIGV4cHJlc3Npb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVVJMKGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNvbnN0cnVjdCBVUkwgd2l0aCAke2V4cHJlc3Npb259YCwgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYEVuZHBvaW50IFVSTCBtdXN0IGJlIGEgc3RyaW5nLCBnb3QgJHt0eXBlb2YgZXhwcmVzc2lvbn1gKTtcbn07XG4iLCJpbXBvcnQgeyBkZWJ1Z0lkLCB0b0RlYnVnU3RyaW5nIH0gZnJvbSBcIi4uL2RlYnVnXCI7XG5pbXBvcnQgeyBldmFsdWF0ZUNvbmRpdGlvbnMgfSBmcm9tIFwiLi9ldmFsdWF0ZUNvbmRpdGlvbnNcIjtcbmltcG9ydCB7IGdldEVuZHBvaW50SGVhZGVycyB9IGZyb20gXCIuL2dldEVuZHBvaW50SGVhZGVyc1wiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBnZXRFbmRwb2ludFVybCB9IGZyb20gXCIuL2dldEVuZHBvaW50VXJsXCI7XG5leHBvcnQgY29uc3QgZXZhbHVhdGVFbmRwb2ludFJ1bGUgPSAoZW5kcG9pbnRSdWxlLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgeyBjb25kaXRpb25zLCBlbmRwb2ludCB9ID0gZW5kcG9pbnRSdWxlO1xuICAgIGNvbnN0IHsgcmVzdWx0LCByZWZlcmVuY2VSZWNvcmQgfSA9IGV2YWx1YXRlQ29uZGl0aW9ucyhjb25kaXRpb25zLCBvcHRpb25zKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGVuZHBvaW50UnVsZU9wdGlvbnMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHJlZmVyZW5jZVJlY29yZDogeyAuLi5vcHRpb25zLnJlZmVyZW5jZVJlY29yZCwgLi4ucmVmZXJlbmNlUmVjb3JkIH0sXG4gICAgfTtcbiAgICBjb25zdCB7IHVybCwgcHJvcGVydGllcywgaGVhZGVycyB9ID0gZW5kcG9pbnQ7XG4gICAgb3B0aW9ucy5sb2dnZXI/LmRlYnVnPy4oZGVidWdJZCwgYFJlc29sdmluZyBlbmRwb2ludCBmcm9tIHRlbXBsYXRlOiAke3RvRGVidWdTdHJpbmcoZW5kcG9pbnQpfWApO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLihoZWFkZXJzICE9IHVuZGVmaW5lZCAmJiB7XG4gICAgICAgICAgICBoZWFkZXJzOiBnZXRFbmRwb2ludEhlYWRlcnMoaGVhZGVycywgZW5kcG9pbnRSdWxlT3B0aW9ucyksXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4ocHJvcGVydGllcyAhPSB1bmRlZmluZWQgJiYge1xuICAgICAgICAgICAgcHJvcGVydGllczogZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzKHByb3BlcnRpZXMsIGVuZHBvaW50UnVsZU9wdGlvbnMpLFxuICAgICAgICB9KSxcbiAgICAgICAgdXJsOiBnZXRFbmRwb2ludFVybCh1cmwsIGVuZHBvaW50UnVsZU9wdGlvbnMpLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgRW5kcG9pbnRFcnJvciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgZXZhbHVhdGVDb25kaXRpb25zIH0gZnJvbSBcIi4vZXZhbHVhdGVDb25kaXRpb25zXCI7XG5pbXBvcnQgeyBldmFsdWF0ZUV4cHJlc3Npb24gfSBmcm9tIFwiLi9ldmFsdWF0ZUV4cHJlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBldmFsdWF0ZUVycm9yUnVsZSA9IChlcnJvclJ1bGUsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB7IGNvbmRpdGlvbnMsIGVycm9yIH0gPSBlcnJvclJ1bGU7XG4gICAgY29uc3QgeyByZXN1bHQsIHJlZmVyZW5jZVJlY29yZCB9ID0gZXZhbHVhdGVDb25kaXRpb25zKGNvbmRpdGlvbnMsIG9wdGlvbnMpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoZXZhbHVhdGVFeHByZXNzaW9uKGVycm9yLCBcIkVycm9yXCIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgcmVmZXJlbmNlUmVjb3JkOiB7IC4uLm9wdGlvbnMucmVmZXJlbmNlUmVjb3JkLCAuLi5yZWZlcmVuY2VSZWNvcmQgfSxcbiAgICB9KSk7XG59O1xuIiwiaW1wb3J0IHsgZXZhbHVhdGVDb25kaXRpb25zIH0gZnJvbSBcIi4vZXZhbHVhdGVDb25kaXRpb25zXCI7XG5pbXBvcnQgeyBldmFsdWF0ZVJ1bGVzIH0gZnJvbSBcIi4vZXZhbHVhdGVSdWxlc1wiO1xuZXhwb3J0IGNvbnN0IGV2YWx1YXRlVHJlZVJ1bGUgPSAodHJlZVJ1bGUsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB7IGNvbmRpdGlvbnMsIHJ1bGVzIH0gPSB0cmVlUnVsZTtcbiAgICBjb25zdCB7IHJlc3VsdCwgcmVmZXJlbmNlUmVjb3JkIH0gPSBldmFsdWF0ZUNvbmRpdGlvbnMoY29uZGl0aW9ucywgb3B0aW9ucyk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gZXZhbHVhdGVSdWxlcyhydWxlcywge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICByZWZlcmVuY2VSZWNvcmQ6IHsgLi4ub3B0aW9ucy5yZWZlcmVuY2VSZWNvcmQsIC4uLnJlZmVyZW5jZVJlY29yZCB9LFxuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IEVuZHBvaW50RXJyb3IgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IGV2YWx1YXRlRW5kcG9pbnRSdWxlIH0gZnJvbSBcIi4vZXZhbHVhdGVFbmRwb2ludFJ1bGVcIjtcbmltcG9ydCB7IGV2YWx1YXRlRXJyb3JSdWxlIH0gZnJvbSBcIi4vZXZhbHVhdGVFcnJvclJ1bGVcIjtcbmltcG9ydCB7IGV2YWx1YXRlVHJlZVJ1bGUgfSBmcm9tIFwiLi9ldmFsdWF0ZVRyZWVSdWxlXCI7XG5leHBvcnQgY29uc3QgZXZhbHVhdGVSdWxlcyA9IChydWxlcywgb3B0aW9ucykgPT4ge1xuICAgIGZvciAoY29uc3QgcnVsZSBvZiBydWxlcykge1xuICAgICAgICBpZiAocnVsZS50eXBlID09PSBcImVuZHBvaW50XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50T3JVbmRlZmluZWQgPSBldmFsdWF0ZUVuZHBvaW50UnVsZShydWxlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChlbmRwb2ludE9yVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuZHBvaW50T3JVbmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocnVsZS50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGV2YWx1YXRlRXJyb3JSdWxlKHJ1bGUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJ1bGUudHlwZSA9PT0gXCJ0cmVlXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50T3JVbmRlZmluZWQgPSBldmFsdWF0ZVRyZWVSdWxlKHJ1bGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGVuZHBvaW50T3JVbmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5kcG9pbnRPclVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBVbmtub3duIGVuZHBvaW50IHJ1bGU6ICR7cnVsZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgUnVsZXMgZXZhbHVhdGlvbiBmYWlsZWRgKTtcbn07XG4iLCJpbXBvcnQgeyBkZWJ1Z0lkLCB0b0RlYnVnU3RyaW5nIH0gZnJvbSBcIi4vZGVidWdcIjtcbmltcG9ydCB7IEVuZHBvaW50RXJyb3IgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgZXZhbHVhdGVSdWxlcyB9IGZyb20gXCIuL3V0aWxzXCI7XG5leHBvcnQgY29uc3QgcmVzb2x2ZUVuZHBvaW50ID0gKHJ1bGVTZXRPYmplY3QsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB7IGVuZHBvaW50UGFyYW1zLCBsb2dnZXIgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgeyBwYXJhbWV0ZXJzLCBydWxlcyB9ID0gcnVsZVNldE9iamVjdDtcbiAgICBvcHRpb25zLmxvZ2dlcj8uZGVidWc/LihgJHtkZWJ1Z0lkfSBJbml0aWFsIEVuZHBvaW50UGFyYW1zOiAke3RvRGVidWdTdHJpbmcoZW5kcG9pbnRQYXJhbXMpfWApO1xuICAgIGNvbnN0IHBhcmFtc1dpdGhEZWZhdWx0ID0gT2JqZWN0LmVudHJpZXMocGFyYW1ldGVycylcbiAgICAgICAgLmZpbHRlcigoWywgdl0pID0+IHYuZGVmYXVsdCAhPSBudWxsKVxuICAgICAgICAubWFwKChbaywgdl0pID0+IFtrLCB2LmRlZmF1bHRdKTtcbiAgICBpZiAocGFyYW1zV2l0aERlZmF1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IFtwYXJhbUtleSwgcGFyYW1EZWZhdWx0VmFsdWVdIG9mIHBhcmFtc1dpdGhEZWZhdWx0KSB7XG4gICAgICAgICAgICBlbmRwb2ludFBhcmFtc1twYXJhbUtleV0gPSBlbmRwb2ludFBhcmFtc1twYXJhbUtleV0gPz8gcGFyYW1EZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVxdWlyZWRQYXJhbXMgPSBPYmplY3QuZW50cmllcyhwYXJhbWV0ZXJzKVxuICAgICAgICAuZmlsdGVyKChbLCB2XSkgPT4gdi5yZXF1aXJlZClcbiAgICAgICAgLm1hcCgoW2tdKSA9PiBrKTtcbiAgICBmb3IgKGNvbnN0IHJlcXVpcmVkUGFyYW0gb2YgcmVxdWlyZWRQYXJhbXMpIHtcbiAgICAgICAgaWYgKGVuZHBvaW50UGFyYW1zW3JlcXVpcmVkUGFyYW1dID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogJyR7cmVxdWlyZWRQYXJhbX0nYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZW5kcG9pbnQgPSBldmFsdWF0ZVJ1bGVzKHJ1bGVzLCB7IGVuZHBvaW50UGFyYW1zLCBsb2dnZXIsIHJlZmVyZW5jZVJlY29yZDoge30gfSk7XG4gICAgaWYgKG9wdGlvbnMuZW5kcG9pbnRQYXJhbXM/LkVuZHBvaW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBnaXZlbkVuZHBvaW50ID0gbmV3IFVSTChvcHRpb25zLmVuZHBvaW50UGFyYW1zLkVuZHBvaW50KTtcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvdG9jb2wsIHBvcnQgfSA9IGdpdmVuRW5kcG9pbnQ7XG4gICAgICAgICAgICBlbmRwb2ludC51cmwucHJvdG9jb2wgPSBwcm90b2NvbDtcbiAgICAgICAgICAgIGVuZHBvaW50LnVybC5wb3J0ID0gcG9ydDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgfVxuICAgIG9wdGlvbnMubG9nZ2VyPy5kZWJ1Zz8uKGAke2RlYnVnSWR9IFJlc29sdmVkIGVuZHBvaW50OiAke3RvRGVidWdTdHJpbmcoZW5kcG9pbnQpfWApO1xuICAgIHJldHVybiBlbmRwb2ludDtcbn07XG4iLCJpbXBvcnQgeyBTTUlUSFlfQ09OVEVYVF9LRVkgfSBmcm9tIFwiQHNtaXRoeS90eXBlc1wiO1xuZXhwb3J0IGNvbnN0IGdldFNtaXRoeUNvbnRleHQgPSAoY29udGV4dCkgPT4gY29udGV4dFtTTUlUSFlfQ09OVEVYVF9LRVldIHx8IChjb250ZXh0W1NNSVRIWV9DT05URVhUX0tFWV0gPSB7fSk7XG4iLCJleHBvcnQgY29uc3Qgbm9ybWFsaXplUHJvdmlkZXIgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICBjb25zdCBwcm9taXNpZmllZCA9IFByb21pc2UucmVzb2x2ZShpbnB1dCk7XG4gICAgcmV0dXJuICgpID0+IHByb21pc2lmaWVkO1xufTtcbiIsImV4cG9ydCB2YXIgUkVUUllfTU9ERVM7XG4oZnVuY3Rpb24gKFJFVFJZX01PREVTKSB7XG4gICAgUkVUUllfTU9ERVNbXCJTVEFOREFSRFwiXSA9IFwic3RhbmRhcmRcIjtcbiAgICBSRVRSWV9NT0RFU1tcIkFEQVBUSVZFXCJdID0gXCJhZGFwdGl2ZVwiO1xufSkoUkVUUllfTU9ERVMgfHwgKFJFVFJZX01PREVTID0ge30pKTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX01BWF9BVFRFTVBUUyA9IDM7XG5leHBvcnQgY29uc3QgREVGQVVMVF9SRVRSWV9NT0RFID0gUkVUUllfTU9ERVMuU1RBTkRBUkQ7XG4iLCJpbXBvcnQgeyBpc1Rocm90dGxpbmdFcnJvciB9IGZyb20gXCJAc21pdGh5L3NlcnZpY2UtZXJyb3ItY2xhc3NpZmljYXRpb25cIjtcbmV4cG9ydCBjbGFzcyBEZWZhdWx0UmF0ZUxpbWl0ZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Q2FwYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sYXN0TWF4UmF0ZSA9IDA7XG4gICAgICAgIHRoaXMubWVhc3VyZWRUeFJhdGUgPSAwO1xuICAgICAgICB0aGlzLnJlcXVlc3RDb3VudCA9IDA7XG4gICAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IDA7XG4gICAgICAgIHRoaXMudGltZVdpbmRvdyA9IDA7XG4gICAgICAgIHRoaXMuYmV0YSA9IG9wdGlvbnM/LmJldGEgPz8gMC43O1xuICAgICAgICB0aGlzLm1pbkNhcGFjaXR5ID0gb3B0aW9ucz8ubWluQ2FwYWNpdHkgPz8gMTtcbiAgICAgICAgdGhpcy5taW5GaWxsUmF0ZSA9IG9wdGlvbnM/Lm1pbkZpbGxSYXRlID8/IDAuNTtcbiAgICAgICAgdGhpcy5zY2FsZUNvbnN0YW50ID0gb3B0aW9ucz8uc2NhbGVDb25zdGFudCA/PyAwLjQ7XG4gICAgICAgIHRoaXMuc21vb3RoID0gb3B0aW9ucz8uc21vb3RoID8/IDAuODtcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWVJblNlY29uZHMgPSB0aGlzLmdldEN1cnJlbnRUaW1lSW5TZWNvbmRzKCk7XG4gICAgICAgIHRoaXMubGFzdFRocm90dGxlVGltZSA9IGN1cnJlbnRUaW1lSW5TZWNvbmRzO1xuICAgICAgICB0aGlzLmxhc3RUeFJhdGVCdWNrZXQgPSBNYXRoLmZsb29yKHRoaXMuZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKSk7XG4gICAgICAgIHRoaXMuZmlsbFJhdGUgPSB0aGlzLm1pbkZpbGxSYXRlO1xuICAgICAgICB0aGlzLm1heENhcGFjaXR5ID0gdGhpcy5taW5DYXBhY2l0eTtcbiAgICB9XG4gICAgZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpIC8gMTAwMDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0U2VuZFRva2VuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3F1aXJlVG9rZW5CdWNrZXQoMSk7XG4gICAgfVxuICAgIGFzeW5jIGFjcXVpcmVUb2tlbkJ1Y2tldChhbW91bnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZmlsbFRva2VuQnVja2V0KCk7XG4gICAgICAgIGlmIChhbW91bnQgPiB0aGlzLmN1cnJlbnRDYXBhY2l0eSkge1xuICAgICAgICAgICAgY29uc3QgZGVsYXkgPSAoKGFtb3VudCAtIHRoaXMuY3VycmVudENhcGFjaXR5KSAvIHRoaXMuZmlsbFJhdGUpICogMTAwMDtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50Q2FwYWNpdHkgPSB0aGlzLmN1cnJlbnRDYXBhY2l0eSAtIGFtb3VudDtcbiAgICB9XG4gICAgcmVmaWxsVG9rZW5CdWNrZXQoKSB7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRoaXMuZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKTtcbiAgICAgICAgaWYgKCF0aGlzLmxhc3RUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxsQW1vdW50ID0gKHRpbWVzdGFtcCAtIHRoaXMubGFzdFRpbWVzdGFtcCkgKiB0aGlzLmZpbGxSYXRlO1xuICAgICAgICB0aGlzLmN1cnJlbnRDYXBhY2l0eSA9IE1hdGgubWluKHRoaXMubWF4Q2FwYWNpdHksIHRoaXMuY3VycmVudENhcGFjaXR5ICsgZmlsbEFtb3VudCk7XG4gICAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICB9XG4gICAgdXBkYXRlQ2xpZW50U2VuZGluZ1JhdGUocmVzcG9uc2UpIHtcbiAgICAgICAgbGV0IGNhbGN1bGF0ZWRSYXRlO1xuICAgICAgICB0aGlzLnVwZGF0ZU1lYXN1cmVkUmF0ZSgpO1xuICAgICAgICBpZiAoaXNUaHJvdHRsaW5nRXJyb3IocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICBjb25zdCByYXRlVG9Vc2UgPSAhdGhpcy5lbmFibGVkID8gdGhpcy5tZWFzdXJlZFR4UmF0ZSA6IE1hdGgubWluKHRoaXMubWVhc3VyZWRUeFJhdGUsIHRoaXMuZmlsbFJhdGUpO1xuICAgICAgICAgICAgdGhpcy5sYXN0TWF4UmF0ZSA9IHJhdGVUb1VzZTtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlVGltZVdpbmRvdygpO1xuICAgICAgICAgICAgdGhpcy5sYXN0VGhyb3R0bGVUaW1lID0gdGhpcy5nZXRDdXJyZW50VGltZUluU2Vjb25kcygpO1xuICAgICAgICAgICAgY2FsY3VsYXRlZFJhdGUgPSB0aGlzLmN1YmljVGhyb3R0bGUocmF0ZVRvVXNlKTtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlVG9rZW5CdWNrZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlVGltZVdpbmRvdygpO1xuICAgICAgICAgICAgY2FsY3VsYXRlZFJhdGUgPSB0aGlzLmN1YmljU3VjY2Vzcyh0aGlzLmdldEN1cnJlbnRUaW1lSW5TZWNvbmRzKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld1JhdGUgPSBNYXRoLm1pbihjYWxjdWxhdGVkUmF0ZSwgMiAqIHRoaXMubWVhc3VyZWRUeFJhdGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZVRva2VuQnVja2V0UmF0ZShuZXdSYXRlKTtcbiAgICB9XG4gICAgY2FsY3VsYXRlVGltZVdpbmRvdygpIHtcbiAgICAgICAgdGhpcy50aW1lV2luZG93ID0gdGhpcy5nZXRQcmVjaXNlKE1hdGgucG93KCh0aGlzLmxhc3RNYXhSYXRlICogKDEgLSB0aGlzLmJldGEpKSAvIHRoaXMuc2NhbGVDb25zdGFudCwgMSAvIDMpKTtcbiAgICB9XG4gICAgY3ViaWNUaHJvdHRsZShyYXRlVG9Vc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJlY2lzZShyYXRlVG9Vc2UgKiB0aGlzLmJldGEpO1xuICAgIH1cbiAgICBjdWJpY1N1Y2Nlc3ModGltZXN0YW1wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByZWNpc2UodGhpcy5zY2FsZUNvbnN0YW50ICogTWF0aC5wb3codGltZXN0YW1wIC0gdGhpcy5sYXN0VGhyb3R0bGVUaW1lIC0gdGhpcy50aW1lV2luZG93LCAzKSArIHRoaXMubGFzdE1heFJhdGUpO1xuICAgIH1cbiAgICBlbmFibGVUb2tlbkJ1Y2tldCgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdXBkYXRlVG9rZW5CdWNrZXRSYXRlKG5ld1JhdGUpIHtcbiAgICAgICAgdGhpcy5yZWZpbGxUb2tlbkJ1Y2tldCgpO1xuICAgICAgICB0aGlzLmZpbGxSYXRlID0gTWF0aC5tYXgobmV3UmF0ZSwgdGhpcy5taW5GaWxsUmF0ZSk7XG4gICAgICAgIHRoaXMubWF4Q2FwYWNpdHkgPSBNYXRoLm1heChuZXdSYXRlLCB0aGlzLm1pbkNhcGFjaXR5KTtcbiAgICAgICAgdGhpcy5jdXJyZW50Q2FwYWNpdHkgPSBNYXRoLm1pbih0aGlzLmN1cnJlbnRDYXBhY2l0eSwgdGhpcy5tYXhDYXBhY2l0eSk7XG4gICAgfVxuICAgIHVwZGF0ZU1lYXN1cmVkUmF0ZSgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKTtcbiAgICAgICAgY29uc3QgdGltZUJ1Y2tldCA9IE1hdGguZmxvb3IodCAqIDIpIC8gMjtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q291bnQrKztcbiAgICAgICAgaWYgKHRpbWVCdWNrZXQgPiB0aGlzLmxhc3RUeFJhdGVCdWNrZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSYXRlID0gdGhpcy5yZXF1ZXN0Q291bnQgLyAodGltZUJ1Y2tldCAtIHRoaXMubGFzdFR4UmF0ZUJ1Y2tldCk7XG4gICAgICAgICAgICB0aGlzLm1lYXN1cmVkVHhSYXRlID0gdGhpcy5nZXRQcmVjaXNlKGN1cnJlbnRSYXRlICogdGhpcy5zbW9vdGggKyB0aGlzLm1lYXN1cmVkVHhSYXRlICogKDEgLSB0aGlzLnNtb290aCkpO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0Q291bnQgPSAwO1xuICAgICAgICAgICAgdGhpcy5sYXN0VHhSYXRlQnVja2V0ID0gdGltZUJ1Y2tldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQcmVjaXNlKG51bSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChudW0udG9GaXhlZCg4KSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IERFRkFVTFRfUkVUUllfREVMQVlfQkFTRSA9IDEwMDtcbmV4cG9ydCBjb25zdCBNQVhJTVVNX1JFVFJZX0RFTEFZID0gMjAgKiAxMDAwO1xuZXhwb3J0IGNvbnN0IFRIUk9UVExJTkdfUkVUUllfREVMQVlfQkFTRSA9IDUwMDtcbmV4cG9ydCBjb25zdCBJTklUSUFMX1JFVFJZX1RPS0VOUyA9IDUwMDtcbmV4cG9ydCBjb25zdCBSRVRSWV9DT1NUID0gNTtcbmV4cG9ydCBjb25zdCBUSU1FT1VUX1JFVFJZX0NPU1QgPSAxMDtcbmV4cG9ydCBjb25zdCBOT19SRVRSWV9JTkNSRU1FTlQgPSAxO1xuZXhwb3J0IGNvbnN0IElOVk9DQVRJT05fSURfSEVBREVSID0gXCJhbXotc2RrLWludm9jYXRpb24taWRcIjtcbmV4cG9ydCBjb25zdCBSRVFVRVNUX0hFQURFUiA9IFwiYW16LXNkay1yZXF1ZXN0XCI7XG4iLCJpbXBvcnQgeyBNQVhJTVVNX1JFVFJZX0RFTEFZIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgY29uc3QgY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4gPSAoeyByZXRyeURlbGF5LCByZXRyeUNvdW50LCByZXRyeUNvc3QsIH0pID0+IHtcbiAgICBjb25zdCBnZXRSZXRyeUNvdW50ID0gKCkgPT4gcmV0cnlDb3VudDtcbiAgICBjb25zdCBnZXRSZXRyeURlbGF5ID0gKCkgPT4gTWF0aC5taW4oTUFYSU1VTV9SRVRSWV9ERUxBWSwgcmV0cnlEZWxheSk7XG4gICAgY29uc3QgZ2V0UmV0cnlDb3N0ID0gKCkgPT4gcmV0cnlDb3N0O1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldFJldHJ5Q291bnQsXG4gICAgICAgIGdldFJldHJ5RGVsYXksXG4gICAgICAgIGdldFJldHJ5Q29zdCxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IERFRkFVTFRfTUFYX0FUVEVNUFRTLCBSRVRSWV9NT0RFUyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IHsgREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFLCBJTklUSUFMX1JFVFJZX1RPS0VOUywgTk9fUkVUUllfSU5DUkVNRU5ULCBSRVRSWV9DT1NULCBUSFJPVFRMSU5HX1JFVFJZX0RFTEFZX0JBU0UsIFRJTUVPVVRfUkVUUllfQ09TVCwgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRSZXRyeUJhY2tvZmZTdHJhdGVneSB9IGZyb20gXCIuL2RlZmF1bHRSZXRyeUJhY2tvZmZTdHJhdGVneVwiO1xuaW1wb3J0IHsgY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4gfSBmcm9tIFwiLi9kZWZhdWx0UmV0cnlUb2tlblwiO1xuZXhwb3J0IGNsYXNzIFN0YW5kYXJkUmV0cnlTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IobWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgdGhpcy5tYXhBdHRlbXB0cyA9IG1heEF0dGVtcHRzO1xuICAgICAgICB0aGlzLm1vZGUgPSBSRVRSWV9NT0RFUy5TVEFOREFSRDtcbiAgICAgICAgdGhpcy5jYXBhY2l0eSA9IElOSVRJQUxfUkVUUllfVE9LRU5TO1xuICAgICAgICB0aGlzLnJldHJ5QmFja29mZlN0cmF0ZWd5ID0gZ2V0RGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5KCk7XG4gICAgICAgIHRoaXMubWF4QXR0ZW1wdHNQcm92aWRlciA9IHR5cGVvZiBtYXhBdHRlbXB0cyA9PT0gXCJmdW5jdGlvblwiID8gbWF4QXR0ZW1wdHMgOiBhc3luYyAoKSA9PiBtYXhBdHRlbXB0cztcbiAgICB9XG4gICAgYXN5bmMgYWNxdWlyZUluaXRpYWxSZXRyeVRva2VuKHJldHJ5VG9rZW5TY29wZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4oe1xuICAgICAgICAgICAgcmV0cnlEZWxheTogREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFLFxuICAgICAgICAgICAgcmV0cnlDb3VudDogMCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHJlZnJlc2hSZXRyeVRva2VuRm9yUmV0cnkodG9rZW4sIGVycm9ySW5mbykge1xuICAgICAgICBjb25zdCBtYXhBdHRlbXB0cyA9IGF3YWl0IHRoaXMuZ2V0TWF4QXR0ZW1wdHMoKTtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkUmV0cnkodG9rZW4sIGVycm9ySW5mbywgbWF4QXR0ZW1wdHMpKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvclR5cGUgPSBlcnJvckluZm8uZXJyb3JUeXBlO1xuICAgICAgICAgICAgdGhpcy5yZXRyeUJhY2tvZmZTdHJhdGVneS5zZXREZWxheUJhc2UoZXJyb3JUeXBlID09PSBcIlRIUk9UVExJTkdcIiA/IFRIUk9UVExJTkdfUkVUUllfREVMQVlfQkFTRSA6IERFRkFVTFRfUkVUUllfREVMQVlfQkFTRSk7XG4gICAgICAgICAgICBjb25zdCBkZWxheUZyb21FcnJvclR5cGUgPSB0aGlzLnJldHJ5QmFja29mZlN0cmF0ZWd5LmNvbXB1dGVOZXh0QmFja29mZkRlbGF5KHRva2VuLmdldFJldHJ5Q291bnQoKSk7XG4gICAgICAgICAgICBjb25zdCByZXRyeURlbGF5ID0gZXJyb3JJbmZvLnJldHJ5QWZ0ZXJIaW50XG4gICAgICAgICAgICAgICAgPyBNYXRoLm1heChlcnJvckluZm8ucmV0cnlBZnRlckhpbnQuZ2V0VGltZSgpIC0gRGF0ZS5ub3coKSB8fCAwLCBkZWxheUZyb21FcnJvclR5cGUpXG4gICAgICAgICAgICAgICAgOiBkZWxheUZyb21FcnJvclR5cGU7XG4gICAgICAgICAgICBjb25zdCBjYXBhY2l0eUNvc3QgPSB0aGlzLmdldENhcGFjaXR5Q29zdChlcnJvclR5cGUpO1xuICAgICAgICAgICAgdGhpcy5jYXBhY2l0eSAtPSBjYXBhY2l0eUNvc3Q7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4oe1xuICAgICAgICAgICAgICAgIHJldHJ5RGVsYXksXG4gICAgICAgICAgICAgICAgcmV0cnlDb3VudDogdG9rZW4uZ2V0UmV0cnlDb3VudCgpICsgMSxcbiAgICAgICAgICAgICAgICByZXRyeUNvc3Q6IGNhcGFjaXR5Q29zdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHJldHJ5IHRva2VuIGF2YWlsYWJsZVwiKTtcbiAgICB9XG4gICAgcmVjb3JkU3VjY2Vzcyh0b2tlbikge1xuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gTWF0aC5tYXgoSU5JVElBTF9SRVRSWV9UT0tFTlMsIHRoaXMuY2FwYWNpdHkgKyAodG9rZW4uZ2V0UmV0cnlDb3N0KCkgPz8gTk9fUkVUUllfSU5DUkVNRU5UKSk7XG4gICAgfVxuICAgIGdldENhcGFjaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYXBhY2l0eTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TWF4QXR0ZW1wdHMoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5tYXhBdHRlbXB0c1Byb3ZpZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYE1heCBhdHRlbXB0cyBwcm92aWRlciBjb3VsZCBub3QgcmVzb2x2ZS4gVXNpbmcgZGVmYXVsdCBvZiAke0RFRkFVTFRfTUFYX0FUVEVNUFRTfWApO1xuICAgICAgICAgICAgcmV0dXJuIERFRkFVTFRfTUFYX0FUVEVNUFRTO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNob3VsZFJldHJ5KHRva2VuVG9SZW5ldywgZXJyb3JJbmZvLCBtYXhBdHRlbXB0cykge1xuICAgICAgICBjb25zdCBhdHRlbXB0cyA9IHRva2VuVG9SZW5ldy5nZXRSZXRyeUNvdW50KCkgKyAxO1xuICAgICAgICByZXR1cm4gKGF0dGVtcHRzIDwgbWF4QXR0ZW1wdHMgJiZcbiAgICAgICAgICAgIHRoaXMuY2FwYWNpdHkgPj0gdGhpcy5nZXRDYXBhY2l0eUNvc3QoZXJyb3JJbmZvLmVycm9yVHlwZSkgJiZcbiAgICAgICAgICAgIHRoaXMuaXNSZXRyeWFibGVFcnJvcihlcnJvckluZm8uZXJyb3JUeXBlKSk7XG4gICAgfVxuICAgIGdldENhcGFjaXR5Q29zdChlcnJvclR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yVHlwZSA9PT0gXCJUUkFOU0lFTlRcIiA/IFRJTUVPVVRfUkVUUllfQ09TVCA6IFJFVFJZX0NPU1Q7XG4gICAgfVxuICAgIGlzUmV0cnlhYmxlRXJyb3IoZXJyb3JUeXBlKSB7XG4gICAgICAgIHJldHVybiBlcnJvclR5cGUgPT09IFwiVEhST1RUTElOR1wiIHx8IGVycm9yVHlwZSA9PT0gXCJUUkFOU0lFTlRcIjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBERUZBVUxUX1JFVFJZX0RFTEFZX0JBU0UsIE1BWElNVU1fUkVUUllfREVMQVkgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0UmV0cnlCYWNrb2ZmU3RyYXRlZ3kgPSAoKSA9PiB7XG4gICAgbGV0IGRlbGF5QmFzZSA9IERFRkFVTFRfUkVUUllfREVMQVlfQkFTRTtcbiAgICBjb25zdCBjb21wdXRlTmV4dEJhY2tvZmZEZWxheSA9IChhdHRlbXB0cykgPT4ge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLm1pbihNQVhJTVVNX1JFVFJZX0RFTEFZLCBNYXRoLnJhbmRvbSgpICogMiAqKiBhdHRlbXB0cyAqIGRlbGF5QmFzZSkpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0RGVsYXlCYXNlID0gKGRlbGF5KSA9PiB7XG4gICAgICAgIGRlbGF5QmFzZSA9IGRlbGF5O1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29tcHV0ZU5leHRCYWNrb2ZmRGVsYXksXG4gICAgICAgIHNldERlbGF5QmFzZSxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IFJFVFJZX01PREVTIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBEZWZhdWx0UmF0ZUxpbWl0ZXIgfSBmcm9tIFwiLi9EZWZhdWx0UmF0ZUxpbWl0ZXJcIjtcbmltcG9ydCB7IFN0YW5kYXJkUmV0cnlTdHJhdGVneSB9IGZyb20gXCIuL1N0YW5kYXJkUmV0cnlTdHJhdGVneVwiO1xuZXhwb3J0IGNsYXNzIEFkYXB0aXZlUmV0cnlTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IobWF4QXR0ZW1wdHNQcm92aWRlciwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLm1heEF0dGVtcHRzUHJvdmlkZXIgPSBtYXhBdHRlbXB0c1Byb3ZpZGVyO1xuICAgICAgICB0aGlzLm1vZGUgPSBSRVRSWV9NT0RFUy5BREFQVElWRTtcbiAgICAgICAgY29uc3QgeyByYXRlTGltaXRlciB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgdGhpcy5yYXRlTGltaXRlciA9IHJhdGVMaW1pdGVyID8/IG5ldyBEZWZhdWx0UmF0ZUxpbWl0ZXIoKTtcbiAgICAgICAgdGhpcy5zdGFuZGFyZFJldHJ5U3RyYXRlZ3kgPSBuZXcgU3RhbmRhcmRSZXRyeVN0cmF0ZWd5KG1heEF0dGVtcHRzUHJvdmlkZXIpO1xuICAgIH1cbiAgICBhc3luYyBhY3F1aXJlSW5pdGlhbFJldHJ5VG9rZW4ocmV0cnlUb2tlblNjb3BlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucmF0ZUxpbWl0ZXIuZ2V0U2VuZFRva2VuKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YW5kYXJkUmV0cnlTdHJhdGVneS5hY3F1aXJlSW5pdGlhbFJldHJ5VG9rZW4ocmV0cnlUb2tlblNjb3BlKTtcbiAgICB9XG4gICAgYXN5bmMgcmVmcmVzaFJldHJ5VG9rZW5Gb3JSZXRyeSh0b2tlblRvUmVuZXcsIGVycm9ySW5mbykge1xuICAgICAgICB0aGlzLnJhdGVMaW1pdGVyLnVwZGF0ZUNsaWVudFNlbmRpbmdSYXRlKGVycm9ySW5mbyk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YW5kYXJkUmV0cnlTdHJhdGVneS5yZWZyZXNoUmV0cnlUb2tlbkZvclJldHJ5KHRva2VuVG9SZW5ldywgZXJyb3JJbmZvKTtcbiAgICB9XG4gICAgcmVjb3JkU3VjY2Vzcyh0b2tlbikge1xuICAgICAgICB0aGlzLnJhdGVMaW1pdGVyLnVwZGF0ZUNsaWVudFNlbmRpbmdSYXRlKHt9KTtcbiAgICAgICAgdGhpcy5zdGFuZGFyZFJldHJ5U3RyYXRlZ3kucmVjb3JkU3VjY2Vzcyh0b2tlbik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgdHJhbnNmb3JtRnJvbVN0cmluZywgdHJhbnNmb3JtVG9TdHJpbmcgfSBmcm9tIFwiLi90cmFuc2Zvcm1zXCI7XG5leHBvcnQgY2xhc3MgVWludDhBcnJheUJsb2JBZGFwdGVyIGV4dGVuZHMgVWludDhBcnJheSB7XG4gICAgc3RhdGljIGZyb21TdHJpbmcoc291cmNlLCBlbmNvZGluZyA9IFwidXRmLThcIikge1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtRnJvbVN0cmluZyhzb3VyY2UsIGVuY29kaW5nKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBjb252ZXJzaW9uIGZyb20gJHt0eXBlb2Ygc291cmNlfSB0byBVaW50OEFycmF5QmxvYkFkYXB0ZXIuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIG11dGF0ZShzb3VyY2UpIHtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHNvdXJjZSwgVWludDhBcnJheUJsb2JBZGFwdGVyLnByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuICAgIHRyYW5zZm9ybVRvU3RyaW5nKGVuY29kaW5nID0gXCJ1dGYtOFwiKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1Ub1N0cmluZyh0aGlzLCBlbmNvZGluZyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZnJvbUJhc2U2NCwgdG9CYXNlNjQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiO1xuaW1wb3J0IHsgZnJvbVV0ZjgsIHRvVXRmOCB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXRmOFwiO1xuaW1wb3J0IHsgVWludDhBcnJheUJsb2JBZGFwdGVyIH0gZnJvbSBcIi4vVWludDhBcnJheUJsb2JBZGFwdGVyXCI7XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtVG9TdHJpbmcocGF5bG9hZCwgZW5jb2RpbmcgPSBcInV0Zi04XCIpIHtcbiAgICBpZiAoZW5jb2RpbmcgPT09IFwiYmFzZTY0XCIpIHtcbiAgICAgICAgcmV0dXJuIHRvQmFzZTY0KHBheWxvYWQpO1xuICAgIH1cbiAgICByZXR1cm4gdG9VdGY4KHBheWxvYWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUZyb21TdHJpbmcoc3RyLCBlbmNvZGluZykge1xuICAgIGlmIChlbmNvZGluZyA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheUJsb2JBZGFwdGVyLm11dGF0ZShmcm9tQmFzZTY0KHN0cikpO1xuICAgIH1cbiAgICByZXR1cm4gVWludDhBcnJheUJsb2JBZGFwdGVyLm11dGF0ZShmcm9tVXRmOChzdHIpKTtcbn1cbiIsImltcG9ydCB7IHN0cmVhbUNvbGxlY3RvciB9IGZyb20gXCJAc21pdGh5L25vZGUtaHR0cC1oYW5kbGVyXCI7XG5pbXBvcnQgeyBmcm9tQXJyYXlCdWZmZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tXCI7XG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gXCJzdHJlYW1cIjtcbmltcG9ydCB7IFRleHREZWNvZGVyIH0gZnJvbSBcInV0aWxcIjtcbmNvbnN0IEVSUl9NU0dfU1RSRUFNX0hBU19CRUVOX1RSQU5TRk9STUVEID0gXCJUaGUgc3RyZWFtIGhhcyBhbHJlYWR5IGJlZW4gdHJhbnNmb3JtZWQuXCI7XG5leHBvcnQgY29uc3Qgc2RrU3RyZWFtTWl4aW4gPSAoc3RyZWFtKSA9PiB7XG4gICAgaWYgKCEoc3RyZWFtIGluc3RhbmNlb2YgUmVhZGFibGUpKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBzdHJlYW0/Ll9fcHJvdG9fXz8uY29uc3RydWN0b3I/Lm5hbWUgfHwgc3RyZWFtO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgc3RyZWFtIGltcGxlbWVudGF0aW9uLCBleHBlY3QgU3RyZWFtLlJlYWRhYmxlIGluc3RhbmNlLCBnb3QgJHtuYW1lfWApO1xuICAgIH1cbiAgICBsZXQgdHJhbnNmb3JtZWQgPSBmYWxzZTtcbiAgICBjb25zdCB0cmFuc2Zvcm1Ub0J5dGVBcnJheSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKHRyYW5zZm9ybWVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJSX01TR19TVFJFQU1fSEFTX0JFRU5fVFJBTlNGT1JNRUQpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zZm9ybWVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0cmVhbUNvbGxlY3RvcihzdHJlYW0pO1xuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3RyZWFtLCB7XG4gICAgICAgIHRyYW5zZm9ybVRvQnl0ZUFycmF5LFxuICAgICAgICB0cmFuc2Zvcm1Ub1N0cmluZzogYXN5bmMgKGVuY29kaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCB0cmFuc2Zvcm1Ub0J5dGVBcnJheSgpO1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQgfHwgQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShidWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2Zvcm1Ub1dlYlN0cmVhbTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUl9NU0dfU1RSRUFNX0hBU19CRUVOX1RSQU5TRk9STUVEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJlYW0ucmVhZGFibGVGbG93aW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSBoYXMgYmVlbiBjb25zdW1lZCBieSBvdGhlciBjYWxsYmFja3MuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBSZWFkYWJsZS50b1dlYiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhZGFibGUudG9XZWIoKSBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBhcmUgdXNpbmcgTm9kZS5qcyA+PSAxNy4wLjAsIG9yIHBvbHlmaWxsIGlzIGF2YWlsYWJsZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFuc2Zvcm1lZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gUmVhZGFibGUudG9XZWIoc3RyZWFtKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn07XG4iLCJleHBvcnQgY29uc3QgZXNjYXBlVXJpID0gKHVyaSkgPT4gZW5jb2RlVVJJQ29tcG9uZW50KHVyaSkucmVwbGFjZSgvWyEnKCkqXS9nLCBoZXhFbmNvZGUpO1xuY29uc3QgaGV4RW5jb2RlID0gKGMpID0+IGAlJHtjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCl9YDtcbiIsImltcG9ydCB7IGZyb21TdHJpbmcgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tXCI7XG5leHBvcnQgY29uc3QgZnJvbVV0ZjggPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCBidWYgPSBmcm9tU3RyaW5nKGlucHV0LCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1Zi5idWZmZXIsIGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZUxlbmd0aCAvIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xufTtcbiIsImltcG9ydCB7IGZyb21VdGY4IH0gZnJvbSBcIi4vZnJvbVV0ZjhcIjtcbmV4cG9ydCBjb25zdCB0b1VpbnQ4QXJyYXkgPSAoZGF0YSkgPT4ge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZnJvbVV0ZjgoZGF0YSk7XG4gICAgfVxuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCAvIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG59O1xuIiwiaW1wb3J0IHsgZnJvbUFycmF5QnVmZmVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiO1xuZXhwb3J0IGNvbnN0IHRvVXRmOCA9IChpbnB1dCkgPT4gZnJvbUFycmF5QnVmZmVyKGlucHV0LmJ1ZmZlciwgaW5wdXQuYnl0ZU9mZnNldCwgaW5wdXQuYnl0ZUxlbmd0aCkudG9TdHJpbmcoXCJ1dGY4XCIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCcuL3ZhbGlkYXRvcicpO1xuY29uc3QgWE1MUGFyc2VyID0gcmVxdWlyZSgnLi94bWxwYXJzZXIvWE1MUGFyc2VyJyk7XG5jb25zdCBYTUxCdWlsZGVyID0gcmVxdWlyZSgnLi94bWxidWlsZGVyL2pzb24yeG1sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBYTUxQYXJzZXI6IFhNTFBhcnNlcixcbiAgWE1MVmFsaWRhdG9yOiB2YWxpZGF0b3IsXG4gIFhNTEJ1aWxkZXI6IFhNTEJ1aWxkZXJcbn0iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5hbWVTdGFydENoYXIgPSAnOkEtWmEtel9cXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG5jb25zdCBuYW1lQ2hhciA9IG5hbWVTdGFydENoYXIgKyAnXFxcXC0uXFxcXGRcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCc7XG5jb25zdCBuYW1lUmVnZXhwID0gJ1snICsgbmFtZVN0YXJ0Q2hhciArICddWycgKyBuYW1lQ2hhciArICddKidcbmNvbnN0IHJlZ2V4TmFtZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZVJlZ2V4cCArICckJyk7XG5cbmNvbnN0IGdldEFsbE1hdGNoZXMgPSBmdW5jdGlvbihzdHJpbmcsIHJlZ2V4KSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgbGV0IG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICB3aGlsZSAobWF0Y2gpIHtcbiAgICBjb25zdCBhbGxtYXRjaGVzID0gW107XG4gICAgYWxsbWF0Y2hlcy5zdGFydEluZGV4ID0gcmVnZXgubGFzdEluZGV4IC0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGNvbnN0IGxlbiA9IG1hdGNoLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICBhbGxtYXRjaGVzLnB1c2gobWF0Y2hbaW5kZXhdKTtcbiAgICB9XG4gICAgbWF0Y2hlcy5wdXNoKGFsbG1hdGNoZXMpO1xuICAgIG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuY29uc3QgaXNOYW1lID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGNvbnN0IG1hdGNoID0gcmVnZXhOYW1lLmV4ZWMoc3RyaW5nKTtcbiAgcmV0dXJuICEobWF0Y2ggPT09IG51bGwgfHwgdHlwZW9mIG1hdGNoID09PSAndW5kZWZpbmVkJyk7XG59O1xuXG5leHBvcnRzLmlzRXhpc3QgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5leHBvcnRzLmlzRW1wdHlPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufTtcblxuLyoqXG4gKiBDb3B5IGFsbCB0aGUgcHJvcGVydGllcyBvZiBhIGludG8gYi5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0XG4gKiBAcGFyYW0geyp9IGFcbiAqL1xuZXhwb3J0cy5tZXJnZSA9IGZ1bmN0aW9uKHRhcmdldCwgYSwgYXJyYXlNb2RlKSB7XG4gIGlmIChhKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpOyAvLyB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBvd24gcHJvcGVydGllc1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGFycmF5TW9kZSA9PT0gJ3N0cmljdCcpIHtcbiAgICAgICAgdGFyZ2V0W2tleXNbaV1dID0gWyBhW2tleXNbaV1dIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5c1tpXV0gPSBhW2tleXNbaV1dO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbi8qIGV4cG9ydHMubWVyZ2UgPWZ1bmN0aW9uIChiLGEpe1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihiLGEpO1xufSAqL1xuXG5leHBvcnRzLmdldFZhbHVlID0gZnVuY3Rpb24odikge1xuICBpZiAoZXhwb3J0cy5pc0V4aXN0KHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vLyBjb25zdCBmYWtlQ2FsbCA9IGZ1bmN0aW9uKGEpIHtyZXR1cm4gYTt9O1xuLy8gY29uc3QgZmFrZUNhbGxOb1JldHVybiA9IGZ1bmN0aW9uKCkge307XG5cbmV4cG9ydHMuaXNOYW1lID0gaXNOYW1lO1xuZXhwb3J0cy5nZXRBbGxNYXRjaGVzID0gZ2V0QWxsTWF0Y2hlcztcbmV4cG9ydHMubmFtZVJlZ2V4cCA9IG5hbWVSZWdleHA7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGFsbG93Qm9vbGVhbkF0dHJpYnV0ZXM6IGZhbHNlLCAvL0EgdGFnIGNhbiBoYXZlIGF0dHJpYnV0ZXMgd2l0aG91dCBhbnkgdmFsdWVcbiAgdW5wYWlyZWRUYWdzOiBbXVxufTtcblxuLy9jb25zdCB0YWdzUGF0dGVybiA9IG5ldyBSZWdFeHAoXCI8XFxcXC8/KFtcXFxcdzpcXFxcLV9cXC5dKylcXFxccypcXC8/PlwiLFwiZ1wiKTtcbmV4cG9ydHMudmFsaWRhdGUgPSBmdW5jdGlvbiAoeG1sRGF0YSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gIC8veG1sRGF0YSA9IHhtbERhdGEucmVwbGFjZSgvKFxcclxcbnxcXG58XFxyKS9nbSxcIlwiKTsvL21ha2UgaXQgc2luZ2xlIGxpbmVcbiAgLy94bWxEYXRhID0geG1sRGF0YS5yZXBsYWNlKC8oXlxccyo8XFw/eG1sLio/XFw/PikvZyxcIlwiKTsvL1JlbW92ZSBYTUwgc3RhcnRpbmcgdGFnXG4gIC8veG1sRGF0YSA9IHhtbERhdGEucmVwbGFjZSgvKDwhRE9DVFlQRVtcXHNcXHdcXFwiXFwuXFwvXFwtXFw6XSsoXFxbLipcXF0pKlxccyo+KS9nLFwiXCIpOy8vUmVtb3ZlIERPQ1RZUEVcbiAgY29uc3QgdGFncyA9IFtdO1xuICBsZXQgdGFnRm91bmQgPSBmYWxzZTtcblxuICAvL2luZGljYXRlcyB0aGF0IHRoZSByb290IHRhZyBoYXMgYmVlbiBjbG9zZWQgKGFrYS4gZGVwdGggMCBoYXMgYmVlbiByZWFjaGVkKVxuICBsZXQgcmVhY2hlZFJvb3QgPSBmYWxzZTtcblxuICBpZiAoeG1sRGF0YVswXSA9PT0gJ1xcdWZlZmYnKSB7XG4gICAgLy8gY2hlY2sgZm9yIGJ5dGUgb3JkZXIgbWFyayAoQk9NKVxuICAgIHhtbERhdGEgPSB4bWxEYXRhLnN1YnN0cigxKTtcbiAgfVxuICBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG5cbiAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnICYmIHhtbERhdGFbaSsxXSA9PT0gJz8nKSB7XG4gICAgICBpKz0yO1xuICAgICAgaSA9IHJlYWRQSSh4bWxEYXRhLGkpO1xuICAgICAgaWYgKGkuZXJyKSByZXR1cm4gaTtcbiAgICB9ZWxzZSBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnKSB7XG4gICAgICAvL3N0YXJ0aW5nIG9mIHRhZ1xuICAgICAgLy9yZWFkIHVudGlsIHlvdSByZWFjaCB0byAnPicgYXZvaWRpbmcgYW55ICc+JyBpbiBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgIGxldCB0YWdTdGFydFBvcyA9IGk7XG4gICAgICBpKys7XG4gICAgICBcbiAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnIScpIHtcbiAgICAgICAgaSA9IHJlYWRDb21tZW50QW5kQ0RBVEEoeG1sRGF0YSwgaSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGNsb3NpbmdUYWcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICcvJykge1xuICAgICAgICAgIC8vY2xvc2luZyB0YWdcbiAgICAgICAgICBjbG9zaW5nVGFnID0gdHJ1ZTtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgLy9yZWFkIHRhZ25hbWVcbiAgICAgICAgbGV0IHRhZ05hbWUgPSAnJztcbiAgICAgICAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aCAmJlxuICAgICAgICAgIHhtbERhdGFbaV0gIT09ICc+JyAmJlxuICAgICAgICAgIHhtbERhdGFbaV0gIT09ICcgJyAmJlxuICAgICAgICAgIHhtbERhdGFbaV0gIT09ICdcXHQnICYmXG4gICAgICAgICAgeG1sRGF0YVtpXSAhPT0gJ1xcbicgJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnXFxyJzsgaSsrXG4gICAgICAgICkge1xuICAgICAgICAgIHRhZ05hbWUgKz0geG1sRGF0YVtpXTtcbiAgICAgICAgfVxuICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS50cmltKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2codGFnTmFtZSk7XG5cbiAgICAgICAgaWYgKHRhZ05hbWVbdGFnTmFtZS5sZW5ndGggLSAxXSA9PT0gJy8nKSB7XG4gICAgICAgICAgLy9zZWxmIGNsb3NpbmcgdGFnIHdpdGhvdXQgYXR0cmlidXRlc1xuICAgICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnN1YnN0cmluZygwLCB0YWdOYW1lLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIC8vY29udGludWU7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsaWRhdGVUYWdOYW1lKHRhZ05hbWUpKSB7XG4gICAgICAgICAgbGV0IG1zZztcbiAgICAgICAgICBpZiAodGFnTmFtZS50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBtc2cgPSBcIkludmFsaWQgc3BhY2UgYWZ0ZXIgJzwnLlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtc2cgPSBcIlRhZyAnXCIrdGFnTmFtZStcIicgaXMgYW4gaW52YWxpZCBuYW1lLlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLCBtc2csIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQgPSByZWFkQXR0cmlidXRlU3RyKHhtbERhdGEsIGkpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZXMgZm9yICdcIit0YWdOYW1lK1wiJyBoYXZlIG9wZW4gcXVvdGUuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGF0dHJTdHIgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGkgPSByZXN1bHQuaW5kZXg7XG5cbiAgICAgICAgaWYgKGF0dHJTdHJbYXR0clN0ci5sZW5ndGggLSAxXSA9PT0gJy8nKSB7XG4gICAgICAgICAgLy9zZWxmIGNsb3NpbmcgdGFnXG4gICAgICAgICAgY29uc3QgYXR0clN0clN0YXJ0ID0gaSAtIGF0dHJTdHIubGVuZ3RoO1xuICAgICAgICAgIGF0dHJTdHIgPSBhdHRyU3RyLnN1YnN0cmluZygwLCBhdHRyU3RyLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0ZUF0dHJpYnV0ZVN0cmluZyhhdHRyU3RyLCBvcHRpb25zKTtcbiAgICAgICAgICBpZiAoaXNWYWxpZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGFnRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgLy9jb250aW51ZTsgLy90ZXh0IG1heSBwcmVzZW50cyBhZnRlciBzZWxmIGNsb3NpbmcgdGFnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vdGhlIHJlc3VsdCBmcm9tIHRoZSBuZXN0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGUgcG9zaXRpb24gb2YgdGhlIGVycm9yIHdpdGhpbiB0aGUgYXR0cmlidXRlXG4gICAgICAgICAgICAvL2luIG9yZGVyIHRvIGdldCB0aGUgJ3RydWUnIGVycm9yIGxpbmUsIHdlIG5lZWQgdG8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiB3aGVyZSB0aGUgYXR0cmlidXRlIGJlZ2lucyAoaSAtIGF0dHJTdHIubGVuZ3RoKSBhbmQgdGhlbiBhZGQgdGhlIHBvc2l0aW9uIHdpdGhpbiB0aGUgYXR0cmlidXRlXG4gICAgICAgICAgICAvL3RoaXMgZ2l2ZXMgdXMgdGhlIGFic29sdXRlIGluZGV4IGluIHRoZSBlbnRpcmUgeG1sLCB3aGljaCB3ZSBjYW4gdXNlIHRvIGZpbmQgdGhlIGxpbmUgYXQgbGFzdFxuICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KGlzVmFsaWQuZXJyLmNvZGUsIGlzVmFsaWQuZXJyLm1zZywgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGF0dHJTdHJTdGFydCArIGlzVmFsaWQuZXJyLmxpbmUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2xvc2luZ1RhZykge1xuICAgICAgICAgIGlmICghcmVzdWx0LnRhZ0Nsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkVGFnJywgXCJDbG9zaW5nIHRhZyAnXCIrdGFnTmFtZStcIicgZG9lc24ndCBoYXZlIHByb3BlciBjbG9zaW5nLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYXR0clN0ci50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkVGFnJywgXCJDbG9zaW5nIHRhZyAnXCIrdGFnTmFtZStcIicgY2FuJ3QgaGF2ZSBhdHRyaWJ1dGVzIG9yIGludmFsaWQgc3RhcnRpbmcuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCB0YWdTdGFydFBvcykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBvdGcgPSB0YWdzLnBvcCgpO1xuICAgICAgICAgICAgaWYgKHRhZ05hbWUgIT09IG90Zy50YWdOYW1lKSB7XG4gICAgICAgICAgICAgIGxldCBvcGVuUG9zID0gZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIG90Zy50YWdTdGFydFBvcyk7XG4gICAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFRhZycsXG4gICAgICAgICAgICAgICAgXCJFeHBlY3RlZCBjbG9zaW5nIHRhZyAnXCIrb3RnLnRhZ05hbWUrXCInIChvcGVuZWQgaW4gbGluZSBcIitvcGVuUG9zLmxpbmUrXCIsIGNvbCBcIitvcGVuUG9zLmNvbCtcIikgaW5zdGVhZCBvZiBjbG9zaW5nIHRhZyAnXCIrdGFnTmFtZStcIicuXCIsXG4gICAgICAgICAgICAgICAgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIHRhZ1N0YXJ0UG9zKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vd2hlbiB0aGVyZSBhcmUgbm8gbW9yZSB0YWdzLCB3ZSByZWFjaGVkIHRoZSByb290IGxldmVsLlxuICAgICAgICAgICAgaWYgKHRhZ3MubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgcmVhY2hlZFJvb3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdGVBdHRyaWJ1dGVTdHJpbmcoYXR0clN0ciwgb3B0aW9ucyk7XG4gICAgICAgICAgaWYgKGlzVmFsaWQgIT09IHRydWUpIHtcbiAgICAgICAgICAgIC8vdGhlIHJlc3VsdCBmcm9tIHRoZSBuZXN0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGUgcG9zaXRpb24gb2YgdGhlIGVycm9yIHdpdGhpbiB0aGUgYXR0cmlidXRlXG4gICAgICAgICAgICAvL2luIG9yZGVyIHRvIGdldCB0aGUgJ3RydWUnIGVycm9yIGxpbmUsIHdlIG5lZWQgdG8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiB3aGVyZSB0aGUgYXR0cmlidXRlIGJlZ2lucyAoaSAtIGF0dHJTdHIubGVuZ3RoKSBhbmQgdGhlbiBhZGQgdGhlIHBvc2l0aW9uIHdpdGhpbiB0aGUgYXR0cmlidXRlXG4gICAgICAgICAgICAvL3RoaXMgZ2l2ZXMgdXMgdGhlIGFic29sdXRlIGluZGV4IGluIHRoZSBlbnRpcmUgeG1sLCB3aGljaCB3ZSBjYW4gdXNlIHRvIGZpbmQgdGhlIGxpbmUgYXQgbGFzdFxuICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KGlzVmFsaWQuZXJyLmNvZGUsIGlzVmFsaWQuZXJyLm1zZywgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkgLSBhdHRyU3RyLmxlbmd0aCArIGlzVmFsaWQuZXJyLmxpbmUpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL2lmIHRoZSByb290IGxldmVsIGhhcyBiZWVuIHJlYWNoZWQgYmVmb3JlIC4uLlxuICAgICAgICAgIGlmIChyZWFjaGVkUm9vdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkWG1sJywgJ011bHRpcGxlIHBvc3NpYmxlIHJvb3Qgbm9kZXMgZm91bmQuJywgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICB9IGVsc2UgaWYob3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZih0YWdOYW1lKSAhPT0gLTEpe1xuICAgICAgICAgICAgLy9kb24ndCBwdXNoIGludG8gc3RhY2tcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFncy5wdXNoKHt0YWdOYW1lLCB0YWdTdGFydFBvc30pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0YWdGb3VuZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvL3NraXAgdGFnIHRleHQgdmFsdWVcbiAgICAgICAgLy9JdCBtYXkgaW5jbHVkZSBjb21tZW50cyBhbmQgQ0RBVEEgdmFsdWVcbiAgICAgICAgZm9yIChpKys7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICc8Jykge1xuICAgICAgICAgICAgaWYgKHhtbERhdGFbaSArIDFdID09PSAnIScpIHtcbiAgICAgICAgICAgICAgLy9jb21tZW50IG9yIENBREFUQVxuICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgIGkgPSByZWFkQ29tbWVudEFuZENEQVRBKHhtbERhdGEsIGkpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YVtpKzFdID09PSAnPycpIHtcbiAgICAgICAgICAgICAgaSA9IHJlYWRQSSh4bWxEYXRhLCArK2kpO1xuICAgICAgICAgICAgICBpZiAoaS5lcnIpIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICcmJykge1xuICAgICAgICAgICAgY29uc3QgYWZ0ZXJBbXAgPSB2YWxpZGF0ZUFtcGVyc2FuZCh4bWxEYXRhLCBpKTtcbiAgICAgICAgICAgIGlmIChhZnRlckFtcCA9PSAtMSlcbiAgICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQ2hhcicsIFwiY2hhciAnJicgaXMgbm90IGV4cGVjdGVkLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICAgICAgaSA9IGFmdGVyQW1wO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaWYgKHJlYWNoZWRSb290ID09PSB0cnVlICYmICFpc1doaXRlU3BhY2UoeG1sRGF0YVtpXSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkWG1sJywgXCJFeHRyYSB0ZXh0IGF0IHRoZSBlbmRcIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gLy9lbmQgb2YgcmVhZGluZyB0YWcgdGV4dCB2YWx1ZVxuICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnKSB7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICggaXNXaGl0ZVNwYWNlKHhtbERhdGFbaV0pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQ2hhcicsIFwiY2hhciAnXCIreG1sRGF0YVtpXStcIicgaXMgbm90IGV4cGVjdGVkLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdGFnRm91bmQpIHtcbiAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRYbWwnLCAnU3RhcnQgdGFnIGV4cGVjdGVkLicsIDEpO1xuICB9ZWxzZSBpZiAodGFncy5sZW5ndGggPT0gMSkge1xuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkVGFnJywgXCJVbmNsb3NlZCB0YWcgJ1wiK3RhZ3NbMF0udGFnTmFtZStcIicuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCB0YWdzWzBdLnRhZ1N0YXJ0UG9zKSk7XG4gIH1lbHNlIGlmICh0YWdzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFhtbCcsIFwiSW52YWxpZCAnXCIrXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGFncy5tYXAodCA9PiB0LnRhZ05hbWUpLCBudWxsLCA0KS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKStcbiAgICAgICAgICBcIicgZm91bmQuXCIsIHtsaW5lOiAxLCBjb2w6IDF9KTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gaXNXaGl0ZVNwYWNlKGNoYXIpe1xuICByZXR1cm4gY2hhciA9PT0gJyAnIHx8IGNoYXIgPT09ICdcXHQnIHx8IGNoYXIgPT09ICdcXG4nICB8fCBjaGFyID09PSAnXFxyJztcbn1cbi8qKlxuICogUmVhZCBQcm9jZXNzaW5nIGluc3N0cnVjdGlvbnMgYW5kIHNraXBcbiAqIEBwYXJhbSB7Kn0geG1sRGF0YVxuICogQHBhcmFtIHsqfSBpXG4gKi9cbmZ1bmN0aW9uIHJlYWRQSSh4bWxEYXRhLCBpKSB7XG4gIGNvbnN0IHN0YXJ0ID0gaTtcbiAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHhtbERhdGFbaV0gPT0gJz8nIHx8IHhtbERhdGFbaV0gPT0gJyAnKSB7XG4gICAgICAvL3RhZ25hbWVcbiAgICAgIGNvbnN0IHRhZ25hbWUgPSB4bWxEYXRhLnN1YnN0cihzdGFydCwgaSAtIHN0YXJ0KTtcbiAgICAgIGlmIChpID4gNSAmJiB0YWduYW1lID09PSAneG1sJykge1xuICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRYbWwnLCAnWE1MIGRlY2xhcmF0aW9uIGFsbG93ZWQgb25seSBhdCB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50LicsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT0gJz8nICYmIHhtbERhdGFbaSArIDFdID09ICc+Jykge1xuICAgICAgICAvL2NoZWNrIGlmIHZhbGlkIGF0dHJpYnV0IHN0cmluZ1xuICAgICAgICBpKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBpO1xufVxuXG5mdW5jdGlvbiByZWFkQ29tbWVudEFuZENEQVRBKHhtbERhdGEsIGkpIHtcbiAgaWYgKHhtbERhdGEubGVuZ3RoID4gaSArIDUgJiYgeG1sRGF0YVtpICsgMV0gPT09ICctJyAmJiB4bWxEYXRhW2kgKyAyXSA9PT0gJy0nKSB7XG4gICAgLy9jb21tZW50XG4gICAgZm9yIChpICs9IDM7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJy0nICYmIHhtbERhdGFbaSArIDFdID09PSAnLScgJiYgeG1sRGF0YVtpICsgMl0gPT09ICc+Jykge1xuICAgICAgICBpICs9IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICB4bWxEYXRhLmxlbmd0aCA+IGkgKyA4ICYmXG4gICAgeG1sRGF0YVtpICsgMV0gPT09ICdEJyAmJlxuICAgIHhtbERhdGFbaSArIDJdID09PSAnTycgJiZcbiAgICB4bWxEYXRhW2kgKyAzXSA9PT0gJ0MnICYmXG4gICAgeG1sRGF0YVtpICsgNF0gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSArIDVdID09PSAnWScgJiZcbiAgICB4bWxEYXRhW2kgKyA2XSA9PT0gJ1AnICYmXG4gICAgeG1sRGF0YVtpICsgN10gPT09ICdFJ1xuICApIHtcbiAgICBsZXQgYW5nbGVCcmFja2V0c0NvdW50ID0gMTtcbiAgICBmb3IgKGkgKz0gODsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnPCcpIHtcbiAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50Kys7XG4gICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICc+Jykge1xuICAgICAgICBhbmdsZUJyYWNrZXRzQ291bnQtLTtcbiAgICAgICAgaWYgKGFuZ2xlQnJhY2tldHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFxuICAgIHhtbERhdGEubGVuZ3RoID4gaSArIDkgJiZcbiAgICB4bWxEYXRhW2kgKyAxXSA9PT0gJ1snICYmXG4gICAgeG1sRGF0YVtpICsgMl0gPT09ICdDJyAmJlxuICAgIHhtbERhdGFbaSArIDNdID09PSAnRCcgJiZcbiAgICB4bWxEYXRhW2kgKyA0XSA9PT0gJ0EnICYmXG4gICAgeG1sRGF0YVtpICsgNV0gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSArIDZdID09PSAnQScgJiZcbiAgICB4bWxEYXRhW2kgKyA3XSA9PT0gJ1snXG4gICkge1xuICAgIGZvciAoaSArPSA4OyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICddJyAmJiB4bWxEYXRhW2kgKyAxXSA9PT0gJ10nICYmIHhtbERhdGFbaSArIDJdID09PSAnPicpIHtcbiAgICAgICAgaSArPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gaTtcbn1cblxuY29uc3QgZG91YmxlUXVvdGUgPSAnXCInO1xuY29uc3Qgc2luZ2xlUXVvdGUgPSBcIidcIjtcblxuLyoqXG4gKiBLZWVwIHJlYWRpbmcgeG1sRGF0YSB1bnRpbCAnPCcgaXMgZm91bmQgb3V0c2lkZSB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IHhtbERhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBpXG4gKi9cbmZ1bmN0aW9uIHJlYWRBdHRyaWJ1dGVTdHIoeG1sRGF0YSwgaSkge1xuICBsZXQgYXR0clN0ciA9ICcnO1xuICBsZXQgc3RhcnRDaGFyID0gJyc7XG4gIGxldCB0YWdDbG9zZWQgPSBmYWxzZTtcbiAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHhtbERhdGFbaV0gPT09IGRvdWJsZVF1b3RlIHx8IHhtbERhdGFbaV0gPT09IHNpbmdsZVF1b3RlKSB7XG4gICAgICBpZiAoc3RhcnRDaGFyID09PSAnJykge1xuICAgICAgICBzdGFydENoYXIgPSB4bWxEYXRhW2ldO1xuICAgICAgfSBlbHNlIGlmIChzdGFydENoYXIgIT09IHhtbERhdGFbaV0pIHtcbiAgICAgICAgLy9pZiB2YXVlIGlzIGVuY2xvc2VkIHdpdGggZG91YmxlIHF1b3RlIHRoZW4gc2luZ2xlIHF1b3RlcyBhcmUgYWxsb3dlZCBpbnNpZGUgdGhlIHZhbHVlIGFuZCB2aWNlIHZlcnNhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydENoYXIgPSAnJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICc+Jykge1xuICAgICAgaWYgKHN0YXJ0Q2hhciA9PT0gJycpIHtcbiAgICAgICAgdGFnQ2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGF0dHJTdHIgKz0geG1sRGF0YVtpXTtcbiAgfVxuICBpZiAoc3RhcnRDaGFyICE9PSAnJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IGF0dHJTdHIsXG4gICAgaW5kZXg6IGksXG4gICAgdGFnQ2xvc2VkOiB0YWdDbG9zZWRcbiAgfTtcbn1cblxuLyoqXG4gKiBTZWxlY3QgYWxsIHRoZSBhdHRyaWJ1dGVzIHdoZXRoZXIgdmFsaWQgb3IgaW52YWxpZC5cbiAqL1xuY29uc3QgdmFsaWRBdHRyU3RyUmVneHAgPSBuZXcgUmVnRXhwKCcoXFxcXHMqKShbXlxcXFxzPV0rKShcXFxccyo9KT8oXFxcXHMqKFtcXCdcIl0pKChbXFxcXHNcXFxcU10pKj8pXFxcXDUpPycsICdnJyk7XG5cbi8vYXR0ciwgPVwic2RcIiwgYT1cImFtaXQnc1wiLCBhPVwic2RcImI9XCJzYWZcIiwgYWIgIGNkPVwiXCJcblxuZnVuY3Rpb24gdmFsaWRhdGVBdHRyaWJ1dGVTdHJpbmcoYXR0clN0ciwgb3B0aW9ucykge1xuICAvL2NvbnNvbGUubG9nKFwic3RhcnQ6XCIrYXR0clN0citcIjplbmRcIik7XG5cbiAgLy9pZihhdHRyU3RyLnRyaW0oKS5sZW5ndGggPT09IDApIHJldHVybiB0cnVlOyAvL2VtcHR5IHN0cmluZ1xuXG4gIGNvbnN0IG1hdGNoZXMgPSB1dGlsLmdldEFsbE1hdGNoZXMoYXR0clN0ciwgdmFsaWRBdHRyU3RyUmVneHApO1xuICBjb25zdCBhdHRyTmFtZXMgPSB7fTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobWF0Y2hlc1tpXVsxXS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vbm9zcGFjZSBiZWZvcmUgYXR0cmlidXRlIG5hbWU6IGE9XCJzZFwiYj1cInNhZlwiXG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJBdHRyaWJ1dGUgJ1wiK21hdGNoZXNbaV1bMl0rXCInIGhhcyBubyBzcGFjZSBpbiBzdGFydGluZy5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2hlc1tpXSkpXG4gICAgfSBlbHNlIGlmIChtYXRjaGVzW2ldWzNdICE9PSB1bmRlZmluZWQgJiYgbWF0Y2hlc1tpXVs0XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJBdHRyaWJ1dGUgJ1wiK21hdGNoZXNbaV1bMl0rXCInIGlzIHdpdGhvdXQgdmFsdWUuXCIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoZXNbaV0pKTtcbiAgICB9IGVsc2UgaWYgKG1hdGNoZXNbaV1bM10gPT09IHVuZGVmaW5lZCAmJiAhb3B0aW9ucy5hbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAvL2luZGVwZW5kZW50IGF0dHJpYnV0ZTogYWJcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcImJvb2xlYW4gYXR0cmlidXRlICdcIittYXRjaGVzW2ldWzJdK1wiJyBpcyBub3QgYWxsb3dlZC5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2hlc1tpXSkpO1xuICAgIH1cbiAgICAvKiBlbHNlIGlmKG1hdGNoZXNbaV1bNl0gPT09IHVuZGVmaW5lZCl7Ly9hdHRyaWJ1dGUgd2l0aG91dCB2YWx1ZTogYWI9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGVycjogeyBjb2RlOlwiSW52YWxpZEF0dHJcIixtc2c6XCJhdHRyaWJ1dGUgXCIgKyBtYXRjaGVzW2ldWzJdICsgXCIgaGFzIG5vIHZhbHVlIGFzc2lnbmVkLlwifX07XG4gICAgICAgICAgICAgICAgfSAqL1xuICAgIGNvbnN0IGF0dHJOYW1lID0gbWF0Y2hlc1tpXVsyXTtcbiAgICBpZiAoIXZhbGlkYXRlQXR0ck5hbWUoYXR0ck5hbWUpKSB7XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJBdHRyaWJ1dGUgJ1wiK2F0dHJOYW1lK1wiJyBpcyBhbiBpbnZhbGlkIG5hbWUuXCIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoZXNbaV0pKTtcbiAgICB9XG4gICAgaWYgKCFhdHRyTmFtZXMuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKSB7XG4gICAgICAvL2NoZWNrIGZvciBkdXBsaWNhdGUgYXR0cmlidXRlLlxuICAgICAgYXR0ck5hbWVzW2F0dHJOYW1lXSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZSAnXCIrYXR0ck5hbWUrXCInIGlzIHJlcGVhdGVkLlwiLCBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaGVzW2ldKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTnVtYmVyQW1wZXJzYW5kKHhtbERhdGEsIGkpIHtcbiAgbGV0IHJlID0gL1xcZC87XG4gIGlmICh4bWxEYXRhW2ldID09PSAneCcpIHtcbiAgICBpKys7XG4gICAgcmUgPSAvW1xcZGEtZkEtRl0vO1xuICB9XG4gIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh4bWxEYXRhW2ldID09PSAnOycpXG4gICAgICByZXR1cm4gaTtcbiAgICBpZiAoIXhtbERhdGFbaV0ubWF0Y2gocmUpKVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUFtcGVyc2FuZCh4bWxEYXRhLCBpKSB7XG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwvI2R0LWNoYXJyZWZcbiAgaSsrO1xuICBpZiAoeG1sRGF0YVtpXSA9PT0gJzsnKVxuICAgIHJldHVybiAtMTtcbiAgaWYgKHhtbERhdGFbaV0gPT09ICcjJykge1xuICAgIGkrKztcbiAgICByZXR1cm4gdmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQoeG1sRGF0YSwgaSk7XG4gIH1cbiAgbGV0IGNvdW50ID0gMDtcbiAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrLCBjb3VudCsrKSB7XG4gICAgaWYgKHhtbERhdGFbaV0ubWF0Y2goL1xcdy8pICYmIGNvdW50IDwgMjApXG4gICAgICBjb250aW51ZTtcbiAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzsnKVxuICAgICAgYnJlYWs7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiBpO1xufVxuXG5mdW5jdGlvbiBnZXRFcnJvck9iamVjdChjb2RlLCBtZXNzYWdlLCBsaW5lTnVtYmVyKSB7XG4gIHJldHVybiB7XG4gICAgZXJyOiB7XG4gICAgICBjb2RlOiBjb2RlLFxuICAgICAgbXNnOiBtZXNzYWdlLFxuICAgICAgbGluZTogbGluZU51bWJlci5saW5lIHx8IGxpbmVOdW1iZXIsXG4gICAgICBjb2w6IGxpbmVOdW1iZXIuY29sLFxuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXR0ck5hbWUoYXR0ck5hbWUpIHtcbiAgcmV0dXJuIHV0aWwuaXNOYW1lKGF0dHJOYW1lKTtcbn1cblxuLy8gY29uc3Qgc3RhcnRzV2l0aFhNTCA9IC9eeG1sL2k7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGFnTmFtZSh0YWduYW1lKSB7XG4gIHJldHVybiB1dGlsLmlzTmFtZSh0YWduYW1lKSAvKiAmJiAhdGFnbmFtZS5tYXRjaChzdGFydHNXaXRoWE1MKSAqLztcbn1cblxuLy90aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGxpbmUgbnVtYmVyIGZvciB0aGUgY2hhcmFjdGVyIGF0IHRoZSBnaXZlbiBpbmRleFxuZnVuY3Rpb24gZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGluZGV4KSB7XG4gIGNvbnN0IGxpbmVzID0geG1sRGF0YS5zdWJzdHJpbmcoMCwgaW5kZXgpLnNwbGl0KC9cXHI/XFxuLyk7XG4gIHJldHVybiB7XG4gICAgbGluZTogbGluZXMubGVuZ3RoLFxuXG4gICAgLy8gY29sdW1uIG51bWJlciBpcyBsYXN0IGxpbmUncyBsZW5ndGggKyAxLCBiZWNhdXNlIGNvbHVtbiBudW1iZXJpbmcgc3RhcnRzIGF0IDE6XG4gICAgY29sOiBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggKyAxXG4gIH07XG59XG5cbi8vdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIG1hdGNoIHdpdGhpbiBhdHRyU3RyXG5mdW5jdGlvbiBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaCkge1xuICByZXR1cm4gbWF0Y2guc3RhcnRJbmRleCArIG1hdGNoWzFdLmxlbmd0aDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vcGFyc2UgRW1wdHkgTm9kZSBhcyBzZWxmIGNsb3Npbmcgbm9kZVxuY29uc3QgYnVpbGRGcm9tT3JkZXJlZEpzID0gcmVxdWlyZSgnLi9vcmRlcmVkSnMyWG1sJyk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBhdHRyaWJ1dGVOYW1lUHJlZml4OiAnQF8nLFxuICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBmYWxzZSxcbiAgdGV4dE5vZGVOYW1lOiAnI3RleHQnLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiB0cnVlLFxuICBjZGF0YVByb3BOYW1lOiBmYWxzZSxcbiAgZm9ybWF0OiBmYWxzZSxcbiAgaW5kZW50Qnk6ICcgICcsXG4gIHN1cHByZXNzRW1wdHlOb2RlOiBmYWxzZSxcbiAgc3VwcHJlc3NVbnBhaXJlZE5vZGU6IHRydWUsXG4gIHN1cHByZXNzQm9vbGVhbkF0dHJpYnV0ZXM6IHRydWUsXG4gIHRhZ1ZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbihrZXksIGEpIHtcbiAgICByZXR1cm4gYTtcbiAgfSxcbiAgYXR0cmlidXRlVmFsdWVQcm9jZXNzb3I6IGZ1bmN0aW9uKGF0dHJOYW1lLCBhKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0sXG4gIHByZXNlcnZlT3JkZXI6IGZhbHNlLFxuICBjb21tZW50UHJvcE5hbWU6IGZhbHNlLFxuICB1bnBhaXJlZFRhZ3M6IFtdLFxuICBlbnRpdGllczogW1xuICAgIHsgcmVnZXg6IG5ldyBSZWdFeHAoXCImXCIsIFwiZ1wiKSwgdmFsOiBcIiZhbXA7XCIgfSwvL2l0IG11c3QgYmUgb24gdG9wXG4gICAgeyByZWdleDogbmV3IFJlZ0V4cChcIj5cIiwgXCJnXCIpLCB2YWw6IFwiJmd0O1wiIH0sXG4gICAgeyByZWdleDogbmV3IFJlZ0V4cChcIjxcIiwgXCJnXCIpLCB2YWw6IFwiJmx0O1wiIH0sXG4gICAgeyByZWdleDogbmV3IFJlZ0V4cChcIlxcJ1wiLCBcImdcIiksIHZhbDogXCImYXBvcztcIiB9LFxuICAgIHsgcmVnZXg6IG5ldyBSZWdFeHAoXCJcXFwiXCIsIFwiZ1wiKSwgdmFsOiBcIiZxdW90O1wiIH1cbiAgXSxcbiAgcHJvY2Vzc0VudGl0aWVzOiB0cnVlLFxuICBzdG9wTm9kZXM6IFtdLFxuICAvLyB0cmFuc2Zvcm1UYWdOYW1lOiBmYWxzZSxcbiAgLy8gdHJhbnNmb3JtQXR0cmlidXRlTmFtZTogZmFsc2UsXG4gIG9uZUxpc3RHcm91cDogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIEJ1aWxkZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlQXR0cmlidXRlcyB8fCB0aGlzLm9wdGlvbnMuYXR0cmlidXRlc0dyb3VwTmFtZSkge1xuICAgIHRoaXMuaXNBdHRyaWJ1dGUgPSBmdW5jdGlvbigvKmEqLykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hdHRyUHJlZml4TGVuID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgubGVuZ3RoO1xuICAgIHRoaXMuaXNBdHRyaWJ1dGUgPSBpc0F0dHJpYnV0ZTtcbiAgfVxuXG4gIHRoaXMucHJvY2Vzc1RleHRPck9iak5vZGUgPSBwcm9jZXNzVGV4dE9yT2JqTm9kZVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuZm9ybWF0KSB7XG4gICAgdGhpcy5pbmRlbnRhdGUgPSBpbmRlbnRhdGU7XG4gICAgdGhpcy50YWdFbmRDaGFyID0gJz5cXG4nO1xuICAgIHRoaXMubmV3TGluZSA9ICdcXG4nO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaW5kZW50YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfTtcbiAgICB0aGlzLnRhZ0VuZENoYXIgPSAnPic7XG4gICAgdGhpcy5uZXdMaW5lID0gJyc7XG4gIH1cbn1cblxuQnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbihqT2JqKSB7XG4gIGlmKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZU9yZGVyKXtcbiAgICByZXR1cm4gYnVpbGRGcm9tT3JkZXJlZEpzKGpPYmosIHRoaXMub3B0aW9ucyk7XG4gIH1lbHNlIHtcbiAgICBpZihBcnJheS5pc0FycmF5KGpPYmopICYmIHRoaXMub3B0aW9ucy5hcnJheU5vZGVOYW1lICYmIHRoaXMub3B0aW9ucy5hcnJheU5vZGVOYW1lLmxlbmd0aCA+IDEpe1xuICAgICAgak9iaiA9IHtcbiAgICAgICAgW3RoaXMub3B0aW9ucy5hcnJheU5vZGVOYW1lXSA6IGpPYmpcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuajJ4KGpPYmosIDApLnZhbDtcbiAgfVxufTtcblxuQnVpbGRlci5wcm90b3R5cGUuajJ4ID0gZnVuY3Rpb24oak9iaiwgbGV2ZWwpIHtcbiAgbGV0IGF0dHJTdHIgPSAnJztcbiAgbGV0IHZhbCA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gak9iaikge1xuICAgIGlmICh0eXBlb2Ygak9ialtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gc3VwcmVzcyB1bmRlZmluZWQgbm9kZVxuICAgIH0gZWxzZSBpZiAoak9ialtrZXldID09PSBudWxsKSB7XG4gICAgICBpZihrZXlbMF0gPT09IFwiP1wiKSB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgJz8nICsgdGhpcy50YWdFbmRDaGFyO1xuICAgICAgZWxzZSB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgJy8nICsgdGhpcy50YWdFbmRDaGFyO1xuICAgICAgLy8gdmFsICs9IHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArICcvJyArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICB9IGVsc2UgaWYgKGpPYmpba2V5XSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHZhbCArPSB0aGlzLmJ1aWxkVGV4dFZhbE5vZGUoak9ialtrZXldLCBrZXksICcnLCBsZXZlbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygak9ialtrZXldICE9PSAnb2JqZWN0Jykge1xuICAgICAgLy9wcmVtaXRpdmUgdHlwZVxuICAgICAgY29uc3QgYXR0ciA9IHRoaXMuaXNBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGlmIChhdHRyKSB7XG4gICAgICAgIGF0dHJTdHIgKz0gdGhpcy5idWlsZEF0dHJQYWlyU3RyKGF0dHIsICcnICsgak9ialtrZXldKTtcbiAgICAgIH1lbHNlIHtcbiAgICAgICAgLy90YWcgdmFsdWVcbiAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZSkge1xuICAgICAgICAgIGxldCBuZXd2YWwgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3Ioa2V5LCAnJyArIGpPYmpba2V5XSk7XG4gICAgICAgICAgdmFsICs9IHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUobmV3dmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgKz0gdGhpcy5idWlsZFRleHRWYWxOb2RlKGpPYmpba2V5XSwga2V5LCAnJywgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGpPYmpba2V5XSkpIHtcbiAgICAgIC8vcmVwZWF0ZWQgbm9kZXNcbiAgICAgIGNvbnN0IGFyckxlbiA9IGpPYmpba2V5XS5sZW5ndGg7XG4gICAgICBsZXQgbGlzdFRhZ1ZhbCA9IFwiXCI7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFyckxlbjsgaisrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBqT2JqW2tleV1bal07XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBzdXByZXNzIHVuZGVmaW5lZCBub2RlXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbSA9PT0gbnVsbCkge1xuICAgICAgICAgIGlmKGtleVswXSA9PT0gXCI/XCIpIHZhbCArPSB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyAnPycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICAgICAgZWxzZSB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgJy8nICsgdGhpcy50YWdFbmRDaGFyO1xuICAgICAgICAgIC8vIHZhbCArPSB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyAnLycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYodGhpcy5vcHRpb25zLm9uZUxpc3RHcm91cCApe1xuICAgICAgICAgICAgbGlzdFRhZ1ZhbCArPSB0aGlzLmoyeChpdGVtLCBsZXZlbCArIDEpLnZhbDtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGxpc3RUYWdWYWwgKz0gdGhpcy5wcm9jZXNzVGV4dE9yT2JqTm9kZShpdGVtLCBrZXksIGxldmVsKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaXN0VGFnVmFsICs9IHRoaXMuYnVpbGRUZXh0VmFsTm9kZShpdGVtLCBrZXksICcnLCBsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKHRoaXMub3B0aW9ucy5vbmVMaXN0R3JvdXApe1xuICAgICAgICBsaXN0VGFnVmFsID0gdGhpcy5idWlsZE9iamVjdE5vZGUobGlzdFRhZ1ZhbCwga2V5LCAnJywgbGV2ZWwpO1xuICAgICAgfVxuICAgICAgdmFsICs9IGxpc3RUYWdWYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vbmVzdGVkIG5vZGVcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXR0cmlidXRlc0dyb3VwTmFtZSAmJiBrZXkgPT09IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVzR3JvdXBOYW1lKSB7XG4gICAgICAgIGNvbnN0IEtzID0gT2JqZWN0LmtleXMoak9ialtrZXldKTtcbiAgICAgICAgY29uc3QgTCA9IEtzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBMOyBqKyspIHtcbiAgICAgICAgICBhdHRyU3RyICs9IHRoaXMuYnVpbGRBdHRyUGFpclN0cihLc1tqXSwgJycgKyBqT2JqW2tleV1bS3Nbal1dKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsICs9IHRoaXMucHJvY2Vzc1RleHRPck9iak5vZGUoak9ialtrZXldLCBrZXksIGxldmVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge2F0dHJTdHI6IGF0dHJTdHIsIHZhbDogdmFsfTtcbn07XG5cbkJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkQXR0clBhaXJTdHIgPSBmdW5jdGlvbihhdHRyTmFtZSwgdmFsKXtcbiAgdmFsID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yKGF0dHJOYW1lLCAnJyArIHZhbCk7XG4gIHZhbCA9IHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUodmFsKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5zdXBwcmVzc0Jvb2xlYW5BdHRyaWJ1dGVzICYmIHZhbCA9PT0gXCJ0cnVlXCIpIHtcbiAgICByZXR1cm4gJyAnICsgYXR0ck5hbWU7XG4gIH0gZWxzZSByZXR1cm4gJyAnICsgYXR0ck5hbWUgKyAnPVwiJyArIHZhbCArICdcIic7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NUZXh0T3JPYmpOb2RlIChvYmplY3QsIGtleSwgbGV2ZWwpIHtcbiAgY29uc3QgcmVzdWx0ID0gdGhpcy5qMngob2JqZWN0LCBsZXZlbCArIDEpO1xuICBpZiAob2JqZWN0W3RoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWVdICE9PSB1bmRlZmluZWQgJiYgT2JqZWN0LmtleXMob2JqZWN0KS5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZFRleHRWYWxOb2RlKG9iamVjdFt0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lXSwga2V5LCByZXN1bHQuYXR0clN0ciwgbGV2ZWwpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLmJ1aWxkT2JqZWN0Tm9kZShyZXN1bHQudmFsLCBrZXksIHJlc3VsdC5hdHRyU3RyLCBsZXZlbCk7XG4gIH1cbn1cblxuQnVpbGRlci5wcm90b3R5cGUuYnVpbGRPYmplY3ROb2RlID0gZnVuY3Rpb24odmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKSB7XG4gIGlmKHZhbCA9PT0gXCJcIil7XG4gICAgaWYoa2V5WzBdID09PSBcIj9cIikgcmV0dXJuICB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyKyAnPycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgYXR0clN0ciArIHRoaXMuY2xvc2VUYWcoa2V5KSArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICB9XG4gIH1lbHNle1xuXG4gICAgbGV0IHRhZ0VuZEV4cCA9ICc8LycgKyBrZXkgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgbGV0IHBpQ2xvc2luZ0NoYXIgPSBcIlwiO1xuICAgIFxuICAgIGlmKGtleVswXSA9PT0gXCI/XCIpIHtcbiAgICAgIHBpQ2xvc2luZ0NoYXIgPSBcIj9cIjtcbiAgICAgIHRhZ0VuZEV4cCA9IFwiXCI7XG4gICAgfVxuICBcbiAgICBpZiAoYXR0clN0ciAmJiB2YWwuaW5kZXhPZignPCcpID09PSAtMSkge1xuICAgICAgcmV0dXJuICggdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsgIGtleSArIGF0dHJTdHIgKyBwaUNsb3NpbmdDaGFyICsgJz4nICsgdmFsICsgdGFnRW5kRXhwICk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuY29tbWVudFByb3BOYW1lICE9PSBmYWxzZSAmJiBrZXkgPT09IHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUgJiYgcGlDbG9zaW5nQ2hhci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyBgPCEtLSR7dmFsfS0tPmAgKyB0aGlzLm5ld0xpbmU7XG4gICAgfWVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgYXR0clN0ciArIHBpQ2xvc2luZ0NoYXIgKyB0aGlzLnRhZ0VuZENoYXIgK1xuICAgICAgICB2YWwgK1xuICAgICAgICB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyB0YWdFbmRFeHAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuQnVpbGRlci5wcm90b3R5cGUuY2xvc2VUYWcgPSBmdW5jdGlvbihrZXkpe1xuICBsZXQgY2xvc2VUYWcgPSBcIlwiO1xuICBpZih0aGlzLm9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2Yoa2V5KSAhPT0gLTEpeyAvL3VucGFpcmVkXG4gICAgaWYoIXRoaXMub3B0aW9ucy5zdXBwcmVzc1VucGFpcmVkTm9kZSkgY2xvc2VUYWcgPSBcIi9cIlxuICB9ZWxzZSBpZih0aGlzLm9wdGlvbnMuc3VwcHJlc3NFbXB0eU5vZGUpeyAvL2VtcHR5XG4gICAgY2xvc2VUYWcgPSBcIi9cIjtcbiAgfWVsc2V7XG4gICAgY2xvc2VUYWcgPSBgPjwvJHtrZXl9YFxuICB9XG4gIHJldHVybiBjbG9zZVRhZztcbn1cblxuZnVuY3Rpb24gYnVpbGRFbXB0eU9iak5vZGUodmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKSB7XG4gIGlmICh2YWwgIT09ICcnKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRPYmplY3ROb2RlKHZhbCwga2V5LCBhdHRyU3RyLCBsZXZlbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYoa2V5WzBdID09PSBcIj9cIikgcmV0dXJuICB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyKyAnPycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIGF0dHJTdHIgKyAnLycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICAvLyByZXR1cm4gdGhpcy5idWlsZFRhZ1N0cihsZXZlbCxrZXksIGF0dHJTdHIpO1xuICAgIH1cbiAgfVxufVxuXG5CdWlsZGVyLnByb3RvdHlwZS5idWlsZFRleHRWYWxOb2RlID0gZnVuY3Rpb24odmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuY2RhdGFQcm9wTmFtZSAhPT0gZmFsc2UgJiYga2V5ID09PSB0aGlzLm9wdGlvbnMuY2RhdGFQcm9wTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyBgPCFbQ0RBVEFbJHt2YWx9XV0+YCArICB0aGlzLm5ld0xpbmU7XG4gIH1lbHNlIGlmICh0aGlzLm9wdGlvbnMuY29tbWVudFByb3BOYW1lICE9PSBmYWxzZSAmJiBrZXkgPT09IHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgYDwhLS0ke3ZhbH0tLT5gICsgIHRoaXMubmV3TGluZTtcbiAgfWVsc2UgaWYoa2V5WzBdID09PSBcIj9cIikgey8vUEkgdGFnXG4gICAgcmV0dXJuICB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyKyAnPycgKyB0aGlzLnRhZ0VuZENoYXI7IFxuICB9ZWxzZXtcbiAgICBsZXQgdGV4dFZhbHVlID0gdGhpcy5vcHRpb25zLnRhZ1ZhbHVlUHJvY2Vzc29yKGtleSwgdmFsKTtcbiAgICB0ZXh0VmFsdWUgPSB0aGlzLnJlcGxhY2VFbnRpdGllc1ZhbHVlKHRleHRWYWx1ZSk7XG4gIFxuICAgIGlmKCB0ZXh0VmFsdWUgPT09ICcnKXtcbiAgICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyICsgdGhpcy5jbG9zZVRhZyhrZXkpICsgdGhpcy50YWdFbmRDaGFyO1xuICAgIH1lbHNle1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIGF0dHJTdHIgKyAnPicgK1xuICAgICAgICAgdGV4dFZhbHVlICtcbiAgICAgICAgJzwvJyArIGtleSArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICB9XG4gIH1cbn1cblxuQnVpbGRlci5wcm90b3R5cGUucmVwbGFjZUVudGl0aWVzVmFsdWUgPSBmdW5jdGlvbih0ZXh0VmFsdWUpe1xuICBpZih0ZXh0VmFsdWUgJiYgdGV4dFZhbHVlLmxlbmd0aCA+IDAgJiYgdGhpcy5vcHRpb25zLnByb2Nlc3NFbnRpdGllcyl7XG4gICAgZm9yIChsZXQgaT0wOyBpPHRoaXMub3B0aW9ucy5lbnRpdGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5vcHRpb25zLmVudGl0aWVzW2ldO1xuICAgICAgdGV4dFZhbHVlID0gdGV4dFZhbHVlLnJlcGxhY2UoZW50aXR5LnJlZ2V4LCBlbnRpdHkudmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRleHRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gaW5kZW50YXRlKGxldmVsKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMuaW5kZW50QnkucmVwZWF0KGxldmVsKTtcbn1cblxuZnVuY3Rpb24gaXNBdHRyaWJ1dGUobmFtZSAvKiwgb3B0aW9ucyovKSB7XG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgodGhpcy5vcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgpKSB7XG4gICAgcmV0dXJuIG5hbWUuc3Vic3RyKHRoaXMuYXR0clByZWZpeExlbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQnVpbGRlcjtcbiIsImNvbnN0IEVPTCA9IFwiXFxuXCI7XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2FycmF5fSBqQXJyYXkgXG4gKiBAcGFyYW0ge2FueX0gb3B0aW9ucyBcbiAqIEByZXR1cm5zIFxuICovXG5mdW5jdGlvbiB0b1htbChqQXJyYXksIG9wdGlvbnMpIHtcbiAgICBsZXQgaW5kZW50YXRpb24gPSBcIlwiO1xuICAgIGlmIChvcHRpb25zLmZvcm1hdCAmJiBvcHRpb25zLmluZGVudEJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgaW5kZW50YXRpb24gPSBFT0w7XG4gICAgfVxuICAgIHJldHVybiBhcnJUb1N0cihqQXJyYXksIG9wdGlvbnMsIFwiXCIsIGluZGVudGF0aW9uKTtcbn1cblxuZnVuY3Rpb24gYXJyVG9TdHIoYXJyLCBvcHRpb25zLCBqUGF0aCwgaW5kZW50YXRpb24pIHtcbiAgICBsZXQgeG1sU3RyID0gXCJcIjtcbiAgICBsZXQgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSBmYWxzZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRhZ09iaiA9IGFycltpXTtcbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IHByb3BOYW1lKHRhZ09iaik7XG4gICAgICAgIGxldCBuZXdKUGF0aCA9IFwiXCI7XG4gICAgICAgIGlmIChqUGF0aC5sZW5ndGggPT09IDApIG5ld0pQYXRoID0gdGFnTmFtZVxuICAgICAgICBlbHNlIG5ld0pQYXRoID0gYCR7alBhdGh9LiR7dGFnTmFtZX1gO1xuXG4gICAgICAgIGlmICh0YWdOYW1lID09PSBvcHRpb25zLnRleHROb2RlTmFtZSkge1xuICAgICAgICAgICAgbGV0IHRhZ1RleHQgPSB0YWdPYmpbdGFnTmFtZV07XG4gICAgICAgICAgICBpZiAoIWlzU3RvcE5vZGUobmV3SlBhdGgsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgdGFnVGV4dCA9IG9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IodGFnTmFtZSwgdGFnVGV4dCk7XG4gICAgICAgICAgICAgICAgdGFnVGV4dCA9IHJlcGxhY2VFbnRpdGllc1ZhbHVlKHRhZ1RleHQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUHJldmlvdXNFbGVtZW50VGFnKSB7XG4gICAgICAgICAgICAgICAgeG1sU3RyICs9IGluZGVudGF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeG1sU3RyICs9IHRhZ1RleHQ7XG4gICAgICAgICAgICBpc1ByZXZpb3VzRWxlbWVudFRhZyA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGFnTmFtZSA9PT0gb3B0aW9ucy5jZGF0YVByb3BOYW1lKSB7XG4gICAgICAgICAgICBpZiAoaXNQcmV2aW91c0VsZW1lbnRUYWcpIHtcbiAgICAgICAgICAgICAgICB4bWxTdHIgKz0gaW5kZW50YXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4bWxTdHIgKz0gYDwhW0NEQVRBWyR7dGFnT2JqW3RhZ05hbWVdWzBdW29wdGlvbnMudGV4dE5vZGVOYW1lXX1dXT5gO1xuICAgICAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ05hbWUgPT09IG9wdGlvbnMuY29tbWVudFByb3BOYW1lKSB7XG4gICAgICAgICAgICB4bWxTdHIgKz0gaW5kZW50YXRpb24gKyBgPCEtLSR7dGFnT2JqW3RhZ05hbWVdWzBdW29wdGlvbnMudGV4dE5vZGVOYW1lXX0tLT5gO1xuICAgICAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSB0cnVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGFnTmFtZVswXSA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dFN0ciA9IGF0dHJfdG9fc3RyKHRhZ09ialtcIjpAXCJdLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBJbmQgPSB0YWdOYW1lID09PSBcIj94bWxcIiA/IFwiXCIgOiBpbmRlbnRhdGlvbjtcbiAgICAgICAgICAgIGxldCBwaVRleHROb2RlTmFtZSA9IHRhZ09ialt0YWdOYW1lXVswXVtvcHRpb25zLnRleHROb2RlTmFtZV07XG4gICAgICAgICAgICBwaVRleHROb2RlTmFtZSA9IHBpVGV4dE5vZGVOYW1lLmxlbmd0aCAhPT0gMCA/IFwiIFwiICsgcGlUZXh0Tm9kZU5hbWUgOiBcIlwiOyAvL3JlbW92ZSBleHRyYSBzcGFjaW5nXG4gICAgICAgICAgICB4bWxTdHIgKz0gdGVtcEluZCArIGA8JHt0YWdOYW1lfSR7cGlUZXh0Tm9kZU5hbWV9JHthdHRTdHJ9Pz5gO1xuICAgICAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSB0cnVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5ld0lkZW50YXRpb24gPSBpbmRlbnRhdGlvbjtcbiAgICAgICAgaWYgKG5ld0lkZW50YXRpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIG5ld0lkZW50YXRpb24gKz0gb3B0aW9ucy5pbmRlbnRCeTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdHRTdHIgPSBhdHRyX3RvX3N0cih0YWdPYmpbXCI6QFwiXSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHRhZ1N0YXJ0ID0gaW5kZW50YXRpb24gKyBgPCR7dGFnTmFtZX0ke2F0dFN0cn1gO1xuICAgICAgICBjb25zdCB0YWdWYWx1ZSA9IGFyclRvU3RyKHRhZ09ialt0YWdOYW1lXSwgb3B0aW9ucywgbmV3SlBhdGgsIG5ld0lkZW50YXRpb24pO1xuICAgICAgICBpZiAob3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZih0YWdOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN1cHByZXNzVW5wYWlyZWROb2RlKSB4bWxTdHIgKz0gdGFnU3RhcnQgKyBcIj5cIjtcbiAgICAgICAgICAgIGVsc2UgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgXCIvPlwiO1xuICAgICAgICB9IGVsc2UgaWYgKCghdGFnVmFsdWUgfHwgdGFnVmFsdWUubGVuZ3RoID09PSAwKSAmJiBvcHRpb25zLnN1cHByZXNzRW1wdHlOb2RlKSB7XG4gICAgICAgICAgICB4bWxTdHIgKz0gdGFnU3RhcnQgKyBcIi8+XCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFnVmFsdWUgJiYgdGFnVmFsdWUuZW5kc1dpdGgoXCI+XCIpKSB7XG4gICAgICAgICAgICB4bWxTdHIgKz0gdGFnU3RhcnQgKyBgPiR7dGFnVmFsdWV9JHtpbmRlbnRhdGlvbn08LyR7dGFnTmFtZX0+YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhtbFN0ciArPSB0YWdTdGFydCArIFwiPlwiO1xuICAgICAgICAgICAgaWYgKHRhZ1ZhbHVlICYmIGluZGVudGF0aW9uICE9PSBcIlwiICYmICh0YWdWYWx1ZS5pbmNsdWRlcyhcIi8+XCIpIHx8IHRhZ1ZhbHVlLmluY2x1ZGVzKFwiPC9cIikpKSB7XG4gICAgICAgICAgICAgICAgeG1sU3RyICs9IGluZGVudGF0aW9uICsgb3B0aW9ucy5pbmRlbnRCeSArIHRhZ1ZhbHVlICsgaW5kZW50YXRpb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHhtbFN0ciArPSB0YWdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHhtbFN0ciArPSBgPC8ke3RhZ05hbWV9PmA7XG4gICAgICAgIH1cbiAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB4bWxTdHI7XG59XG5cbmZ1bmN0aW9uIHByb3BOYW1lKG9iaikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoa2V5ICE9PSBcIjpAXCIpIHJldHVybiBrZXk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhdHRyX3RvX3N0cihhdHRyTWFwLCBvcHRpb25zKSB7XG4gICAgbGV0IGF0dHJTdHIgPSBcIlwiO1xuICAgIGlmIChhdHRyTWFwICYmICFvcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMpIHtcbiAgICAgICAgZm9yIChsZXQgYXR0ciBpbiBhdHRyTWFwKSB7XG4gICAgICAgICAgICBsZXQgYXR0clZhbCA9IG9wdGlvbnMuYXR0cmlidXRlVmFsdWVQcm9jZXNzb3IoYXR0ciwgYXR0ck1hcFthdHRyXSk7XG4gICAgICAgICAgICBhdHRyVmFsID0gcmVwbGFjZUVudGl0aWVzVmFsdWUoYXR0clZhbCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoYXR0clZhbCA9PT0gdHJ1ZSAmJiBvcHRpb25zLnN1cHByZXNzQm9vbGVhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBhdHRyU3RyICs9IGAgJHthdHRyLnN1YnN0cihvcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgubGVuZ3RoKX1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRyU3RyICs9IGAgJHthdHRyLnN1YnN0cihvcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgubGVuZ3RoKX09XCIke2F0dHJWYWx9XCJgO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhdHRyU3RyO1xufVxuXG5mdW5jdGlvbiBpc1N0b3BOb2RlKGpQYXRoLCBvcHRpb25zKSB7XG4gICAgalBhdGggPSBqUGF0aC5zdWJzdHIoMCwgalBhdGgubGVuZ3RoIC0gb3B0aW9ucy50ZXh0Tm9kZU5hbWUubGVuZ3RoIC0gMSk7XG4gICAgbGV0IHRhZ05hbWUgPSBqUGF0aC5zdWJzdHIoalBhdGgubGFzdEluZGV4T2YoXCIuXCIpICsgMSk7XG4gICAgZm9yIChsZXQgaW5kZXggaW4gb3B0aW9ucy5zdG9wTm9kZXMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RvcE5vZGVzW2luZGV4XSA9PT0galBhdGggfHwgb3B0aW9ucy5zdG9wTm9kZXNbaW5kZXhdID09PSBcIiouXCIgKyB0YWdOYW1lKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlRW50aXRpZXNWYWx1ZSh0ZXh0VmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAodGV4dFZhbHVlICYmIHRleHRWYWx1ZS5sZW5ndGggPiAwICYmIG9wdGlvbnMucHJvY2Vzc0VudGl0aWVzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5lbnRpdGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZW50aXR5ID0gb3B0aW9ucy5lbnRpdGllc1tpXTtcbiAgICAgICAgICAgIHRleHRWYWx1ZSA9IHRleHRWYWx1ZS5yZXBsYWNlKGVudGl0eS5yZWdleCwgZW50aXR5LnZhbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHRWYWx1ZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gdG9YbWw7XG4iLCJjb25zdCB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG4vL1RPRE86IGhhbmRsZSBjb21tZW50c1xuZnVuY3Rpb24gcmVhZERvY1R5cGUoeG1sRGF0YSwgaSl7XG4gICAgXG4gICAgY29uc3QgZW50aXRpZXMgPSB7fTtcbiAgICBpZiggeG1sRGF0YVtpICsgM10gPT09ICdPJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNF0gPT09ICdDJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNV0gPT09ICdUJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNl0gPT09ICdZJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgN10gPT09ICdQJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgOF0gPT09ICdFJylcbiAgICB7ICAgIFxuICAgICAgICBpID0gaSs5O1xuICAgICAgICBsZXQgYW5nbGVCcmFja2V0c0NvdW50ID0gMTtcbiAgICAgICAgbGV0IGhhc0JvZHkgPSBmYWxzZSwgY29tbWVudCA9IGZhbHNlO1xuICAgICAgICBsZXQgZXhwID0gXCJcIjtcbiAgICAgICAgZm9yKDtpPHhtbERhdGEubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnICYmICFjb21tZW50KSB7IC8vRGV0ZXJtaW5lIHRoZSB0YWcgdHlwZVxuICAgICAgICAgICAgICAgIGlmKCBoYXNCb2R5ICYmIGlzRW50aXR5KHhtbERhdGEsIGkpKXtcbiAgICAgICAgICAgICAgICAgICAgaSArPSA3OyBcbiAgICAgICAgICAgICAgICAgICAgW2VudGl0eU5hbWUsIHZhbCxpXSA9IHJlYWRFbnRpdHlFeHAoeG1sRGF0YSxpKzEpO1xuICAgICAgICAgICAgICAgICAgICBpZih2YWwuaW5kZXhPZihcIiZcIikgPT09IC0xKSAvL1BhcmFtZXRlciBlbnRpdGllcyBhcmUgbm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXRpZXNbIHZhbGlkYXRlRW50aXR5TmFtZShlbnRpdHlOYW1lKSBdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ3ggOiBSZWdFeHAoIGAmJHtlbnRpdHlOYW1lfTtgLFwiZ1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw6IHZhbFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiggaGFzQm9keSAmJiBpc0VsZW1lbnQoeG1sRGF0YSwgaSkpICBpICs9IDg7Ly9Ob3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgZWxzZSBpZiggaGFzQm9keSAmJiBpc0F0dGxpc3QoeG1sRGF0YSwgaSkpICBpICs9IDg7Ly9Ob3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgZWxzZSBpZiggaGFzQm9keSAmJiBpc05vdGF0aW9uKHhtbERhdGEsIGkpKSBpICs9IDk7Ly9Ob3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgZWxzZSBpZiggaXNDb21tZW50KSAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgRE9DVFlQRVwiKTtcblxuICAgICAgICAgICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudCsrO1xuICAgICAgICAgICAgICAgIGV4cCA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICc+JykgeyAvL1JlYWQgdGFnIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBpZihjb21tZW50KXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIHhtbERhdGFbaSAtIDFdID09PSBcIi1cIiAmJiB4bWxEYXRhW2kgLSAyXSA9PT0gXCItXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50LS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50LS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbmdsZUJyYWNrZXRzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmKCB4bWxEYXRhW2ldID09PSAnWycpe1xuICAgICAgICAgICAgICAgIGhhc0JvZHkgPSB0cnVlO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgZXhwICs9IHhtbERhdGFbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoYW5nbGVCcmFja2V0c0NvdW50ICE9PSAwKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5jbG9zZWQgRE9DVFlQRWApO1xuICAgICAgICB9XG4gICAgfWVsc2V7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBUYWcgaW5zdGVhZCBvZiBET0NUWVBFYCk7XG4gICAgfVxuICAgIHJldHVybiB7ZW50aXRpZXMsIGl9O1xufVxuXG5mdW5jdGlvbiByZWFkRW50aXR5RXhwKHhtbERhdGEsaSl7XG4gICAgLy9FeHRlcm5hbCBlbnRpdGllcyBhcmUgbm90IHN1cHBvcnRlZFxuICAgIC8vICAgIDwhRU5USVRZIGV4dCBTWVNURU0gXCJodHRwOi8vbm9ybWFsLXdlYnNpdGUuY29tXCIgPlxuXG4gICAgLy9QYXJhbWV0ZXIgZW50aXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAvLyAgICA8IUVOVElUWSBlbnRpdHluYW1lIFwiJmFub3RoZXJFbGVtZW50O1wiPlxuXG4gICAgLy9JbnRlcm5hbCBlbnRpdGllcyBhcmUgc3VwcG9ydGVkXG4gICAgLy8gICAgPCFFTlRJVFkgZW50aXR5bmFtZSBcInJlcGxhY2VtZW50IHRleHRcIj5cbiAgICBcbiAgICAvL3JlYWQgRW50aXR5TmFtZVxuICAgIGxldCBlbnRpdHlOYW1lID0gXCJcIjtcbiAgICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoICYmICh4bWxEYXRhW2ldICE9PSBcIidcIiAmJiB4bWxEYXRhW2ldICE9PSAnXCInICk7IGkrKykge1xuICAgICAgICAvLyBpZih4bWxEYXRhW2ldID09PSBcIiBcIikgY29udGludWU7XG4gICAgICAgIC8vIGVsc2UgXG4gICAgICAgIGVudGl0eU5hbWUgKz0geG1sRGF0YVtpXTtcbiAgICB9XG4gICAgZW50aXR5TmFtZSA9IGVudGl0eU5hbWUudHJpbSgpO1xuICAgIGlmKGVudGl0eU5hbWUuaW5kZXhPZihcIiBcIikgIT09IC0xKSB0aHJvdyBuZXcgRXJyb3IoXCJFeHRlcm5hbCBlbnRpdGVzIGFyZSBub3Qgc3VwcG9ydGVkXCIpO1xuXG4gICAgLy9yZWFkIEVudGl0eSBWYWx1ZVxuICAgIGNvbnN0IHN0YXJ0Q2hhciA9IHhtbERhdGFbaSsrXTtcbiAgICBsZXQgdmFsID0gXCJcIlxuICAgIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGggJiYgeG1sRGF0YVtpXSAhPT0gc3RhcnRDaGFyIDsgaSsrKSB7XG4gICAgICAgIHZhbCArPSB4bWxEYXRhW2ldO1xuICAgIH1cbiAgICByZXR1cm4gW2VudGl0eU5hbWUsIHZhbCwgaV07XG59XG5cbmZ1bmN0aW9uIGlzQ29tbWVudCh4bWxEYXRhLCBpKXtcbiAgICBpZih4bWxEYXRhW2krMV0gPT09ICchJyAmJlxuICAgIHhtbERhdGFbaSsyXSA9PT0gJy0nICYmXG4gICAgeG1sRGF0YVtpKzNdID09PSAnLScpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5mdW5jdGlvbiBpc0VudGl0eSh4bWxEYXRhLCBpKXtcbiAgICBpZih4bWxEYXRhW2krMV0gPT09ICchJyAmJlxuICAgIHhtbERhdGFbaSsyXSA9PT0gJ0UnICYmXG4gICAgeG1sRGF0YVtpKzNdID09PSAnTicgJiZcbiAgICB4bWxEYXRhW2krNF0gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSs1XSA9PT0gJ0knICYmXG4gICAgeG1sRGF0YVtpKzZdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2krN10gPT09ICdZJykgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2Vcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudCh4bWxEYXRhLCBpKXtcbiAgICBpZih4bWxEYXRhW2krMV0gPT09ICchJyAmJlxuICAgIHhtbERhdGFbaSsyXSA9PT0gJ0UnICYmXG4gICAgeG1sRGF0YVtpKzNdID09PSAnTCcgJiZcbiAgICB4bWxEYXRhW2krNF0gPT09ICdFJyAmJlxuICAgIHhtbERhdGFbaSs1XSA9PT0gJ00nICYmXG4gICAgeG1sRGF0YVtpKzZdID09PSAnRScgJiZcbiAgICB4bWxEYXRhW2krN10gPT09ICdOJyAmJlxuICAgIHhtbERhdGFbaSs4XSA9PT0gJ1QnKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBpc0F0dGxpc3QoeG1sRGF0YSwgaSl7XG4gICAgaWYoeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICB4bWxEYXRhW2krMl0gPT09ICdBJyAmJlxuICAgIHhtbERhdGFbaSszXSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpKzRdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2krNV0gPT09ICdMJyAmJlxuICAgIHhtbERhdGFbaSs2XSA9PT0gJ0knICYmXG4gICAgeG1sRGF0YVtpKzddID09PSAnUycgJiZcbiAgICB4bWxEYXRhW2krOF0gPT09ICdUJykgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2Vcbn1cbmZ1bmN0aW9uIGlzTm90YXRpb24oeG1sRGF0YSwgaSl7XG4gICAgaWYoeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICB4bWxEYXRhW2krMl0gPT09ICdOJyAmJlxuICAgIHhtbERhdGFbaSszXSA9PT0gJ08nICYmXG4gICAgeG1sRGF0YVtpKzRdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2krNV0gPT09ICdBJyAmJlxuICAgIHhtbERhdGFbaSs2XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpKzddID09PSAnSScgJiZcbiAgICB4bWxEYXRhW2krOF0gPT09ICdPJyAmJlxuICAgIHhtbERhdGFbaSs5XSA9PT0gJ04nKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUVudGl0eU5hbWUobmFtZSl7XG4gICAgaWYgKHV0aWwuaXNOYW1lKG5hbWUpKVxuXHRyZXR1cm4gbmFtZTtcbiAgICBlbHNlXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBlbnRpdHkgbmFtZSAke25hbWV9YCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVhZERvY1R5cGU7XG4iLCJcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHByZXNlcnZlT3JkZXI6IGZhbHNlLFxuICAgIGF0dHJpYnV0ZU5hbWVQcmVmaXg6ICdAXycsXG4gICAgYXR0cmlidXRlc0dyb3VwTmFtZTogZmFsc2UsXG4gICAgdGV4dE5vZGVOYW1lOiAnI3RleHQnLFxuICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWUsXG4gICAgcmVtb3ZlTlNQcmVmaXg6IGZhbHNlLCAvLyByZW1vdmUgTlMgZnJvbSB0YWcgbmFtZSBvciBhdHRyaWJ1dGUgbmFtZSBpZiB0cnVlXG4gICAgYWxsb3dCb29sZWFuQXR0cmlidXRlczogZmFsc2UsIC8vYSB0YWcgY2FuIGhhdmUgYXR0cmlidXRlcyB3aXRob3V0IGFueSB2YWx1ZVxuICAgIC8vaWdub3JlUm9vdEVsZW1lbnQgOiBmYWxzZSxcbiAgICBwYXJzZVRhZ1ZhbHVlOiB0cnVlLFxuICAgIHBhcnNlQXR0cmlidXRlVmFsdWU6IGZhbHNlLFxuICAgIHRyaW1WYWx1ZXM6IHRydWUsIC8vVHJpbSBzdHJpbmcgdmFsdWVzIG9mIHRhZyBhbmQgYXR0cmlidXRlc1xuICAgIGNkYXRhUHJvcE5hbWU6IGZhbHNlLFxuICAgIG51bWJlclBhcnNlT3B0aW9uczoge1xuICAgICAgaGV4OiB0cnVlLFxuICAgICAgbGVhZGluZ1plcm9zOiB0cnVlLFxuICAgICAgZU5vdGF0aW9uOiB0cnVlXG4gICAgfSxcbiAgICB0YWdWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24odGFnTmFtZSwgdmFsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0sXG4gICAgYXR0cmlidXRlVmFsdWVQcm9jZXNzb3I6IGZ1bmN0aW9uKGF0dHJOYW1lLCB2YWwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBzdG9wTm9kZXM6IFtdLCAvL25lc3RlZCB0YWdzIHdpbGwgbm90IGJlIHBhcnNlZCBldmVuIGZvciBlcnJvcnNcbiAgICBhbHdheXNDcmVhdGVUZXh0Tm9kZTogZmFsc2UsXG4gICAgaXNBcnJheTogKCkgPT4gZmFsc2UsXG4gICAgY29tbWVudFByb3BOYW1lOiBmYWxzZSxcbiAgICB1bnBhaXJlZFRhZ3M6IFtdLFxuICAgIHByb2Nlc3NFbnRpdGllczogdHJ1ZSxcbiAgICBodG1sRW50aXRpZXM6IGZhbHNlLFxuICAgIGlnbm9yZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgICBpZ25vcmVQaVRhZ3M6IGZhbHNlLFxuICAgIHRyYW5zZm9ybVRhZ05hbWU6IGZhbHNlLFxuICAgIHRyYW5zZm9ybUF0dHJpYnV0ZU5hbWU6IGZhbHNlLFxuICAgIHVwZGF0ZVRhZzogZnVuY3Rpb24odGFnTmFtZSwgalBhdGgsIGF0dHJzKXtcbiAgICAgIHJldHVybiB0YWdOYW1lXG4gICAgfSxcbiAgICAvLyBza2lwRW1wdHlMaXN0SXRlbTogZmFsc2Vcbn07XG4gICBcbmNvbnN0IGJ1aWxkT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5idWlsZE9wdGlvbnMgPSBidWlsZE9wdGlvbnM7XG5leHBvcnRzLmRlZmF1bHRPcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7IiwiJ3VzZSBzdHJpY3QnO1xuLy8vQHRzLWNoZWNrXG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCB4bWxOb2RlID0gcmVxdWlyZSgnLi94bWxOb2RlJyk7XG5jb25zdCByZWFkRG9jVHlwZSA9IHJlcXVpcmUoXCIuL0RvY1R5cGVSZWFkZXJcIik7XG5jb25zdCB0b051bWJlciA9IHJlcXVpcmUoXCJzdHJudW1cIik7XG5cbmNvbnN0IHJlZ3ggPVxuICAnPCgoIVxcXFxbQ0RBVEFcXFxcWyhbXFxcXHNcXFxcU10qPykoXV0+KSl8KChOQU1FOik/KE5BTUUpKShbXj5dKik+fCgoXFxcXC8pKE5BTUUpXFxcXHMqPikpKFtePF0qKSdcbiAgLnJlcGxhY2UoL05BTUUvZywgdXRpbC5uYW1lUmVnZXhwKTtcblxuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvP1tcXFxcdzpcXFxcLVxcLl9dKykoW14+XSopPihcXFxccypcIitjZGF0YVJlZ3grXCIpKihbXjxdKyk/XCIsXCJnXCIpO1xuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvPykoKFxcXFx3KjopPyhbXFxcXHc6XFxcXC1cXC5fXSspKShbXj5dKik+KFtePF0qKShcIitjZGF0YVJlZ3grXCIoW148XSopKSooW148XSspP1wiLFwiZ1wiKTtcblxuY2xhc3MgT3JkZXJlZE9ialBhcnNlcntcbiAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmN1cnJlbnROb2RlID0gbnVsbDtcbiAgICB0aGlzLnRhZ3NOb2RlU3RhY2sgPSBbXTtcbiAgICB0aGlzLmRvY1R5cGVFbnRpdGllcyA9IHt9O1xuICAgIHRoaXMubGFzdEVudGl0aWVzID0ge1xuICAgICAgXCJhcG9zXCIgOiB7IHJlZ2V4OiAvJihhcG9zfCMzOXwjeDI3KTsvZywgdmFsIDogXCInXCJ9LFxuICAgICAgXCJndFwiIDogeyByZWdleDogLyYoZ3R8IzYyfCN4M0UpOy9nLCB2YWwgOiBcIj5cIn0sXG4gICAgICBcImx0XCIgOiB7IHJlZ2V4OiAvJihsdHwjNjB8I3gzQyk7L2csIHZhbCA6IFwiPFwifSxcbiAgICAgIFwicXVvdFwiIDogeyByZWdleDogLyYocXVvdHwjMzR8I3gyMik7L2csIHZhbCA6IFwiXFxcIlwifSxcbiAgICB9O1xuICAgIHRoaXMuYW1wRW50aXR5ID0geyByZWdleDogLyYoYW1wfCMzOHwjeDI2KTsvZywgdmFsIDogXCImXCJ9O1xuICAgIHRoaXMuaHRtbEVudGl0aWVzID0ge1xuICAgICAgXCJzcGFjZVwiOiB7IHJlZ2V4OiAvJihuYnNwfCMxNjApOy9nLCB2YWw6IFwiIFwiIH0sXG4gICAgICAvLyBcImx0XCIgOiB7IHJlZ2V4OiAvJihsdHwjNjApOy9nLCB2YWw6IFwiPFwiIH0sXG4gICAgICAvLyBcImd0XCIgOiB7IHJlZ2V4OiAvJihndHwjNjIpOy9nLCB2YWw6IFwiPlwiIH0sXG4gICAgICAvLyBcImFtcFwiIDogeyByZWdleDogLyYoYW1wfCMzOCk7L2csIHZhbDogXCImXCIgfSxcbiAgICAgIC8vIFwicXVvdFwiIDogeyByZWdleDogLyYocXVvdHwjMzQpOy9nLCB2YWw6IFwiXFxcIlwiIH0sXG4gICAgICAvLyBcImFwb3NcIiA6IHsgcmVnZXg6IC8mKGFwb3N8IzM5KTsvZywgdmFsOiBcIidcIiB9LFxuICAgICAgXCJjZW50XCIgOiB7IHJlZ2V4OiAvJihjZW50fCMxNjIpOy9nLCB2YWw6IFwiwqJcIiB9LFxuICAgICAgXCJwb3VuZFwiIDogeyByZWdleDogLyYocG91bmR8IzE2Myk7L2csIHZhbDogXCLCo1wiIH0sXG4gICAgICBcInllblwiIDogeyByZWdleDogLyYoeWVufCMxNjUpOy9nLCB2YWw6IFwiwqVcIiB9LFxuICAgICAgXCJldXJvXCIgOiB7IHJlZ2V4OiAvJihldXJvfCM4MzY0KTsvZywgdmFsOiBcIuKCrFwiIH0sXG4gICAgICBcImNvcHlyaWdodFwiIDogeyByZWdleDogLyYoY29weXwjMTY5KTsvZywgdmFsOiBcIsKpXCIgfSxcbiAgICAgIFwicmVnXCIgOiB7IHJlZ2V4OiAvJihyZWd8IzE3NCk7L2csIHZhbDogXCLCrlwiIH0sXG4gICAgICBcImluclwiIDogeyByZWdleDogLyYoaW5yfCM4Mzc3KTsvZywgdmFsOiBcIuKCuVwiIH0sXG4gICAgfTtcbiAgICB0aGlzLmFkZEV4dGVybmFsRW50aXRpZXMgPSBhZGRFeHRlcm5hbEVudGl0aWVzO1xuICAgIHRoaXMucGFyc2VYbWwgPSBwYXJzZVhtbDtcbiAgICB0aGlzLnBhcnNlVGV4dERhdGEgPSBwYXJzZVRleHREYXRhO1xuICAgIHRoaXMucmVzb2x2ZU5hbWVTcGFjZSA9IHJlc29sdmVOYW1lU3BhY2U7XG4gICAgdGhpcy5idWlsZEF0dHJpYnV0ZXNNYXAgPSBidWlsZEF0dHJpYnV0ZXNNYXA7XG4gICAgdGhpcy5pc0l0U3RvcE5vZGUgPSBpc0l0U3RvcE5vZGU7XG4gICAgdGhpcy5yZXBsYWNlRW50aXRpZXNWYWx1ZSA9IHJlcGxhY2VFbnRpdGllc1ZhbHVlO1xuICAgIHRoaXMucmVhZFN0b3BOb2RlRGF0YSA9IHJlYWRTdG9wTm9kZURhdGE7XG4gICAgdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnID0gc2F2ZVRleHRUb1BhcmVudFRhZztcbiAgICB0aGlzLmFkZENoaWxkID0gYWRkQ2hpbGQ7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBhZGRFeHRlcm5hbEVudGl0aWVzKGV4dGVybmFsRW50aXRpZXMpe1xuICBjb25zdCBlbnRLZXlzID0gT2JqZWN0LmtleXMoZXh0ZXJuYWxFbnRpdGllcyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW50S2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVudCA9IGVudEtleXNbaV07XG4gICAgdGhpcy5sYXN0RW50aXRpZXNbZW50XSA9IHtcbiAgICAgICByZWdleDogbmV3IFJlZ0V4cChcIiZcIitlbnQrXCI7XCIsXCJnXCIpLFxuICAgICAgIHZhbCA6IGV4dGVybmFsRW50aXRpZXNbZW50XVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30galBhdGhcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9udFRyaW1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzQXR0cmlidXRlc1xuICogQHBhcmFtIHtib29sZWFufSBpc0xlYWZOb2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGVzY2FwZUVudGl0aWVzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlVGV4dERhdGEodmFsLCB0YWdOYW1lLCBqUGF0aCwgZG9udFRyaW0sIGhhc0F0dHJpYnV0ZXMsIGlzTGVhZk5vZGUsIGVzY2FwZUVudGl0aWVzKSB7XG4gIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudHJpbVZhbHVlcyAmJiAhZG9udFRyaW0pIHtcbiAgICAgIHZhbCA9IHZhbC50cmltKCk7XG4gICAgfVxuICAgIGlmKHZhbC5sZW5ndGggPiAwKXtcbiAgICAgIGlmKCFlc2NhcGVFbnRpdGllcykgdmFsID0gdGhpcy5yZXBsYWNlRW50aXRpZXNWYWx1ZSh2YWwpO1xuICAgICAgXG4gICAgICBjb25zdCBuZXd2YWwgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IodGFnTmFtZSwgdmFsLCBqUGF0aCwgaGFzQXR0cmlidXRlcywgaXNMZWFmTm9kZSk7XG4gICAgICBpZihuZXd2YWwgPT09IG51bGwgfHwgbmV3dmFsID09PSB1bmRlZmluZWQpe1xuICAgICAgICAvL2Rvbid0IHBhcnNlXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9ZWxzZSBpZih0eXBlb2YgbmV3dmFsICE9PSB0eXBlb2YgdmFsIHx8IG5ld3ZhbCAhPT0gdmFsKXtcbiAgICAgICAgLy9vdmVyd3JpdGVcbiAgICAgICAgcmV0dXJuIG5ld3ZhbDtcbiAgICAgIH1lbHNlIGlmKHRoaXMub3B0aW9ucy50cmltVmFsdWVzKXtcbiAgICAgICAgcmV0dXJuIHBhcnNlVmFsdWUodmFsLCB0aGlzLm9wdGlvbnMucGFyc2VUYWdWYWx1ZSwgdGhpcy5vcHRpb25zLm51bWJlclBhcnNlT3B0aW9ucyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgY29uc3QgdHJpbW1lZFZhbCA9IHZhbC50cmltKCk7XG4gICAgICAgIGlmKHRyaW1tZWRWYWwgPT09IHZhbCl7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVmFsdWUodmFsLCB0aGlzLm9wdGlvbnMucGFyc2VUYWdWYWx1ZSwgdGhpcy5vcHRpb25zLm51bWJlclBhcnNlT3B0aW9ucyk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU5hbWVTcGFjZSh0YWduYW1lKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlTlNQcmVmaXgpIHtcbiAgICBjb25zdCB0YWdzID0gdGFnbmFtZS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IHByZWZpeCA9IHRhZ25hbWUuY2hhckF0KDApID09PSAnLycgPyAnLycgOiAnJztcbiAgICBpZiAodGFnc1swXSA9PT0gJ3htbG5zJykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAodGFncy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRhZ25hbWUgPSBwcmVmaXggKyB0YWdzWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFnbmFtZTtcbn1cblxuLy9UT0RPOiBjaGFuZ2UgcmVnZXggdG8gY2FwdHVyZSBOU1xuLy9jb25zdCBhdHRyc1JlZ3ggPSBuZXcgUmVnRXhwKFwiKFtcXFxcd1xcXFwtXFxcXC5cXFxcOl0rKVxcXFxzKj1cXFxccyooWydcXFwiXSkoKC58XFxuKSo/KVxcXFwyXCIsXCJnbVwiKTtcbmNvbnN0IGF0dHJzUmVneCA9IG5ldyBSZWdFeHAoJyhbXlxcXFxzPV0rKVxcXFxzKig9XFxcXHMqKFtcXCdcIl0pKFtcXFxcc1xcXFxTXSo/KVxcXFwzKT8nLCAnZ20nKTtcblxuZnVuY3Rpb24gYnVpbGRBdHRyaWJ1dGVzTWFwKGF0dHJTdHIsIGpQYXRoLCB0YWdOYW1lKSB7XG4gIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMgJiYgdHlwZW9mIGF0dHJTdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gYXR0clN0ciA9IGF0dHJTdHIucmVwbGFjZSgvXFxyP1xcbi9nLCAnICcpO1xuICAgIC8vYXR0clN0ciA9IGF0dHJTdHIgfHwgYXR0clN0ci50cmltKCk7XG5cbiAgICBjb25zdCBtYXRjaGVzID0gdXRpbC5nZXRBbGxNYXRjaGVzKGF0dHJTdHIsIGF0dHJzUmVneCk7XG4gICAgY29uc3QgbGVuID0gbWF0Y2hlcy5sZW5ndGg7IC8vZG9uJ3QgbWFrZSBpdCBpbmxpbmVcbiAgICBjb25zdCBhdHRycyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGF0dHJOYW1lID0gdGhpcy5yZXNvbHZlTmFtZVNwYWNlKG1hdGNoZXNbaV1bMV0pO1xuICAgICAgbGV0IG9sZFZhbCA9IG1hdGNoZXNbaV1bNF07XG4gICAgICBsZXQgYU5hbWUgPSB0aGlzLm9wdGlvbnMuYXR0cmlidXRlTmFtZVByZWZpeCArIGF0dHJOYW1lO1xuICAgICAgaWYgKGF0dHJOYW1lLmxlbmd0aCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyYW5zZm9ybUF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICBhTmFtZSA9IHRoaXMub3B0aW9ucy50cmFuc2Zvcm1BdHRyaWJ1dGVOYW1lKGFOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZihhTmFtZSA9PT0gXCJfX3Byb3RvX19cIikgYU5hbWUgID0gXCIjX19wcm90b19fXCI7XG4gICAgICAgIGlmIChvbGRWYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJpbVZhbHVlcykge1xuICAgICAgICAgICAgb2xkVmFsID0gb2xkVmFsLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2xkVmFsID0gdGhpcy5yZXBsYWNlRW50aXRpZXNWYWx1ZShvbGRWYWwpO1xuICAgICAgICAgIGNvbnN0IG5ld1ZhbCA9IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvcihhdHRyTmFtZSwgb2xkVmFsLCBqUGF0aCk7XG4gICAgICAgICAgaWYobmV3VmFsID09PSBudWxsIHx8IG5ld1ZhbCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIC8vZG9uJ3QgcGFyc2VcbiAgICAgICAgICAgIGF0dHJzW2FOYW1lXSA9IG9sZFZhbDtcbiAgICAgICAgICB9ZWxzZSBpZih0eXBlb2YgbmV3VmFsICE9PSB0eXBlb2Ygb2xkVmFsIHx8IG5ld1ZhbCAhPT0gb2xkVmFsKXtcbiAgICAgICAgICAgIC8vb3ZlcndyaXRlXG4gICAgICAgICAgICBhdHRyc1thTmFtZV0gPSBuZXdWYWw7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAvL3BhcnNlXG4gICAgICAgICAgICBhdHRyc1thTmFtZV0gPSBwYXJzZVZhbHVlKFxuICAgICAgICAgICAgICBvbGRWYWwsXG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYXJzZUF0dHJpYnV0ZVZhbHVlLFxuICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubnVtYmVyUGFyc2VPcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dCb29sZWFuQXR0cmlidXRlcykge1xuICAgICAgICAgIGF0dHJzW2FOYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFPYmplY3Qua2V5cyhhdHRycykubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuYXR0cmlidXRlc0dyb3VwTmFtZSkge1xuICAgICAgY29uc3QgYXR0ckNvbGxlY3Rpb24gPSB7fTtcbiAgICAgIGF0dHJDb2xsZWN0aW9uW3RoaXMub3B0aW9ucy5hdHRyaWJ1dGVzR3JvdXBOYW1lXSA9IGF0dHJzO1xuICAgICAgcmV0dXJuIGF0dHJDb2xsZWN0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gYXR0cnNcbiAgfVxufVxuXG5jb25zdCBwYXJzZVhtbCA9IGZ1bmN0aW9uKHhtbERhdGEpIHtcbiAgeG1sRGF0YSA9IHhtbERhdGEucmVwbGFjZSgvXFxyXFxuPy9nLCBcIlxcblwiKTsgLy9UT0RPOiByZW1vdmUgdGhpcyBsaW5lXG4gIGNvbnN0IHhtbE9iaiA9IG5ldyB4bWxOb2RlKCcheG1sJyk7XG4gIGxldCBjdXJyZW50Tm9kZSA9IHhtbE9iajtcbiAgbGV0IHRleHREYXRhID0gXCJcIjtcbiAgbGV0IGpQYXRoID0gXCJcIjtcbiAgZm9yKGxldCBpPTA7IGk8IHhtbERhdGEubGVuZ3RoOyBpKyspey8vZm9yIGVhY2ggY2hhciBpbiBYTUwgZGF0YVxuICAgIGNvbnN0IGNoID0geG1sRGF0YVtpXTtcbiAgICBpZihjaCA9PT0gJzwnKXtcbiAgICAgIC8vIGNvbnN0IG5leHRJbmRleCA9IGkrMTtcbiAgICAgIC8vIGNvbnN0IF8ybmRDaGFyID0geG1sRGF0YVtuZXh0SW5kZXhdO1xuICAgICAgaWYoIHhtbERhdGFbaSsxXSA9PT0gJy8nKSB7Ly9DbG9zaW5nIFRhZ1xuICAgICAgICBjb25zdCBjbG9zZUluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBcIj5cIiwgaSwgXCJDbG9zaW5nIFRhZyBpcyBub3QgY2xvc2VkLlwiKVxuICAgICAgICBsZXQgdGFnTmFtZSA9IHhtbERhdGEuc3Vic3RyaW5nKGkrMixjbG9zZUluZGV4KS50cmltKCk7XG5cbiAgICAgICAgaWYodGhpcy5vcHRpb25zLnJlbW92ZU5TUHJlZml4KXtcbiAgICAgICAgICBjb25zdCBjb2xvbkluZGV4ID0gdGFnTmFtZS5pbmRleE9mKFwiOlwiKTtcbiAgICAgICAgICBpZihjb2xvbkluZGV4ICE9PSAtMSl7XG4gICAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHIoY29sb25JbmRleCsxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSkge1xuICAgICAgICAgIHRhZ05hbWUgPSB0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSh0YWdOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGN1cnJlbnROb2RlKXtcbiAgICAgICAgICB0ZXh0RGF0YSA9IHRoaXMuc2F2ZVRleHRUb1BhcmVudFRhZyh0ZXh0RGF0YSwgY3VycmVudE5vZGUsIGpQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgaWYgbGFzdCB0YWcgb2YgbmVzdGVkIHRhZyB3YXMgdW5wYWlyZWQgdGFnXG4gICAgICAgIGNvbnN0IGxhc3RUYWdOYW1lID0galBhdGguc3Vic3RyaW5nKGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSsxKTtcbiAgICAgICAgaWYodGFnTmFtZSAmJiB0aGlzLm9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2YodGFnTmFtZSkgIT09IC0xICl7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnBhaXJlZCB0YWcgY2FuIG5vdCBiZSB1c2VkIGFzIGNsb3NpbmcgdGFnOiA8LyR7dGFnTmFtZX0+YCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByb3BJbmRleCA9IDBcbiAgICAgICAgaWYobGFzdFRhZ05hbWUgJiYgdGhpcy5vcHRpb25zLnVucGFpcmVkVGFncy5pbmRleE9mKGxhc3RUYWdOYW1lKSAhPT0gLTEgKXtcbiAgICAgICAgICBwcm9wSW5kZXggPSBqUGF0aC5sYXN0SW5kZXhPZignLicsIGpQYXRoLmxhc3RJbmRleE9mKCcuJyktMSlcbiAgICAgICAgICB0aGlzLnRhZ3NOb2RlU3RhY2sucG9wKCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHByb3BJbmRleCA9IGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBqUGF0aCA9IGpQYXRoLnN1YnN0cmluZygwLCBwcm9wSW5kZXgpO1xuXG4gICAgICAgIGN1cnJlbnROb2RlID0gdGhpcy50YWdzTm9kZVN0YWNrLnBvcCgpOy8vYXZvaWQgcmVjdXJzaW9uLCBzZXQgdGhlIHBhcmVudCB0YWcgc2NvcGVcbiAgICAgICAgdGV4dERhdGEgPSBcIlwiO1xuICAgICAgICBpID0gY2xvc2VJbmRleDtcbiAgICAgIH0gZWxzZSBpZiggeG1sRGF0YVtpKzFdID09PSAnPycpIHtcblxuICAgICAgICBsZXQgdGFnRGF0YSA9IHJlYWRUYWdFeHAoeG1sRGF0YSxpLCBmYWxzZSwgXCI/PlwiKTtcbiAgICAgICAgaWYoIXRhZ0RhdGEpIHRocm93IG5ldyBFcnJvcihcIlBpIFRhZyBpcyBub3QgY2xvc2VkLlwiKTtcblxuICAgICAgICB0ZXh0RGF0YSA9IHRoaXMuc2F2ZVRleHRUb1BhcmVudFRhZyh0ZXh0RGF0YSwgY3VycmVudE5vZGUsIGpQYXRoKTtcbiAgICAgICAgaWYoICh0aGlzLm9wdGlvbnMuaWdub3JlRGVjbGFyYXRpb24gJiYgdGFnRGF0YS50YWdOYW1lID09PSBcIj94bWxcIikgfHwgdGhpcy5vcHRpb25zLmlnbm9yZVBpVGFncyl7XG5cbiAgICAgICAgfWVsc2V7XG4gIFxuICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5ldyB4bWxOb2RlKHRhZ0RhdGEudGFnTmFtZSk7XG4gICAgICAgICAgY2hpbGROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCBcIlwiKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZih0YWdEYXRhLnRhZ05hbWUgIT09IHRhZ0RhdGEudGFnRXhwICYmIHRhZ0RhdGEuYXR0ckV4cFByZXNlbnQpe1xuICAgICAgICAgICAgY2hpbGROb2RlW1wiOkBcIl0gPSB0aGlzLmJ1aWxkQXR0cmlidXRlc01hcCh0YWdEYXRhLnRhZ0V4cCwgalBhdGgsIHRhZ0RhdGEudGFnTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY3VycmVudE5vZGUsIGNoaWxkTm9kZSwgalBhdGgpXG5cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaSA9IHRhZ0RhdGEuY2xvc2VJbmRleCArIDE7XG4gICAgICB9IGVsc2UgaWYoeG1sRGF0YS5zdWJzdHIoaSArIDEsIDMpID09PSAnIS0tJykge1xuICAgICAgICBjb25zdCBlbmRJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCItLT5cIiwgaSs0LCBcIkNvbW1lbnQgaXMgbm90IGNsb3NlZC5cIilcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLmNvbW1lbnRQcm9wTmFtZSl7XG4gICAgICAgICAgY29uc3QgY29tbWVudCA9IHhtbERhdGEuc3Vic3RyaW5nKGkgKyA0LCBlbmRJbmRleCAtIDIpO1xuXG4gICAgICAgICAgdGV4dERhdGEgPSB0aGlzLnNhdmVUZXh0VG9QYXJlbnRUYWcodGV4dERhdGEsIGN1cnJlbnROb2RlLCBqUGF0aCk7XG5cbiAgICAgICAgICBjdXJyZW50Tm9kZS5hZGQodGhpcy5vcHRpb25zLmNvbW1lbnRQcm9wTmFtZSwgWyB7IFt0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lXSA6IGNvbW1lbnQgfSBdKTtcbiAgICAgICAgfVxuICAgICAgICBpID0gZW5kSW5kZXg7XG4gICAgICB9IGVsc2UgaWYoIHhtbERhdGEuc3Vic3RyKGkgKyAxLCAyKSA9PT0gJyFEJykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZWFkRG9jVHlwZSh4bWxEYXRhLCBpKTtcbiAgICAgICAgdGhpcy5kb2NUeXBlRW50aXRpZXMgPSByZXN1bHQuZW50aXRpZXM7XG4gICAgICAgIGkgPSByZXN1bHQuaTtcbiAgICAgIH1lbHNlIGlmKHhtbERhdGEuc3Vic3RyKGkgKyAxLCAyKSA9PT0gJyFbJykge1xuICAgICAgICBjb25zdCBjbG9zZUluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBcIl1dPlwiLCBpLCBcIkNEQVRBIGlzIG5vdCBjbG9zZWQuXCIpIC0gMjtcbiAgICAgICAgY29uc3QgdGFnRXhwID0geG1sRGF0YS5zdWJzdHJpbmcoaSArIDksY2xvc2VJbmRleCk7XG5cbiAgICAgICAgdGV4dERhdGEgPSB0aGlzLnNhdmVUZXh0VG9QYXJlbnRUYWcodGV4dERhdGEsIGN1cnJlbnROb2RlLCBqUGF0aCk7XG5cbiAgICAgICAgLy9jZGF0YSBzaG91bGQgYmUgc2V0IGV2ZW4gaWYgaXQgaXMgMCBsZW5ndGggc3RyaW5nXG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lKXtcbiAgICAgICAgICAvLyBsZXQgdmFsID0gdGhpcy5wYXJzZVRleHREYXRhKHRhZ0V4cCwgdGhpcy5vcHRpb25zLmNkYXRhUHJvcE5hbWUsIGpQYXRoICsgXCIuXCIgKyB0aGlzLm9wdGlvbnMuY2RhdGFQcm9wTmFtZSwgdHJ1ZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIC8vIGlmKCF2YWwpIHZhbCA9IFwiXCI7XG4gICAgICAgICAgY3VycmVudE5vZGUuYWRkKHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lLCBbIHsgW3RoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWVdIDogdGFnRXhwIH0gXSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGxldCB2YWwgPSB0aGlzLnBhcnNlVGV4dERhdGEodGFnRXhwLCBjdXJyZW50Tm9kZS50YWduYW1lLCBqUGF0aCwgdHJ1ZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmKHZhbCA9PSB1bmRlZmluZWQpIHZhbCA9IFwiXCI7XG4gICAgICAgICAgY3VycmVudE5vZGUuYWRkKHRoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWUsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGkgPSBjbG9zZUluZGV4ICsgMjtcbiAgICAgIH1lbHNlIHsvL09wZW5pbmcgdGFnXG4gICAgICAgIGxldCByZXN1bHQgPSByZWFkVGFnRXhwKHhtbERhdGEsaSwgdGhpcy5vcHRpb25zLnJlbW92ZU5TUHJlZml4KTtcbiAgICAgICAgbGV0IHRhZ05hbWU9IHJlc3VsdC50YWdOYW1lO1xuICAgICAgICBsZXQgdGFnRXhwID0gcmVzdWx0LnRhZ0V4cDtcbiAgICAgICAgbGV0IGF0dHJFeHBQcmVzZW50ID0gcmVzdWx0LmF0dHJFeHBQcmVzZW50O1xuICAgICAgICBsZXQgY2xvc2VJbmRleCA9IHJlc3VsdC5jbG9zZUluZGV4O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSkge1xuICAgICAgICAgIHRhZ05hbWUgPSB0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSh0YWdOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy9zYXZlIHRleHQgYXMgY2hpbGQgbm9kZVxuICAgICAgICBpZiAoY3VycmVudE5vZGUgJiYgdGV4dERhdGEpIHtcbiAgICAgICAgICBpZihjdXJyZW50Tm9kZS50YWduYW1lICE9PSAnIXhtbCcpe1xuICAgICAgICAgICAgLy93aGVuIG5lc3RlZCB0YWcgaXMgZm91bmRcbiAgICAgICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGlmIGxhc3QgdGFnIHdhcyB1bnBhaXJlZCB0YWdcbiAgICAgICAgY29uc3QgbGFzdFRhZyA9IGN1cnJlbnROb2RlO1xuICAgICAgICBpZihsYXN0VGFnICYmIHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZihsYXN0VGFnLnRhZ25hbWUpICE9PSAtMSApe1xuICAgICAgICAgIGN1cnJlbnROb2RlID0gdGhpcy50YWdzTm9kZVN0YWNrLnBvcCgpO1xuICAgICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyaW5nKDAsIGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGFnTmFtZSAhPT0geG1sT2JqLnRhZ25hbWUpe1xuICAgICAgICAgIGpQYXRoICs9IGpQYXRoID8gXCIuXCIgKyB0YWdOYW1lIDogdGFnTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0l0U3RvcE5vZGUodGhpcy5vcHRpb25zLnN0b3BOb2RlcywgalBhdGgsIHRhZ05hbWUpKSB7IC8vVE9ETzogbmFtZXNwYWNlXG4gICAgICAgICAgbGV0IHRhZ0NvbnRlbnQgPSBcIlwiO1xuICAgICAgICAgIC8vc2VsZi1jbG9zaW5nIHRhZ1xuICAgICAgICAgIGlmKHRhZ0V4cC5sZW5ndGggPiAwICYmIHRhZ0V4cC5sYXN0SW5kZXhPZihcIi9cIikgPT09IHRhZ0V4cC5sZW5ndGggLSAxKXtcbiAgICAgICAgICAgIGkgPSByZXN1bHQuY2xvc2VJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy91bnBhaXJlZCB0YWdcbiAgICAgICAgICBlbHNlIGlmKHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZih0YWdOYW1lKSAhPT0gLTEpe1xuICAgICAgICAgICAgaSA9IHJlc3VsdC5jbG9zZUluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL25vcm1hbCB0YWdcbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgLy9yZWFkIHVudGlsIGNsb3NpbmcgdGFnIGlzIGZvdW5kXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlYWRTdG9wTm9kZURhdGEoeG1sRGF0YSwgdGFnTmFtZSwgY2xvc2VJbmRleCArIDEpO1xuICAgICAgICAgICAgaWYoIXJlc3VsdCkgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGVuZCBvZiAke3RhZ05hbWV9YCk7XG4gICAgICAgICAgICBpID0gcmVzdWx0Lmk7XG4gICAgICAgICAgICB0YWdDb250ZW50ID0gcmVzdWx0LnRhZ0NvbnRlbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IHhtbE5vZGUodGFnTmFtZSk7XG4gICAgICAgICAgaWYodGFnTmFtZSAhPT0gdGFnRXhwICYmIGF0dHJFeHBQcmVzZW50KXtcbiAgICAgICAgICAgIGNoaWxkTm9kZVtcIjpAXCJdID0gdGhpcy5idWlsZEF0dHJpYnV0ZXNNYXAodGFnRXhwLCBqUGF0aCwgdGFnTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHRhZ0NvbnRlbnQpIHtcbiAgICAgICAgICAgIHRhZ0NvbnRlbnQgPSB0aGlzLnBhcnNlVGV4dERhdGEodGFnQ29udGVudCwgdGFnTmFtZSwgalBhdGgsIHRydWUsIGF0dHJFeHBQcmVzZW50LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgalBhdGggPSBqUGF0aC5zdWJzdHIoMCwgalBhdGgubGFzdEluZGV4T2YoXCIuXCIpKTtcbiAgICAgICAgICBjaGlsZE5vZGUuYWRkKHRoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWUsIHRhZ0NvbnRlbnQpO1xuICAgICAgICAgIFxuICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY3VycmVudE5vZGUsIGNoaWxkTm9kZSwgalBhdGgpXG4gICAgICAgIH1lbHNle1xuICAvL3NlbGZDbG9zaW5nIHRhZ1xuICAgICAgICAgIGlmKHRhZ0V4cC5sZW5ndGggPiAwICYmIHRhZ0V4cC5sYXN0SW5kZXhPZihcIi9cIikgPT09IHRhZ0V4cC5sZW5ndGggLSAxKXtcbiAgICAgICAgICAgIGlmKHRhZ05hbWVbdGFnTmFtZS5sZW5ndGggLSAxXSA9PT0gXCIvXCIpeyAvL3JlbW92ZSB0cmFpbGluZyAnLydcbiAgICAgICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKDAsIHRhZ05hbWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIHRhZ0V4cCA9IHRhZ05hbWU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgdGFnRXhwID0gdGFnRXhwLnN1YnN0cigwLCB0YWdFeHAubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy50cmFuc2Zvcm1UYWdOYW1lKSB7XG4gICAgICAgICAgICAgIHRhZ05hbWUgPSB0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSh0YWdOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IHhtbE5vZGUodGFnTmFtZSk7XG4gICAgICAgICAgICBpZih0YWdOYW1lICE9PSB0YWdFeHAgJiYgYXR0ckV4cFByZXNlbnQpe1xuICAgICAgICAgICAgICBjaGlsZE5vZGVbXCI6QFwiXSA9IHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgalBhdGgsIHRhZ05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChjdXJyZW50Tm9kZSwgY2hpbGROb2RlLCBqUGF0aClcbiAgICAgICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyKDAsIGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgICAgfVxuICAgIC8vb3BlbmluZyB0YWdcbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IHhtbE5vZGUoIHRhZ05hbWUpO1xuICAgICAgICAgICAgdGhpcy50YWdzTm9kZVN0YWNrLnB1c2goY3VycmVudE5vZGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZih0YWdOYW1lICE9PSB0YWdFeHAgJiYgYXR0ckV4cFByZXNlbnQpe1xuICAgICAgICAgICAgICBjaGlsZE5vZGVbXCI6QFwiXSA9IHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgalBhdGgsIHRhZ05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChjdXJyZW50Tm9kZSwgY2hpbGROb2RlLCBqUGF0aClcbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY2hpbGROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZXh0RGF0YSA9IFwiXCI7XG4gICAgICAgICAgaSA9IGNsb3NlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIHRleHREYXRhICs9IHhtbERhdGFbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiB4bWxPYmouY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIGFkZENoaWxkKGN1cnJlbnROb2RlLCBjaGlsZE5vZGUsIGpQYXRoKXtcbiAgY29uc3QgcmVzdWx0ID0gdGhpcy5vcHRpb25zLnVwZGF0ZVRhZyhjaGlsZE5vZGUudGFnbmFtZSwgalBhdGgsIGNoaWxkTm9kZVtcIjpAXCJdKVxuICBpZihyZXN1bHQgPT09IGZhbHNlKXtcbiAgfWVsc2UgaWYodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIil7XG4gICAgY2hpbGROb2RlLnRhZ25hbWUgPSByZXN1bHRcbiAgICBjdXJyZW50Tm9kZS5hZGRDaGlsZChjaGlsZE5vZGUpO1xuICB9ZWxzZXtcbiAgICBjdXJyZW50Tm9kZS5hZGRDaGlsZChjaGlsZE5vZGUpO1xuICB9XG59XG5cbmNvbnN0IHJlcGxhY2VFbnRpdGllc1ZhbHVlID0gZnVuY3Rpb24odmFsKXtcblxuICBpZih0aGlzLm9wdGlvbnMucHJvY2Vzc0VudGl0aWVzKXtcbiAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5kb2NUeXBlRW50aXRpZXMpe1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5kb2NUeXBlRW50aXRpZXNbZW50aXR5TmFtZV07XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSggZW50aXR5LnJlZ3gsIGVudGl0eS52YWwpO1xuICAgIH1cbiAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5sYXN0RW50aXRpZXMpe1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5sYXN0RW50aXRpZXNbZW50aXR5TmFtZV07XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSggZW50aXR5LnJlZ2V4LCBlbnRpdHkudmFsKTtcbiAgICB9XG4gICAgaWYodGhpcy5vcHRpb25zLmh0bWxFbnRpdGllcyl7XG4gICAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5odG1sRW50aXRpZXMpe1xuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmh0bWxFbnRpdGllc1tlbnRpdHlOYW1lXTtcbiAgICAgICAgdmFsID0gdmFsLnJlcGxhY2UoIGVudGl0eS5yZWdleCwgZW50aXR5LnZhbCk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhbCA9IHZhbC5yZXBsYWNlKCB0aGlzLmFtcEVudGl0eS5yZWdleCwgdGhpcy5hbXBFbnRpdHkudmFsKTtcbiAgfVxuICByZXR1cm4gdmFsO1xufVxuZnVuY3Rpb24gc2F2ZVRleHRUb1BhcmVudFRhZyh0ZXh0RGF0YSwgY3VycmVudE5vZGUsIGpQYXRoLCBpc0xlYWZOb2RlKSB7XG4gIGlmICh0ZXh0RGF0YSkgeyAvL3N0b3JlIHByZXZpb3VzbHkgY29sbGVjdGVkIGRhdGEgYXMgdGV4dE5vZGVcbiAgICBpZihpc0xlYWZOb2RlID09PSB1bmRlZmluZWQpIGlzTGVhZk5vZGUgPSBPYmplY3Qua2V5cyhjdXJyZW50Tm9kZS5jaGlsZCkubGVuZ3RoID09PSAwXG4gICAgXG4gICAgdGV4dERhdGEgPSB0aGlzLnBhcnNlVGV4dERhdGEodGV4dERhdGEsXG4gICAgICBjdXJyZW50Tm9kZS50YWduYW1lLFxuICAgICAgalBhdGgsXG4gICAgICBmYWxzZSxcbiAgICAgIGN1cnJlbnROb2RlW1wiOkBcIl0gPyBPYmplY3Qua2V5cyhjdXJyZW50Tm9kZVtcIjpAXCJdKS5sZW5ndGggIT09IDAgOiBmYWxzZSxcbiAgICAgIGlzTGVhZk5vZGUpO1xuXG4gICAgaWYgKHRleHREYXRhICE9PSB1bmRlZmluZWQgJiYgdGV4dERhdGEgIT09IFwiXCIpXG4gICAgICBjdXJyZW50Tm9kZS5hZGQodGhpcy5vcHRpb25zLnRleHROb2RlTmFtZSwgdGV4dERhdGEpO1xuICAgIHRleHREYXRhID0gXCJcIjtcbiAgfVxuICByZXR1cm4gdGV4dERhdGE7XG59XG5cbi8vVE9ETzogdXNlIGpQYXRoIHRvIHNpbXBsaWZ5IHRoZSBsb2dpY1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nW119IHN0b3BOb2RlcyBcbiAqIEBwYXJhbSB7c3RyaW5nfSBqUGF0aFxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnRUYWdOYW1lIFxuICovXG5mdW5jdGlvbiBpc0l0U3RvcE5vZGUoc3RvcE5vZGVzLCBqUGF0aCwgY3VycmVudFRhZ05hbWUpe1xuICBjb25zdCBhbGxOb2Rlc0V4cCA9IFwiKi5cIiArIGN1cnJlbnRUYWdOYW1lO1xuICBmb3IgKGNvbnN0IHN0b3BOb2RlUGF0aCBpbiBzdG9wTm9kZXMpIHtcbiAgICBjb25zdCBzdG9wTm9kZUV4cCA9IHN0b3BOb2Rlc1tzdG9wTm9kZVBhdGhdO1xuICAgIGlmKCBhbGxOb2Rlc0V4cCA9PT0gc3RvcE5vZGVFeHAgfHwgalBhdGggPT09IHN0b3BOb2RlRXhwICApIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0YWcgRXhwcmVzc2lvbiBhbmQgd2hlcmUgaXQgaXMgZW5kaW5nIGhhbmRsaW5nIHNpbmdsZS1kb3VibGUgcXVvdGVzIHNpdHVhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHhtbERhdGEgXG4gKiBAcGFyYW0ge251bWJlcn0gaSBzdGFydGluZyBpbmRleFxuICogQHJldHVybnMgXG4gKi9cbmZ1bmN0aW9uIHRhZ0V4cFdpdGhDbG9zaW5nSW5kZXgoeG1sRGF0YSwgaSwgY2xvc2luZ0NoYXIgPSBcIj5cIil7XG4gIGxldCBhdHRyQm91bmRhcnk7XG4gIGxldCB0YWdFeHAgPSBcIlwiO1xuICBmb3IgKGxldCBpbmRleCA9IGk7IGluZGV4IDwgeG1sRGF0YS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQgY2ggPSB4bWxEYXRhW2luZGV4XTtcbiAgICBpZiAoYXR0ckJvdW5kYXJ5KSB7XG4gICAgICAgIGlmIChjaCA9PT0gYXR0ckJvdW5kYXJ5KSBhdHRyQm91bmRhcnkgPSBcIlwiOy8vcmVzZXRcbiAgICB9IGVsc2UgaWYgKGNoID09PSAnXCInIHx8IGNoID09PSBcIidcIikge1xuICAgICAgICBhdHRyQm91bmRhcnkgPSBjaDtcbiAgICB9IGVsc2UgaWYgKGNoID09PSBjbG9zaW5nQ2hhclswXSkge1xuICAgICAgaWYoY2xvc2luZ0NoYXJbMV0pe1xuICAgICAgICBpZih4bWxEYXRhW2luZGV4ICsgMV0gPT09IGNsb3NpbmdDaGFyWzFdKXtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogdGFnRXhwLFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiB0YWdFeHAsXG4gICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoID09PSAnXFx0Jykge1xuICAgICAgY2ggPSBcIiBcIlxuICAgIH1cbiAgICB0YWdFeHAgKz0gY2g7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBzdHIsIGksIGVyck1zZyl7XG4gIGNvbnN0IGNsb3NpbmdJbmRleCA9IHhtbERhdGEuaW5kZXhPZihzdHIsIGkpO1xuICBpZihjbG9zaW5nSW5kZXggPT09IC0xKXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKVxuICB9ZWxzZXtcbiAgICByZXR1cm4gY2xvc2luZ0luZGV4ICsgc3RyLmxlbmd0aCAtIDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhZFRhZ0V4cCh4bWxEYXRhLGksIHJlbW92ZU5TUHJlZml4LCBjbG9zaW5nQ2hhciA9IFwiPlwiKXtcbiAgY29uc3QgcmVzdWx0ID0gdGFnRXhwV2l0aENsb3NpbmdJbmRleCh4bWxEYXRhLCBpKzEsIGNsb3NpbmdDaGFyKTtcbiAgaWYoIXJlc3VsdCkgcmV0dXJuO1xuICBsZXQgdGFnRXhwID0gcmVzdWx0LmRhdGE7XG4gIGNvbnN0IGNsb3NlSW5kZXggPSByZXN1bHQuaW5kZXg7XG4gIGNvbnN0IHNlcGFyYXRvckluZGV4ID0gdGFnRXhwLnNlYXJjaCgvXFxzLyk7XG4gIGxldCB0YWdOYW1lID0gdGFnRXhwO1xuICBsZXQgYXR0ckV4cFByZXNlbnQgPSB0cnVlO1xuICBpZihzZXBhcmF0b3JJbmRleCAhPT0gLTEpey8vc2VwYXJhdGUgdGFnIG5hbWUgYW5kIGF0dHJpYnV0ZXMgZXhwcmVzc2lvblxuICAgIHRhZ05hbWUgPSB0YWdFeHAuc3Vic3RyKDAsIHNlcGFyYXRvckluZGV4KS5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB0YWdFeHAgPSB0YWdFeHAuc3Vic3RyKHNlcGFyYXRvckluZGV4ICsgMSk7XG4gIH1cblxuICBpZihyZW1vdmVOU1ByZWZpeCl7XG4gICAgY29uc3QgY29sb25JbmRleCA9IHRhZ05hbWUuaW5kZXhPZihcIjpcIik7XG4gICAgaWYoY29sb25JbmRleCAhPT0gLTEpe1xuICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKGNvbG9uSW5kZXgrMSk7XG4gICAgICBhdHRyRXhwUHJlc2VudCA9IHRhZ05hbWUgIT09IHJlc3VsdC5kYXRhLnN1YnN0cihjb2xvbkluZGV4ICsgMSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgIHRhZ0V4cDogdGFnRXhwLFxuICAgIGNsb3NlSW5kZXg6IGNsb3NlSW5kZXgsXG4gICAgYXR0ckV4cFByZXNlbnQ6IGF0dHJFeHBQcmVzZW50LFxuICB9XG59XG4vKipcbiAqIGZpbmQgcGFpcmVkIHRhZyBmb3IgYSBzdG9wIG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB4bWxEYXRhIFxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgXG4gKiBAcGFyYW0ge251bWJlcn0gaSBcbiAqL1xuZnVuY3Rpb24gcmVhZFN0b3BOb2RlRGF0YSh4bWxEYXRhLCB0YWdOYW1lLCBpKXtcbiAgY29uc3Qgc3RhcnRJbmRleCA9IGk7XG4gIC8vIFN0YXJ0aW5nIGF0IDEgc2luY2Ugd2UgYWxyZWFkeSBoYXZlIGFuIG9wZW4gdGFnXG4gIGxldCBvcGVuVGFnQ291bnQgPSAxO1xuXG4gIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmKCB4bWxEYXRhW2ldID09PSBcIjxcIil7IFxuICAgICAgaWYgKHhtbERhdGFbaSsxXSA9PT0gXCIvXCIpIHsvL2Nsb3NlIHRhZ1xuICAgICAgICAgIGNvbnN0IGNsb3NlSW5kZXggPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiPlwiLCBpLCBgJHt0YWdOYW1lfSBpcyBub3QgY2xvc2VkYCk7XG4gICAgICAgICAgbGV0IGNsb3NlVGFnTmFtZSA9IHhtbERhdGEuc3Vic3RyaW5nKGkrMixjbG9zZUluZGV4KS50cmltKCk7XG4gICAgICAgICAgaWYoY2xvc2VUYWdOYW1lID09PSB0YWdOYW1lKXtcbiAgICAgICAgICAgIG9wZW5UYWdDb3VudC0tO1xuICAgICAgICAgICAgaWYgKG9wZW5UYWdDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRhZ0NvbnRlbnQ6IHhtbERhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGkpLFxuICAgICAgICAgICAgICAgIGkgOiBjbG9zZUluZGV4XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaT1jbG9zZUluZGV4O1xuICAgICAgICB9IGVsc2UgaWYoeG1sRGF0YVtpKzFdID09PSAnPycpIHsgXG4gICAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCI/PlwiLCBpKzEsIFwiU3RvcE5vZGUgaXMgbm90IGNsb3NlZC5cIilcbiAgICAgICAgICBpPWNsb3NlSW5kZXg7XG4gICAgICAgIH0gZWxzZSBpZih4bWxEYXRhLnN1YnN0cihpICsgMSwgMykgPT09ICchLS0nKSB7IFxuICAgICAgICAgIGNvbnN0IGNsb3NlSW5kZXggPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiLS0+XCIsIGkrMywgXCJTdG9wTm9kZSBpcyBub3QgY2xvc2VkLlwiKVxuICAgICAgICAgIGk9Y2xvc2VJbmRleDtcbiAgICAgICAgfSBlbHNlIGlmKHhtbERhdGEuc3Vic3RyKGkgKyAxLCAyKSA9PT0gJyFbJykgeyBcbiAgICAgICAgICBjb25zdCBjbG9zZUluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBcIl1dPlwiLCBpLCBcIlN0b3BOb2RlIGlzIG5vdCBjbG9zZWQuXCIpIC0gMjtcbiAgICAgICAgICBpPWNsb3NlSW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdGFnRGF0YSA9IHJlYWRUYWdFeHAoeG1sRGF0YSwgaSwgJz4nKVxuXG4gICAgICAgICAgaWYgKHRhZ0RhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wZW5UYWdOYW1lID0gdGFnRGF0YSAmJiB0YWdEYXRhLnRhZ05hbWU7XG4gICAgICAgICAgICBpZiAob3BlblRhZ05hbWUgPT09IHRhZ05hbWUgJiYgdGFnRGF0YS50YWdFeHBbdGFnRGF0YS50YWdFeHAubGVuZ3RoLTFdICE9PSBcIi9cIikge1xuICAgICAgICAgICAgICBvcGVuVGFnQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGk9dGFnRGF0YS5jbG9zZUluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICB9Ly9lbmQgZm9yIGxvb3Bcbn1cblxuZnVuY3Rpb24gcGFyc2VWYWx1ZSh2YWwsIHNob3VsZFBhcnNlLCBvcHRpb25zKSB7XG4gIGlmIChzaG91bGRQYXJzZSAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIC8vY29uc29sZS5sb2cob3B0aW9ucylcbiAgICBjb25zdCBuZXd2YWwgPSB2YWwudHJpbSgpO1xuICAgIGlmKG5ld3ZhbCA9PT0gJ3RydWUnICkgcmV0dXJuIHRydWU7XG4gICAgZWxzZSBpZihuZXd2YWwgPT09ICdmYWxzZScgKSByZXR1cm4gZmFsc2U7XG4gICAgZWxzZSByZXR1cm4gdG9OdW1iZXIodmFsLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodXRpbC5pc0V4aXN0KHZhbCkpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IE9yZGVyZWRPYmpQYXJzZXI7XG4iLCJjb25zdCB7IGJ1aWxkT3B0aW9uc30gPSByZXF1aXJlKFwiLi9PcHRpb25zQnVpbGRlclwiKTtcbmNvbnN0IE9yZGVyZWRPYmpQYXJzZXIgPSByZXF1aXJlKFwiLi9PcmRlcmVkT2JqUGFyc2VyXCIpO1xuY29uc3QgeyBwcmV0dGlmeX0gPSByZXF1aXJlKFwiLi9ub2RlMmpzb25cIik7XG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi92YWxpZGF0b3InKTtcblxuY2xhc3MgWE1MUGFyc2Vye1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xuICAgICAgICB0aGlzLmV4dGVybmFsRW50aXRpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gYnVpbGRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgWE1MIGRhdHMgdG8gSlMgb2JqZWN0IFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0geG1sRGF0YSBcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0fSB2YWxpZGF0aW9uT3B0aW9uIFxuICAgICAqL1xuICAgIHBhcnNlKHhtbERhdGEsdmFsaWRhdGlvbk9wdGlvbil7XG4gICAgICAgIGlmKHR5cGVvZiB4bWxEYXRhID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgfWVsc2UgaWYoIHhtbERhdGEudG9TdHJpbmcpe1xuICAgICAgICAgICAgeG1sRGF0YSA9IHhtbERhdGEudG9TdHJpbmcoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJYTUwgZGF0YSBpcyBhY2NlcHRlZCBpbiBTdHJpbmcgb3IgQnl0ZXNbXSBmb3JtLlwiKVxuICAgICAgICB9XG4gICAgICAgIGlmKCB2YWxpZGF0aW9uT3B0aW9uKXtcbiAgICAgICAgICAgIGlmKHZhbGlkYXRpb25PcHRpb24gPT09IHRydWUpIHZhbGlkYXRpb25PcHRpb24gPSB7fTsgLy92YWxpZGF0ZSB3aXRoIGRlZmF1bHQgb3B0aW9uc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0b3IudmFsaWRhdGUoeG1sRGF0YSwgdmFsaWRhdGlvbk9wdGlvbik7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCBgJHtyZXN1bHQuZXJyLm1zZ306JHtyZXN1bHQuZXJyLmxpbmV9OiR7cmVzdWx0LmVyci5jb2x9YCApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmRlcmVkT2JqUGFyc2VyID0gbmV3IE9yZGVyZWRPYmpQYXJzZXIodGhpcy5vcHRpb25zKTtcbiAgICAgICAgb3JkZXJlZE9ialBhcnNlci5hZGRFeHRlcm5hbEVudGl0aWVzKHRoaXMuZXh0ZXJuYWxFbnRpdGllcyk7XG4gICAgICAgIGNvbnN0IG9yZGVyZWRSZXN1bHQgPSBvcmRlcmVkT2JqUGFyc2VyLnBhcnNlWG1sKHhtbERhdGEpO1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMucHJlc2VydmVPcmRlciB8fCBvcmRlcmVkUmVzdWx0ID09PSB1bmRlZmluZWQpIHJldHVybiBvcmRlcmVkUmVzdWx0O1xuICAgICAgICBlbHNlIHJldHVybiBwcmV0dGlmeShvcmRlcmVkUmVzdWx0LCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBFbnRpdHkgd2hpY2ggaXMgbm90IGJ5IGRlZmF1bHQgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFxuICAgICAqL1xuICAgIGFkZEVudGl0eShrZXksIHZhbHVlKXtcbiAgICAgICAgaWYodmFsdWUuaW5kZXhPZihcIiZcIikgIT09IC0xKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVudGl0eSB2YWx1ZSBjYW4ndCBoYXZlICcmJ1wiKVxuICAgICAgICB9ZWxzZSBpZihrZXkuaW5kZXhPZihcIiZcIikgIT09IC0xIHx8IGtleS5pbmRleE9mKFwiO1wiKSAhPT0gLTEpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gZW50aXR5IG11c3QgYmUgc2V0IHdpdGhvdXQgJyYnIGFuZCAnOycuIEVnLiB1c2UgJyN4RCcgZm9yICcmI3hEOydcIilcbiAgICAgICAgfWVsc2UgaWYodmFsdWUgPT09IFwiJlwiKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFuIGVudGl0eSB3aXRoIHZhbHVlICcmJyBpcyBub3QgcGVybWl0dGVkXCIpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMuZXh0ZXJuYWxFbnRpdGllc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gWE1MUGFyc2VyOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IG5vZGUgXG4gKiBAcGFyYW0ge2FueX0gb3B0aW9ucyBcbiAqIEByZXR1cm5zIFxuICovXG5mdW5jdGlvbiBwcmV0dGlmeShub2RlLCBvcHRpb25zKXtcbiAgcmV0dXJuIGNvbXByZXNzKCBub2RlLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IGFyciBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoIFxuICogQHJldHVybnMgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGNvbXByZXNzKGFyciwgb3B0aW9ucywgalBhdGgpe1xuICBsZXQgdGV4dDtcbiAgY29uc3QgY29tcHJlc3NlZE9iaiA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRhZ09iaiA9IGFycltpXTtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BOYW1lKHRhZ09iaik7XG4gICAgbGV0IG5ld0pwYXRoID0gXCJcIjtcbiAgICBpZihqUGF0aCA9PT0gdW5kZWZpbmVkKSBuZXdKcGF0aCA9IHByb3BlcnR5O1xuICAgIGVsc2UgbmV3SnBhdGggPSBqUGF0aCArIFwiLlwiICsgcHJvcGVydHk7XG5cbiAgICBpZihwcm9wZXJ0eSA9PT0gb3B0aW9ucy50ZXh0Tm9kZU5hbWUpe1xuICAgICAgaWYodGV4dCA9PT0gdW5kZWZpbmVkKSB0ZXh0ID0gdGFnT2JqW3Byb3BlcnR5XTtcbiAgICAgIGVsc2UgdGV4dCArPSBcIlwiICsgdGFnT2JqW3Byb3BlcnR5XTtcbiAgICB9ZWxzZSBpZihwcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1lbHNlIGlmKHRhZ09ialtwcm9wZXJ0eV0pe1xuICAgICAgXG4gICAgICBsZXQgdmFsID0gY29tcHJlc3ModGFnT2JqW3Byb3BlcnR5XSwgb3B0aW9ucywgbmV3SnBhdGgpO1xuICAgICAgY29uc3QgaXNMZWFmID0gaXNMZWFmVGFnKHZhbCwgb3B0aW9ucyk7XG5cbiAgICAgIGlmKHRhZ09ialtcIjpAXCJdKXtcbiAgICAgICAgYXNzaWduQXR0cmlidXRlcyggdmFsLCB0YWdPYmpbXCI6QFwiXSwgbmV3SnBhdGgsIG9wdGlvbnMpO1xuICAgICAgfWVsc2UgaWYoT2JqZWN0LmtleXModmFsKS5sZW5ndGggPT09IDEgJiYgdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmICFvcHRpb25zLmFsd2F5c0NyZWF0ZVRleHROb2RlKXtcbiAgICAgICAgdmFsID0gdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXTtcbiAgICAgIH1lbHNlIGlmKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAwKXtcbiAgICAgICAgaWYob3B0aW9ucy5hbHdheXNDcmVhdGVUZXh0Tm9kZSkgdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IFwiXCI7XG4gICAgICAgIGVsc2UgdmFsID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgaWYoY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCAmJiBjb21wcmVzc2VkT2JqLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICBpZighQXJyYXkuaXNBcnJheShjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSkpIHtcbiAgICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gWyBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSBdO1xuICAgICAgICB9XG4gICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldLnB1c2godmFsKTtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL1RPRE86IGlmIGEgbm9kZSBpcyBub3QgYW4gYXJyYXksIHRoZW4gY2hlY2sgaWYgaXQgc2hvdWxkIGJlIGFuIGFycmF5XG4gICAgICAgIC8vYWxzbyBkZXRlcm1pbmUgaWYgaXQgaXMgYSBsZWFmIG5vZGVcbiAgICAgICAgaWYgKG9wdGlvbnMuaXNBcnJheShwcm9wZXJ0eSwgbmV3SnBhdGgsIGlzTGVhZiApKSB7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSBbdmFsXTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gIH1cbiAgLy8gaWYodGV4dCAmJiB0ZXh0Lmxlbmd0aCA+IDApIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgaWYodHlwZW9mIHRleHQgPT09IFwic3RyaW5nXCIpe1xuICAgIGlmKHRleHQubGVuZ3RoID4gMCkgY29tcHJlc3NlZE9ialtvcHRpb25zLnRleHROb2RlTmFtZV0gPSB0ZXh0O1xuICB9ZWxzZSBpZih0ZXh0ICE9PSB1bmRlZmluZWQpIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgcmV0dXJuIGNvbXByZXNzZWRPYmo7XG59XG5cbmZ1bmN0aW9uIHByb3BOYW1lKG9iail7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGlmKGtleSAhPT0gXCI6QFwiKSByZXR1cm4ga2V5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkF0dHJpYnV0ZXMob2JqLCBhdHRyTWFwLCBqcGF0aCwgb3B0aW9ucyl7XG4gIGlmIChhdHRyTWFwKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGF0dHJNYXApO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYXRyck5hbWUgPSBrZXlzW2ldO1xuICAgICAgaWYgKG9wdGlvbnMuaXNBcnJheShhdHJyTmFtZSwganBhdGggKyBcIi5cIiArIGF0cnJOYW1lLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICBvYmpbYXRyck5hbWVdID0gWyBhdHRyTWFwW2F0cnJOYW1lXSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2F0cnJOYW1lXSA9IGF0dHJNYXBbYXRyck5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xlYWZUYWcob2JqLCBvcHRpb25zKXtcbiAgY29uc3QgeyB0ZXh0Tm9kZU5hbWUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHByb3BDb3VudCA9IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoO1xuICBcbiAgaWYgKHByb3BDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgIHByb3BDb3VudCA9PT0gMSAmJlxuICAgIChvYmpbdGV4dE5vZGVOYW1lXSB8fCB0eXBlb2Ygb2JqW3RleHROb2RlTmFtZV0gPT09IFwiYm9vbGVhblwiIHx8IG9ialt0ZXh0Tm9kZU5hbWVdID09PSAwKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMucHJldHRpZnkgPSBwcmV0dGlmeTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgWG1sTm9kZXtcbiAgY29uc3RydWN0b3IodGFnbmFtZSkge1xuICAgIHRoaXMudGFnbmFtZSA9IHRhZ25hbWU7XG4gICAgdGhpcy5jaGlsZCA9IFtdOyAvL25lc3RlZCB0YWdzLCB0ZXh0LCBjZGF0YSwgY29tbWVudHMgaW4gb3JkZXJcbiAgICB0aGlzW1wiOkBcIl0gPSB7fTsgLy9hdHRyaWJ1dGVzIG1hcFxuICB9XG4gIGFkZChrZXksdmFsKXtcbiAgICAvLyB0aGlzLmNoaWxkLnB1c2goIHtuYW1lIDoga2V5LCB2YWw6IHZhbCwgaXNDZGF0YTogaXNDZGF0YSB9KTtcbiAgICBpZihrZXkgPT09IFwiX19wcm90b19fXCIpIGtleSA9IFwiI19fcHJvdG9fX1wiO1xuICAgIHRoaXMuY2hpbGQucHVzaCgge1trZXldOiB2YWwgfSk7XG4gIH1cbiAgYWRkQ2hpbGQobm9kZSkge1xuICAgIGlmKG5vZGUudGFnbmFtZSA9PT0gXCJfX3Byb3RvX19cIikgbm9kZS50YWduYW1lID0gXCIjX19wcm90b19fXCI7XG4gICAgaWYobm9kZVtcIjpAXCJdICYmIE9iamVjdC5rZXlzKG5vZGVbXCI6QFwiXSkubGVuZ3RoID4gMCl7XG4gICAgICB0aGlzLmNoaWxkLnB1c2goIHsgW25vZGUudGFnbmFtZV06IG5vZGUuY2hpbGQsIFtcIjpAXCJdOiBub2RlW1wiOkBcIl0gfSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLmNoaWxkLnB1c2goIHsgW25vZGUudGFnbmFtZV06IG5vZGUuY2hpbGQgfSk7XG4gICAgfVxuICB9O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFhtbE5vZGU7IiwiY29uc3QgaGV4UmVnZXggPSAvXlstK10/MHhbYS1mQS1GMC05XSskLztcbmNvbnN0IG51bVJlZ2V4ID0gL14oW1xcLVxcK10pPygwKikoXFwuWzAtOV0rKFtlRV1cXC0/WzAtOV0rKT98WzAtOV0rKFxcLlswLTldKyhbZUVdXFwtP1swLTldKyk/KT8pJC87XG4vLyBjb25zdCBvY3RSZWdleCA9IC8weFthLXowLTldKy87XG4vLyBjb25zdCBiaW5SZWdleCA9IC8weFthLXowLTldKy87XG5cblxuLy9wb2x5ZmlsbFxuaWYgKCFOdW1iZXIucGFyc2VJbnQgJiYgd2luZG93LnBhcnNlSW50KSB7XG4gICAgTnVtYmVyLnBhcnNlSW50ID0gd2luZG93LnBhcnNlSW50O1xufVxuaWYgKCFOdW1iZXIucGFyc2VGbG9hdCAmJiB3aW5kb3cucGFyc2VGbG9hdCkge1xuICAgIE51bWJlci5wYXJzZUZsb2F0ID0gd2luZG93LnBhcnNlRmxvYXQ7XG59XG5cbiAgXG5jb25zdCBjb25zaWRlciA9IHtcbiAgICBoZXggOiAgdHJ1ZSxcbiAgICBsZWFkaW5nWmVyb3M6IHRydWUsXG4gICAgZGVjaW1hbFBvaW50OiBcIlxcLlwiLFxuICAgIGVOb3RhdGlvbjogdHJ1ZVxuICAgIC8vc2tpcExpa2U6IC9yZWdleC9cbn07XG5cbmZ1bmN0aW9uIHRvTnVtYmVyKHN0ciwgb3B0aW9ucyA9IHt9KXtcbiAgICAvLyBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgY29uc2lkZXIpO1xuICAgIC8vIGlmKG9wdC5sZWFkaW5nWmVyb3MgPT09IGZhbHNlKXtcbiAgICAvLyAgICAgb3B0aW9ucy5sZWFkaW5nWmVyb3MgPSBmYWxzZTtcbiAgICAvLyB9ZWxzZSBpZihvcHQuaGV4ID09PSBmYWxzZSl7XG4gICAgLy8gICAgIG9wdGlvbnMuaGV4ID0gZmFsc2U7XG4gICAgLy8gfVxuXG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbnNpZGVyLCBvcHRpb25zICk7XG4gICAgaWYoIXN0ciB8fCB0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiICkgcmV0dXJuIHN0cjtcbiAgICBcbiAgICBsZXQgdHJpbW1lZFN0ciAgPSBzdHIudHJpbSgpO1xuICAgIC8vIGlmKHRyaW1tZWRTdHIgPT09IFwiMC4wXCIpIHJldHVybiAwO1xuICAgIC8vIGVsc2UgaWYodHJpbW1lZFN0ciA9PT0gXCIrMC4wXCIpIHJldHVybiAwO1xuICAgIC8vIGVsc2UgaWYodHJpbW1lZFN0ciA9PT0gXCItMC4wXCIpIHJldHVybiAtMDtcblxuICAgIGlmKG9wdGlvbnMuc2tpcExpa2UgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnNraXBMaWtlLnRlc3QodHJpbW1lZFN0cikpIHJldHVybiBzdHI7XG4gICAgZWxzZSBpZiAob3B0aW9ucy5oZXggJiYgaGV4UmVnZXgudGVzdCh0cmltbWVkU3RyKSkge1xuICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHRyaW1tZWRTdHIsIDE2KTtcbiAgICAvLyB9IGVsc2UgaWYgKG9wdGlvbnMucGFyc2VPY3QgJiYgb2N0UmVnZXgudGVzdChzdHIpKSB7XG4gICAgLy8gICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQodmFsLCA4KTtcbiAgICAvLyB9ZWxzZSBpZiAob3B0aW9ucy5wYXJzZUJpbiAmJiBiaW5SZWdleC50ZXN0KHN0cikpIHtcbiAgICAvLyAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludCh2YWwsIDIpO1xuICAgIH1lbHNle1xuICAgICAgICAvL3NlcGFyYXRlIG5lZ2F0aXZlIHNpZ24sIGxlYWRpbmcgemVyb3MsIGFuZCByZXN0IG51bWJlclxuICAgICAgICBjb25zdCBtYXRjaCA9IG51bVJlZ2V4LmV4ZWModHJpbW1lZFN0cik7XG4gICAgICAgIGlmKG1hdGNoKXtcbiAgICAgICAgICAgIGNvbnN0IHNpZ24gPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGNvbnN0IGxlYWRpbmdaZXJvcyA9IG1hdGNoWzJdO1xuICAgICAgICAgICAgbGV0IG51bVRyaW1tZWRCeVplcm9zID0gdHJpbVplcm9zKG1hdGNoWzNdKTsgLy9jb21wbGV0ZSBudW0gd2l0aG91dCBsZWFkaW5nIHplcm9zXG4gICAgICAgICAgICAvL3RyaW0gZW5kaW5nIHplcm9zIGZvciBmbG9hdGluZyBudW1iZXJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZU5vdGF0aW9uID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNl07XG4gICAgICAgICAgICBpZighb3B0aW9ucy5sZWFkaW5nWmVyb3MgJiYgbGVhZGluZ1plcm9zLmxlbmd0aCA+IDAgJiYgc2lnbiAmJiB0cmltbWVkU3RyWzJdICE9PSBcIi5cIikgcmV0dXJuIHN0cjsgLy8tMDEyM1xuICAgICAgICAgICAgZWxzZSBpZighb3B0aW9ucy5sZWFkaW5nWmVyb3MgJiYgbGVhZGluZ1plcm9zLmxlbmd0aCA+IDAgJiYgIXNpZ24gJiYgdHJpbW1lZFN0clsxXSAhPT0gXCIuXCIpIHJldHVybiBzdHI7IC8vMDEyM1xuICAgICAgICAgICAgZWxzZXsvL25vIGxlYWRpbmcgemVyb3Mgb3IgbGVhZGluZyB6ZXJvcyBhcmUgYWxsb3dlZFxuICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IE51bWJlcih0cmltbWVkU3RyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1TdHIgPSBcIlwiICsgbnVtO1xuICAgICAgICAgICAgICAgIGlmKG51bVN0ci5zZWFyY2goL1tlRV0vKSAhPT0gLTEpeyAvL2dpdmVuIG51bWJlciBpcyBsb25nIGFuZCBwYXJzZWQgdG8gZU5vdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuZU5vdGF0aW9uKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoZU5vdGF0aW9uKXsgLy9naXZlbiBudW1iZXIgaGFzIGVub3RhdGlvblxuICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLmVOb3RhdGlvbikgcmV0dXJuIG51bTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRyaW1tZWRTdHIuaW5kZXhPZihcIi5cIikgIT09IC0xKXsgLy9mbG9hdGluZyBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgZGVjaW1hbFBhcnQgPSBtYXRjaFs1XS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGludFBhcnQgPSB0cmltbWVkU3RyLnN1YnN0cigwLHRyaW1tZWRTdHIuaW5kZXhPZihcIi5cIikpO1xuXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBwID0gbnVtU3RyLmluZGV4T2YoXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBnaXZlbkludFBhcnQgPSBudW1TdHIuc3Vic3RyKDAscCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGdpdmVuRGVjUGFydCA9IG51bVN0ci5zdWJzdHIocCsxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYobnVtU3RyID09PSBcIjBcIiAmJiAobnVtVHJpbW1lZEJ5WmVyb3MgPT09IFwiXCIpICkgcmV0dXJuIG51bTsgLy8wLjBcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihudW1TdHIgPT09IG51bVRyaW1tZWRCeVplcm9zKSByZXR1cm4gbnVtOyAvLzAuNDU2LiAwLjc5MDAwXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoIHNpZ24gJiYgbnVtU3RyID09PSBcIi1cIitudW1UcmltbWVkQnlaZXJvcykgcmV0dXJuIG51bTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihsZWFkaW5nWmVyb3Mpe1xuICAgICAgICAgICAgICAgICAgICAvLyBpZihudW1UcmltbWVkQnlaZXJvcyA9PT0gbnVtU3RyKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGlmKG9wdGlvbnMubGVhZGluZ1plcm9zKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgZWxzZSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgICAgICAvLyB9ZWxzZSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgICAgICBpZihudW1UcmltbWVkQnlaZXJvcyA9PT0gbnVtU3RyKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHNpZ24rbnVtVHJpbW1lZEJ5WmVyb3MgPT09IG51bVN0cikgcmV0dXJuIG51bTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKHRyaW1tZWRTdHIgPT09IG51bVN0cikgcmV0dXJuIG51bTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHRyaW1tZWRTdHIgPT09IHNpZ24rbnVtU3RyKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgIC8vIGVsc2V7XG4gICAgICAgICAgICAgICAgLy8gICAgIC8vbnVtYmVyIHdpdGggKy8tIHNpZ25cbiAgICAgICAgICAgICAgICAvLyAgICAgdHJpbW1lZFN0ci50ZXN0KC9bLStdWzAtOV0pO1xuXG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbHNlIGlmKCFlTm90YXRpb24gJiYgdHJpbW1lZFN0ciAmJiB0cmltbWVkU3RyICE9PSBOdW1iZXIodHJpbW1lZFN0cikgKSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgXG4gICAgICAgIH1lbHNleyAvL25vbi1udW1lcmljIHN0cmluZ1xuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBudW1TdHIgd2l0aG91dCBsZWFkaW5nIHplcm9zXG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gdHJpbVplcm9zKG51bVN0cil7XG4gICAgaWYobnVtU3RyICYmIG51bVN0ci5pbmRleE9mKFwiLlwiKSAhPT0gLTEpey8vZmxvYXRcbiAgICAgICAgbnVtU3RyID0gbnVtU3RyLnJlcGxhY2UoLzArJC8sIFwiXCIpOyAvL3JlbW92ZSBlbmRpbmcgemVyb3NcbiAgICAgICAgaWYobnVtU3RyID09PSBcIi5cIikgIG51bVN0ciA9IFwiMFwiO1xuICAgICAgICBlbHNlIGlmKG51bVN0clswXSA9PT0gXCIuXCIpICBudW1TdHIgPSBcIjBcIitudW1TdHI7XG4gICAgICAgIGVsc2UgaWYobnVtU3RyW251bVN0ci5sZW5ndGgtMV0gPT09IFwiLlwiKSAgbnVtU3RyID0gbnVtU3RyLnN1YnN0cigwLG51bVN0ci5sZW5ndGgtMSk7XG4gICAgICAgIHJldHVybiBudW1TdHI7XG4gICAgfVxuICAgIHJldHVybiBudW1TdHI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJidWZmZXJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjcnlwdG9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnMvcHJvbWlzZXNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJvc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHJlYW1cIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXJsXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV0aWxcIik7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgcmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0LCBub3JtYWxpemVQcm92aWRlciB9IGZyb20gXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRDbG91ZFRyYWlsSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIgPSBhc3luYyAoY29uZmlnLCBjb250ZXh0LCBpbnB1dCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIG9wZXJhdGlvbjogZ2V0U21pdGh5Q29udGV4dChjb250ZXh0KS5vcGVyYXRpb24sXG4gICAgICAgIHJlZ2lvbjogKGF3YWl0IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5yZWdpb24pKCkpIHx8XG4gICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImV4cGVjdGVkIGByZWdpb25gIHRvIGJlIGNvbmZpZ3VyZWQgZm9yIGBhd3MuYXV0aCNzaWd2NGBcIik7XG4gICAgICAgICAgICB9KSgpLFxuICAgIH07XG59O1xuZnVuY3Rpb24gY3JlYXRlQXdzQXV0aFNpZ3Y0SHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzY2hlbWVJZDogXCJhd3MuYXV0aCNzaWd2NFwiLFxuICAgICAgICBzaWduaW5nUHJvcGVydGllczoge1xuICAgICAgICAgICAgbmFtZTogXCJjbG91ZHRyYWlsXCIsXG4gICAgICAgICAgICByZWdpb246IGF1dGhQYXJhbWV0ZXJzLnJlZ2lvbixcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcGVydGllc0V4dHJhY3RvcjogKGNvbmZpZywgY29udGV4dCkgPT4gKHtcbiAgICAgICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDbG91ZFRyYWlsSHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IChhdXRoUGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBbXTtcbiAgICBzd2l0Y2ggKGF1dGhQYXJhbWV0ZXJzLm9wZXJhdGlvbikge1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goY3JlYXRlQXdzQXV0aFNpZ3Y0SHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNvbmZpZ18wID0gcmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnKGNvbmZpZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY29uZmlnXzAsXG4gICAgfTtcbn07XG4iLCJleHBvcnQgY29uc3QgcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyA9IChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdXNlRHVhbHN0YWNrRW5kcG9pbnQ6IG9wdGlvbnMudXNlRHVhbHN0YWNrRW5kcG9pbnQgPz8gZmFsc2UsXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogb3B0aW9ucy51c2VGaXBzRW5kcG9pbnQgPz8gZmFsc2UsXG4gICAgICAgIGRlZmF1bHRTaWduaW5nTmFtZTogXCJjbG91ZHRyYWlsXCIsXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgY29tbW9uUGFyYW1zID0ge1xuICAgIFVzZUZJUFM6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwidXNlRmlwc0VuZHBvaW50XCIgfSxcbiAgICBFbmRwb2ludDogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJlbmRwb2ludFwiIH0sXG4gICAgUmVnaW9uOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInJlZ2lvblwiIH0sXG4gICAgVXNlRHVhbFN0YWNrOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUR1YWxzdGFja0VuZHBvaW50XCIgfSxcbn07XG4iLCJjb25zdCB1ID0gXCJyZXF1aXJlZFwiLCB2ID0gXCJmblwiLCB3ID0gXCJhcmd2XCIsIHggPSBcInJlZlwiO1xuY29uc3QgYSA9IHRydWUsIGIgPSBcImlzU2V0XCIsIGMgPSBcImJvb2xlYW5FcXVhbHNcIiwgZCA9IFwiZXJyb3JcIiwgZSA9IFwiZW5kcG9pbnRcIiwgZiA9IFwidHJlZVwiLCBnID0gXCJQYXJ0aXRpb25SZXN1bHRcIiwgaCA9IFwic3RyaW5nRXF1YWxzXCIsIGkgPSB7IFt1XTogZmFsc2UsIFwidHlwZVwiOiBcIlN0cmluZ1wiIH0sIGogPSB7IFt1XTogdHJ1ZSwgXCJkZWZhdWx0XCI6IGZhbHNlLCBcInR5cGVcIjogXCJCb29sZWFuXCIgfSwgayA9IHsgW3hdOiBcIkVuZHBvaW50XCIgfSwgbCA9IHsgW3ZdOiBjLCBbd106IFt7IFt4XTogXCJVc2VGSVBTXCIgfSwgdHJ1ZV0gfSwgbSA9IHsgW3ZdOiBjLCBbd106IFt7IFt4XTogXCJVc2VEdWFsU3RhY2tcIiB9LCB0cnVlXSB9LCBuID0ge30sIG8gPSB7IFt4XTogXCJSZWdpb25cIiB9LCBwID0geyBbdl06IFwiZ2V0QXR0clwiLCBbd106IFt7IFt4XTogZyB9LCBcInN1cHBvcnRzRklQU1wiXSB9LCBxID0geyBbdl06IGMsIFt3XTogW3RydWUsIHsgW3ZdOiBcImdldEF0dHJcIiwgW3ddOiBbeyBbeF06IGcgfSwgXCJzdXBwb3J0c0R1YWxTdGFja1wiXSB9XSB9LCByID0gW2xdLCBzID0gW21dLCB0ID0gW29dO1xuY29uc3QgX2RhdGEgPSB7IHZlcnNpb246IFwiMS4wXCIsIHBhcmFtZXRlcnM6IHsgUmVnaW9uOiBpLCBVc2VEdWFsU3RhY2s6IGosIFVzZUZJUFM6IGosIEVuZHBvaW50OiBpIH0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IGIsIFt3XTogW2tdIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogciwgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBGSVBTIGFuZCBjdXN0b20gZW5kcG9pbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgdHlwZTogZCB9LCB7IGNvbmRpdGlvbnM6IHMsIGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogRHVhbHN0YWNrIGFuZCBjdXN0b20gZW5kcG9pbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgdHlwZTogZCB9LCB7IGVuZHBvaW50OiB7IHVybDogaywgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogW3sgW3ZdOiBiLCBbd106IHQgfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IFwiYXdzLnBhcnRpdGlvblwiLCBbd106IHQsIGFzc2lnbjogZyB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFtsLCBtXSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogYywgW3ddOiBbYSwgcF0gfSwgcV0sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9jbG91ZHRyYWlsLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkZJUFMgYW5kIER1YWxTdGFjayBhcmUgZW5hYmxlZCwgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgb25lIG9yIGJvdGhcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHIsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IGMsIFt3XTogW3AsIGFdIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3ZdOiBoLCBbd106IFtvLCBcInVzLWdvdi1lYXN0LTFcIl0gfV0sIGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL2Nsb3VkdHJhaWwudXMtZ292LWVhc3QtMS5hbWF6b25hd3MuY29tXCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9LCB7IGNvbmRpdGlvbnM6IFt7IFt2XTogaCwgW3ddOiBbbywgXCJ1cy1nb3Ytd2VzdC0xXCJdIH1dLCBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9jbG91ZHRyYWlsLnVzLWdvdi13ZXN0LTEuYW1hem9uYXdzLmNvbVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9jbG91ZHRyYWlsLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkZJUFMgaXMgZW5hYmxlZCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBGSVBTXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBzLCBydWxlczogW3sgY29uZGl0aW9uczogW3FdLCBydWxlczogW3sgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vY2xvdWR0cmFpbC57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRHVhbFN0YWNrIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRHVhbFN0YWNrXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9jbG91ZHRyYWlsLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IE1pc3NpbmcgUmVnaW9uXCIsIHR5cGU6IGQgfV0gfTtcbmV4cG9ydCBjb25zdCBydWxlU2V0ID0gX2RhdGE7XG4iLCJpbXBvcnQgeyByZXNvbHZlRW5kcG9pbnQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWVuZHBvaW50c1wiO1xuaW1wb3J0IHsgcnVsZVNldCB9IGZyb20gXCIuL3J1bGVzZXRcIjtcbmV4cG9ydCBjb25zdCBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciA9IChlbmRwb2ludFBhcmFtcywgY29udGV4dCA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIHJlc29sdmVFbmRwb2ludChydWxlU2V0LCB7XG4gICAgICAgIGVuZHBvaW50UGFyYW1zOiBlbmRwb2ludFBhcmFtcyxcbiAgICAgICAgbG9nZ2VyOiBjb250ZXh0LmxvZ2dlcixcbiAgICB9KTtcbn07XG4iLCJleHBvcnQgY29uc3QgZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICBjb25zdCBfaHR0cEF1dGhTY2hlbWVzID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZXM7XG4gICAgbGV0IF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgIGxldCBfY3JlZGVudGlhbHMgPSBydW50aW1lQ29uZmlnLmNyZWRlbnRpYWxzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldEh0dHBBdXRoU2NoZW1lKGh0dHBBdXRoU2NoZW1lKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IF9odHRwQXV0aFNjaGVtZXMuZmluZEluZGV4KChzY2hlbWUpID0+IHNjaGVtZS5zY2hlbWVJZCA9PT0gaHR0cEF1dGhTY2hlbWUuc2NoZW1lSWQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZXMucHVzaChodHRwQXV0aFNjaGVtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVzLnNwbGljZShpbmRleCwgMSwgaHR0cEF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBodHRwQXV0aFNjaGVtZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SHR0cEF1dGhTY2hlbWVQcm92aWRlcihodHRwQXV0aFNjaGVtZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICBfY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICAgICAgY3JlZGVudGlhbHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWRlbnRpYWxzO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWcuaHR0cEF1dGhTY2hlbWVzKCksXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyKCksXG4gICAgICAgIGNyZWRlbnRpYWxzOiBjb25maWcuY3JlZGVudGlhbHMoKSxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IGdldEhvc3RIZWFkZXJQbHVnaW4sIHJlc29sdmVIb3N0SGVhZGVyQ29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLWhvc3QtaGVhZGVyXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXJQbHVnaW4gfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1sb2dnZXJcIjtcbmltcG9ydCB7IGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbiB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXJlY3Vyc2lvbi1kZXRlY3Rpb25cIjtcbmltcG9ydCB7IGdldFVzZXJBZ2VudFBsdWdpbiwgcmVzb2x2ZVVzZXJBZ2VudENvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50XCI7XG5pbXBvcnQgeyByZXNvbHZlUmVnaW9uQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBEZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZywgZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4sIGdldEh0dHBTaWduaW5nUGx1Z2luLCB9IGZyb20gXCJAc21pdGh5L2NvcmVcIjtcbmltcG9ydCB7IGdldENvbnRlbnRMZW5ndGhQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWNvbnRlbnQtbGVuZ3RoXCI7XG5pbXBvcnQgeyByZXNvbHZlRW5kcG9pbnRDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRSZXRyeVBsdWdpbiwgcmVzb2x2ZVJldHJ5Q29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgQ2xpZW50IGFzIF9fQ2xpZW50LCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGRlZmF1bHRDbG91ZFRyYWlsSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsIHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZywgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIjtcbmltcG9ydCB7IHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMsIH0gZnJvbSBcIi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIF9fZ2V0UnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWdcIjtcbmltcG9ydCB7IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyB9IGZyb20gXCIuL3J1bnRpbWVFeHRlbnNpb25zXCI7XG5leHBvcnQgeyBfX0NsaWVudCB9O1xuZXhwb3J0IGNsYXNzIENsb3VkVHJhaWxDbGllbnQgZXh0ZW5kcyBfX0NsaWVudCB7XG4gICAgY29uc3RydWN0b3IoLi4uW2NvbmZpZ3VyYXRpb25dKSB7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMCA9IF9fZ2V0UnVudGltZUNvbmZpZyhjb25maWd1cmF0aW9uIHx8IHt9KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18xID0gcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyhfY29uZmlnXzApO1xuICAgICAgICBjb25zdCBfY29uZmlnXzIgPSByZXNvbHZlUmVnaW9uQ29uZmlnKF9jb25maWdfMSk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMyA9IHJlc29sdmVFbmRwb2ludENvbmZpZyhfY29uZmlnXzIpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzQgPSByZXNvbHZlUmV0cnlDb25maWcoX2NvbmZpZ18zKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ181ID0gcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcoX2NvbmZpZ180KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ182ID0gcmVzb2x2ZVVzZXJBZ2VudENvbmZpZyhfY29uZmlnXzUpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzcgPSByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcoX2NvbmZpZ182KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ184ID0gcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zKF9jb25maWdfNywgY29uZmlndXJhdGlvbj8uZXh0ZW5zaW9ucyB8fCBbXSk7XG4gICAgICAgIHN1cGVyKF9jb25maWdfOCk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gX2NvbmZpZ184O1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0UmV0cnlQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldENvbnRlbnRMZW5ndGhQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldEhvc3RIZWFkZXJQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldExvZ2dlclBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRVc2VyQWdlbnRQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldEh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0UGx1Z2luKHRoaXMuY29uZmlnLCB7XG4gICAgICAgICAgICBodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcjogdGhpcy5nZXREZWZhdWx0SHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIoKSxcbiAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcjogdGhpcy5nZXRJZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIoKSxcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SHR0cFNpZ25pbmdQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgICBnZXREZWZhdWx0SHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q2xvdWRUcmFpbEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyO1xuICAgIH1cbiAgICBnZXRJZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIoKSB7XG4gICAgICAgIHJldHVybiBhc3luYyAoY29uZmlnKSA9PiBuZXcgRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcoe1xuICAgICAgICAgICAgXCJhd3MuYXV0aCNzaWd2NFwiOiBjb25maWcuY3JlZGVudGlhbHMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBwYWNrYWdlSW5mbyBmcm9tIFwiLi4vcGFja2FnZS5qc29uXCI7XG5pbXBvcnQgeyBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uIGFzIGF3c0NoZWNrVmVyc2lvbiB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBkZWZhdWx0UHJvdmlkZXIgYXMgY3JlZGVudGlhbERlZmF1bHRQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGVcIjtcbmltcG9ydCB7IGRlZmF1bHRVc2VyQWdlbnQgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC11c2VyLWFnZW50LW5vZGVcIjtcbmltcG9ydCB7IE5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMsIE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TLCBOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIH0gZnJvbSBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBIYXNoIH0gZnJvbSBcIkBzbWl0aHkvaGFzaC1ub2RlXCI7XG5pbXBvcnQgeyBOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TLCBOT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnIGFzIGxvYWROb2RlQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXJcIjtcbmltcG9ydCB7IE5vZGVIdHRwSGFuZGxlciBhcyBSZXF1ZXN0SGFuZGxlciwgc3RyZWFtQ29sbGVjdG9yIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXJcIjtcbmltcG9ydCB7IGNhbGN1bGF0ZUJvZHlMZW5ndGggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJvZHktbGVuZ3RoLW5vZGVcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVUUllfTU9ERSB9IGZyb20gXCJAc21pdGh5L3V0aWwtcmV0cnlcIjtcbmltcG9ydCB7IGdldFJ1bnRpbWVDb25maWcgYXMgZ2V0U2hhcmVkUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWcuc2hhcmVkXCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgcmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3V0aWwtZGVmYXVsdHMtbW9kZS1ub2RlXCI7XG5pbXBvcnQgeyBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IGNvbnN0IGdldFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbihwcm9jZXNzLnZlcnNpb24pO1xuICAgIGNvbnN0IGRlZmF1bHRzTW9kZSA9IHJlc29sdmVEZWZhdWx0c01vZGVDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnUHJvdmlkZXIgPSAoKSA9PiBkZWZhdWx0c01vZGUoKS50aGVuKGxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUpO1xuICAgIGNvbnN0IGNsaWVudFNoYXJlZFZhbHVlcyA9IGdldFNoYXJlZFJ1bnRpbWVDb25maWcoY29uZmlnKTtcbiAgICBhd3NDaGVja1ZlcnNpb24ocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jbGllbnRTaGFyZWRWYWx1ZXMsXG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgcnVudGltZTogXCJub2RlXCIsXG4gICAgICAgIGRlZmF1bHRzTW9kZSxcbiAgICAgICAgYm9keUxlbmd0aENoZWNrZXI6IGNvbmZpZz8uYm9keUxlbmd0aENoZWNrZXIgPz8gY2FsY3VsYXRlQm9keUxlbmd0aCxcbiAgICAgICAgY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcjogY29uZmlnPy5jcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyID8/IGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIsXG4gICAgICAgIGRlZmF1bHRVc2VyQWdlbnRQcm92aWRlcjogY29uZmlnPy5kZWZhdWx0VXNlckFnZW50UHJvdmlkZXIgPz9cbiAgICAgICAgICAgIGRlZmF1bHRVc2VyQWdlbnQoeyBzZXJ2aWNlSWQ6IGNsaWVudFNoYXJlZFZhbHVlcy5zZXJ2aWNlSWQsIGNsaWVudFZlcnNpb246IHBhY2thZ2VJbmZvLnZlcnNpb24gfSksXG4gICAgICAgIG1heEF0dGVtcHRzOiBjb25maWc/Lm1heEF0dGVtcHRzID8/IGxvYWROb2RlQ29uZmlnKE5PREVfTUFYX0FUVEVNUFRfQ09ORklHX09QVElPTlMpLFxuICAgICAgICByZWdpb246IGNvbmZpZz8ucmVnaW9uID8/IGxvYWROb2RlQ29uZmlnKE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TLCBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TKSxcbiAgICAgICAgcmVxdWVzdEhhbmRsZXI6IGNvbmZpZz8ucmVxdWVzdEhhbmRsZXIgPz8gbmV3IFJlcXVlc3RIYW5kbGVyKGRlZmF1bHRDb25maWdQcm92aWRlciksXG4gICAgICAgIHJldHJ5TW9kZTogY29uZmlnPy5yZXRyeU1vZGUgPz9cbiAgICAgICAgICAgIGxvYWROb2RlQ29uZmlnKHtcbiAgICAgICAgICAgICAgICAuLi5OT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogYXN5bmMgKCkgPT4gKGF3YWl0IGRlZmF1bHRDb25maWdQcm92aWRlcigpKS5yZXRyeU1vZGUgfHwgREVGQVVMVF9SRVRSWV9NT0RFLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIHNoYTI1NjogY29uZmlnPy5zaGEyNTYgPz8gSGFzaC5iaW5kKG51bGwsIFwic2hhMjU2XCIpLFxuICAgICAgICBzdHJlYW1Db2xsZWN0b3I6IGNvbmZpZz8uc3RyZWFtQ29sbGVjdG9yID8/IHN0cmVhbUNvbGxlY3RvcixcbiAgICAgICAgdXNlRHVhbHN0YWNrRW5kcG9pbnQ6IGNvbmZpZz8udXNlRHVhbHN0YWNrRW5kcG9pbnQgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TKSxcbiAgICAgICAgdXNlRmlwc0VuZHBvaW50OiBjb25maWc/LnVzZUZpcHNFbmRwb2ludCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX1VTRV9GSVBTX0VORFBPSU5UX0NPTkZJR19PUFRJT05TKSxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IEF3c1Nka1NpZ1Y0U2lnbmVyIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IE5vT3BMb2dnZXIgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBwYXJzZVVybCB9IGZyb20gXCJAc21pdGh5L3VybC1wYXJzZXJcIjtcbmltcG9ydCB7IGZyb21CYXNlNjQsIHRvQmFzZTY0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1iYXNlNjRcIjtcbmltcG9ydCB7IGZyb21VdGY4LCB0b1V0ZjggfSBmcm9tIFwiQHNtaXRoeS91dGlsLXV0ZjhcIjtcbmltcG9ydCB7IGRlZmF1bHRDbG91ZFRyYWlsSHR0cEF1dGhTY2hlbWVQcm92aWRlciB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiO1xuaW1wb3J0IHsgZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgfSBmcm9tIFwiLi9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyXCI7XG5leHBvcnQgY29uc3QgZ2V0UnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcGlWZXJzaW9uOiBcIjIwMTMtMTEtMDFcIixcbiAgICAgICAgYmFzZTY0RGVjb2RlcjogY29uZmlnPy5iYXNlNjREZWNvZGVyID8/IGZyb21CYXNlNjQsXG4gICAgICAgIGJhc2U2NEVuY29kZXI6IGNvbmZpZz8uYmFzZTY0RW5jb2RlciA/PyB0b0Jhc2U2NCxcbiAgICAgICAgZGlzYWJsZUhvc3RQcmVmaXg6IGNvbmZpZz8uZGlzYWJsZUhvc3RQcmVmaXggPz8gZmFsc2UsXG4gICAgICAgIGVuZHBvaW50UHJvdmlkZXI6IGNvbmZpZz8uZW5kcG9pbnRQcm92aWRlciA/PyBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlcixcbiAgICAgICAgZXh0ZW5zaW9uczogY29uZmlnPy5leHRlbnNpb25zID8/IFtdLFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyOiBjb25maWc/Lmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPz8gZGVmYXVsdENsb3VkVHJhaWxIdHRwQXV0aFNjaGVtZVByb3ZpZGVyLFxuICAgICAgICBodHRwQXV0aFNjaGVtZXM6IGNvbmZpZz8uaHR0cEF1dGhTY2hlbWVzID8/IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlbWVJZDogXCJhd3MuYXV0aCNzaWd2NFwiLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXI6IChpcGMpID0+IGlwYy5nZXRJZGVudGl0eVByb3ZpZGVyKFwiYXdzLmF1dGgjc2lndjRcIiksXG4gICAgICAgICAgICAgICAgc2lnbmVyOiBuZXcgQXdzU2RrU2lnVjRTaWduZXIoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGxvZ2dlcjogY29uZmlnPy5sb2dnZXIgPz8gbmV3IE5vT3BMb2dnZXIoKSxcbiAgICAgICAgc2VydmljZUlkOiBjb25maWc/LnNlcnZpY2VJZCA/PyBcIkNsb3VkVHJhaWxcIixcbiAgICAgICAgdXJsUGFyc2VyOiBjb25maWc/LnVybFBhcnNlciA/PyBwYXJzZVVybCxcbiAgICAgICAgdXRmOERlY29kZXI6IGNvbmZpZz8udXRmOERlY29kZXIgPz8gZnJvbVV0ZjgsXG4gICAgICAgIHV0ZjhFbmNvZGVyOiBjb25maWc/LnV0ZjhFbmNvZGVyID8/IHRvVXRmOCxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IGdldEF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uLCB9IGZyb20gXCJAYXdzLXNkay9yZWdpb24tY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBnZXRIdHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vYXV0aC9odHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb25cIjtcbmNvbnN0IGFzUGFydGlhbCA9ICh0KSA9PiB0O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyA9IChydW50aW1lQ29uZmlnLCBleHRlbnNpb25zKSA9PiB7XG4gICAgY29uc3QgZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IHtcbiAgICAgICAgLi4uYXNQYXJ0aWFsKGdldEF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZykpLFxuICAgICAgICAuLi5hc1BhcnRpYWwoZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZykpLFxuICAgICAgICAuLi5hc1BhcnRpYWwoZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpKSxcbiAgICAgICAgLi4uYXNQYXJ0aWFsKGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSksXG4gICAgfTtcbiAgICBleHRlbnNpb25zLmZvckVhY2goKGV4dGVuc2lvbikgPT4gZXh0ZW5zaW9uLmNvbmZpZ3VyZShleHRlbnNpb25Db25maWd1cmF0aW9uKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucnVudGltZUNvbmZpZyxcbiAgICAgICAgLi4ucmVzb2x2ZUF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24oZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksXG4gICAgICAgIC4uLnJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSxcbiAgICAgICAgLi4ucmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSxcbiAgICAgICAgLi4ucmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IFNlcnZpY2VFeGNlcHRpb24gYXMgX19TZXJ2aWNlRXhjZXB0aW9uLCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmV4cG9ydCB7IF9fU2VydmljZUV4Y2VwdGlvbiB9O1xuZXhwb3J0IGNsYXNzIENsb3VkVHJhaWxTZXJ2aWNlRXhjZXB0aW9uIGV4dGVuZHMgX19TZXJ2aWNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2xvdWRUcmFpbFNlcnZpY2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDbG91ZFRyYWlsU2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi9DbG91ZFRyYWlsU2VydmljZUV4Y2VwdGlvblwiO1xuZXhwb3J0IGNsYXNzIEFjY2Vzc0RlbmllZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkFjY2Vzc0RlbmllZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjY2Vzc0RlbmllZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFjY291bnRIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQWNjb3VudEhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFjY291bnRIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjY291bnRIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBY2NvdW50Tm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJBY2NvdW50Tm90UmVnaXN0ZXJlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkFjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoYW5uZWxBUk5JbnZhbGlkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ2hhbm5lbEFSTkludmFsaWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNoYW5uZWxBUk5JbnZhbGlkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENoYW5uZWxBUk5JbnZhbGlkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJDaGFubmVsTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDbG91ZFRyYWlsQVJOSW52YWxpZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb25mbGljdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNvbmZsaWN0RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJDb25mbGljdEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25mbGljdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFdmVudERhdGFTdG9yZU5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJFdmVudERhdGFTdG9yZU5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbmFjdGl2ZUV2ZW50RGF0YVN0b3JlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW5hY3RpdmVFdmVudERhdGFTdG9yZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW5hY3RpdmVFdmVudERhdGFTdG9yZUV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbmFjdGl2ZUV2ZW50RGF0YVN0b3JlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRUcmFpbE5hbWVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkVHJhaWxOYW1lRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkVHJhaWxOYW1lRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRUcmFpbE5hbWVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOb01hbmFnZW1lbnRBY2NvdW50U0xSRXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBOb01hbmFnZW1lbnRBY2NvdW50U0xSRXhpc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTm90T3JnYW5pemF0aW9uTWFzdGVyQWNjb3VudEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk5vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk5vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTm90T3JnYW5pemF0aW9uTWFzdGVyQWNjb3VudEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE9wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk9wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiT3BlcmF0aW9uTm90UGVybWl0dGVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE9wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJSZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlc291cmNlVHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlRhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgQmlsbGluZ01vZGUgPSB7XG4gICAgRVhURU5EQUJMRV9SRVRFTlRJT05fUFJJQ0lORzogXCJFWFRFTkRBQkxFX1JFVEVOVElPTl9QUklDSU5HXCIsXG4gICAgRklYRURfUkVURU5USU9OX1BSSUNJTkc6IFwiRklYRURfUkVURU5USU9OX1BSSUNJTkdcIixcbn07XG5leHBvcnQgY29uc3QgUXVlcnlTdGF0dXMgPSB7XG4gICAgQ0FOQ0VMTEVEOiBcIkNBTkNFTExFRFwiLFxuICAgIEZBSUxFRDogXCJGQUlMRURcIixcbiAgICBGSU5JU0hFRDogXCJGSU5JU0hFRFwiLFxuICAgIFFVRVVFRDogXCJRVUVVRURcIixcbiAgICBSVU5OSU5HOiBcIlJVTk5JTkdcIixcbiAgICBUSU1FRF9PVVQ6IFwiVElNRURfT1VUXCIsXG59O1xuZXhwb3J0IGNsYXNzIEluYWN0aXZlUXVlcnlFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEluYWN0aXZlUXVlcnlFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFBhcmFtZXRlckV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZFBhcmFtZXRlckV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJRdWVyeUlkTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hhbm5lbEV4aXN0c0ZvckVEU0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNoYW5uZWxFeGlzdHNGb3JFRFNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNoYW5uZWxFeGlzdHNGb3JFRFNFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2hhbm5lbEV4aXN0c0ZvckVEU0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ2hhbm5lbE1heExpbWl0RXhjZWVkZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRGVzdGluYXRpb25UeXBlID0ge1xuICAgIEFXU19TRVJWSUNFOiBcIkFXU19TRVJWSUNFXCIsXG4gICAgRVZFTlRfREFUQV9TVE9SRTogXCJFVkVOVF9EQVRBX1NUT1JFXCIsXG59O1xuZXhwb3J0IGNsYXNzIEludmFsaWRFdmVudERhdGFTdG9yZUNhdGVnb3J5RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEV2ZW50RGF0YVN0b3JlQ2F0ZWdvcnlFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRFdmVudERhdGFTdG9yZUNhdGVnb3J5RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRFdmVudERhdGFTdG9yZUNhdGVnb3J5RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFNvdXJjZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRTb3VyY2VFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRTb3VyY2VFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFNvdXJjZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ2xvdWRUcmFpbEFjY2Vzc05vdEVuYWJsZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRXZlbnREYXRhU3RvcmVTdGF0dXMgPSB7XG4gICAgQ1JFQVRFRDogXCJDUkVBVEVEXCIsXG4gICAgRU5BQkxFRDogXCJFTkFCTEVEXCIsXG4gICAgUEVORElOR19ERUxFVElPTjogXCJQRU5ESU5HX0RFTEVUSU9OXCIsXG4gICAgU1RBUlRJTkdfSU5HRVNUSU9OOiBcIlNUQVJUSU5HX0lOR0VTVElPTlwiLFxuICAgIFNUT1BQRURfSU5HRVNUSU9OOiBcIlNUT1BQRURfSU5HRVNUSU9OXCIsXG4gICAgU1RPUFBJTkdfSU5HRVNUSU9OOiBcIlNUT1BQSU5HX0lOR0VTVElPTlwiLFxufTtcbmV4cG9ydCBjbGFzcyBFdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkV2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBFdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFdmVudERhdGFTdG9yZU1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFdmVudERhdGFTdG9yZU1heExpbWl0RXhjZWVkZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkV2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBFdmVudERhdGFTdG9yZU1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnN1ZmZpY2llbnREZXBlbmRlbmN5U2VydmljZUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnN1ZmZpY2llbnREZXBlbmRlbmN5U2VydmljZUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkluc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnN1ZmZpY2llbnREZXBlbmRlbmN5U2VydmljZUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnN1ZmZpY2llbnRFbmNyeXB0aW9uUG9saWN5RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnN1ZmZpY2llbnRFbmNyeXB0aW9uUG9saWN5RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEttc0tleUlkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEttc0tleUlkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkS21zS2V5SWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEttc0tleUlkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgS21zRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiS21zRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJLbXNFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgS21zRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgS21zS2V5Tm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiS21zS2V5Tm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgS21zS2V5Tm90Rm91bmRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb25Ob3RJbkFsbEZlYXR1cmVzTW9kZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk9yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJPcmdhbml6YXRpb25Ob3RJbkFsbEZlYXR1cmVzTW9kZUV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBPcmdhbml6YXRpb25Ob3RJbkFsbEZlYXR1cmVzTW9kZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk9yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiT3JnYW5pemF0aW9uc05vdEluVXNlRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE9yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENsb3VkVHJhaWxJbnZhbGlkQ2xpZW50VG9rZW5JZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNsb3VkVHJhaWxJbnZhbGlkQ2xpZW50VG9rZW5JZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsb3VkVHJhaWxJbnZhbGlkQ2xpZW50VG9rZW5JZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ2xvdWRXYXRjaExvZ3NEZWxpdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEluc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW5zdWZmaWNpZW50UzNCdWNrZXRQb2xpY3lFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkluc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEluc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnN1ZmZpY2llbnRTbnNUb3BpY1BvbGljeUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQ2xvdWRXYXRjaExvZ3NMb2dHcm91cEFybkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NMb2dHcm91cEFybkV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkQ2xvdWRXYXRjaExvZ3NMb2dHcm91cEFybkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRDbG91ZFdhdGNoTG9nc1JvbGVBcm5FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRDbG91ZFdhdGNoTG9nc1JvbGVBcm5FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUzNCdWNrZXROYW1lRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFMzQnVja2V0TmFtZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZFMzQnVja2V0TmFtZUV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUzNCdWNrZXROYW1lRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFMzUHJlZml4RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFMzUHJlZml4RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkUzNQcmVmaXhFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFMzUHJlZml4RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEttc0tleURpc2FibGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiS21zS2V5RGlzYWJsZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkttc0tleURpc2FibGVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEttc0tleURpc2FibGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWF4aW11bU51bWJlck9mVHJhaWxzRXhjZWVkZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJNYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTWF4aW11bU51bWJlck9mVHJhaWxzRXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTWF4aW11bU51bWJlck9mVHJhaWxzRXhjZWVkZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlMzQnVja2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJTM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRocm90dGxpbmdFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJUaHJvdHRsaW5nRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUaHJvdHRsaW5nRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRocm90dGxpbmdFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlRyYWlsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUcmFpbE5vdFByb3ZpZGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiVHJhaWxOb3RQcm92aWRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVHJhaWxOb3RQcm92aWRlZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUcmFpbE5vdFByb3ZpZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkV2ZW50RGF0YVN0b3JlRmVkZXJhdGlvbkVuYWJsZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkV2ZW50RGF0YVN0b3JlRmVkZXJhdGlvbkVuYWJsZWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RGF0YVN0b3JlSGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkV2ZW50RGF0YVN0b3JlSGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGF0YVN0b3JlSGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJFdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZUFSTk5vdFZhbGlkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXNvdXJjZUFSTk5vdFZhbGlkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzb3VyY2VQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEhvbWVSZWdpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVHJhaWxOb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlRyYWlsTm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlRyYWlsTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVHJhaWxOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTm90T3JnYW5pemF0aW9uTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk5vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE5vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRGVsaXZlcnlTdGF0dXMgPSB7XG4gICAgQUNDRVNTX0RFTklFRDogXCJBQ0NFU1NfREVOSUVEXCIsXG4gICAgQUNDRVNTX0RFTklFRF9TSUdOSU5HX0ZJTEU6IFwiQUNDRVNTX0RFTklFRF9TSUdOSU5HX0ZJTEVcIixcbiAgICBDQU5DRUxMRUQ6IFwiQ0FOQ0VMTEVEXCIsXG4gICAgRkFJTEVEOiBcIkZBSUxFRFwiLFxuICAgIEZBSUxFRF9TSUdOSU5HX0ZJTEU6IFwiRkFJTEVEX1NJR05JTkdfRklMRVwiLFxuICAgIFBFTkRJTkc6IFwiUEVORElOR1wiLFxuICAgIFJFU09VUkNFX05PVF9GT1VORDogXCJSRVNPVVJDRV9OT1RfRk9VTkRcIixcbiAgICBTVUNDRVNTOiBcIlNVQ0NFU1NcIixcbiAgICBVTktOT1dOOiBcIlVOS05PV05cIixcbn07XG5leHBvcnQgY2xhc3MgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEZlZGVyYXRpb25TdGF0dXMgPSB7XG4gICAgRElTQUJMRUQ6IFwiRElTQUJMRURcIixcbiAgICBESVNBQkxJTkc6IFwiRElTQUJMSU5HXCIsXG4gICAgRU5BQkxFRDogXCJFTkFCTEVEXCIsXG4gICAgRU5BQkxJTkc6IFwiRU5BQkxJTkdcIixcbn07XG5leHBvcnQgY29uc3QgUmVhZFdyaXRlVHlwZSA9IHtcbiAgICBBbGw6IFwiQWxsXCIsXG4gICAgUmVhZE9ubHk6IFwiUmVhZE9ubHlcIixcbiAgICBXcml0ZU9ubHk6IFwiV3JpdGVPbmx5XCIsXG59O1xuZXhwb3J0IGNvbnN0IEltcG9ydFN0YXR1cyA9IHtcbiAgICBDT01QTEVURUQ6IFwiQ09NUExFVEVEXCIsXG4gICAgRkFJTEVEOiBcIkZBSUxFRFwiLFxuICAgIElOSVRJQUxJWklORzogXCJJTklUSUFMSVpJTkdcIixcbiAgICBJTl9QUk9HUkVTUzogXCJJTl9QUk9HUkVTU1wiLFxuICAgIFNUT1BQRUQ6IFwiU1RPUFBFRFwiLFxufTtcbmV4cG9ydCBjbGFzcyBJbXBvcnROb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkltcG9ydE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbXBvcnROb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbXBvcnROb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEluc2lnaHRUeXBlID0ge1xuICAgIEFwaUNhbGxSYXRlSW5zaWdodDogXCJBcGlDYWxsUmF0ZUluc2lnaHRcIixcbiAgICBBcGlFcnJvclJhdGVJbnNpZ2h0OiBcIkFwaUVycm9yUmF0ZUluc2lnaHRcIixcbn07XG5leHBvcnQgY2xhc3MgSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkTWF4UmVzdWx0c0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkTWF4UmVzdWx0c0V4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkTWF4UmVzdWx0c0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWROZXh0VG9rZW5FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWROZXh0VG9rZW5FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBJbXBvcnRGYWlsdXJlU3RhdHVzID0ge1xuICAgIEZBSUxFRDogXCJGQUlMRURcIixcbiAgICBSRVRSWTogXCJSRVRSWVwiLFxuICAgIFNVQ0NFRURFRDogXCJTVUNDRUVERURcIixcbn07XG5leHBvcnQgY29uc3QgSW5zaWdodHNNZXRyaWNEYXRhVHlwZSA9IHtcbiAgICBGSUxMX1dJVEhfWkVST1M6IFwiRmlsbFdpdGhaZXJvc1wiLFxuICAgIE5PTl9aRVJPX0RBVEE6IFwiTm9uWmVyb0RhdGFcIixcbn07XG5leHBvcnQgY2xhc3MgSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRUb2tlbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRUb2tlbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZFRva2VuRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRUb2tlbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWREYXRlUmFuZ2VFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWREYXRlUmFuZ2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRRdWVyeVN0YXR1c0V4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRFdmVudENhdGVnb3J5RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZExvb2t1cEF0dHJpYnV0ZXNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRXZlbnRDYXRlZ29yeSA9IHtcbiAgICBJbnNpZ2h0OiBcImluc2lnaHRcIixcbn07XG5leHBvcnQgY29uc3QgTG9va3VwQXR0cmlidXRlS2V5ID0ge1xuICAgIEFDQ0VTU19LRVlfSUQ6IFwiQWNjZXNzS2V5SWRcIixcbiAgICBFVkVOVF9JRDogXCJFdmVudElkXCIsXG4gICAgRVZFTlRfTkFNRTogXCJFdmVudE5hbWVcIixcbiAgICBFVkVOVF9TT1VSQ0U6IFwiRXZlbnRTb3VyY2VcIixcbiAgICBSRUFEX09OTFk6IFwiUmVhZE9ubHlcIixcbiAgICBSRVNPVVJDRV9OQU1FOiBcIlJlc291cmNlTmFtZVwiLFxuICAgIFJFU09VUkNFX1RZUEU6IFwiUmVzb3VyY2VUeXBlXCIsXG4gICAgVVNFUk5BTUU6IFwiVXNlcm5hbWVcIixcbn07XG5leHBvcnQgY2xhc3MgSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkSW5zaWdodFNlbGVjdG9yc0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUmVzb3VyY2VQb2xpY3lOb3RWYWxpZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUmVzb3VyY2VQb2xpY3lOb3RWYWxpZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRGVsZWdhdGVkQWRtaW5BY2NvdW50TGltaXRFeGNlZWRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkRlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkRlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRGVsZWdhdGVkQWRtaW5BY2NvdW50TGltaXRFeGNlZWRlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRFdmVudERhdGFTdG9yZVN0YXR1c0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRFdmVudERhdGFTdG9yZVN0YXR1c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRFdmVudERhdGFTdG9yZVN0YXR1c0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRRdWVyeVN0YXRlbWVudEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk1heENvbmN1cnJlbnRRdWVyaWVzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBNYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSHR0cFJlcXVlc3QgYXMgX19IdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IF9qc29uLCBjb2xsZWN0Qm9keSwgZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uLCBleHBlY3RCb29sZWFuIGFzIF9fZXhwZWN0Qm9vbGVhbiwgZXhwZWN0SW50MzIgYXMgX19leHBlY3RJbnQzMiwgZXhwZWN0TG9uZyBhcyBfX2V4cGVjdExvbmcsIGV4cGVjdE5vbk51bGwgYXMgX19leHBlY3ROb25OdWxsLCBleHBlY3ROdW1iZXIgYXMgX19leHBlY3ROdW1iZXIsIGV4cGVjdFN0cmluZyBhcyBfX2V4cGVjdFN0cmluZywgbGltaXRlZFBhcnNlRG91YmxlIGFzIF9fbGltaXRlZFBhcnNlRG91YmxlLCBwYXJzZUVwb2NoVGltZXN0YW1wIGFzIF9fcGFyc2VFcG9jaFRpbWVzdGFtcCwgdGFrZSwgd2l0aEJhc2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgQ2xvdWRUcmFpbFNlcnZpY2VFeGNlcHRpb24gYXMgX19CYXNlRXhjZXB0aW9uIH0gZnJvbSBcIi4uL21vZGVscy9DbG91ZFRyYWlsU2VydmljZUV4Y2VwdGlvblwiO1xuaW1wb3J0IHsgQWNjZXNzRGVuaWVkRXhjZXB0aW9uLCBBY2NvdW50SGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvbiwgQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uLCBBY2NvdW50Tm90UmVnaXN0ZXJlZEV4Y2VwdGlvbiwgQWNjb3VudFJlZ2lzdGVyZWRFeGNlcHRpb24sIENhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb24sIENoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uLCBDaGFubmVsQVJOSW52YWxpZEV4Y2VwdGlvbiwgQ2hhbm5lbEV4aXN0c0ZvckVEU0V4Y2VwdGlvbiwgQ2hhbm5lbE1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24sIENoYW5uZWxOb3RGb3VuZEV4Y2VwdGlvbiwgQ2xvdWRUcmFpbEFjY2Vzc05vdEVuYWJsZWRFeGNlcHRpb24sIENsb3VkVHJhaWxBUk5JbnZhbGlkRXhjZXB0aW9uLCBDbG91ZFRyYWlsSW52YWxpZENsaWVudFRva2VuSWRFeGNlcHRpb24sIENsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvbiwgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbiwgQ29uZmxpY3RFeGNlcHRpb24sIERlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb24sIEV2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiwgRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uLCBFdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uLCBFdmVudERhdGFTdG9yZUhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb24sIEV2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvbiwgRXZlbnREYXRhU3RvcmVOb3RGb3VuZEV4Y2VwdGlvbiwgRXZlbnREYXRhU3RvcmVUZXJtaW5hdGlvblByb3RlY3RlZEV4Y2VwdGlvbiwgSW1wb3J0Tm90Rm91bmRFeGNlcHRpb24sIEluYWN0aXZlRXZlbnREYXRhU3RvcmVFeGNlcHRpb24sIEluYWN0aXZlUXVlcnlFeGNlcHRpb24sIEluc2lnaHROb3RFbmFibGVkRXhjZXB0aW9uLCBJbnN1ZmZpY2llbnREZXBlbmRlbmN5U2VydmljZUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb24sIEluc3VmZmljaWVudEVuY3J5cHRpb25Qb2xpY3lFeGNlcHRpb24sIEluc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uLCBJbnN1ZmZpY2llbnRTbnNUb3BpY1BvbGljeUV4Y2VwdGlvbiwgSW52YWxpZENsb3VkV2F0Y2hMb2dzTG9nR3JvdXBBcm5FeGNlcHRpb24sIEludmFsaWRDbG91ZFdhdGNoTG9nc1JvbGVBcm5FeGNlcHRpb24sIEludmFsaWREYXRlUmFuZ2VFeGNlcHRpb24sIEludmFsaWRFdmVudENhdGVnb3J5RXhjZXB0aW9uLCBJbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvbiwgSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uLCBJbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb24sIEludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uLCBJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uLCBJbnZhbGlkSW5zaWdodFNlbGVjdG9yc0V4Y2VwdGlvbiwgSW52YWxpZEttc0tleUlkRXhjZXB0aW9uLCBJbnZhbGlkTG9va3VwQXR0cmlidXRlc0V4Y2VwdGlvbiwgSW52YWxpZE1heFJlc3VsdHNFeGNlcHRpb24sIEludmFsaWROZXh0VG9rZW5FeGNlcHRpb24sIEludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvbiwgSW52YWxpZFBhcmFtZXRlckV4Y2VwdGlvbiwgSW52YWxpZFF1ZXJ5U3RhdGVtZW50RXhjZXB0aW9uLCBJbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb24sIEludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb24sIEludmFsaWRTM1ByZWZpeEV4Y2VwdGlvbiwgSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvbiwgSW52YWxpZFNvdXJjZUV4Y2VwdGlvbiwgSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvbiwgSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvbiwgSW52YWxpZFRva2VuRXhjZXB0aW9uLCBJbnZhbGlkVHJhaWxOYW1lRXhjZXB0aW9uLCBLbXNFeGNlcHRpb24sIEttc0tleURpc2FibGVkRXhjZXB0aW9uLCBLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvbiwgTWF4Q29uY3VycmVudFF1ZXJpZXNFeGNlcHRpb24sIE1heGltdW1OdW1iZXJPZlRyYWlsc0V4Y2VlZGVkRXhjZXB0aW9uLCBOb01hbmFnZW1lbnRBY2NvdW50U0xSRXhpc3RzRXhjZXB0aW9uLCBOb3RPcmdhbml6YXRpb25NYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvbiwgTm90T3JnYW5pemF0aW9uTWFzdGVyQWNjb3VudEV4Y2VwdGlvbiwgT3BlcmF0aW9uTm90UGVybWl0dGVkRXhjZXB0aW9uLCBPcmdhbml6YXRpb25Ob3RJbkFsbEZlYXR1cmVzTW9kZUV4Y2VwdGlvbiwgT3JnYW5pemF0aW9uc05vdEluVXNlRXhjZXB0aW9uLCBRdWVyeUlkTm90Rm91bmRFeGNlcHRpb24sIFJlc291cmNlQVJOTm90VmFsaWRFeGNlcHRpb24sIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24sIFJlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb24sIFJlc291cmNlUG9saWN5Tm90VmFsaWRFeGNlcHRpb24sIFJlc291cmNlVHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvbiwgUzNCdWNrZXREb2VzTm90RXhpc3RFeGNlcHRpb24sIFRhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLCBUaHJvdHRsaW5nRXhjZXB0aW9uLCBUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb24sIFRyYWlsTm90Rm91bmRFeGNlcHRpb24sIFRyYWlsTm90UHJvdmlkZWRFeGNlcHRpb24sIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uLCB9IGZyb20gXCIuLi9tb2RlbHMvbW9kZWxzXzBcIjtcbmV4cG9ydCBjb25zdCBzZV9BZGRUYWdzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQWRkVGFnc1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ2FuY2VsUXVlcnlDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJDYW5jZWxRdWVyeVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlQ2hhbm5lbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkNyZWF0ZUNoYW5uZWxcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUV2ZW50RGF0YVN0b3JlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQ3JlYXRlRXZlbnREYXRhU3RvcmVcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVRyYWlsQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQ3JlYXRlVHJhaWxcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUNoYW5uZWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZWxldGVDaGFubmVsXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVFdmVudERhdGFTdG9yZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlbGV0ZUV2ZW50RGF0YVN0b3JlXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlbGV0ZVJlc291cmNlUG9saWN5XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVUcmFpbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlbGV0ZVRyYWlsXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXJlZ2lzdGVyT3JnYW5pemF0aW9uRGVsZWdhdGVkQWRtaW5Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXJlZ2lzdGVyT3JnYW5pemF0aW9uRGVsZWdhdGVkQWRtaW5cIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlUXVlcnlDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXNjcmliZVF1ZXJ5XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRyYWlsc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlc2NyaWJlVHJhaWxzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EaXNhYmxlRmVkZXJhdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRpc2FibGVGZWRlcmF0aW9uXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9FbmFibGVGZWRlcmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRW5hYmxlRmVkZXJhdGlvblwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0Q2hhbm5lbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdldENoYW5uZWxcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldEV2ZW50RGF0YVN0b3JlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiR2V0RXZlbnREYXRhU3RvcmVcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldEV2ZW50U2VsZWN0b3JzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiR2V0RXZlbnRTZWxlY3RvcnNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldEltcG9ydENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdldEltcG9ydFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0SW5zaWdodFNlbGVjdG9yc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdldEluc2lnaHRTZWxlY3RvcnNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldFF1ZXJ5UmVzdWx0c0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdldFF1ZXJ5UmVzdWx0c1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0UmVzb3VyY2VQb2xpY3lDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXRSZXNvdXJjZVBvbGljeVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0VHJhaWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXRUcmFpbFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0VHJhaWxTdGF0dXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXRUcmFpbFN0YXR1c1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdENoYW5uZWxzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdENoYW5uZWxzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0RXZlbnREYXRhU3RvcmVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdEV2ZW50RGF0YVN0b3Jlc1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEltcG9ydEZhaWx1cmVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdEltcG9ydEZhaWx1cmVzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0SW1wb3J0c0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkxpc3RJbXBvcnRzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0SW5zaWdodHNNZXRyaWNEYXRhQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdEluc2lnaHRzTWV0cmljRGF0YVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfTGlzdEluc2lnaHRzTWV0cmljRGF0YVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFB1YmxpY0tleXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0UHVibGljS2V5c1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfTGlzdFB1YmxpY0tleXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RRdWVyaWVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdFF1ZXJpZXNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX0xpc3RRdWVyaWVzUmVxdWVzdChpbnB1dCwgY29udGV4dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VGFnc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkxpc3RUYWdzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VHJhaWxzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdFRyYWlsc1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTG9va3VwRXZlbnRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTG9va3VwRXZlbnRzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShzZV9Mb29rdXBFdmVudHNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1B1dEV2ZW50U2VsZWN0b3JzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiUHV0RXZlbnRTZWxlY3RvcnNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1B1dEluc2lnaHRTZWxlY3RvcnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJQdXRJbnNpZ2h0U2VsZWN0b3JzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRSZXNvdXJjZVBvbGljeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlB1dFJlc291cmNlUG9saWN5XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9SZWdpc3Rlck9yZ2FuaXphdGlvbkRlbGVnYXRlZEFkbWluQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiUmVnaXN0ZXJPcmdhbml6YXRpb25EZWxlZ2F0ZWRBZG1pblwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUmVtb3ZlVGFnc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlJlbW92ZVRhZ3NcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1Jlc3RvcmVFdmVudERhdGFTdG9yZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlJlc3RvcmVFdmVudERhdGFTdG9yZVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU3RhcnRFdmVudERhdGFTdG9yZUluZ2VzdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlN0YXJ0RXZlbnREYXRhU3RvcmVJbmdlc3Rpb25cIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1N0YXJ0SW1wb3J0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiU3RhcnRJbXBvcnRcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX1N0YXJ0SW1wb3J0UmVxdWVzdChpbnB1dCwgY29udGV4dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdGFydExvZ2dpbmdDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTdGFydExvZ2dpbmdcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1N0YXJ0UXVlcnlDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTdGFydFF1ZXJ5XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdG9wRXZlbnREYXRhU3RvcmVJbmdlc3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTdG9wRXZlbnREYXRhU3RvcmVJbmdlc3Rpb25cIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1N0b3BJbXBvcnRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTdG9wSW1wb3J0XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdG9wTG9nZ2luZ0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlN0b3BMb2dnaW5nXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVDaGFubmVsQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiVXBkYXRlQ2hhbm5lbFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRXZlbnREYXRhU3RvcmVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJVcGRhdGVFdmVudERhdGFTdG9yZVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlVHJhaWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJVcGRhdGVUcmFpbFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3QgZGVfQWRkVGFnc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfQ2FuY2VsUXVlcnlDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUNoYW5uZWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUV2ZW50RGF0YVN0b3JlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9DcmVhdGVFdmVudERhdGFTdG9yZVJlc3BvbnNlKGRhdGEsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZVRyYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVDaGFubmVsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVFdmVudERhdGFTdG9yZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlUmVzb3VyY2VQb2xpY3lDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVRyYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXJlZ2lzdGVyT3JnYW5pemF0aW9uRGVsZWdhdGVkQWRtaW5Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlUXVlcnlDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlUXVlcnlSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVRyYWlsc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGlzYWJsZUZlZGVyYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0VuYWJsZUZlZGVyYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldENoYW5uZWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldENoYW5uZWxSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRFdmVudERhdGFTdG9yZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0RXZlbnREYXRhU3RvcmVSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRFdmVudFNlbGVjdG9yc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0SW1wb3J0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRJbXBvcnRSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRJbnNpZ2h0U2VsZWN0b3JzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRRdWVyeVJlc3VsdHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldFJlc291cmNlUG9saWN5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRUcmFpbENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0VHJhaWxTdGF0dXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldFRyYWlsU3RhdHVzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdENoYW5uZWxzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0RXZlbnREYXRhU3RvcmVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0RXZlbnREYXRhU3RvcmVzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdEltcG9ydEZhaWx1cmVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0SW1wb3J0RmFpbHVyZXNSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0SW1wb3J0c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdEltcG9ydHNSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0SW5zaWdodHNNZXRyaWNEYXRhQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0SW5zaWdodHNNZXRyaWNEYXRhUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFB1YmxpY0tleXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RQdWJsaWNLZXlzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFF1ZXJpZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RRdWVyaWVzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRhZ3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUcmFpbHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xvb2t1cEV2ZW50c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTG9va3VwRXZlbnRzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0RXZlbnRTZWxlY3RvcnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1B1dEluc2lnaHRTZWxlY3RvcnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1B1dFJlc291cmNlUG9saWN5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9SZWdpc3Rlck9yZ2FuaXphdGlvbkRlbGVnYXRlZEFkbWluQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9SZW1vdmVUYWdzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9SZXN0b3JlRXZlbnREYXRhU3RvcmVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1Jlc3RvcmVFdmVudERhdGFTdG9yZVJlc3BvbnNlKGRhdGEsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1N0YXJ0RXZlbnREYXRhU3RvcmVJbmdlc3Rpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1N0YXJ0SW1wb3J0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TdGFydEltcG9ydFJlc3BvbnNlKGRhdGEsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1N0YXJ0TG9nZ2luZ0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU3RhcnRRdWVyeUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU3RvcEV2ZW50RGF0YVN0b3JlSW5nZXN0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdG9wSW1wb3J0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TdG9wSW1wb3J0UmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU3RvcExvZ2dpbmdDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUNoYW5uZWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUV2ZW50RGF0YVN0b3JlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9VcGRhdGVFdmVudERhdGFTdG9yZVJlc3BvbnNlKGRhdGEsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVRyYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmNvbnN0IGRlX0NvbW1hbmRFcnJvciA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBwYXJzZWRPdXRwdXQgPSB7XG4gICAgICAgIC4uLm91dHB1dCxcbiAgICAgICAgYm9keTogYXdhaXQgcGFyc2VFcnJvckJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpLFxuICAgIH07XG4gICAgY29uc3QgZXJyb3JDb2RlID0gbG9hZFJlc3RKc29uRXJyb3JDb2RlKG91dHB1dCwgcGFyc2VkT3V0cHV0LmJvZHkpO1xuICAgIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgICAgIGNhc2UgXCJDaGFubmVsQVJOSW52YWxpZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0NoYW5uZWxBUk5JbnZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DaGFubmVsQVJOSW52YWxpZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DaGFubmVsTm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNsb3VkVHJhaWxBUk5JbnZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0Nsb3VkVHJhaWxBUk5JbnZhbGlkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDb25mbGljdEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0NvbmZsaWN0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Db25mbGljdEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERhdGFTdG9yZUFSTkludmFsaWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNFdmVudERhdGFTdG9yZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERhdGFTdG9yZU5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbmFjdGl2ZUV2ZW50RGF0YVN0b3JlRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW5hY3RpdmVFdmVudERhdGFTdG9yZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW5hY3RpdmVFdmVudERhdGFTdG9yZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRUcmFpbE5hbWVFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkVHJhaWxOYW1lRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkVHJhaWxOYW1lRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJOb01hbmFnZW1lbnRBY2NvdW50U0xSRXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiTm90T3JnYW5pemF0aW9uTWFzdGVyQWNjb3VudEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI05vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX05vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk9wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI09wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfT3BlcmF0aW9uTm90UGVybWl0dGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9SZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlRhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjVGFnc0xpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1RhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI1Vuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9VbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW5hY3RpdmVRdWVyeUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0luYWN0aXZlUXVlcnlFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0luYWN0aXZlUXVlcnlFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRQYXJhbWV0ZXJFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJRdWVyeUlkTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNRdWVyeUlkTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1F1ZXJ5SWROb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNDaGFubmVsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQ2hhbm5lbE1heExpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0NoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRFdmVudERhdGFTdG9yZUNhdGVnb3J5RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFNvdXJjZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRTb3VyY2VFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRTb3VyY2VFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQ2xvdWRUcmFpbEFjY2Vzc05vdEVuYWJsZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0Nsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJFdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNFdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0V2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiRXZlbnREYXRhU3RvcmVNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjRXZlbnREYXRhU3RvcmVNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERhdGFTdG9yZU1heExpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkluc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0luc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW5zdWZmaWNpZW50RGVwZW5kZW5jeVNlcnZpY2VBY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnN1ZmZpY2llbnRFbmNyeXB0aW9uUG9saWN5RXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRLbXNLZXlJZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRLbXNLZXlJZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZEttc0tleUlkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJLbXNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNLbXNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ttc0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiS21zS2V5Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfS21zS2V5Tm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk9yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjT3JnYW5pemF0aW9uTm90SW5BbGxGZWF0dXJlc01vZGVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX09yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJPcmdhbml6YXRpb25zTm90SW5Vc2VFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNPcmdhbml6YXRpb25zTm90SW5Vc2VFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX09yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DbG91ZFRyYWlsSW52YWxpZENsaWVudFRva2VuSWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0Nsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ2xvdWRXYXRjaExvZ3NEZWxpdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnN1ZmZpY2llbnRTM0J1Y2tldFBvbGljeUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0luc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnN1ZmZpY2llbnRTM0J1Y2tldFBvbGljeUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnN1ZmZpY2llbnRTbnNUb3BpY1BvbGljeUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZENsb3VkV2F0Y2hMb2dzTG9nR3JvdXBBcm5FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZENsb3VkV2F0Y2hMb2dzUm9sZUFybkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZENsb3VkV2F0Y2hMb2dzUm9sZUFybkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkUzNCdWNrZXROYW1lRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUzNCdWNrZXROYW1lRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUzNQcmVmaXhFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkUzNQcmVmaXhFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRTM1ByZWZpeEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkttc0tleURpc2FibGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjS21zS2V5RGlzYWJsZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ttc0tleURpc2FibGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJNYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI01heGltdW1OdW1iZXJPZlRyYWlsc0V4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9NYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUzNCdWNrZXREb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNTM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUzNCdWNrZXREb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlRocm90dGxpbmdFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNUaHJvdHRsaW5nRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9UaHJvdHRsaW5nRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1RyYWlsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiVHJhaWxOb3RQcm92aWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI1RyYWlsTm90UHJvdmlkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1RyYWlsTm90UHJvdmlkZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNoYW5uZWxFeGlzdHNGb3JFRFNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNDaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJFdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERhdGFTdG9yZUhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkV2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNFdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSZXNvdXJjZUFSTk5vdFZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUmVzb3VyY2VQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI1Jlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Jlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZEhvbWVSZWdpb25FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUcmFpbE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjVHJhaWxOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfVHJhaWxOb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2NvdW50Tm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkFjY291bnROb3RSZWdpc3RlcmVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0FjY291bnROb3RSZWdpc3RlcmVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJOb3RPcmdhbml6YXRpb25NYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI05vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Ob3RPcmdhbml6YXRpb25NYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2Nlc3NEZW5pZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Db25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbXBvcnROb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ltcG9ydE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbXBvcnROb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZE1heFJlc3VsdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRUb2tlbkV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRUb2tlbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFRva2VuRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZERhdGVSYW5nZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZERhdGVSYW5nZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFF1ZXJ5U3RhdHVzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZFF1ZXJ5U3RhdHVzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRFdmVudENhdGVnb3J5RXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRFdmVudENhdGVnb3J5RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkTG9va3VwQXR0cmlidXRlc0V4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkTG9va3VwQXR0cmlidXRlc0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkSW5zaWdodFNlbGVjdG9yc0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlJlc291cmNlUG9saWN5Tm90VmFsaWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNSZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9SZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0FjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0Nhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0Nhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkRlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNEZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9EZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkRXZlbnREYXRhU3RvcmVTdGF0dXNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkRXZlbnREYXRhU3RvcmVTdGF0dXNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRFdmVudERhdGFTdG9yZVN0YXR1c0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQWNjb3VudEhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNBY2NvdW50SGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQWNjb3VudEhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRRdWVyeVN0YXRlbWVudEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiTWF4Q29uY3VycmVudFF1ZXJpZXNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNNYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTWF4Q29uY3VycmVudFF1ZXJpZXNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0RlZmF1bHRFcnJvcih7XG4gICAgICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgICAgIHBhcnNlZEJvZHksXG4gICAgICAgICAgICAgICAgZXJyb3JDb2RlLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcbmNvbnN0IGRlX0FjY2Vzc0RlbmllZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEFjY2Vzc0RlbmllZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQWNjb3VudEhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBBY2NvdW50SGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9BY2NvdW50Tm90UmVnaXN0ZXJlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEFjY291bnROb3RSZWdpc3RlcmVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9BY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEFjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9DYW5ub3REZWxlZ2F0ZU1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDaGFubmVsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ2hhbm5lbEFSTkludmFsaWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDaGFubmVsQVJOSW52YWxpZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ2hhbm5lbEV4aXN0c0ZvckVEU0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENoYW5uZWxFeGlzdHNGb3JFRFNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2hhbm5lbE1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NoYW5uZWxOb3RGb3VuZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENoYW5uZWxOb3RGb3VuZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ2xvdWRUcmFpbEFjY2Vzc05vdEVuYWJsZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDbG91ZFRyYWlsQWNjZXNzTm90RW5hYmxlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDbG91ZFRyYWlsQVJOSW52YWxpZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9DbG91ZFdhdGNoTG9nc0RlbGl2ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDbG91ZFdhdGNoTG9nc0RlbGl2ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9Db25mbGljdEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENvbmZsaWN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9EZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRGVsZWdhdGVkQWRtaW5BY2NvdW50TGltaXRFeGNlZWRlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfRXZlbnREYXRhU3RvcmVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXZlbnREYXRhU3RvcmVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9FdmVudERhdGFTdG9yZUFSTkludmFsaWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBFdmVudERhdGFTdG9yZUFSTkludmFsaWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0V2ZW50RGF0YVN0b3JlRmVkZXJhdGlvbkVuYWJsZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBFdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9FdmVudERhdGFTdG9yZUhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBFdmVudERhdGFTdG9yZUhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0V2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEV2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfRXZlbnREYXRhU3RvcmVOb3RGb3VuZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0V2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBFdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbXBvcnROb3RGb3VuZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEltcG9ydE5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbmFjdGl2ZUV2ZW50RGF0YVN0b3JlRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5hY3RpdmVFdmVudERhdGFTdG9yZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW5hY3RpdmVRdWVyeUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEluYWN0aXZlUXVlcnlFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0luc2lnaHROb3RFbmFibGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0luc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEluc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEluc3VmZmljaWVudEVuY3J5cHRpb25Qb2xpY3lFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0luc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5zdWZmaWNpZW50UzNCdWNrZXRQb2xpY3lFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0luc3VmZmljaWVudFNuc1RvcGljUG9saWN5RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZENsb3VkV2F0Y2hMb2dzTG9nR3JvdXBBcm5FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRDbG91ZFdhdGNoTG9nc1JvbGVBcm5FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZERhdGVSYW5nZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZEV2ZW50RGF0YVN0b3JlQ2F0ZWdvcnlFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZEhvbWVSZWdpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkSW5zaWdodFNlbGVjdG9yc0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRJbnNpZ2h0U2VsZWN0b3JzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkS21zS2V5SWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkS21zS2V5SWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZExvb2t1cEF0dHJpYnV0ZXNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZE1heFJlc3VsdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWROZXh0VG9rZW5FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQYXJhbWV0ZXJFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRRdWVyeVN0YXR1c0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRRdWVyeVN0YXR1c0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFMzQnVja2V0TmFtZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTM1ByZWZpeEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRTM1ByZWZpeEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTb3VyY2VFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkU291cmNlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkVGFnUGFyYW1ldGVyRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRUb2tlbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRUb2tlbkV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFRyYWlsTmFtZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRUcmFpbE5hbWVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ttc0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEttc0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfS21zS2V5RGlzYWJsZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBLbXNLZXlEaXNhYmxlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfS21zS2V5Tm90Rm91bmRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfTWF4Q29uY3VycmVudFF1ZXJpZXNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfTWF4aW11bU51bWJlck9mVHJhaWxzRXhjZWVkZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IE5vTWFuYWdlbWVudEFjY291bnRTTFJFeGlzdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX05vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgTm90T3JnYW5pemF0aW9uTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX05vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBOb3RPcmdhbml6YXRpb25NYXN0ZXJBY2NvdW50RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9PcGVyYXRpb25Ob3RQZXJtaXR0ZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBPcGVyYXRpb25Ob3RQZXJtaXR0ZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX09yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgT3JnYW5pemF0aW9uTm90SW5BbGxGZWF0dXJlc01vZGVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX09yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IE9yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9SZXNvdXJjZUFSTk5vdFZhbGlkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBSZXNvdXJjZVBvbGljeU5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9SZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVzb3VyY2VQb2xpY3lOb3RWYWxpZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9TM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFMzQnVja2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UaHJvdHRsaW5nRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVGhyb3R0bGluZ0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfVHJhaWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVHJhaWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UcmFpbE5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVHJhaWxOb3RGb3VuZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfVHJhaWxOb3RQcm92aWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRyYWlsTm90UHJvdmlkZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Vuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IHNlX0xpc3RJbnNpZ2h0c01ldHJpY0RhdGFSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0YVR5cGU6IFtdLFxuICAgICAgICBFbmRUaW1lOiAoXykgPT4gTWF0aC5yb3VuZChfLmdldFRpbWUoKSAvIDEwMDApLFxuICAgICAgICBFcnJvckNvZGU6IFtdLFxuICAgICAgICBFdmVudE5hbWU6IFtdLFxuICAgICAgICBFdmVudFNvdXJjZTogW10sXG4gICAgICAgIEluc2lnaHRUeXBlOiBbXSxcbiAgICAgICAgTWF4UmVzdWx0czogW10sXG4gICAgICAgIE5leHRUb2tlbjogW10sXG4gICAgICAgIFBlcmlvZDogW10sXG4gICAgICAgIFN0YXJ0VGltZTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9MaXN0UHVibGljS2V5c1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBFbmRUaW1lOiAoXykgPT4gTWF0aC5yb3VuZChfLmdldFRpbWUoKSAvIDEwMDApLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgICAgICBTdGFydFRpbWU6IChfKSA9PiBNYXRoLnJvdW5kKF8uZ2V0VGltZSgpIC8gMTAwMCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGlzdFF1ZXJpZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRW5kVGltZTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICAgICAgRXZlbnREYXRhU3RvcmU6IFtdLFxuICAgICAgICBNYXhSZXN1bHRzOiBbXSxcbiAgICAgICAgTmV4dFRva2VuOiBbXSxcbiAgICAgICAgUXVlcnlTdGF0dXM6IFtdLFxuICAgICAgICBTdGFydFRpbWU6IChfKSA9PiBNYXRoLnJvdW5kKF8uZ2V0VGltZSgpIC8gMTAwMCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTG9va3VwRXZlbnRzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEVuZFRpbWU6IChfKSA9PiBNYXRoLnJvdW5kKF8uZ2V0VGltZSgpIC8gMTAwMCksXG4gICAgICAgIEV2ZW50Q2F0ZWdvcnk6IFtdLFxuICAgICAgICBMb29rdXBBdHRyaWJ1dGVzOiBfanNvbixcbiAgICAgICAgTWF4UmVzdWx0czogW10sXG4gICAgICAgIE5leHRUb2tlbjogW10sXG4gICAgICAgIFN0YXJ0VGltZTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TdGFydEltcG9ydFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZXN0aW5hdGlvbnM6IF9qc29uLFxuICAgICAgICBFbmRFdmVudFRpbWU6IChfKSA9PiBNYXRoLnJvdW5kKF8uZ2V0VGltZSgpIC8gMTAwMCksXG4gICAgICAgIEltcG9ydElkOiBbXSxcbiAgICAgICAgSW1wb3J0U291cmNlOiBfanNvbixcbiAgICAgICAgU3RhcnRFdmVudFRpbWU6IChfKSA9PiBNYXRoLnJvdW5kKF8uZ2V0VGltZSgpIC8gMTAwMCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ3JlYXRlRXZlbnREYXRhU3RvcmVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWR2YW5jZWRFdmVudFNlbGVjdG9yczogX2pzb24sXG4gICAgICAgIEJpbGxpbmdNb2RlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRXZlbnREYXRhU3RvcmVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBLbXNLZXlJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE11bHRpUmVnaW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgT3JnYW5pemF0aW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBSZXRlbnRpb25QZXJpb2Q6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRhZ3NMaXN0OiBfanNvbixcbiAgICAgICAgVGVybWluYXRpb25Qcm90ZWN0aW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBVcGRhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Rlc2NyaWJlUXVlcnlSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGVsaXZlcnlTM1VyaTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERlbGl2ZXJ5U3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRXJyb3JNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUXVlcnlJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFF1ZXJ5U3RhdGlzdGljczogKF8pID0+IGRlX1F1ZXJ5U3RhdGlzdGljc0ZvckRlc2NyaWJlUXVlcnkoXywgY29udGV4dCksXG4gICAgICAgIFF1ZXJ5U3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUXVlcnlTdHJpbmc6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0V2ZW50ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY2Nlc3NLZXlJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENsb3VkVHJhaWxFdmVudDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEV2ZW50SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFdmVudE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFdmVudFNvdXJjZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEV2ZW50VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgUmVhZE9ubHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXNvdXJjZXM6IF9qc29uLFxuICAgICAgICBVc2VybmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRXZlbnREYXRhU3RvcmUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFkdmFuY2VkRXZlbnRTZWxlY3RvcnM6IF9qc29uLFxuICAgICAgICBDcmVhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBFdmVudERhdGFTdG9yZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE11bHRpUmVnaW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgT3JnYW5pemF0aW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBSZXRlbnRpb25QZXJpb2Q6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlcm1pbmF0aW9uUHJvdGVjdGlvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgVXBkYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9FdmVudERhdGFTdG9yZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRXZlbnREYXRhU3RvcmUoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRXZlbnRzTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9FdmVudChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9HZXRDaGFubmVsUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENoYW5uZWxBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEZXN0aW5hdGlvbnM6IF9qc29uLFxuICAgICAgICBJbmdlc3Rpb25TdGF0dXM6IChfKSA9PiBkZV9Jbmdlc3Rpb25TdGF0dXMoXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3VyY2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3VyY2VDb25maWc6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dldEV2ZW50RGF0YVN0b3JlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFkdmFuY2VkRXZlbnRTZWxlY3RvcnM6IF9qc29uLFxuICAgICAgICBCaWxsaW5nTW9kZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEV2ZW50RGF0YVN0b3JlQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRmVkZXJhdGlvblJvbGVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGZWRlcmF0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgS21zS2V5SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBNdWx0aVJlZ2lvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE9yZ2FuaXphdGlvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgUmV0ZW50aW9uUGVyaW9kOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZXJtaW5hdGlvblByb3RlY3Rpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIFVwZGF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2V0SW1wb3J0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENyZWF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERlc3RpbmF0aW9uczogX2pzb24sXG4gICAgICAgIEVuZEV2ZW50VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgSW1wb3J0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbXBvcnRTb3VyY2U6IF9qc29uLFxuICAgICAgICBJbXBvcnRTdGF0aXN0aWNzOiBfanNvbixcbiAgICAgICAgSW1wb3J0U3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhcnRFdmVudFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFVwZGF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2V0VHJhaWxTdGF0dXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgSXNMb2dnaW5nOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIExhdGVzdENsb3VkV2F0Y2hMb2dzRGVsaXZlcnlFcnJvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhdGVzdENsb3VkV2F0Y2hMb2dzRGVsaXZlcnlUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXRlc3REZWxpdmVyeUF0dGVtcHRTdWNjZWVkZWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXRlc3REZWxpdmVyeUF0dGVtcHRUaW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGF0ZXN0RGVsaXZlcnlFcnJvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhdGVzdERlbGl2ZXJ5VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTGF0ZXN0RGlnZXN0RGVsaXZlcnlFcnJvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhdGVzdERpZ2VzdERlbGl2ZXJ5VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTGF0ZXN0Tm90aWZpY2F0aW9uQXR0ZW1wdFN1Y2NlZWRlZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhdGVzdE5vdGlmaWNhdGlvbkF0dGVtcHRUaW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGF0ZXN0Tm90aWZpY2F0aW9uRXJyb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXRlc3ROb3RpZmljYXRpb25UaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBTdGFydExvZ2dpbmdUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBTdG9wTG9nZ2luZ1RpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFRpbWVMb2dnaW5nU3RhcnRlZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRpbWVMb2dnaW5nU3RvcHBlZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSW1wb3J0RmFpbHVyZUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfSW1wb3J0RmFpbHVyZUxpc3RJdGVtKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0ltcG9ydEZhaWx1cmVMaXN0SXRlbSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRXJyb3JNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRXJyb3JUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMb2NhdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSW1wb3J0c0xpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfSW1wb3J0c0xpc3RJdGVtKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0ltcG9ydHNMaXN0SXRlbSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ3JlYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGVzdGluYXRpb25zOiBfanNvbixcbiAgICAgICAgSW1wb3J0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbXBvcnRTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBVcGRhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luZ2VzdGlvblN0YXR1cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTGF0ZXN0SW5nZXN0aW9uQXR0ZW1wdEV2ZW50SUQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXRlc3RJbmdlc3Rpb25BdHRlbXB0VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTGF0ZXN0SW5nZXN0aW9uRXJyb3JDb2RlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGF0ZXN0SW5nZXN0aW9uU3VjY2Vzc0V2ZW50SUQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXRlc3RJbmdlc3Rpb25TdWNjZXNzVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbnNpZ2h0c01ldHJpY1ZhbHVlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2xpbWl0ZWRQYXJzZURvdWJsZShlbnRyeSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9MaXN0RXZlbnREYXRhU3RvcmVzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEV2ZW50RGF0YVN0b3JlczogKF8pID0+IGRlX0V2ZW50RGF0YVN0b3JlcyhfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MaXN0SW1wb3J0RmFpbHVyZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmFpbHVyZXM6IChfKSA9PiBkZV9JbXBvcnRGYWlsdXJlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MaXN0SW1wb3J0c1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBJbXBvcnRzOiAoXykgPT4gZGVfSW1wb3J0c0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGlzdEluc2lnaHRzTWV0cmljRGF0YVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBFcnJvckNvZGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFdmVudE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFdmVudFNvdXJjZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEluc2lnaHRUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGltZXN0YW1wczogKF8pID0+IGRlX1RpbWVzdGFtcHMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlczogKF8pID0+IGRlX0luc2lnaHRzTWV0cmljVmFsdWVzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xpc3RQdWJsaWNLZXlzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFB1YmxpY0tleUxpc3Q6IChfKSA9PiBkZV9QdWJsaWNLZXlMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xpc3RRdWVyaWVzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFF1ZXJpZXM6IChfKSA9PiBkZV9RdWVyaWVzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xvb2t1cEV2ZW50c1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBFdmVudHM6IChfKSA9PiBkZV9FdmVudHNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1B1YmxpY0tleSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmluZ2VycHJpbnQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWYWxpZGl0eUVuZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFZhbGlkaXR5U3RhcnRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBWYWx1ZTogY29udGV4dC5iYXNlNjREZWNvZGVyLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1B1YmxpY0tleUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUHVibGljS2V5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1F1ZXJpZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUXVlcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfUXVlcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENyZWF0aW9uVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgUXVlcnlJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFF1ZXJ5U3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9RdWVyeVN0YXRpc3RpY3NGb3JEZXNjcmliZVF1ZXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCeXRlc1NjYW5uZWQ6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgQ3JlYXRpb25UaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBFdmVudHNNYXRjaGVkOiBfX2V4cGVjdExvbmcsXG4gICAgICAgIEV2ZW50c1NjYW5uZWQ6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgRXhlY3V0aW9uVGltZUluTWlsbGlzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Jlc3RvcmVFdmVudERhdGFTdG9yZVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBZHZhbmNlZEV2ZW50U2VsZWN0b3JzOiBfanNvbixcbiAgICAgICAgQmlsbGluZ01vZGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBFdmVudERhdGFTdG9yZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEttc0tleUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTXVsdGlSZWdpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBPcmdhbml6YXRpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIFJldGVudGlvblBlcmlvZDogX19leHBlY3RJbnQzMixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVybWluYXRpb25Qcm90ZWN0aW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBVcGRhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1N0YXJ0SW1wb3J0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENyZWF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERlc3RpbmF0aW9uczogX2pzb24sXG4gICAgICAgIEVuZEV2ZW50VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgSW1wb3J0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbXBvcnRTb3VyY2U6IF9qc29uLFxuICAgICAgICBJbXBvcnRTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGFydEV2ZW50VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgVXBkYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TdG9wSW1wb3J0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENyZWF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERlc3RpbmF0aW9uczogX2pzb24sXG4gICAgICAgIEVuZEV2ZW50VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgSW1wb3J0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbXBvcnRTb3VyY2U6IF9qc29uLFxuICAgICAgICBJbXBvcnRTdGF0aXN0aWNzOiBfanNvbixcbiAgICAgICAgSW1wb3J0U3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhcnRFdmVudFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFVwZGF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGltZXN0YW1wcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKGVudHJ5KSkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfVXBkYXRlRXZlbnREYXRhU3RvcmVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWR2YW5jZWRFdmVudFNlbGVjdG9yczogX2pzb24sXG4gICAgICAgIEJpbGxpbmdNb2RlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRXZlbnREYXRhU3RvcmVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGZWRlcmF0aW9uUm9sZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZlZGVyYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBLbXNLZXlJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE11bHRpUmVnaW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgT3JnYW5pemF0aW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBSZXRlbnRpb25QZXJpb2Q6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlcm1pbmF0aW9uUHJvdGVjdGlvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgVXBkYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZXNlcmlhbGl6ZU1ldGFkYXRhID0gKG91dHB1dCkgPT4gKHtcbiAgICBodHRwU3RhdHVzQ29kZTogb3V0cHV0LnN0YXR1c0NvZGUsXG4gICAgcmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0aWRcIl0gPz8gb3V0cHV0LmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdC1pZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16LXJlcXVlc3QtaWRcIl0sXG4gICAgZXh0ZW5kZWRSZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotaWQtMlwiXSxcbiAgICBjZklkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16LWNmLWlkXCJdLFxufSk7XG5jb25zdCBjb2xsZWN0Qm9keVN0cmluZyA9IChzdHJlYW1Cb2R5LCBjb250ZXh0KSA9PiBjb2xsZWN0Qm9keShzdHJlYW1Cb2R5LCBjb250ZXh0KS50aGVuKChib2R5KSA9PiBjb250ZXh0LnV0ZjhFbmNvZGVyKGJvZHkpKTtcbmNvbnN0IHRocm93RGVmYXVsdEVycm9yID0gd2l0aEJhc2VFeGNlcHRpb24oX19CYXNlRXhjZXB0aW9uKTtcbmNvbnN0IGJ1aWxkSHR0cFJwY1JlcXVlc3QgPSBhc3luYyAoY29udGV4dCwgaGVhZGVycywgcGF0aCwgcmVzb2x2ZWRIb3N0bmFtZSwgYm9keSkgPT4ge1xuICAgIGNvbnN0IHsgaG9zdG5hbWUsIHByb3RvY29sID0gXCJodHRwc1wiLCBwb3J0LCBwYXRoOiBiYXNlUGF0aCB9ID0gYXdhaXQgY29udGV4dC5lbmRwb2ludCgpO1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge1xuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgIHBvcnQsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIHBhdGg6IGJhc2VQYXRoLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VQYXRoLnNsaWNlKDAsIC0xKSArIHBhdGggOiBiYXNlUGF0aCArIHBhdGgsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgfTtcbiAgICBpZiAocmVzb2x2ZWRIb3N0bmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRlbnRzLmhvc3RuYW1lID0gcmVzb2x2ZWRIb3N0bmFtZTtcbiAgICB9XG4gICAgaWYgKGJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZW50cy5ib2R5ID0gYm9keTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfX0h0dHBSZXF1ZXN0KGNvbnRlbnRzKTtcbn07XG5mdW5jdGlvbiBzaGFyZWRIZWFkZXJzKG9wZXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24veC1hbXotanNvbi0xLjFcIixcbiAgICAgICAgXCJ4LWFtei10YXJnZXRcIjogYENsb3VkVHJhaWxfMjAxMzExMDEuJHtvcGVyYXRpb259YCxcbiAgICB9O1xufVxuY29uc3QgcGFyc2VCb2R5ID0gKHN0cmVhbUJvZHksIGNvbnRleHQpID0+IGNvbGxlY3RCb2R5U3RyaW5nKHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGVuY29kZWQpID0+IHtcbiAgICBpZiAoZW5jb2RlZC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZW5jb2RlZCk7XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn0pO1xuY29uc3QgcGFyc2VFcnJvckJvZHkgPSBhc3luYyAoZXJyb3JCb2R5LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBhd2FpdCBwYXJzZUJvZHkoZXJyb3JCb2R5LCBjb250ZXh0KTtcbiAgICB2YWx1ZS5tZXNzYWdlID0gdmFsdWUubWVzc2FnZSA/PyB2YWx1ZS5NZXNzYWdlO1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG5jb25zdCBsb2FkUmVzdEpzb25FcnJvckNvZGUgPSAob3V0cHV0LCBkYXRhKSA9PiB7XG4gICAgY29uc3QgZmluZEtleSA9IChvYmplY3QsIGtleSkgPT4gT2JqZWN0LmtleXMob2JqZWN0KS5maW5kKChrKSA9PiBrLnRvTG93ZXJDYXNlKCkgPT09IGtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICBjb25zdCBzYW5pdGl6ZUVycm9yQ29kZSA9IChyYXdWYWx1ZSkgPT4ge1xuICAgICAgICBsZXQgY2xlYW5WYWx1ZSA9IHJhd1ZhbHVlO1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFuVmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGNsZWFuVmFsdWUgPSBjbGVhblZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsZWFuVmFsdWUuaW5kZXhPZihcIixcIikgPj0gMCkge1xuICAgICAgICAgICAgY2xlYW5WYWx1ZSA9IGNsZWFuVmFsdWUuc3BsaXQoXCIsXCIpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGVhblZhbHVlLmluZGV4T2YoXCI6XCIpID49IDApIHtcbiAgICAgICAgICAgIGNsZWFuVmFsdWUgPSBjbGVhblZhbHVlLnNwbGl0KFwiOlwiKVswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xlYW5WYWx1ZS5pbmRleE9mKFwiI1wiKSA+PSAwKSB7XG4gICAgICAgICAgICBjbGVhblZhbHVlID0gY2xlYW5WYWx1ZS5zcGxpdChcIiNcIilbMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsZWFuVmFsdWU7XG4gICAgfTtcbiAgICBjb25zdCBoZWFkZXJLZXkgPSBmaW5kS2V5KG91dHB1dC5oZWFkZXJzLCBcIngtYW16bi1lcnJvcnR5cGVcIik7XG4gICAgaWYgKGhlYWRlcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZUVycm9yQ29kZShvdXRwdXQuaGVhZGVyc1toZWFkZXJLZXldKTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZUVycm9yQ29kZShkYXRhLmNvZGUpO1xuICAgIH1cbiAgICBpZiAoZGF0YVtcIl9fdHlwZVwiXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZUVycm9yQ29kZShkYXRhW1wiX190eXBlXCJdKTtcbiAgICB9XG59O1xuIiwiaW1wb3J0IHsgZ2V0RW5kcG9pbnRQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRTZXJkZVBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIjtcbmltcG9ydCB7IENvbW1hbmQgYXMgJENvbW1hbmQgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBjb21tb25QYXJhbXMgfSBmcm9tIFwiLi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBkZV9Mb29rdXBFdmVudHNDb21tYW5kLCBzZV9Mb29rdXBFdmVudHNDb21tYW5kIH0gZnJvbSBcIi4uL3Byb3RvY29scy9Bd3NfanNvbjFfMVwiO1xuZXhwb3J0IHsgJENvbW1hbmQgfTtcbmV4cG9ydCBjbGFzcyBMb29rdXBFdmVudHNDb21tYW5kIGV4dGVuZHMgJENvbW1hbmRcbiAgICAuY2xhc3NCdWlsZGVyKClcbiAgICAuZXAoe1xuICAgIC4uLmNvbW1vblBhcmFtcyxcbn0pXG4gICAgLm0oZnVuY3Rpb24gKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBnZXRTZXJkZVBsdWdpbihjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAgICAgZ2V0RW5kcG9pbnRQbHVnaW4oY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpLFxuICAgIF07XG59KVxuICAgIC5zKFwiQ2xvdWRUcmFpbF8yMDEzMTEwMVwiLCBcIkxvb2t1cEV2ZW50c1wiLCB7fSlcbiAgICAubihcIkNsb3VkVHJhaWxDbGllbnRcIiwgXCJMb29rdXBFdmVudHNDb21tYW5kXCIpXG4gICAgLmYodm9pZCAwLCB2b2lkIDApXG4gICAgLnNlcihzZV9Mb29rdXBFdmVudHNDb21tYW5kKVxuICAgIC5kZShkZV9Mb29rdXBFdmVudHNDb21tYW5kKVxuICAgIC5idWlsZCgpIHtcbn1cbiIsImltcG9ydCB7IEV2ZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwnXG5cbmV4cG9ydCBjbGFzcyBDbG91ZFRyYWlsVXNlckV2ZW50IHtcblx0aWFtUm9sZTogc3RyaW5nIFxuXHRzdHNTZXNzaW9uOiBzdHJpbmcgXG5cdGV2ZW50VGltZTogRGF0ZVxuXG5cdGNvbnN0cnVjdG9yKGV2ZW50OiBFdmVudCkge1xuXHRcdGNvbnN0IGNsb3VkVHJhaWxFdmVudCA9IEpTT04ucGFyc2UoZXZlbnQuQ2xvdWRUcmFpbEV2ZW50KVxuXHRcdGNvbnN0IFtyb2xlLCBzZXNzaW9uXSA9ICBjbG91ZFRyYWlsRXZlbnQudXNlcklkZW50aXR5LmFybi5zcGxpdCgnLycpLnNsaWNlKDEpIC8vIGFybjphd3M6c3RzOjphY2NvdW50OmFzc3VtZWQtcm9sZS9ST0xFX05BTUUvU0VTU0lPTl9OQU1FIC0gbWF5IGhhdmUgdW5kZWZpbmVkIHNlc3Npb24gaWYgSUFNIHVzZXIgaXMgdXNlZCB0byBsb2dpblxuXHRcdFxuXHRcdHRoaXMuaWFtUm9sZSA9IHJvbGVcblx0XHR0aGlzLnN0c1Nlc3Npb24gPSBzZXNzaW9uXG5cdFx0dGhpcy5ldmVudFRpbWUgPSBldmVudC5FdmVudFRpbWVcblx0fVxufSIsImltcG9ydCB7IENsb3VkVHJhaWxDbGllbnQsIExvb2t1cEV2ZW50c0NvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbCdcbmltcG9ydCB7IENsb3VkVHJhaWxVc2VyRXZlbnQgfSBmcm9tICcuL0Nsb3VkVHJhaWxVc2VyRXZlbnQnXG5pbXBvcnQgeyBRdWlja1NpZ2h0VXNlciB9IGZyb20gJy4vUXVpY2tTaWdodFVzZXInXG5cbmV4cG9ydCBjbGFzcyBDbG91ZFRyYWlsVXNlckV2ZW50TWFuYWdlciB7XG5cdHByaXZhdGUgY2xvdWRUcmFpbENsaWVudCA9IG5ldyBDbG91ZFRyYWlsQ2xpZW50KHt9KVxuXG5cdC8vIEZpbHRlcnMgb3V0IGV2ZW50cyB0aGF0IGRvIG5vdCBvcmlnaW5hdGUgd2l0aCBzb21lb25lJ3MgZS1tYWlsIGFkZHJlc3Ncblx0Ly8gc3VjaCBhcyBhbnkgYXV0b21hdGVkIHByb2Nlc3Mgd2hpY2ggdG91Y2hlcyBRdWlja1NpZ2h0LCBpbmNsdWRpbmcgdGhpcyBvbmVcblx0cHVibGljIGFzeW5jIHJldHJpZXZlUXVpY2tTaWdodFVzZXJFdmVudHMoc3RhcnREYXRlOiBEYXRlKTogUHJvbWlzZTxDbG91ZFRyYWlsVXNlckV2ZW50W10+IHtcblx0XHRjb25zdCBldmVudHM6IENsb3VkVHJhaWxVc2VyRXZlbnRbXSA9IFtdXG5cblx0XHRsZXQgbmV4dFRva2VuOiBzdHJpbmcgPSBudWxsIC8vIFRoaXMgaXMgYW5ub3lpbmc7IG51bGwgZG9lc24ndCB3b3JrIGluIHRoZSBRdWlja1NpZ2h0IEFQSSBidXQgZW1wdHkgc3RyaW5nIGRvZXNuJ3Qgd29yayBpbiB0aGUgQ2xvdWRUcmFpbCBBUElcblx0XHRkbyB7XG5cdFx0XHRjb25zdCBsb29rdXBFdmVudHNDb21tYW5kID0gbmV3IExvb2t1cEV2ZW50c0NvbW1hbmQoe1xuXHRcdFx0XHRMb29rdXBBdHRyaWJ1dGVzOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0QXR0cmlidXRlS2V5OiAnRXZlbnRTb3VyY2UnLFxuXHRcdFx0XHRcdFx0QXR0cmlidXRlVmFsdWU6ICdxdWlja3NpZ2h0LmFtYXpvbmF3cy5jb20nLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFN0YXJ0VGltZTogc3RhcnREYXRlLFxuXHRcdFx0XHROZXh0VG9rZW46IG5leHRUb2tlbixcblx0XHRcdH0pXG5cblx0XHRcdGNvbnN0IGxvb2t1cEV2ZW50c1Jlc3VsdCA9IGF3YWl0IHRoaXMuY2xvdWRUcmFpbENsaWVudC5zZW5kKGxvb2t1cEV2ZW50c0NvbW1hbmQpXG5cblx0XHRcdG5leHRUb2tlbiA9IGxvb2t1cEV2ZW50c1Jlc3VsdC5OZXh0VG9rZW5cblxuXHRcdFx0bG9va3VwRXZlbnRzUmVzdWx0LkV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4gZXZlbnRzLnB1c2gobmV3IENsb3VkVHJhaWxVc2VyRXZlbnQoZXZlbnQpKSlcblx0XHR9IHdoaWxlIChuZXh0VG9rZW4pXG5cblx0XHRyZXR1cm4gZXZlbnRzXG5cdH1cblxuXHRwdWJsaWMgZ2V0TGFzdEFjY2Vzc0RhdGUodXNlcjogUXVpY2tTaWdodFVzZXIsIGV2ZW50czogQ2xvdWRUcmFpbFVzZXJFdmVudFtdKTogRGF0ZSB7XG5cdFx0Y29uc3QgdGhpc1BhcnRpY3VsYXJVc2VyRXZlbnRzID0gZXZlbnRzLmZpbHRlcigoZXZlbnQpID0+IHVzZXIuaWFtUm9sZSA9PT0gZXZlbnQuaWFtUm9sZSAmJiB1c2VyLnN0c1Nlc3Npb24gPT09IGV2ZW50LnN0c1Nlc3Npb24pXG5cblx0XHRpZiAodGhpc1BhcnRpY3VsYXJVc2VyRXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Ly8gU3RyeWtlciBkaXNhYmxlIG5leHQtbGluZSBhbGwgXCJJIGRvIG5vdCBjYXJlIGFib3V0IG11dGF0aW5nIGNvbnNvbGUgc3RhdGVtZW50c1wiXG5cdFx0XHRjb25zb2xlLmRlYnVnKGAke3VzZXIuaWFtUm9sZX0vJHt1c2VyLnN0c1Nlc3Npb259IG5vIENsb3VkVHJhaWwgZXZlbnRzIGZvdW5kYClcblx0XHRcdHJldHVybiBuZXcgRGF0ZSgwKSAvLyBSZXR1cm4gMTk3MCBhcyBsYXN0IGFjY2VzcyBkYXRlIHRvIG1ha2UgbG9naWMgZWFzaWVyIGRvd24gdGhlIHJvYWRcblx0XHR9XG5cblx0XHQvLyBTb3J0IG5ld2VzdCB0byBvbGRlc3Rcblx0XHRjb25zdCBuZXdlc3RFdmVudCA9IHRoaXNQYXJ0aWN1bGFyVXNlckV2ZW50cy5zb3J0KChhLCBiKSA9PiBhLmV2ZW50VGltZSA8PSBiLmV2ZW50VGltZSA/IDEgOiAtMSlbMF1cblx0XHQvLyBTdHJ5a2VyIGRpc2FibGUgbmV4dC1saW5lIGFsbCBcIkkgZG8gbm90IGNhcmUgYWJvdXQgbXV0YXRpbmcgY29uc29sZSBzdGF0ZW1lbnRzXCJcblx0XHRjb25zb2xlLmRlYnVnKGAke3VzZXIuaWFtUm9sZX0vJHt1c2VyLnN0c1Nlc3Npb259IGxhdGVzdCBldmVudDogJHtKU09OLnN0cmluZ2lmeShuZXdlc3RFdmVudCwgbnVsbCwgMSl9YClcblxuXHRcdHJldHVybiBuZXdlc3RFdmVudC5ldmVudFRpbWVcblx0fVxufSIsImltcG9ydCB7IGJvb2xlYW5TZWxlY3RvciwgU2VsZWN0b3JUeXBlIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1jb25maWctcHJvdmlkZXJcIjtcbmV4cG9ydCBjb25zdCBOT0RFX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTl9FTlZfTkFNRSA9IFwiQVdTX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTlwiO1xuZXhwb3J0IGNvbnN0IE5PREVfRElTQUJMRV9SRVFVRVNUX0NPTVBSRVNTSU9OX0lOSV9OQU1FID0gXCJkaXNhYmxlX3JlcXVlc3RfY29tcHJlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTiA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IE5PREVfRElTQUJMRV9SRVFVRVNUX0NPTVBSRVNTSU9OX0NPTkZJR19PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4gYm9vbGVhblNlbGVjdG9yKGVudiwgTk9ERV9ESVNBQkxFX1JFUVVFU1RfQ09NUFJFU1NJT05fRU5WX05BTUUsIFNlbGVjdG9yVHlwZS5FTlYpLFxuICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IGJvb2xlYW5TZWxlY3Rvcihwcm9maWxlLCBOT0RFX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTl9JTklfTkFNRSwgU2VsZWN0b3JUeXBlLkNPTkZJRyksXG4gICAgZGVmYXVsdDogREVGQVVMVF9ESVNBQkxFX1JFUVVFU1RfQ09NUFJFU1NJT04sXG59O1xuIiwiaW1wb3J0IHsgbnVtYmVyU2VsZWN0b3IsIFNlbGVjdG9yVHlwZSB9IGZyb20gXCJAc21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyXCI7XG5leHBvcnQgY29uc3QgTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTX0VOVl9OQU1FID0gXCJBV1NfUkVRVUVTVF9NSU5fQ09NUFJFU1NJT05fU0laRV9CWVRFU1wiO1xuZXhwb3J0IGNvbnN0IE5PREVfUkVRVUVTVF9NSU5fQ09NUFJFU1NJT05fU0laRV9CWVRFU19JTklfTkFNRSA9IFwicmVxdWVzdF9taW5fY29tcHJlc3Npb25fc2l6ZV9ieXRlc1wiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTID0gMTAyNDA7XG5leHBvcnQgY29uc3QgTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTX0NPTkZJR19PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4gbnVtYmVyU2VsZWN0b3IoZW52LCBOT0RFX1JFUVVFU1RfTUlOX0NPTVBSRVNTSU9OX1NJWkVfQllURVNfRU5WX05BTUUsIFNlbGVjdG9yVHlwZS5FTlYpLFxuICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IG51bWJlclNlbGVjdG9yKHByb2ZpbGUsIE5PREVfUkVRVUVTVF9NSU5fQ09NUFJFU1NJT05fU0laRV9CWVRFU19JTklfTkFNRSwgU2VsZWN0b3JUeXBlLkNPTkZJRyksXG4gICAgZGVmYXVsdDogREVGQVVMVF9OT0RFX1JFUVVFU1RfTUlOX0NPTVBSRVNTSU9OX1NJWkVfQllURVMsXG59O1xuIiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJ6bGliXCIpOyIsImltcG9ydCB7IGNyZWF0ZUd6aXAgfSBmcm9tIFwiemxpYlwiO1xuZXhwb3J0IGNvbnN0IGNvbXByZXNzU3RyZWFtID0gYXN5bmMgKGJvZHkpID0+IGJvZHkucGlwZShjcmVhdGVHemlwKCkpO1xuIiwiaW1wb3J0IHsgdG9VaW50OEFycmF5IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tIFwidXRpbFwiO1xuaW1wb3J0IHsgZ3ppcCB9IGZyb20gXCJ6bGliXCI7XG5jb25zdCBnemlwQXN5bmMgPSBwcm9taXNpZnkoZ3ppcCk7XG5leHBvcnQgY29uc3QgY29tcHJlc3NTdHJpbmcgPSBhc3luYyAoYm9keSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbXByZXNzZWRCdWZmZXIgPSBhd2FpdCBnemlwQXN5bmModG9VaW50OEFycmF5KGJvZHkgfHwgXCJcIikpO1xuICAgICAgICByZXR1cm4gdG9VaW50OEFycmF5KGNvbXByZXNzZWRCdWZmZXIpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWx1cmUgZHVyaW5nIGNvbXByZXNzaW9uOiBcIiArIGVyci5tZXNzYWdlKTtcbiAgICB9XG59O1xuIiwiZXhwb3J0IHZhciBDb21wcmVzc2lvbkFsZ29yaXRobTtcbihmdW5jdGlvbiAoQ29tcHJlc3Npb25BbGdvcml0aG0pIHtcbiAgICBDb21wcmVzc2lvbkFsZ29yaXRobVtcIkdaSVBcIl0gPSBcImd6aXBcIjtcbn0pKENvbXByZXNzaW9uQWxnb3JpdGhtIHx8IChDb21wcmVzc2lvbkFsZ29yaXRobSA9IHt9KSk7XG5leHBvcnQgY29uc3QgQ0xJRU5UX1NVUFBPUlRFRF9BTEdPUklUSE1TID0gW0NvbXByZXNzaW9uQWxnb3JpdGhtLkdaSVBdO1xuIiwiaW1wb3J0IHsgaXNBcnJheUJ1ZmZlciB9IGZyb20gXCJAc21pdGh5L2lzLWFycmF5LWJ1ZmZlclwiO1xuZXhwb3J0IGNvbnN0IGlzU3RyZWFtaW5nID0gKGJvZHkpID0+IGJvZHkgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYm9keSAhPT0gXCJzdHJpbmdcIiAmJiAhQXJyYXlCdWZmZXIuaXNWaWV3KGJvZHkpICYmICFpc0FycmF5QnVmZmVyKGJvZHkpO1xuIiwiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBjb21wcmVzc1N0cmVhbSB9IGZyb20gXCIuL2NvbXByZXNzU3RyZWFtXCI7XG5pbXBvcnQgeyBjb21wcmVzc1N0cmluZyB9IGZyb20gXCIuL2NvbXByZXNzU3RyaW5nXCI7XG5pbXBvcnQgeyBDTElFTlRfU1VQUE9SVEVEX0FMR09SSVRITVMgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGlzU3RyZWFtaW5nIH0gZnJvbSBcIi4vaXNTdHJlYW1pbmdcIjtcbmV4cG9ydCBjb25zdCBjb21wcmVzc2lvbk1pZGRsZXdhcmUgPSAoY29uZmlnLCBtaWRkbGV3YXJlQ29uZmlnKSA9PiAobmV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UoYXJncy5yZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgICB9XG4gICAgY29uc3QgZGlzYWJsZVJlcXVlc3RDb21wcmVzc2lvbiA9IGF3YWl0IGNvbmZpZy5kaXNhYmxlUmVxdWVzdENvbXByZXNzaW9uKCk7XG4gICAgaWYgKGRpc2FibGVSZXF1ZXN0Q29tcHJlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgICBjb25zdCB7IGJvZHksIGhlYWRlcnMgfSA9IHJlcXVlc3Q7XG4gICAgY29uc3QgeyBlbmNvZGluZ3MsIHN0cmVhbVJlcXVpcmVzTGVuZ3RoIH0gPSBtaWRkbGV3YXJlQ29uZmlnO1xuICAgIGxldCB1cGRhdGVkQm9keSA9IGJvZHk7XG4gICAgbGV0IHVwZGF0ZWRIZWFkZXJzID0gaGVhZGVycztcbiAgICBmb3IgKGNvbnN0IGFsZ29yaXRobSBvZiBlbmNvZGluZ3MpIHtcbiAgICAgICAgaWYgKENMSUVOVF9TVVBQT1JURURfQUxHT1JJVEhNUy5pbmNsdWRlcyhhbGdvcml0aG0pKSB7XG4gICAgICAgICAgICBsZXQgaXNSZXF1ZXN0Q29tcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGlzU3RyZWFtaW5nKGJvZHkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdHJlYW1SZXF1aXJlc0xlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkQm9keSA9IGF3YWl0IGNvbXByZXNzU3RyZWFtKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBpc1JlcXVlc3RDb21wcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbXByZXNzaW9uIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHN0cmVhbWluZyBibG9icyB0aGF0IHJlcXVpcmUgYSBsZW5ndGguXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHlMZW5ndGggPSBjb25maWcuYm9keUxlbmd0aENoZWNrZXIoYm9keSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzID0gYXdhaXQgY29uZmlnLnJlcXVlc3RNaW5Db21wcmVzc2lvblNpemVCeXRlcygpO1xuICAgICAgICAgICAgICAgIGlmIChib2R5TGVuZ3RoICYmIGJvZHlMZW5ndGggPj0gcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRCb2R5ID0gYXdhaXQgY29tcHJlc3NTdHJpbmcoYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWVzdENvbXByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1JlcXVlc3RDb21wcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcnNbXCJDb250ZW50LUVuY29kaW5nXCJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRIZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1FbmNvZGluZ1wiOiBgJHtoZWFkZXJzW1wiQ29udGVudC1FbmNvZGluZ1wiXX0sJHthbGdvcml0aG19YCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRIZWFkZXJzID0geyAuLi5oZWFkZXJzLCBcIkNvbnRlbnQtRW5jb2RpbmdcIjogYWxnb3JpdGhtIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0KHtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgcmVxdWVzdDoge1xuICAgICAgICAgICAgLi4ucmVxdWVzdCxcbiAgICAgICAgICAgIGJvZHk6IHVwZGF0ZWRCb2R5LFxuICAgICAgICAgICAgaGVhZGVyczogdXBkYXRlZEhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IGNvbXByZXNzaW9uTWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gICAgbmFtZTogXCJjb21wcmVzc2lvbk1pZGRsZXdhcmVcIixcbiAgICBzdGVwOiBcImJ1aWxkXCIsXG4gICAgdGFnczogW1wiUkVRVUVTVF9CT0RZX0NPTVBSRVNTSU9OXCIsIFwiR1pJUFwiXSxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICBwcmlvcml0eTogXCJoaWdoXCIsXG59O1xuIiwiaW1wb3J0IHsgY29tcHJlc3Npb25NaWRkbGV3YXJlLCBjb21wcmVzc2lvbk1pZGRsZXdhcmVPcHRpb25zLCB9IGZyb20gXCIuL2NvbXByZXNzaW9uTWlkZGxld2FyZVwiO1xuZXhwb3J0IGNvbnN0IGdldENvbXByZXNzaW9uUGx1Z2luID0gKGNvbmZpZywgbWlkZGxld2FyZUNvbmZpZykgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGQoY29tcHJlc3Npb25NaWRkbGV3YXJlKGNvbmZpZywgbWlkZGxld2FyZUNvbmZpZyksIGNvbXByZXNzaW9uTWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgZ2V0U21pdGh5Q29udGV4dCwgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCBkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyID0gYXN5bmMgKGNvbmZpZywgY29udGV4dCwgaW5wdXQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcGVyYXRpb246IGdldFNtaXRoeUNvbnRleHQoY29udGV4dCkub3BlcmF0aW9uLFxuICAgICAgICByZWdpb246IChhd2FpdCBub3JtYWxpemVQcm92aWRlcihjb25maWcucmVnaW9uKSgpKSB8fFxuICAgICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3RlZCBgcmVnaW9uYCB0byBiZSBjb25maWd1cmVkIGZvciBgYXdzLmF1dGgjc2lndjRgXCIpO1xuICAgICAgICAgICAgfSkoKSxcbiAgICB9O1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lSWQ6IFwiYXdzLmF1dGgjc2lndjRcIixcbiAgICAgICAgc2lnbmluZ1Byb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIG5hbWU6IFwibW9uaXRvcmluZ1wiLFxuICAgICAgICAgICAgcmVnaW9uOiBhdXRoUGFyYW1ldGVycy5yZWdpb24sXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnRpZXNFeHRyYWN0b3I6IChjb25maWcsIGNvbnRleHQpID0+ICh7XG4gICAgICAgICAgICBzaWduaW5nUHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSAoYXV0aFBhcmFtZXRlcnMpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gW107XG4gICAgc3dpdGNoIChhdXRoUGFyYW1ldGVycy5vcGVyYXRpb24pIHtcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBjb25zdCBjb25maWdfMCA9IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZyhjb25maWcpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNvbmZpZ18wLFxuICAgIH07XG59O1xuIiwiZXhwb3J0IGNvbnN0IHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMgPSAob3B0aW9ucykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBvcHRpb25zLnVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IG9wdGlvbnMudXNlRmlwc0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICBkZWZhdWx0U2lnbmluZ05hbWU6IFwibW9uaXRvcmluZ1wiLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IGNvbW1vblBhcmFtcyA9IHtcbiAgICBVc2VGSVBTOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUZpcHNFbmRwb2ludFwiIH0sXG4gICAgRW5kcG9pbnQ6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwiZW5kcG9pbnRcIiB9LFxuICAgIFJlZ2lvbjogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJyZWdpb25cIiB9LFxuICAgIFVzZUR1YWxTdGFjazogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJ1c2VEdWFsc3RhY2tFbmRwb2ludFwiIH0sXG59O1xuIiwiY29uc3QgdSA9IFwicmVxdWlyZWRcIiwgdiA9IFwiZm5cIiwgdyA9IFwiYXJndlwiLCB4ID0gXCJyZWZcIjtcbmNvbnN0IGEgPSB0cnVlLCBiID0gXCJpc1NldFwiLCBjID0gXCJib29sZWFuRXF1YWxzXCIsIGQgPSBcImVycm9yXCIsIGUgPSBcImVuZHBvaW50XCIsIGYgPSBcInRyZWVcIiwgZyA9IFwiUGFydGl0aW9uUmVzdWx0XCIsIGggPSBcImdldEF0dHJcIiwgaSA9IHsgW3VdOiBmYWxzZSwgXCJ0eXBlXCI6IFwiU3RyaW5nXCIgfSwgaiA9IHsgW3VdOiB0cnVlLCBcImRlZmF1bHRcIjogZmFsc2UsIFwidHlwZVwiOiBcIkJvb2xlYW5cIiB9LCBrID0geyBbeF06IFwiRW5kcG9pbnRcIiB9LCBsID0geyBbdl06IGMsIFt3XTogW3sgW3hdOiBcIlVzZUZJUFNcIiB9LCB0cnVlXSB9LCBtID0geyBbdl06IGMsIFt3XTogW3sgW3hdOiBcIlVzZUR1YWxTdGFja1wiIH0sIHRydWVdIH0sIG4gPSB7fSwgbyA9IHsgW3ZdOiBoLCBbd106IFt7IFt4XTogZyB9LCBcInN1cHBvcnRzRklQU1wiXSB9LCBwID0geyBbeF06IGcgfSwgcSA9IHsgW3ZdOiBjLCBbd106IFt0cnVlLCB7IFt2XTogaCwgW3ddOiBbcCwgXCJzdXBwb3J0c0R1YWxTdGFja1wiXSB9XSB9LCByID0gW2xdLCBzID0gW21dLCB0ID0gW3sgW3hdOiBcIlJlZ2lvblwiIH1dO1xuY29uc3QgX2RhdGEgPSB7IHZlcnNpb246IFwiMS4wXCIsIHBhcmFtZXRlcnM6IHsgUmVnaW9uOiBpLCBVc2VEdWFsU3RhY2s6IGosIFVzZUZJUFM6IGosIEVuZHBvaW50OiBpIH0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IGIsIFt3XTogW2tdIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogciwgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBGSVBTIGFuZCBjdXN0b20gZW5kcG9pbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgdHlwZTogZCB9LCB7IGNvbmRpdGlvbnM6IHMsIGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogRHVhbHN0YWNrIGFuZCBjdXN0b20gZW5kcG9pbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgdHlwZTogZCB9LCB7IGVuZHBvaW50OiB7IHVybDogaywgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogW3sgW3ZdOiBiLCBbd106IHQgfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IFwiYXdzLnBhcnRpdGlvblwiLCBbd106IHQsIGFzc2lnbjogZyB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFtsLCBtXSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogYywgW3ddOiBbYSwgb10gfSwgcV0sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9tb25pdG9yaW5nLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkZJUFMgYW5kIER1YWxTdGFjayBhcmUgZW5hYmxlZCwgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgb25lIG9yIGJvdGhcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHIsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IGMsIFt3XTogW28sIGFdIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3ZdOiBcInN0cmluZ0VxdWFsc1wiLCBbd106IFt7IFt2XTogaCwgW3ddOiBbcCwgXCJuYW1lXCJdIH0sIFwiYXdzLXVzLWdvdlwiXSB9XSwgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vbW9uaXRvcmluZy57UmVnaW9ufS5hbWF6b25hd3MuY29tXCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9LCB7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL21vbml0b3JpbmctZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRklQUyBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IEZJUFNcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHMsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbcV0sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9tb25pdG9yaW5nLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZHVhbFN0YWNrRG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJEdWFsU3RhY2sgaXMgZW5hYmxlZCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBEdWFsU3RhY2tcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL21vbml0b3Jpbmcue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogTWlzc2luZyBSZWdpb25cIiwgdHlwZTogZCB9XSB9O1xuZXhwb3J0IGNvbnN0IHJ1bGVTZXQgPSBfZGF0YTtcbiIsImltcG9ydCB7IHJlc29sdmVFbmRwb2ludCB9IGZyb20gXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBydWxlU2V0IH0gZnJvbSBcIi4vcnVsZXNldFwiO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyID0gKGVuZHBvaW50UGFyYW1zLCBjb250ZXh0ID0ge30pID0+IHtcbiAgICByZXR1cm4gcmVzb2x2ZUVuZHBvaW50KHJ1bGVTZXQsIHtcbiAgICAgICAgZW5kcG9pbnRQYXJhbXM6IGVuZHBvaW50UGFyYW1zLFxuICAgICAgICBsb2dnZXI6IGNvbnRleHQubG9nZ2VyLFxuICAgIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSAocnVudGltZUNvbmZpZykgPT4ge1xuICAgIGNvbnN0IF9odHRwQXV0aFNjaGVtZXMgPSBydW50aW1lQ29uZmlnLmh0dHBBdXRoU2NoZW1lcztcbiAgICBsZXQgX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBydW50aW1lQ29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgbGV0IF9jcmVkZW50aWFscyA9IHJ1bnRpbWVDb25maWcuY3JlZGVudGlhbHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0SHR0cEF1dGhTY2hlbWUoaHR0cEF1dGhTY2hlbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gX2h0dHBBdXRoU2NoZW1lcy5maW5kSW5kZXgoKHNjaGVtZSkgPT4gc2NoZW1lLnNjaGVtZUlkID09PSBodHRwQXV0aFNjaGVtZS5zY2hlbWVJZCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lcy5wdXNoKGh0dHBBdXRoU2NoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZXMuc3BsaWNlKGluZGV4LCAxLCBodHRwQXV0aFNjaGVtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lcygpIHtcbiAgICAgICAgICAgIHJldHVybiBfaHR0cEF1dGhTY2hlbWVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXRIdHRwQXV0aFNjaGVtZVByb3ZpZGVyKGh0dHBBdXRoU2NoZW1lUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q3JlZGVudGlhbHMoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIF9jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICB9LFxuICAgICAgICBjcmVkZW50aWFscygpIHtcbiAgICAgICAgICAgIHJldHVybiBfY3JlZGVudGlhbHM7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBodHRwQXV0aFNjaGVtZXM6IGNvbmZpZy5odHRwQXV0aFNjaGVtZXMoKSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSxcbiAgICAgICAgY3JlZGVudGlhbHM6IGNvbmZpZy5jcmVkZW50aWFscygpLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgZ2V0SG9zdEhlYWRlclBsdWdpbiwgcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXJcIjtcbmltcG9ydCB7IGdldExvZ2dlclBsdWdpbiB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLWxvZ2dlclwiO1xuaW1wb3J0IHsgZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtcmVjdXJzaW9uLWRldGVjdGlvblwiO1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50UGx1Z2luLCByZXNvbHZlVXNlckFnZW50Q29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXVzZXItYWdlbnRcIjtcbmltcG9ydCB7IHJlc29sdmVSZWdpb25Db25maWcgfSBmcm9tIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnLCBnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbiwgZ2V0SHR0cFNpZ25pbmdQbHVnaW4sIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuaW1wb3J0IHsgcmVzb2x2ZUNvbXByZXNzaW9uQ29uZmlnLCB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtY29tcHJlc3Npb25cIjtcbmltcG9ydCB7IGdldENvbnRlbnRMZW5ndGhQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWNvbnRlbnQtbGVuZ3RoXCI7XG5pbXBvcnQgeyByZXNvbHZlRW5kcG9pbnRDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRSZXRyeVBsdWdpbiwgcmVzb2x2ZVJldHJ5Q29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgQ2xpZW50IGFzIF9fQ2xpZW50LCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGRlZmF1bHRDbG91ZFdhdGNoSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsIHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZywgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIjtcbmltcG9ydCB7IHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMsIH0gZnJvbSBcIi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIF9fZ2V0UnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWdcIjtcbmltcG9ydCB7IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyB9IGZyb20gXCIuL3J1bnRpbWVFeHRlbnNpb25zXCI7XG5leHBvcnQgeyBfX0NsaWVudCB9O1xuZXhwb3J0IGNsYXNzIENsb3VkV2F0Y2hDbGllbnQgZXh0ZW5kcyBfX0NsaWVudCB7XG4gICAgY29uc3RydWN0b3IoLi4uW2NvbmZpZ3VyYXRpb25dKSB7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMCA9IF9fZ2V0UnVudGltZUNvbmZpZyhjb25maWd1cmF0aW9uIHx8IHt9KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18xID0gcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyhfY29uZmlnXzApO1xuICAgICAgICBjb25zdCBfY29uZmlnXzIgPSByZXNvbHZlUmVnaW9uQ29uZmlnKF9jb25maWdfMSk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMyA9IHJlc29sdmVFbmRwb2ludENvbmZpZyhfY29uZmlnXzIpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzQgPSByZXNvbHZlUmV0cnlDb25maWcoX2NvbmZpZ18zKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ181ID0gcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcoX2NvbmZpZ180KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ182ID0gcmVzb2x2ZVVzZXJBZ2VudENvbmZpZyhfY29uZmlnXzUpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzcgPSByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcoX2NvbmZpZ182KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ184ID0gcmVzb2x2ZUNvbXByZXNzaW9uQ29uZmlnKF9jb25maWdfNyk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfOSA9IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyhfY29uZmlnXzgsIGNvbmZpZ3VyYXRpb24/LmV4dGVuc2lvbnMgfHwgW10pO1xuICAgICAgICBzdXBlcihfY29uZmlnXzkpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IF9jb25maWdfOTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJldHJ5UGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRDb250ZW50TGVuZ3RoUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIb3N0SGVhZGVyUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRMb2dnZXJQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0VXNlckFnZW50UGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbih0aGlzLmNvbmZpZywge1xuICAgICAgICAgICAgaHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXI6IHRoaXMuZ2V0RGVmYXVsdEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyKCksXG4gICAgICAgICAgICBpZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXI6IHRoaXMuZ2V0SWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyKCksXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldEh0dHBTaWduaW5nUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgZ2V0RGVmYXVsdEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyKCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdENsb3VkV2F0Y2hIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcjtcbiAgICB9XG4gICAgZ2V0SWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyKCkge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGNvbmZpZykgPT4gbmV3IERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnKHtcbiAgICAgICAgICAgIFwiYXdzLmF1dGgjc2lndjRcIjogY29uZmlnLmNyZWRlbnRpYWxzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgcGFja2FnZUluZm8gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IHsgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiBhcyBhd3NDaGVja1ZlcnNpb24gfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgZGVmYXVsdFByb3ZpZGVyIGFzIGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlXCI7XG5pbXBvcnQgeyBkZWZhdWx0VXNlckFnZW50IH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtdXNlci1hZ2VudC1ub2RlXCI7XG5pbXBvcnQgeyBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLCBOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCBOT0RFX1VTRV9GSVBTX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCB9IGZyb20gXCJAc21pdGh5L2NvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgSGFzaCB9IGZyb20gXCJAc21pdGh5L2hhc2gtbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9ESVNBQkxFX1JFUVVFU1RfQ09NUFJFU1NJT05fQ09ORklHX09QVElPTlMsIE5PREVfUkVRVUVTVF9NSU5fQ09NUFJFU1NJT05fU0laRV9CWVRFU19DT05GSUdfT1BUSU9OUywgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWNvbXByZXNzaW9uXCI7XG5pbXBvcnQgeyBOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TLCBOT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnIGFzIGxvYWROb2RlQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXJcIjtcbmltcG9ydCB7IE5vZGVIdHRwSGFuZGxlciBhcyBSZXF1ZXN0SGFuZGxlciwgc3RyZWFtQ29sbGVjdG9yIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXJcIjtcbmltcG9ydCB7IGNhbGN1bGF0ZUJvZHlMZW5ndGggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJvZHktbGVuZ3RoLW5vZGVcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVUUllfTU9ERSB9IGZyb20gXCJAc21pdGh5L3V0aWwtcmV0cnlcIjtcbmltcG9ydCB7IGdldFJ1bnRpbWVDb25maWcgYXMgZ2V0U2hhcmVkUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWcuc2hhcmVkXCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgcmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3V0aWwtZGVmYXVsdHMtbW9kZS1ub2RlXCI7XG5pbXBvcnQgeyBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IGNvbnN0IGdldFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbihwcm9jZXNzLnZlcnNpb24pO1xuICAgIGNvbnN0IGRlZmF1bHRzTW9kZSA9IHJlc29sdmVEZWZhdWx0c01vZGVDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnUHJvdmlkZXIgPSAoKSA9PiBkZWZhdWx0c01vZGUoKS50aGVuKGxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUpO1xuICAgIGNvbnN0IGNsaWVudFNoYXJlZFZhbHVlcyA9IGdldFNoYXJlZFJ1bnRpbWVDb25maWcoY29uZmlnKTtcbiAgICBhd3NDaGVja1ZlcnNpb24ocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jbGllbnRTaGFyZWRWYWx1ZXMsXG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgcnVudGltZTogXCJub2RlXCIsXG4gICAgICAgIGRlZmF1bHRzTW9kZSxcbiAgICAgICAgYm9keUxlbmd0aENoZWNrZXI6IGNvbmZpZz8uYm9keUxlbmd0aENoZWNrZXIgPz8gY2FsY3VsYXRlQm9keUxlbmd0aCxcbiAgICAgICAgY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcjogY29uZmlnPy5jcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyID8/IGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIsXG4gICAgICAgIGRlZmF1bHRVc2VyQWdlbnRQcm92aWRlcjogY29uZmlnPy5kZWZhdWx0VXNlckFnZW50UHJvdmlkZXIgPz9cbiAgICAgICAgICAgIGRlZmF1bHRVc2VyQWdlbnQoeyBzZXJ2aWNlSWQ6IGNsaWVudFNoYXJlZFZhbHVlcy5zZXJ2aWNlSWQsIGNsaWVudFZlcnNpb246IHBhY2thZ2VJbmZvLnZlcnNpb24gfSksXG4gICAgICAgIGRpc2FibGVSZXF1ZXN0Q29tcHJlc3Npb246IGNvbmZpZz8uZGlzYWJsZVJlcXVlc3RDb21wcmVzc2lvbiA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTl9DT05GSUdfT1BUSU9OUyksXG4gICAgICAgIG1heEF0dGVtcHRzOiBjb25maWc/Lm1heEF0dGVtcHRzID8/IGxvYWROb2RlQ29uZmlnKE5PREVfTUFYX0FUVEVNUFRfQ09ORklHX09QVElPTlMpLFxuICAgICAgICByZWdpb246IGNvbmZpZz8ucmVnaW9uID8/IGxvYWROb2RlQ29uZmlnKE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TLCBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TKSxcbiAgICAgICAgcmVxdWVzdEhhbmRsZXI6IGNvbmZpZz8ucmVxdWVzdEhhbmRsZXIgPz8gbmV3IFJlcXVlc3RIYW5kbGVyKGRlZmF1bHRDb25maWdQcm92aWRlciksXG4gICAgICAgIHJlcXVlc3RNaW5Db21wcmVzc2lvblNpemVCeXRlczogY29uZmlnPy5yZXF1ZXN0TWluQ29tcHJlc3Npb25TaXplQnl0ZXMgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTX0NPTkZJR19PUFRJT05TKSxcbiAgICAgICAgcmV0cnlNb2RlOiBjb25maWc/LnJldHJ5TW9kZSA/P1xuICAgICAgICAgICAgbG9hZE5vZGVDb25maWcoe1xuICAgICAgICAgICAgICAgIC4uLk5PREVfUkVUUllfTU9ERV9DT05GSUdfT1BUSU9OUyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBhc3luYyAoKSA9PiAoYXdhaXQgZGVmYXVsdENvbmZpZ1Byb3ZpZGVyKCkpLnJldHJ5TW9kZSB8fCBERUZBVUxUX1JFVFJZX01PREUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgc2hhMjU2OiBjb25maWc/LnNoYTI1NiA/PyBIYXNoLmJpbmQobnVsbCwgXCJzaGEyNTZcIiksXG4gICAgICAgIHN0cmVhbUNvbGxlY3RvcjogY29uZmlnPy5zdHJlYW1Db2xsZWN0b3IgPz8gc3RyZWFtQ29sbGVjdG9yLFxuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogY29uZmlnPy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMpLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IGNvbmZpZz8udXNlRmlwc0VuZHBvaW50ID8/IGxvYWROb2RlQ29uZmlnKE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMpLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgQXdzU2RrU2lnVjRTaWduZXIgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgTm9PcExvZ2dlciB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IHBhcnNlVXJsIH0gZnJvbSBcIkBzbWl0aHkvdXJsLXBhcnNlclwiO1xuaW1wb3J0IHsgZnJvbUJhc2U2NCwgdG9CYXNlNjQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiO1xuaW1wb3J0IHsgZnJvbVV0ZjgsIHRvVXRmOCB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXRmOFwiO1xuaW1wb3J0IHsgZGVmYXVsdENsb3VkV2F0Y2hIdHRwQXV0aFNjaGVtZVByb3ZpZGVyIH0gZnJvbSBcIi4vYXV0aC9odHRwQXV0aFNjaGVtZVByb3ZpZGVyXCI7XG5pbXBvcnQgeyBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciB9IGZyb20gXCIuL2VuZHBvaW50L2VuZHBvaW50UmVzb2x2ZXJcIjtcbmV4cG9ydCBjb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwaVZlcnNpb246IFwiMjAxMC0wOC0wMVwiLFxuICAgICAgICBiYXNlNjREZWNvZGVyOiBjb25maWc/LmJhc2U2NERlY29kZXIgPz8gZnJvbUJhc2U2NCxcbiAgICAgICAgYmFzZTY0RW5jb2RlcjogY29uZmlnPy5iYXNlNjRFbmNvZGVyID8/IHRvQmFzZTY0LFxuICAgICAgICBkaXNhYmxlSG9zdFByZWZpeDogY29uZmlnPy5kaXNhYmxlSG9zdFByZWZpeCA/PyBmYWxzZSxcbiAgICAgICAgZW5kcG9pbnRQcm92aWRlcjogY29uZmlnPy5lbmRwb2ludFByb3ZpZGVyID8/IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyLFxuICAgICAgICBleHRlbnNpb25zOiBjb25maWc/LmV4dGVuc2lvbnMgPz8gW10sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZz8uaHR0cEF1dGhTY2hlbWVQcm92aWRlciA/PyBkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIsXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnPy5odHRwQXV0aFNjaGVtZXMgPz8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlcjogKGlwYykgPT4gaXBjLmdldElkZW50aXR5UHJvdmlkZXIoXCJhd3MuYXV0aCNzaWd2NFwiKSxcbiAgICAgICAgICAgICAgICBzaWduZXI6IG5ldyBBd3NTZGtTaWdWNFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbG9nZ2VyOiBjb25maWc/LmxvZ2dlciA/PyBuZXcgTm9PcExvZ2dlcigpLFxuICAgICAgICBzZXJ2aWNlSWQ6IGNvbmZpZz8uc2VydmljZUlkID8/IFwiQ2xvdWRXYXRjaFwiLFxuICAgICAgICB1cmxQYXJzZXI6IGNvbmZpZz8udXJsUGFyc2VyID8/IHBhcnNlVXJsLFxuICAgICAgICB1dGY4RGVjb2RlcjogY29uZmlnPy51dGY4RGVjb2RlciA/PyBmcm9tVXRmOCxcbiAgICAgICAgdXRmOEVuY29kZXI6IGNvbmZpZz8udXRmOEVuY29kZXIgPz8gdG9VdGY4LFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlQ29tcHJlc3Npb25Db25maWcgPSAoaW5wdXQpID0+ICh7XG4gICAgLi4uaW5wdXQsXG4gICAgZGlzYWJsZVJlcXVlc3RDb21wcmVzc2lvbjogbm9ybWFsaXplUHJvdmlkZXIoaW5wdXQuZGlzYWJsZVJlcXVlc3RDb21wcmVzc2lvbiksXG4gICAgcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RNaW5Db21wcmVzc2lvblNpemVCeXRlcyA9IGF3YWl0IG5vcm1hbGl6ZVByb3ZpZGVyKGlucHV0LnJlcXVlc3RNaW5Db21wcmVzc2lvblNpemVCeXRlcykoKTtcbiAgICAgICAgaWYgKHJlcXVlc3RNaW5Db21wcmVzc2lvblNpemVCeXRlcyA8IDAgfHwgcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzID4gMTA0ODU3NjApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIHZhbHVlIGZvciByZXF1ZXN0TWluQ29tcHJlc3Npb25TaXplQnl0ZXMgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwNDg1NzYwIGluY2x1c2l2ZS4gXCIgK1xuICAgICAgICAgICAgICAgIGBUaGUgcHJvdmlkZWQgdmFsdWUgJHtyZXF1ZXN0TWluQ29tcHJlc3Npb25TaXplQnl0ZXN9IGlzIG91dHNpZGUgdGhpcyByYW5nZS5cImApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0TWluQ29tcHJlc3Npb25TaXplQnl0ZXM7XG4gICAgfSxcbn0pO1xuIiwiaW1wb3J0IHsgZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIH0gZnJvbSBcIkBhd3Mtc2RrL3JlZ2lvbi1jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvblwiO1xuY29uc3QgYXNQYXJ0aWFsID0gKHQpID0+IHQ7XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zID0gKHJ1bnRpbWVDb25maWcsIGV4dGVuc2lvbnMpID0+IHtcbiAgICBjb25zdCBleHRlbnNpb25Db25maWd1cmF0aW9uID0ge1xuICAgICAgICAuLi5hc1BhcnRpYWwoZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSksXG4gICAgICAgIC4uLmFzUGFydGlhbChnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSksXG4gICAgICAgIC4uLmFzUGFydGlhbChnZXRIdHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZykpLFxuICAgICAgICAuLi5hc1BhcnRpYWwoZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpKSxcbiAgICB9O1xuICAgIGV4dGVuc2lvbnMuZm9yRWFjaCgoZXh0ZW5zaW9uKSA9PiBleHRlbnNpb24uY29uZmlndXJlKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5ydW50aW1lQ29uZmlnLFxuICAgICAgICAuLi5yZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihleHRlbnNpb25Db25maWd1cmF0aW9uKSxcbiAgICAgICAgLi4ucmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgICAgICAuLi5yZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgICAgICAuLi5yZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgU2VydmljZUV4Y2VwdGlvbiBhcyBfX1NlcnZpY2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IHsgX19TZXJ2aWNlRXhjZXB0aW9uIH07XG5leHBvcnQgY2xhc3MgQ2xvdWRXYXRjaFNlcnZpY2VFeGNlcHRpb24gZXh0ZW5kcyBfX1NlcnZpY2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDbG91ZFdhdGNoU2VydmljZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENsb3VkV2F0Y2hTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuL0Nsb3VkV2F0Y2hTZXJ2aWNlRXhjZXB0aW9uXCI7XG5leHBvcnQgY29uc3QgQWN0aW9uc1N1cHByZXNzZWRCeSA9IHtcbiAgICBBbGFybTogXCJBbGFybVwiLFxuICAgIEV4dGVuc2lvblBlcmlvZDogXCJFeHRlbnNpb25QZXJpb2RcIixcbiAgICBXYWl0UGVyaW9kOiBcIldhaXRQZXJpb2RcIixcbn07XG5leHBvcnQgY29uc3QgQWxhcm1UeXBlID0ge1xuICAgIENvbXBvc2l0ZUFsYXJtOiBcIkNvbXBvc2l0ZUFsYXJtXCIsXG4gICAgTWV0cmljQWxhcm06IFwiTWV0cmljQWxhcm1cIixcbn07XG5leHBvcnQgY29uc3QgSGlzdG9yeUl0ZW1UeXBlID0ge1xuICAgIEFjdGlvbjogXCJBY3Rpb25cIixcbiAgICBDb25maWd1cmF0aW9uVXBkYXRlOiBcIkNvbmZpZ3VyYXRpb25VcGRhdGVcIixcbiAgICBTdGF0ZVVwZGF0ZTogXCJTdGF0ZVVwZGF0ZVwiLFxufTtcbmV4cG9ydCBjb25zdCBTdGFuZGFyZFVuaXQgPSB7XG4gICAgQml0czogXCJCaXRzXCIsXG4gICAgQml0c19TZWNvbmQ6IFwiQml0cy9TZWNvbmRcIixcbiAgICBCeXRlczogXCJCeXRlc1wiLFxuICAgIEJ5dGVzX1NlY29uZDogXCJCeXRlcy9TZWNvbmRcIixcbiAgICBDb3VudDogXCJDb3VudFwiLFxuICAgIENvdW50X1NlY29uZDogXCJDb3VudC9TZWNvbmRcIixcbiAgICBHaWdhYml0czogXCJHaWdhYml0c1wiLFxuICAgIEdpZ2FiaXRzX1NlY29uZDogXCJHaWdhYml0cy9TZWNvbmRcIixcbiAgICBHaWdhYnl0ZXM6IFwiR2lnYWJ5dGVzXCIsXG4gICAgR2lnYWJ5dGVzX1NlY29uZDogXCJHaWdhYnl0ZXMvU2Vjb25kXCIsXG4gICAgS2lsb2JpdHM6IFwiS2lsb2JpdHNcIixcbiAgICBLaWxvYml0c19TZWNvbmQ6IFwiS2lsb2JpdHMvU2Vjb25kXCIsXG4gICAgS2lsb2J5dGVzOiBcIktpbG9ieXRlc1wiLFxuICAgIEtpbG9ieXRlc19TZWNvbmQ6IFwiS2lsb2J5dGVzL1NlY29uZFwiLFxuICAgIE1lZ2FiaXRzOiBcIk1lZ2FiaXRzXCIsXG4gICAgTWVnYWJpdHNfU2Vjb25kOiBcIk1lZ2FiaXRzL1NlY29uZFwiLFxuICAgIE1lZ2FieXRlczogXCJNZWdhYnl0ZXNcIixcbiAgICBNZWdhYnl0ZXNfU2Vjb25kOiBcIk1lZ2FieXRlcy9TZWNvbmRcIixcbiAgICBNaWNyb3NlY29uZHM6IFwiTWljcm9zZWNvbmRzXCIsXG4gICAgTWlsbGlzZWNvbmRzOiBcIk1pbGxpc2Vjb25kc1wiLFxuICAgIE5vbmU6IFwiTm9uZVwiLFxuICAgIFBlcmNlbnQ6IFwiUGVyY2VudFwiLFxuICAgIFNlY29uZHM6IFwiU2Vjb25kc1wiLFxuICAgIFRlcmFiaXRzOiBcIlRlcmFiaXRzXCIsXG4gICAgVGVyYWJpdHNfU2Vjb25kOiBcIlRlcmFiaXRzL1NlY29uZFwiLFxuICAgIFRlcmFieXRlczogXCJUZXJhYnl0ZXNcIixcbiAgICBUZXJhYnl0ZXNfU2Vjb25kOiBcIlRlcmFieXRlcy9TZWNvbmRcIixcbn07XG5leHBvcnQgY29uc3QgQW5vbWFseURldGVjdG9yU3RhdGVWYWx1ZSA9IHtcbiAgICBQRU5ESU5HX1RSQUlOSU5HOiBcIlBFTkRJTkdfVFJBSU5JTkdcIixcbiAgICBUUkFJTkVEOiBcIlRSQUlORURcIixcbiAgICBUUkFJTkVEX0lOU1VGRklDSUVOVF9EQVRBOiBcIlRSQUlORURfSU5TVUZGSUNJRU5UX0RBVEFcIixcbn07XG5leHBvcnQgY29uc3QgQW5vbWFseURldGVjdG9yVHlwZSA9IHtcbiAgICBNRVRSSUNfTUFUSDogXCJNRVRSSUNfTUFUSFwiLFxuICAgIFNJTkdMRV9NRVRSSUM6IFwiU0lOR0xFX01FVFJJQ1wiLFxufTtcbmV4cG9ydCBjb25zdCBDb21wYXJpc29uT3BlcmF0b3IgPSB7XG4gICAgR3JlYXRlclRoYW5PckVxdWFsVG9UaHJlc2hvbGQ6IFwiR3JlYXRlclRoYW5PckVxdWFsVG9UaHJlc2hvbGRcIixcbiAgICBHcmVhdGVyVGhhblRocmVzaG9sZDogXCJHcmVhdGVyVGhhblRocmVzaG9sZFwiLFxuICAgIEdyZWF0ZXJUaGFuVXBwZXJUaHJlc2hvbGQ6IFwiR3JlYXRlclRoYW5VcHBlclRocmVzaG9sZFwiLFxuICAgIExlc3NUaGFuTG93ZXJPckdyZWF0ZXJUaGFuVXBwZXJUaHJlc2hvbGQ6IFwiTGVzc1RoYW5Mb3dlck9yR3JlYXRlclRoYW5VcHBlclRocmVzaG9sZFwiLFxuICAgIExlc3NUaGFuTG93ZXJUaHJlc2hvbGQ6IFwiTGVzc1RoYW5Mb3dlclRocmVzaG9sZFwiLFxuICAgIExlc3NUaGFuT3JFcXVhbFRvVGhyZXNob2xkOiBcIkxlc3NUaGFuT3JFcXVhbFRvVGhyZXNob2xkXCIsXG4gICAgTGVzc1RoYW5UaHJlc2hvbGQ6IFwiTGVzc1RoYW5UaHJlc2hvbGRcIixcbn07XG5leHBvcnQgY29uc3QgU3RhdGVWYWx1ZSA9IHtcbiAgICBBTEFSTTogXCJBTEFSTVwiLFxuICAgIElOU1VGRklDSUVOVF9EQVRBOiBcIklOU1VGRklDSUVOVF9EQVRBXCIsXG4gICAgT0s6IFwiT0tcIixcbn07XG5leHBvcnQgY2xhc3MgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZEludmFsaWRJbnB1dEVycm9yIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiRGFzaGJvYXJkSW52YWxpZElucHV0RXJyb3JcIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkRhc2hib2FyZEludmFsaWRJbnB1dEVycm9yXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIERhc2hib2FyZEludmFsaWRJbnB1dEVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuZGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzID0gb3B0cy5kYXNoYm9hcmRWYWxpZGF0aW9uTWVzc2FnZXM7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZE5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJEYXNoYm9hcmROb3RGb3VuZEVycm9yXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJEYXNoYm9hcmROb3RGb3VuZEVycm9yXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIERhc2hib2FyZE5vdEZvdW5kRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VOb3RGb3VuZCBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlTm90Rm91bmRcIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlc291cmNlTm90Rm91bmRcIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzb3VyY2VOb3RGb3VuZC5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnRlcm5hbFNlcnZpY2VGYXVsdCBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludGVybmFsU2VydmljZUZhdWx0XCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwic2VydmVyXCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnRlcm5hbFNlcnZpY2VGYXVsdFwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwic2VydmVyXCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnRlcm5hbFNlcnZpY2VGYXVsdC5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNaXNzaW5nUmVxdWlyZWRQYXJhbWV0ZXJFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5SZXNvdXJjZVR5cGUgPSBvcHRzLlJlc291cmNlVHlwZTtcbiAgICAgICAgdGhpcy5SZXNvdXJjZUlkID0gb3B0cy5SZXNvdXJjZUlkO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IFNjYW5CeSA9IHtcbiAgICBUSU1FU1RBTVBfQVNDRU5ESU5HOiBcIlRpbWVzdGFtcEFzY2VuZGluZ1wiLFxuICAgIFRJTUVTVEFNUF9ERVNDRU5ESU5HOiBcIlRpbWVzdGFtcERlc2NlbmRpbmdcIixcbn07XG5leHBvcnQgY2xhc3MgSW52YWxpZE5leHRUb2tlbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWROZXh0VG9rZW5cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWROZXh0VG9rZW5cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZE5leHRUb2tlbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBFdmFsdWF0aW9uU3RhdGUgPSB7XG4gICAgUEFSVElBTF9EQVRBOiBcIlBBUlRJQUxfREFUQVwiLFxufTtcbmV4cG9ydCBjb25zdCBTdGF0aXN0aWMgPSB7XG4gICAgQXZlcmFnZTogXCJBdmVyYWdlXCIsXG4gICAgTWF4aW11bTogXCJNYXhpbXVtXCIsXG4gICAgTWluaW11bTogXCJNaW5pbXVtXCIsXG4gICAgU2FtcGxlQ291bnQ6IFwiU2FtcGxlQ291bnRcIixcbiAgICBTdW06IFwiU3VtXCIsXG59O1xuZXhwb3J0IGNsYXNzIExpbWl0RXhjZWVkZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIExpbWl0RXhjZWVkZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBTdGF0dXNDb2RlID0ge1xuICAgIENPTVBMRVRFOiBcIkNvbXBsZXRlXCIsXG4gICAgRk9SQklEREVOOiBcIkZvcmJpZGRlblwiLFxuICAgIElOVEVSTkFMX0VSUk9SOiBcIkludGVybmFsRXJyb3JcIixcbiAgICBQQVJUSUFMX0RBVEE6IFwiUGFydGlhbERhdGFcIixcbn07XG5leHBvcnQgY29uc3QgTWV0cmljU3RyZWFtT3V0cHV0Rm9ybWF0ID0ge1xuICAgIEpTT046IFwianNvblwiLFxuICAgIE9QRU5fVEVMRU1FVFJZXzBfNzogXCJvcGVudGVsZW1ldHJ5MC43XCIsXG4gICAgT1BFTl9URUxFTUVUUllfMV8wOiBcIm9wZW50ZWxlbWV0cnkxLjBcIixcbn07XG5leHBvcnQgY29uc3QgUmVjZW50bHlBY3RpdmUgPSB7XG4gICAgUFQzSDogXCJQVDNIXCIsXG59O1xuZXhwb3J0IGNsYXNzIExpbWl0RXhjZWVkZWRGYXVsdCBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkxpbWl0RXhjZWVkZWRGYXVsdFwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTGltaXRFeGNlZWRlZEZhdWx0XCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIExpbWl0RXhjZWVkZWRGYXVsdC5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRm9ybWF0RmF1bHQgZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkRm9ybWF0RmF1bHRcIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRGb3JtYXRGYXVsdFwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkRm9ybWF0RmF1bHQucHJvdG90eXBlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCBhcyBfX0h0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgY29sbGVjdEJvZHksIGRlY29yYXRlU2VydmljZUV4Y2VwdGlvbiBhcyBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbiwgZXhwZWN0Tm9uTnVsbCBhcyBfX2V4cGVjdE5vbk51bGwsIGV4cGVjdFN0cmluZyBhcyBfX2V4cGVjdFN0cmluZywgZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQgYXMgX19leHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCwgZ2V0QXJyYXlJZlNpbmdsZUl0ZW0gYXMgX19nZXRBcnJheUlmU2luZ2xlSXRlbSwgZ2V0VmFsdWVGcm9tVGV4dE5vZGUgYXMgX19nZXRWYWx1ZUZyb21UZXh0Tm9kZSwgcGFyc2VCb29sZWFuIGFzIF9fcGFyc2VCb29sZWFuLCBwYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQgYXMgX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQsIHNlcmlhbGl6ZUZsb2F0IGFzIF9fc2VyaWFsaXplRmxvYXQsIHN0cmljdFBhcnNlRmxvYXQgYXMgX19zdHJpY3RQYXJzZUZsb2F0LCBzdHJpY3RQYXJzZUludDMyIGFzIF9fc3RyaWN0UGFyc2VJbnQzMiwgc3RyaWN0UGFyc2VMb25nIGFzIF9fc3RyaWN0UGFyc2VMb25nLCB3aXRoQmFzZUV4Y2VwdGlvbiwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBYTUxQYXJzZXIgfSBmcm9tIFwiZmFzdC14bWwtcGFyc2VyXCI7XG5pbXBvcnQgeyBDbG91ZFdhdGNoU2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi4vbW9kZWxzL0Nsb3VkV2F0Y2hTZXJ2aWNlRXhjZXB0aW9uXCI7XG5pbXBvcnQgeyBDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uLCBEYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvciwgSW50ZXJuYWxTZXJ2aWNlRmF1bHQsIEludmFsaWRGb3JtYXRGYXVsdCwgSW52YWxpZE5leHRUb2tlbiwgSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uLCBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24sIExpbWl0RXhjZWVkZWRFeGNlcHRpb24sIExpbWl0RXhjZWVkZWRGYXVsdCwgTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uLCBSZXNvdXJjZU5vdEZvdW5kLCBSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uLCB9IGZyb20gXCIuLi9tb2RlbHMvbW9kZWxzXzBcIjtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVBbGFybXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlQWxhcm1zSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfREEsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUFub21hbHlEZXRlY3RvckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVBbm9tYWx5RGV0ZWN0b3JJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQUQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZURhc2hib2FyZHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlRGFzaGJvYXJkc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVJbnNpZ2h0UnVsZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlSW5zaWdodFJ1bGVzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRElSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVNZXRyaWNTdHJlYW1Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlTWV0cmljU3RyZWFtSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRE1TLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUFsYXJtSGlzdG9yeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZXNjcmliZUFsYXJtSGlzdG9yeUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RBSCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBbGFybXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVzY3JpYmVBbGFybXNJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQWUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQWxhcm1zRm9yTWV0cmljQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Rlc2NyaWJlQWxhcm1zRm9yTWV0cmljSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfREFGTSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBbm9tYWx5RGV0ZWN0b3JzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Rlc2NyaWJlQW5vbWFseURldGVjdG9yc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RBRGUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Rlc2NyaWJlSW5zaWdodFJ1bGVzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRElSZSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGlzYWJsZUFsYXJtQWN0aW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EaXNhYmxlQWxhcm1BY3Rpb25zSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfREFBLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EaXNhYmxlSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Rpc2FibGVJbnNpZ2h0UnVsZXNJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9ESVJpLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9FbmFibGVBbGFybUFjdGlvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRW5hYmxlQWxhcm1BY3Rpb25zSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRUFBLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9FbmFibGVJbnNpZ2h0UnVsZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRW5hYmxlSW5zaWdodFJ1bGVzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRUlSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXREYXNoYm9hcmRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0RGFzaGJvYXJkSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR0QsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldEluc2lnaHRSdWxlUmVwb3J0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0dldEluc2lnaHRSdWxlUmVwb3J0SW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR0lSUixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0TWV0cmljRGF0YUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRNZXRyaWNEYXRhSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR01ELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRNZXRyaWNTdGF0aXN0aWNzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0dldE1ldHJpY1N0YXRpc3RpY3NJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9HTVMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldE1ldHJpY1N0cmVhbUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRNZXRyaWNTdHJlYW1JbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9HTVNlLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRNZXRyaWNXaWRnZXRJbWFnZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRNZXRyaWNXaWRnZXRJbWFnZUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dNV0ksXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3REYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3REYXNoYm9hcmRzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfTEQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RNYW5hZ2VkSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RNYW5hZ2VkSW5zaWdodFJ1bGVzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfTE1JUixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdE1ldHJpY3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfTGlzdE1ldHJpY3NJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9MTSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdE1ldHJpY1N0cmVhbXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfTGlzdE1ldHJpY1N0cmVhbXNJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9MTVMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUYWdzRm9yUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfTGlzdFRhZ3NGb3JSZXNvdXJjZUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xURlIsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1B1dEFub21hbHlEZXRlY3RvckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9QdXRBbm9tYWx5RGV0ZWN0b3JJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9QQUQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1B1dENvbXBvc2l0ZUFsYXJtQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1B1dENvbXBvc2l0ZUFsYXJtSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUENBLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXREYXNoYm9hcmRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfUHV0RGFzaGJvYXJkSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUEQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1B1dEluc2lnaHRSdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1B1dEluc2lnaHRSdWxlSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUElSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRNYW5hZ2VkSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1B1dE1hbmFnZWRJbnNpZ2h0UnVsZXNJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9QTUlSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRNZXRyaWNBbGFybUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9QdXRNZXRyaWNBbGFybUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1BNQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0TWV0cmljRGF0YUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9QdXRNZXRyaWNEYXRhSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUE1ELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRNZXRyaWNTdHJlYW1Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfUHV0TWV0cmljU3RyZWFtSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUE1TLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZXRBbGFybVN0YXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1NldEFsYXJtU3RhdGVJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TQVMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1N0YXJ0TWV0cmljU3RyZWFtc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TdGFydE1ldHJpY1N0cmVhbXNJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TTVMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1N0b3BNZXRyaWNTdHJlYW1zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1N0b3BNZXRyaWNTdHJlYW1zSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfU01TdCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVGFnUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVGFnUmVzb3VyY2VJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9UUixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVW50YWdSZXNvdXJjZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9VbnRhZ1Jlc291cmNlSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVVIsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUFsYXJtc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUFub21hbHlEZXRlY3RvckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVsZXRlQW5vbWFseURldGVjdG9yT3V0cHV0KGRhdGEuRGVsZXRlQW5vbWFseURldGVjdG9yUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVEYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVEYXNoYm9hcmRzT3V0cHV0KGRhdGEuRGVsZXRlRGFzaGJvYXJkc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVJbnNpZ2h0UnVsZXNPdXRwdXQoZGF0YS5EZWxldGVJbnNpZ2h0UnVsZXNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZU1ldHJpY1N0cmVhbUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVsZXRlTWV0cmljU3RyZWFtT3V0cHV0KGRhdGEuRGVsZXRlTWV0cmljU3RyZWFtUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFsYXJtSGlzdG9yeUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVBbGFybUhpc3RvcnlPdXRwdXQoZGF0YS5EZXNjcmliZUFsYXJtSGlzdG9yeVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVBbGFybXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlQWxhcm1zT3V0cHV0KGRhdGEuRGVzY3JpYmVBbGFybXNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQWxhcm1zRm9yTWV0cmljQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZXNjcmliZUFsYXJtc0Zvck1ldHJpY091dHB1dChkYXRhLkRlc2NyaWJlQWxhcm1zRm9yTWV0cmljUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFub21hbHlEZXRlY3RvcnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlQW5vbWFseURldGVjdG9yc091dHB1dChkYXRhLkRlc2NyaWJlQW5vbWFseURldGVjdG9yc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVJbnNpZ2h0UnVsZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlSW5zaWdodFJ1bGVzT3V0cHV0KGRhdGEuRGVzY3JpYmVJbnNpZ2h0UnVsZXNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rpc2FibGVBbGFybUFjdGlvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EaXNhYmxlSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EaXNhYmxlSW5zaWdodFJ1bGVzT3V0cHV0KGRhdGEuRGlzYWJsZUluc2lnaHRSdWxlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRW5hYmxlQWxhcm1BY3Rpb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRW5hYmxlSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9FbmFibGVJbnNpZ2h0UnVsZXNPdXRwdXQoZGF0YS5FbmFibGVJbnNpZ2h0UnVsZXNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldERhc2hib2FyZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0RGFzaGJvYXJkT3V0cHV0KGRhdGEuR2V0RGFzaGJvYXJkUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRJbnNpZ2h0UnVsZVJlcG9ydENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0SW5zaWdodFJ1bGVSZXBvcnRPdXRwdXQoZGF0YS5HZXRJbnNpZ2h0UnVsZVJlcG9ydFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0TWV0cmljRGF0YUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0TWV0cmljRGF0YU91dHB1dChkYXRhLkdldE1ldHJpY0RhdGFSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldE1ldHJpY1N0YXRpc3RpY3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldE1ldHJpY1N0YXRpc3RpY3NPdXRwdXQoZGF0YS5HZXRNZXRyaWNTdGF0aXN0aWNzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRNZXRyaWNTdHJlYW1Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldE1ldHJpY1N0cmVhbU91dHB1dChkYXRhLkdldE1ldHJpY1N0cmVhbVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0TWV0cmljV2lkZ2V0SW1hZ2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldE1ldHJpY1dpZGdldEltYWdlT3V0cHV0KGRhdGEuR2V0TWV0cmljV2lkZ2V0SW1hZ2VSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3REYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0RGFzaGJvYXJkc091dHB1dChkYXRhLkxpc3REYXNoYm9hcmRzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0TWFuYWdlZEluc2lnaHRSdWxlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdE1hbmFnZWRJbnNpZ2h0UnVsZXNPdXRwdXQoZGF0YS5MaXN0TWFuYWdlZEluc2lnaHRSdWxlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdE1ldHJpY3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RNZXRyaWNzT3V0cHV0KGRhdGEuTGlzdE1ldHJpY3NSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RNZXRyaWNTdHJlYW1zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0TWV0cmljU3RyZWFtc091dHB1dChkYXRhLkxpc3RNZXRyaWNTdHJlYW1zUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VGFnc0ZvclJlc291cmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0VGFnc0ZvclJlc291cmNlT3V0cHV0KGRhdGEuTGlzdFRhZ3NGb3JSZXNvdXJjZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0QW5vbWFseURldGVjdG9yQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9QdXRBbm9tYWx5RGV0ZWN0b3JPdXRwdXQoZGF0YS5QdXRBbm9tYWx5RGV0ZWN0b3JSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1B1dENvbXBvc2l0ZUFsYXJtQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0RGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9QdXREYXNoYm9hcmRPdXRwdXQoZGF0YS5QdXREYXNoYm9hcmRSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1B1dEluc2lnaHRSdWxlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9QdXRJbnNpZ2h0UnVsZU91dHB1dChkYXRhLlB1dEluc2lnaHRSdWxlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXRNYW5hZ2VkSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9QdXRNYW5hZ2VkSW5zaWdodFJ1bGVzT3V0cHV0KGRhdGEuUHV0TWFuYWdlZEluc2lnaHRSdWxlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0TWV0cmljQWxhcm1Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXRNZXRyaWNEYXRhQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0TWV0cmljU3RyZWFtQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9QdXRNZXRyaWNTdHJlYW1PdXRwdXQoZGF0YS5QdXRNZXRyaWNTdHJlYW1SZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1NldEFsYXJtU3RhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdGFydE1ldHJpY1N0cmVhbXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1N0YXJ0TWV0cmljU3RyZWFtc091dHB1dChkYXRhLlN0YXJ0TWV0cmljU3RyZWFtc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU3RvcE1ldHJpY1N0cmVhbXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1N0b3BNZXRyaWNTdHJlYW1zT3V0cHV0KGRhdGEuU3RvcE1ldHJpY1N0cmVhbXNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1RhZ1Jlc291cmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9UYWdSZXNvdXJjZU91dHB1dChkYXRhLlRhZ1Jlc291cmNlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VbnRhZ1Jlc291cmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9VbnRhZ1Jlc291cmNlT3V0cHV0KGRhdGEuVW50YWdSZXNvdXJjZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5jb25zdCBkZV9Db21tYW5kRXJyb3IgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcGFyc2VkT3V0cHV0ID0ge1xuICAgICAgICAuLi5vdXRwdXQsXG4gICAgICAgIGJvZHk6IGF3YWl0IHBhcnNlRXJyb3JCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSxcbiAgICB9O1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IGxvYWRRdWVyeUVycm9yQ29kZShvdXRwdXQsIHBhcnNlZE91dHB1dC5ib2R5KTtcbiAgICBzd2l0Y2ggKGVycm9yQ29kZSkge1xuICAgICAgICBjYXNlIFwiUmVzb3VyY2VOb3RGb3VuZFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHdhdGNoI1Jlc291cmNlTm90Rm91bmRcIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Jlc291cmNlTm90Rm91bmRSZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludGVybmFsU2VydmljZUVycm9yXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3Vkd2F0Y2gjSW50ZXJuYWxTZXJ2aWNlRmF1bHRcIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludGVybmFsU2VydmljZUZhdWx0UmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFBhcmFtZXRlclZhbHVlXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3Vkd2F0Y2gjSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk1pc3NpbmdQYXJhbWV0ZXJcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNNaXNzaW5nUmVxdWlyZWRQYXJhbWV0ZXJFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX01pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHdhdGNoI1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWROZXh0VG9rZW5cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNJbnZhbGlkTmV4dFRva2VuXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkTmV4dFRva2VuUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3Vkd2F0Y2gjTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiTGltaXRFeGNlZWRlZFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHdhdGNoI0xpbWl0RXhjZWVkZWRGYXVsdFwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTGltaXRFeGNlZWRlZEZhdWx0UmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUGFyYW1ldGVySW5wdXRcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNEYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvclwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRGFzaGJvYXJkSW52YWxpZElucHV0RXJyb3JSZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Db25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkRm9ybWF0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3Vkd2F0Y2gjSW52YWxpZEZvcm1hdEZhdWx0XCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkRm9ybWF0RmF1bHRSZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0RlZmF1bHRFcnJvcih7XG4gICAgICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgICAgIHBhcnNlZEJvZHk6IHBhcnNlZEJvZHkuRXJyb3IsXG4gICAgICAgICAgICAgICAgZXJyb3JDb2RlLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcbmNvbnN0IGRlX0NvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0NvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZEludmFsaWRJbnB1dEVycm9yUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9EYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvcihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRGFzaGJvYXJkSW52YWxpZElucHV0RXJyb3Ioe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludGVybmFsU2VydmljZUZhdWx0UmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnRlcm5hbFNlcnZpY2VGYXVsdChib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW50ZXJuYWxTZXJ2aWNlRmF1bHQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRGb3JtYXRGYXVsdFJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZEZvcm1hdEZhdWx0KGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRm9ybWF0RmF1bHQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWROZXh0VG9rZW5SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWROZXh0VG9rZW4oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWROZXh0VG9rZW4oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IExpbWl0RXhjZWVkZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0xpbWl0RXhjZWVkZWRGYXVsdFJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfTGltaXRFeGNlZWRlZEZhdWx0KGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBMaW1pdEV4Y2VlZGVkRmF1bHQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX01pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNaXNzaW5nUmVxdWlyZWRQYXJhbWV0ZXJFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlTm90Rm91bmRSZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX1Jlc291cmNlTm90Rm91bmQoYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlTm90Rm91bmQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IHNlX0FsYXJtTmFtZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQWxhcm1UeXBlcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Bbm9tYWx5RGV0ZWN0b3JDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRVRSXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Bbm9tYWx5RGV0ZWN0b3JFeGNsdWRlZFRpbWVSYW5nZXMoaW5wdXRbX0VUUl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0VUUl0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5FeGNsdWRlZFRpbWVSYW5nZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBFeGNsdWRlZFRpbWVSYW5nZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NVF0gPSBpbnB1dFtfTVRdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Bbm9tYWx5RGV0ZWN0b3JFeGNsdWRlZFRpbWVSYW5nZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmFuZ2UoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Fub21hbHlEZXRlY3RvclR5cGVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0NvdW50cyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBfX3NlcmlhbGl6ZUZsb2F0KGVudHJ5KTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EYXNoYm9hcmROYW1lcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVBbGFybXNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybU5hbWVzKGlucHV0W19BTl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FOXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZUFub21hbHlEZXRlY3RvcklucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TXSA9IGlucHV0W19TXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TTUFEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9TaW5nbGVNZXRyaWNBbm9tYWx5RGV0ZWN0b3IoaW5wdXRbX1NNQURdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU2luZ2xlTWV0cmljQW5vbWFseURldGVjdG9yLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTU1BRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljTWF0aEFub21hbHlEZXRlY3RvcihpbnB1dFtfTU1BRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWNNYXRoQW5vbWFseURldGVjdG9yLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZURhc2hib2FyZHNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EYXNoYm9hcmROYW1lcyhpbnB1dFtfRE5dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19ETl0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EYXNoYm9hcmROYW1lcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERhc2hib2FyZE5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZUluc2lnaHRSdWxlc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0luc2lnaHRSdWxlTmFtZXMoaW5wdXRbX1JOXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfUk5dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUnVsZU5hbWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUnVsZU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZU1ldHJpY1N0cmVhbUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTmFdID0gaW5wdXRbX05hXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVzY3JpYmVBbGFybUhpc3RvcnlJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FObF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19BTmxdID0gaW5wdXRbX0FObF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FsYXJtVHlwZXMoaW5wdXRbX0FUXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQVRdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuQWxhcm1UeXBlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFsYXJtVHlwZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19ISVRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSElUXSA9IGlucHV0W19ISVRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NEXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NEXSA9IGlucHV0W19TRF0udG9JU09TdHJpbmcoKS5zcGxpdChcIi5cIilbMF0gKyBcIlpcIjtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FRF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FRF0gPSBpbnB1dFtfRURdLnRvSVNPU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzBdICsgXCJaXCI7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTVJdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTVJdID0gaW5wdXRbX01SXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NCXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NCXSA9IGlucHV0W19TQl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlQWxhcm1zRm9yTWV0cmljSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU3RdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU3RdID0gaW5wdXRbX1N0XTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FU10gPSBpbnB1dFtfRVNdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19VXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1VdID0gaW5wdXRbX1VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZXNjcmliZUFsYXJtc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQU5dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FsYXJtTmFtZXMoaW5wdXRbX0FOXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQU5dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuQWxhcm1OYW1lcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFsYXJtTmFtZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BTlBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQU5QXSA9IGlucHV0W19BTlBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybVR5cGVzKGlucHV0W19BVF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FUXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtVHlwZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybVR5cGVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ09BTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DT0FOXSA9IGlucHV0W19DT0FOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QT0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BPQU5dID0gaW5wdXRbX1BPQU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NWXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NWXSA9IGlucHV0W19TVl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQVBdID0gaW5wdXRbX0FQXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NUl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NUl0gPSBpbnB1dFtfTVJdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlQW5vbWFseURldGVjdG9yc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRdID0gaW5wdXRbX05UXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NUmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTVJhXSA9IGlucHV0W19NUmFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTU5dID0gaW5wdXRbX01OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb25zKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EaW1lbnNpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGltZW5zaW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FEVF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQW5vbWFseURldGVjdG9yVHlwZXMoaW5wdXRbX0FEVF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FEVF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5Bbm9tYWx5RGV0ZWN0b3JUeXBlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFub21hbHlEZXRlY3RvclR5cGVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlSW5zaWdodFJ1bGVzSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01SYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NUmFdID0gaW5wdXRbX01SYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RpbWVuc2lvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05hXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05hXSA9IGlucHV0W19OYV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVmFdID0gaW5wdXRbX1ZhXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGltZW5zaW9uRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTmFdID0gaW5wdXRbX05hXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19WYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19WYV0gPSBpbnB1dFtfVmFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EaW1lbnNpb25GaWx0ZXJzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbkZpbHRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGltZW5zaW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb24oZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rpc2FibGVBbGFybUFjdGlvbnNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybU5hbWVzKGlucHV0W19BTl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FOXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rpc2FibGVJbnNpZ2h0UnVsZXNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9JbnNpZ2h0UnVsZU5hbWVzKGlucHV0W19STl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1JOXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlJ1bGVOYW1lcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFJ1bGVOYW1lcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9FbmFibGVBbGFybUFjdGlvbnNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybU5hbWVzKGlucHV0W19BTl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FOXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0VuYWJsZUluc2lnaHRSdWxlc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0luc2lnaHRSdWxlTmFtZXMoaW5wdXRbX1JOXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfUk5dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUnVsZU5hbWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUnVsZU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0V4dGVuZGVkU3RhdGlzdGljcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXREYXNoYm9hcmRJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ROYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19ETmFdID0gaW5wdXRbX0ROYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0dldEluc2lnaHRSdWxlUmVwb3J0SW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19STnVdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUk51XSA9IGlucHV0W19STnVdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NUXSA9IGlucHV0W19TVF0udG9JU09TdHJpbmcoKS5zcGxpdChcIi5cIilbMF0gKyBcIlpcIjtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FVF0gPSBpbnB1dFtfRVRdLnRvSVNPU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzBdICsgXCJaXCI7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NQ0NdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTUNDXSA9IGlucHV0W19NQ0NdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0luc2lnaHRSdWxlTWV0cmljTGlzdChpbnB1dFtfTV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX01dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuTWV0cmljcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1ldHJpY3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19PQl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19PQl0gPSBpbnB1dFtfT0JdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRNZXRyaWNEYXRhSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19NRFFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY0RhdGFRdWVyaWVzKGlucHV0W19NRFFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19NRFFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuTWV0cmljRGF0YVF1ZXJpZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWNEYXRhUXVlcmllcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NUXSA9IGlucHV0W19TVF0udG9JU09TdHJpbmcoKS5zcGxpdChcIi5cIilbMF0gKyBcIlpcIjtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FVF0gPSBpbnB1dFtfRVRdLnRvSVNPU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzBdICsgXCJaXCI7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRdID0gaW5wdXRbX05UXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TQl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TQl0gPSBpbnB1dFtfU0JdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01EXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01EXSA9IGlucHV0W19NRF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTE9dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0xhYmVsT3B0aW9ucyhpbnB1dFtfTE9dLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgTGFiZWxPcHRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0dldE1ldHJpY1N0YXRpc3RpY3NJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTU5dID0gaW5wdXRbX01OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb25zKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EaW1lbnNpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGltZW5zaW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NUXSA9IGlucHV0W19TVF0udG9JU09TdHJpbmcoKS5zcGxpdChcIi5cIilbMF0gKyBcIlpcIjtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FVF0gPSBpbnB1dFtfRVRdLnRvSVNPU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzBdICsgXCJaXCI7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TdGFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1N0YXRpc3RpY3MoaW5wdXRbX1N0YV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1N0YV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5TdGF0aXN0aWNzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU3RhdGlzdGljcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VTeF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRXh0ZW5kZWRTdGF0aXN0aWNzKGlucHV0W19FU3hdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19FU3hdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRXh0ZW5kZWRTdGF0aXN0aWNzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRXh0ZW5kZWRTdGF0aXN0aWNzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19VXSA9IGlucHV0W19VXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfR2V0TWV0cmljU3RyZWFtSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OYV0gPSBpbnB1dFtfTmFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRNZXRyaWNXaWRnZXRJbWFnZUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTVddICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTVddID0gaW5wdXRbX01XXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19PRl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19PRl0gPSBpbnB1dFtfT0ZdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9JbnNpZ2h0UnVsZU1ldHJpY0xpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfSW5zaWdodFJ1bGVOYW1lcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MYWJlbE9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RdID0gaW5wdXRbX1RdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0RGFzaGJvYXJkc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRE5QXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ROUF0gPSBpbnB1dFtfRE5QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0TWFuYWdlZEluc2lnaHRSdWxlc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUkFSTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SQVJOXSA9IGlucHV0W19SQVJOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01SYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NUmFdID0gaW5wdXRbX01SYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xpc3RNZXRyaWNzSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05dID0gaW5wdXRbX05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01OXSA9IGlucHV0W19NTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRGltZW5zaW9uRmlsdGVycyhpbnB1dFtfRF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0RdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGltZW5zaW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERpbWVuc2lvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JBXSA9IGlucHV0W19SQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSUxBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0lMQV0gPSBpbnB1dFtfSUxBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19PQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19PQV0gPSBpbnB1dFtfT0FdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0TWV0cmljU3RyZWFtc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRdID0gaW5wdXRbX05UXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NUmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTVJhXSA9IGlucHV0W19NUmFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0VGFnc0ZvclJlc291cmNlSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JBUk5dID0gaW5wdXRbX1JBUk5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NYW5hZ2VkUnVsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUkFSTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SQVJOXSA9IGlucHV0W19SQVJOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UYV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfVGFnTGlzdChpbnB1dFtfVGFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19UYV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5UYWdzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGFncy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NYW5hZ2VkUnVsZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWFuYWdlZFJ1bGUoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpYyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTU5dID0gaW5wdXRbX01OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb25zKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EaW1lbnNpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGltZW5zaW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NZXRyaWNEYXRhID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY0RhdHVtKGVudHJ5LCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfS4ke2tleX1gXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NZXRyaWNEYXRhUXVlcmllcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNEYXRhUXVlcnkoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY0RhdGFRdWVyeSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSV0gPSBpbnB1dFtfSV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTVNdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0YXQoaW5wdXRbX01TXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1ldHJpY1N0YXQuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VdID0gaW5wdXRbX0VdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0xdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTF0gPSBpbnB1dFtfTF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUkRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUkRdID0gaW5wdXRbX1JEXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BdID0gaW5wdXRbX1BdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FJXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FJXSA9IGlucHV0W19BSV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY0RhdHVtID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTU5dID0gaW5wdXRbX01OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb25zKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EaW1lbnNpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGltZW5zaW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RpXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RpXSA9IGlucHV0W19UaV0udG9JU09TdHJpbmcoKS5zcGxpdChcIi5cIilbMF0gKyBcIlpcIjtcbiAgICB9XG4gICAgaWYgKGlucHV0W19WYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19WYV0gPSBfX3NlcmlhbGl6ZUZsb2F0KGlucHV0W19WYV0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NWdF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfU3RhdGlzdGljU2V0KGlucHV0W19TVnRdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU3RhdGlzdGljVmFsdWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVmFsXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9WYWx1ZXMoaW5wdXRbX1ZhbF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1ZhbF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5WYWx1ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBWYWx1ZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Db3VudHMoaW5wdXRbX0NdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19DXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkNvdW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYENvdW50cy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1VdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVV0gPSBpbnB1dFtfVV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU1JdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU1JdID0gaW5wdXRbX1NSXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljTWF0aEFub21hbHlEZXRlY3RvciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX01EUV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljRGF0YVF1ZXJpZXMoaW5wdXRbX01EUV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX01EUV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5NZXRyaWNEYXRhUXVlcmllcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1ldHJpY0RhdGFRdWVyaWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY1N0YXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19NZV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljKGlucHV0W19NZV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BdID0gaW5wdXRbX1BdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU10gPSBpbnB1dFtfU107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19VXSA9IGlucHV0W19VXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljU3RyZWFtRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTmVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbUZpbHRlck1ldHJpY05hbWVzKGlucHV0W19NTmVdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19NTmVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuTWV0cmljTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWNOYW1lcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NZXRyaWNTdHJlYW1GaWx0ZXJNZXRyaWNOYW1lcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NZXRyaWNTdHJlYW1GaWx0ZXJzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbUZpbHRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljU3RyZWFtTmFtZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljU3RyZWFtU3RhdGlzdGljc0FkZGl0aW9uYWxTdGF0aXN0aWNzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSU1dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NJbmNsdWRlTWV0cmljcyhpbnB1dFtfSU1dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19JTV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5JbmNsdWRlTWV0cmljcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEluY2x1ZGVNZXRyaWNzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVNdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NBZGRpdGlvbmFsU3RhdGlzdGljcyhpbnB1dFtfQVNdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19BU10/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5BZGRpdGlvbmFsU3RhdGlzdGljcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFkZGl0aW9uYWxTdGF0aXN0aWNzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NDb25maWd1cmF0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQ29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljU3RyZWFtU3RhdGlzdGljc0luY2x1ZGVNZXRyaWNzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NNZXRyaWMoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NNZXRyaWMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05dID0gaW5wdXRbX05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01OXSA9IGlucHV0W19NTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1B1dEFub21hbHlEZXRlY3RvcklucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TXSA9IGlucHV0W19TXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19Db10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQW5vbWFseURldGVjdG9yQ29uZmlndXJhdGlvbihpbnB1dFtfQ29dLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgQ29uZmlndXJhdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NNQURdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1NpbmdsZU1ldHJpY0Fub21hbHlEZXRlY3RvcihpbnB1dFtfU01BRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBTaW5nbGVNZXRyaWNBbm9tYWx5RGV0ZWN0b3IuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTUFEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNNYXRoQW5vbWFseURldGVjdG9yKGlucHV0W19NTUFEXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1ldHJpY01hdGhBbm9tYWx5RGV0ZWN0b3IuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHV0Q29tcG9zaXRlQWxhcm1JbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FFXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FFXSA9IGlucHV0W19BRV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQUFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1Jlc291cmNlTGlzdChpbnB1dFtfQUFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19BQV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5BbGFybUFjdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybUFjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BRF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19BRF0gPSBpbnB1dFtfQURdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FObF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19BTmxdID0gaW5wdXRbX0FObF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVJdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQVJdID0gaW5wdXRbX0FSXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19JREFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1Jlc291cmNlTGlzdChpbnB1dFtfSURBXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfSURBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkluc3VmZmljaWVudERhdGFBY3Rpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSW5zdWZmaWNpZW50RGF0YUFjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19PS0FdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1Jlc291cmNlTGlzdChpbnB1dFtfT0tBXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfT0tBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLk9LQWN0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE9LQWN0aW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UYWdMaXN0KGlucHV0W19UYV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1RhXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUYWdzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVNjXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FTY10gPSBpbnB1dFtfQVNjXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BU1dQXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FTV1BdID0gaW5wdXRbX0FTV1BdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FTRVBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQVNFUF0gPSBpbnB1dFtfQVNFUF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1B1dERhc2hib2FyZElucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRE5hXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ROYV0gPSBpbnB1dFtfRE5hXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EQl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EQl0gPSBpbnB1dFtfREJdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9QdXRJbnNpZ2h0UnVsZUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUk51XSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JOdV0gPSBpbnB1dFtfUk51XTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SU10gPSBpbnB1dFtfUlNdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JEdV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SRHVdID0gaW5wdXRbX1JEdV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVGFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RhZ0xpc3QoaW5wdXRbX1RhXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVGFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVGFncyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRhZ3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHV0TWFuYWdlZEluc2lnaHRSdWxlc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTVJhbl0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWFuYWdlZFJ1bGVzKGlucHV0W19NUmFuXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfTVJhbl0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5NYW5hZ2VkUnVsZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNYW5hZ2VkUnVsZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHV0TWV0cmljQWxhcm1JbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FObF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19BTmxdID0gaW5wdXRbX0FObF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQURdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQURdID0gaW5wdXRbX0FEXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BRV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19BRV0gPSBpbnB1dFtfQUVdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX09LQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmVzb3VyY2VMaXN0KGlucHV0W19PS0FdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19PS0FdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuT0tBY3Rpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgT0tBY3Rpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQUFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1Jlc291cmNlTGlzdChpbnB1dFtfQUFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19BQV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5BbGFybUFjdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybUFjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19JREFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1Jlc291cmNlTGlzdChpbnB1dFtfSURBXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfSURBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkluc3VmZmljaWVudERhdGFBY3Rpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSW5zdWZmaWNpZW50RGF0YUFjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU3RdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU3RdID0gaW5wdXRbX1N0XTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FU10gPSBpbnB1dFtfRVNdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19VXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1VdID0gaW5wdXRbX1VdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VQXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VQXSA9IGlucHV0W19FUF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRFRBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0RUQV0gPSBpbnB1dFtfRFRBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UaF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UaF0gPSBfX3NlcmlhbGl6ZUZsb2F0KGlucHV0W19UaF0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0NPXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NPXSA9IGlucHV0W19DT107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVE1EXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RNRF0gPSBpbnB1dFtfVE1EXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FTFNDUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FTFNDUF0gPSBpbnB1dFtfRUxTQ1BdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY0RhdGFRdWVyaWVzKGlucHV0W19NXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfTV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5NZXRyaWNzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgTWV0cmljcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UYWdMaXN0KGlucHV0W19UYV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1RhXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUYWdzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVE1JXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RNSV0gPSBpbnB1dFtfVE1JXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHV0TWV0cmljRGF0YUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NRGVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY0RhdGEoaW5wdXRbX01EZV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX01EZV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5NZXRyaWNEYXRhID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgTWV0cmljRGF0YS4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9QdXRNZXRyaWNTdHJlYW1JbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05hXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05hXSA9IGlucHV0W19OYV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSUZdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbUZpbHRlcnMoaW5wdXRbX0lGXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfSUZdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuSW5jbHVkZUZpbHRlcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBJbmNsdWRlRmlsdGVycy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VGXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNTdHJlYW1GaWx0ZXJzKGlucHV0W19FRl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0VGXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkV4Y2x1ZGVGaWx0ZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRXhjbHVkZUZpbHRlcnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19GQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19GQV0gPSBpbnB1dFtfRkFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JBb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SQW9dID0gaW5wdXRbX1JBb107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfT0ZdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfT0ZdID0gaW5wdXRbX09GXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UYV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfVGFnTGlzdChpbnB1dFtfVGFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19UYV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5UYWdzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGFncy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NDXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQ29uZmlndXJhdGlvbnMoaW5wdXRbX1NDXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfU0NdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuU3RhdGlzdGljc0NvbmZpZ3VyYXRpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU3RhdGlzdGljc0NvbmZpZ3VyYXRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSUxBTV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JTEFNXSA9IGlucHV0W19JTEFNXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUmFuZ2UgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19TVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TVF0gPSBpbnB1dFtfU1RdLnRvSVNPU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzBdICsgXCJaXCI7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRVRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRVRdID0gaW5wdXRbX0VUXS50b0lTT1N0cmluZygpLnNwbGl0KFwiLlwiKVswXSArIFwiWlwiO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZXNvdXJjZUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2V0QWxhcm1TdGF0ZUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQU5sXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FObF0gPSBpbnB1dFtfQU5sXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TVl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TVl0gPSBpbnB1dFtfU1ZdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NSdF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TUnRdID0gaW5wdXRbX1NSdF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU1JEXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NSRF0gPSBpbnB1dFtfU1JEXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2luZ2xlTWV0cmljQW5vbWFseURldGVjdG9yID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TXSA9IGlucHV0W19TXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU3RhcnRNZXRyaWNTdHJlYW1zSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OYW1dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbU5hbWVzKGlucHV0W19OYW1dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19OYW1dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBOYW1lcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TdGF0aXN0aWNzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1N0YXRpc3RpY1NldCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1NDYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TQ2FdID0gX19zZXJpYWxpemVGbG9hdChpbnB1dFtfU0NhXSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU3VdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU3VdID0gX19zZXJpYWxpemVGbG9hdChpbnB1dFtfU3VdKTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NaV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NaV0gPSBfX3NlcmlhbGl6ZUZsb2F0KGlucHV0W19NaV0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01hXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01hXSA9IF9fc2VyaWFsaXplRmxvYXQoaW5wdXRbX01hXSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1N0b3BNZXRyaWNTdHJlYW1zSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OYW1dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbU5hbWVzKGlucHV0W19OYW1dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19OYW1dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBOYW1lcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9UYWcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19LXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0tdID0gaW5wdXRbX0tdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1ZhXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ZhXSA9IGlucHV0W19WYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1RhZ0tleUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVGFnTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UYWcoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1RhZ1Jlc291cmNlSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JBUk5dID0gaW5wdXRbX1JBUk5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UYWdMaXN0KGlucHV0W19UYV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1RhXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUYWdzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VudGFnUmVzb3VyY2VJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JBUk5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUkFSTl0gPSBpbnB1dFtfUkFSTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVEtdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RhZ0tleUxpc3QoaW5wdXRbX1RLXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVEtdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVGFnS2V5cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRhZ0tleXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVmFsdWVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IF9fc2VyaWFsaXplRmxvYXQoZW50cnkpO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IGRlX0FsYXJtSGlzdG9yeUl0ZW0gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19BTmxdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FObF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FObF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BVGxdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FUbF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FUbF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UaV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVGldID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfVGldKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0hJVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSElUXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfSElUXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0hTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19IU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0hTXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0hEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19IRF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0hEXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9BbGFybUhpc3RvcnlJdGVtcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQWxhcm1IaXN0b3J5SXRlbShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQW5vbWFseURldGVjdG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTU5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5EaW1lbnNpb25zID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0RdICE9IG51bGwgJiYgb3V0cHV0W19EXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRF0gPSBkZV9EaW1lbnNpb25zKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19EXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQ29dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NvXSA9IGRlX0Fub21hbHlEZXRlY3RvckNvbmZpZ3VyYXRpb24ob3V0cHV0W19Db10sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TVl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1ZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TVl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TTUFEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TTUFEXSA9IGRlX1NpbmdsZU1ldHJpY0Fub21hbHlEZXRlY3RvcihvdXRwdXRbX1NNQURdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTU1BRF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTU1BRF0gPSBkZV9NZXRyaWNNYXRoQW5vbWFseURldGVjdG9yKG91dHB1dFtfTU1BRF0sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQW5vbWFseURldGVjdG9yQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXQuRXhjbHVkZWRUaW1lUmFuZ2VzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19FVFJdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRVRSXSAhPSBudWxsICYmIG91dHB1dFtfRVRSXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRVRSXSA9IGRlX0Fub21hbHlEZXRlY3RvckV4Y2x1ZGVkVGltZVJhbmdlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRVRSXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTVRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01UXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTVRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Fub21hbHlEZXRlY3RvckV4Y2x1ZGVkVGltZVJhbmdlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUmFuZ2UoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Fub21hbHlEZXRlY3RvcnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Fub21hbHlEZXRlY3RvcihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQmF0Y2hGYWlsdXJlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUGFydGlhbEZhaWx1cmUoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbXBvc2l0ZUFsYXJtID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQUVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FFXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfQUVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5BbGFybUFjdGlvbnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0FBXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0FBXSAhPSBudWxsICYmIG91dHB1dFtfQUFdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BQV0gPSBkZV9SZXNvdXJjZUxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0FBXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUFsXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BQWxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BQWxdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUNVVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUNVVF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19BQ1VUXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BRF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQURdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BRF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BTmxdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FObF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FObF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BUl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVJdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BUl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0Lkluc3VmZmljaWVudERhdGFBY3Rpb25zID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19JREFdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfSURBXSAhPSBudWxsICYmIG91dHB1dFtfSURBXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSURBXSA9IGRlX1Jlc291cmNlTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfSURBXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5PS0FjdGlvbnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX09LQV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19PS0FdICE9IG51bGwgJiYgb3V0cHV0W19PS0FdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19PS0FdID0gZGVfUmVzb3VyY2VMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19PS0FdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUnRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NSdF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NSRF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSRF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TVVRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NVVF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19TVVRdKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NWXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TVl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NWXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NUVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1RUXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX1NUVF0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNCXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BU0JdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BU0JdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNSXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BU1JdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BU1JdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNjXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BU2NdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BU2NdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNXUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVNXUF0gPSBfX3N0cmljdFBhcnNlSW50MzIob3V0cHV0W19BU1dQXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FTRVBdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FTRVBdID0gX19zdHJpY3RQYXJzZUludDMyKG91dHB1dFtfQVNFUF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ29tcG9zaXRlQWxhcm1zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Db21wb3NpdGVBbGFybShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01lc10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVzXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTWVzXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EYXNoYm9hcmRFbnRyaWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXNoYm9hcmRFbnRyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGFzaGJvYXJkRW50cnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19ETmFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ROYV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ROYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19EQWFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RBYV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0RBYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19MTWFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0xNYV0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19MTWFdKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NpXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TaV0gPSBfX3N0cmljdFBhcnNlTG9uZyhvdXRwdXRbX1NpXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21lXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuZGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19kVk1dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfZFZNXSAhPSBudWxsICYmIG91dHB1dFtfZFZNXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfZFZNXSA9IGRlX0Rhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfZFZNXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfRFBdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RQXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRFBdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTWVzXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NZXNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NZXNdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2UoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGFwb2ludCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RpXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UaV0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19UaV0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0NhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TQ2FdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfU0NhXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0F2XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Bdl0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19Bdl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TdV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU3VdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfU3VdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTWldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01pXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX01pXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01hXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NYV0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19NYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19VXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19VXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LkV4dGVuZGVkU3RhdGlzdGljcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRVN4XSA9IHt9O1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0VTeF0gIT0gbnVsbCAmJiBvdXRwdXRbX0VTeF1bX2VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VTeF0gPSBkZV9EYXRhcG9pbnRWYWx1ZU1hcChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRVN4XVtfZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RhdGFwb2ludHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0RhdGFwb2ludChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGF0YXBvaW50VmFsdWVNYXAgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIG91dHB1dC5yZWR1Y2UoKGFjYywgcGFpcikgPT4ge1xuICAgICAgICBpZiAocGFpcltcInZhbHVlXCJdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGFjY1twYWlyW1wia2V5XCJdXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChwYWlyW1widmFsdWVcIl0pO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG5jb25zdCBkZV9EYXRhcG9pbnRWYWx1ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fc3RyaWN0UGFyc2VGbG9hdChlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGVsZXRlQW5vbWFseURldGVjdG9yT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RlbGV0ZURhc2hib2FyZHNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVsZXRlSW5zaWdodFJ1bGVzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5GYWlsdXJlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19GXSAhPSBudWxsICYmIG91dHB1dFtfRl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZdID0gZGVfQmF0Y2hGYWlsdXJlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxldGVNZXRyaWNTdHJlYW1PdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVzY3JpYmVBbGFybUhpc3RvcnlPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LkFsYXJtSGlzdG9yeUl0ZW1zID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19BSEldID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQUhJXSAhPSBudWxsICYmIG91dHB1dFtfQUhJXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUhJXSA9IGRlX0FsYXJtSGlzdG9yeUl0ZW1zKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19BSEldW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVzY3JpYmVBbGFybXNGb3JNZXRyaWNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0Lk1ldHJpY0FsYXJtcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTUFdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTUFdICE9IG51bGwgJiYgb3V0cHV0W19NQV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01BXSA9IGRlX01ldHJpY0FsYXJtcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTUFdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVzY3JpYmVBbGFybXNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LkNvbXBvc2l0ZUFsYXJtcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfQ0FdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQ0FdICE9IG51bGwgJiYgb3V0cHV0W19DQV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NBXSA9IGRlX0NvbXBvc2l0ZUFsYXJtcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQ0FdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0Lk1ldHJpY0FsYXJtcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTUFdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTUFdICE9IG51bGwgJiYgb3V0cHV0W19NQV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01BXSA9IGRlX01ldHJpY0FsYXJtcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTUFdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVzY3JpYmVBbm9tYWx5RGV0ZWN0b3JzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5Bbm9tYWx5RGV0ZWN0b3JzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19BRG5dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQURuXSAhPSBudWxsICYmIG91dHB1dFtfQURuXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQURuXSA9IGRlX0Fub21hbHlEZXRlY3RvcnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0FEbl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZXNjcmliZUluc2lnaHRSdWxlc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuSW5zaWdodFJ1bGVzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19JUl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19JUl0gIT0gbnVsbCAmJiBvdXRwdXRbX0lSXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSVJdID0gZGVfSW5zaWdodFJ1bGVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19JUl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EaW1lbnNpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTmFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19WYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVmFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19WYV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGltZW5zaW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRGltZW5zaW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EaXNhYmxlSW5zaWdodFJ1bGVzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5GYWlsdXJlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19GXSAhPSBudWxsICYmIG91dHB1dFtfRl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZdID0gZGVfQmF0Y2hGYWlsdXJlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9FbmFibGVJbnNpZ2h0UnVsZXNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LkZhaWx1cmVzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19GXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0ZdICE9IG51bGwgJiYgb3V0cHV0W19GXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRl0gPSBkZV9CYXRjaEZhaWx1cmVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19GXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldERhc2hib2FyZE91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0RBYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfREFhXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfREFhXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0RCXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EQl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0RCXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0ROYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRE5hXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRE5hXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRJbnNpZ2h0UnVsZVJlcG9ydE91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXQuS2V5TGFiZWxzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19LTF0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19LTF0gIT0gbnVsbCAmJiBvdXRwdXRbX0tMXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfS0xdID0gZGVfSW5zaWdodFJ1bGVDb250cmlidXRvcktleUxhYmVscyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfS0xdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BU2ddICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FTZ10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FTZ10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BVl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVZdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfQVZdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVVDXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BVUNdID0gX19zdHJpY3RQYXJzZUxvbmcob3V0cHV0W19BVUNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5Db250cmlidXRvcnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0Nvbl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19Db25dICE9IG51bGwgJiYgb3V0cHV0W19Db25dW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Db25dID0gZGVfSW5zaWdodFJ1bGVDb250cmlidXRvcnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0Nvbl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuTWV0cmljRGF0YXBvaW50cyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTURldF0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NRGV0XSAhPSBudWxsICYmIG91dHB1dFtfTURldF1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01EZXRdID0gZGVfSW5zaWdodFJ1bGVNZXRyaWNEYXRhcG9pbnRzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NRGV0XVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldE1ldHJpY0RhdGFPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0Lk1ldHJpY0RhdGFSZXN1bHRzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19NRFJdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTURSXSAhPSBudWxsICYmIG91dHB1dFtfTURSXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTURSXSA9IGRlX01ldHJpY0RhdGFSZXN1bHRzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NRFJdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0Lk1lc3NhZ2VzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19NZXNzXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01lc3NdICE9IG51bGwgJiYgb3V0cHV0W19NZXNzXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVzc10gPSBkZV9NZXRyaWNEYXRhUmVzdWx0TWVzc2FnZXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX01lc3NdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0TWV0cmljU3RhdGlzdGljc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0xdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0xdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19MXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuRGF0YXBvaW50cyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRGFdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRGFdICE9IG51bGwgJiYgb3V0cHV0W19EYV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RhXSA9IGRlX0RhdGFwb2ludHMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RhXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldE1ldHJpY1N0cmVhbU91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0FyXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Bcl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FyXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05hXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OYV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05hXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuSW5jbHVkZUZpbHRlcnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0lGXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0lGXSAhPSBudWxsICYmIG91dHB1dFtfSUZdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JRl0gPSBkZV9NZXRyaWNTdHJlYW1GaWx0ZXJzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19JRl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuRXhjbHVkZUZpbHRlcnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0VGXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0VGXSAhPSBudWxsICYmIG91dHB1dFtfRUZdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FRl0gPSBkZV9NZXRyaWNTdHJlYW1GaWx0ZXJzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19FRl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0ZBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19GQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ZBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1JBb10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUkFvXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfUkFvXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1N0YXRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1N0YXRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TdGF0XSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DRF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19DRF0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTFVEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19MVURdID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfTFVEXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19PRl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfT0ZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19PRl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LlN0YXRpc3RpY3NDb25maWd1cmF0aW9ucyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfU0NdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfU0NdICE9IG51bGwgJiYgb3V0cHV0W19TQ11bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NDXSA9IGRlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NDb25maWd1cmF0aW9ucyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfU0NdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19JTEFNXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JTEFNXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfSUxBTV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0TWV0cmljV2lkZ2V0SW1hZ2VPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NV0ldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01XSV0gPSBjb250ZXh0LmJhc2U2NERlY29kZXIob3V0cHV0W19NV0ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTmFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05hXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTmFdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU3RhdF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU3RhdF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1N0YXRdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU2NdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NjXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU2NdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRGVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RlXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRGVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTVJhbmFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01SYW5hXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfTVJhbmFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3IgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LktleXMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0tlXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0tlXSAhPSBudWxsICYmIG91dHB1dFtfS2VdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19LZV0gPSBkZV9JbnNpZ2h0UnVsZUNvbnRyaWJ1dG9yS2V5cyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfS2VdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BQVZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FBVl0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19BQVZdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5EYXRhcG9pbnRzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EYV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19EYV0gIT0gbnVsbCAmJiBvdXRwdXRbX0RhXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRGFdID0gZGVfSW5zaWdodFJ1bGVDb250cmlidXRvckRhdGFwb2ludHMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RhXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3JEYXRhcG9pbnQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UaV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVGldID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfVGldKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FWcF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVZwXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX0FWcF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW5zaWdodFJ1bGVDb250cmlidXRvckRhdGFwb2ludHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3JEYXRhcG9pbnQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3JLZXlMYWJlbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0U3RyaW5nKGVudHJ5KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbnNpZ2h0UnVsZUNvbnRyaWJ1dG9yS2V5cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3JzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9JbnNpZ2h0UnVsZUNvbnRyaWJ1dG9yKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbnNpZ2h0UnVsZU1ldHJpY0RhdGFwb2ludCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RpXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UaV0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19UaV0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVUNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1VDXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX1VDXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01DVl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTUNWXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX01DVl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TQ2FdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NDYV0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19TQ2FdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQXZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0F2XSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX0F2XSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1N1XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TdV0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19TdV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NaV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWldID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfTWldKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTWFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01hXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX01hXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnNpZ2h0UnVsZU1ldHJpY0RhdGFwb2ludHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0luc2lnaHRSdWxlTWV0cmljRGF0YXBvaW50KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbnNpZ2h0UnVsZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0luc2lnaHRSdWxlKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbnRlcm5hbFNlcnZpY2VGYXVsdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01lc10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVzXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTWVzXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkRm9ybWF0RmF1bHQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbWVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZE5leHRUb2tlbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21lXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbWVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21lXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NZXNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01lc10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01lc10pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGltaXRFeGNlZWRlZEZhdWx0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21lXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpc3REYXNoYm9hcmRzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5EYXNoYm9hcmRFbnRyaWVzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19ERV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19ERV0gIT0gbnVsbCAmJiBvdXRwdXRbX0RFXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfREVdID0gZGVfRGFzaGJvYXJkRW50cmllcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfREVdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdE1hbmFnZWRJbnNpZ2h0UnVsZXNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0Lk1hbmFnZWRSdWxlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTVJhbl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NUmFuXSAhPSBudWxsICYmIG91dHB1dFtfTVJhbl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01SYW5dID0gZGVfTWFuYWdlZFJ1bGVEZXNjcmlwdGlvbnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX01SYW5dW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdE1ldHJpY3NPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0Lk1ldHJpY3MgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX01dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTV0gIT0gbnVsbCAmJiBvdXRwdXRbX01dW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NXSA9IGRlX01ldHJpY3MoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX01dW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0Lk93bmluZ0FjY291bnRzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19PQXddID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfT0F3XSAhPSBudWxsICYmIG91dHB1dFtfT0F3XVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfT0F3XSA9IGRlX093bmluZ0FjY291bnRzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19PQXddW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdE1ldHJpY1N0cmVhbXNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LkVudHJpZXMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0VuXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0VuXSAhPSBudWxsICYmIG91dHB1dFtfRW5dW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Fbl0gPSBkZV9NZXRyaWNTdHJlYW1FbnRyaWVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19Fbl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaXN0VGFnc0ZvclJlc291cmNlT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5UYWdzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19UYV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19UYV0gIT0gbnVsbCAmJiBvdXRwdXRbX1RhXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVGFdID0gZGVfVGFnTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfVGFdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWFuYWdlZFJ1bGVEZXNjcmlwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1JBUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JBUk5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19SQVJOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1JTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SU10gPSBkZV9NYW5hZ2VkUnVsZVN0YXRlKG91dHB1dFtfUlNdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01hbmFnZWRSdWxlRGVzY3JpcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NYW5hZ2VkUnVsZURlc2NyaXB0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NYW5hZ2VkUnVsZVN0YXRlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfUk51XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19STnVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19STnVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU3RhdF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU3RhdF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1N0YXRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01lc3NhZ2VEYXRhID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQ29kXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Db2RdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19Db2RdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVmFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ZhXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVmFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpYyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuRGltZW5zaW9ucyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRF0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19EXSAhPSBudWxsICYmIG91dHB1dFtfRF1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RdID0gZGVfRGltZW5zaW9ucyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRF1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9NZXRyaWNBbGFybSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0FObF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQU5sXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQU5sXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FBbF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUFsXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQUFsXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BRF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FEXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FDVVRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FDVVRdID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfQUNVVF0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FFXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfQUVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5PS0FjdGlvbnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX09LQV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19PS0FdICE9IG51bGwgJiYgb3V0cHV0W19PS0FdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19PS0FdID0gZGVfUmVzb3VyY2VMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19PS0FdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LkFsYXJtQWN0aW9ucyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfQUFdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQUFdICE9IG51bGwgJiYgb3V0cHV0W19BQV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FBXSA9IGRlX1Jlc291cmNlTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQUFdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0Lkluc3VmZmljaWVudERhdGFBY3Rpb25zID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19JREFdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfSURBXSAhPSBudWxsICYmIG91dHB1dFtfSURBXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSURBXSA9IGRlX1Jlc291cmNlTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfSURBXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU1ZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NWXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU1ZdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU1J0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TUnRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TUnRdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU1JEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TUkRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TUkRdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU1VUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TVVRdID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfU1VUXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTU5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TdF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU3RdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19FU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRVNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19FU10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LkRpbWVuc2lvbnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0RdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRF0gIT0gbnVsbCAmJiBvdXRwdXRbX0RdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EXSA9IGRlX0RpbWVuc2lvbnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19QXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19QXSA9IF9fc3RyaWN0UGFyc2VJbnQzMihvdXRwdXRbX1BdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1VdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRVBdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VQXSA9IF9fc3RyaWN0UGFyc2VJbnQzMihvdXRwdXRbX0VQXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0RUQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRFRBXSA9IF9fc3RyaWN0UGFyc2VJbnQzMihvdXRwdXRbX0RUQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UaF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVGhdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfVGhdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQ09dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NPXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ09dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVE1EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTURdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UTURdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRUxTQ1BdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VMU0NQXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRUxTQ1BdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5NZXRyaWNzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19NXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01dICE9IG51bGwgJiYgb3V0cHV0W19NXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTV0gPSBkZV9NZXRyaWNEYXRhUXVlcmllcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1RNSV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVE1JXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVE1JXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VTdl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRVN2XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRVN2XSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NUVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1RUXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX1NUVF0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY0FsYXJtcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWV0cmljQWxhcm0oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX01ldHJpY0RhdGFRdWVyaWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNEYXRhUXVlcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX01ldHJpY0RhdGFRdWVyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0ldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ldID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19JXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01TXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NU10gPSBkZV9NZXRyaWNTdGF0KG91dHB1dFtfTVNdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0VdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0xdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JEXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfUkRdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUF0gPSBfX3N0cmljdFBhcnNlSW50MzIob3V0cHV0W19QXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FJXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BSV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FJXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9NZXRyaWNEYXRhUmVzdWx0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ldKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0xdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5UaW1lc3RhbXBzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19UaW1dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfVGltXSAhPSBudWxsICYmIG91dHB1dFtfVGltXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVGltXSA9IGRlX1RpbWVzdGFtcHMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX1RpbV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuVmFsdWVzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19WYWxdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfVmFsXSAhPSBudWxsICYmIG91dHB1dFtfVmFsXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVmFsXSA9IGRlX0RhdGFwb2ludFZhbHVlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfVmFsXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0N0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TQ3RdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TQ3RdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5NZXNzYWdlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTWVzc10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NZXNzXSAhPSBudWxsICYmIG91dHB1dFtfTWVzc11bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01lc3NdID0gZGVfTWV0cmljRGF0YVJlc3VsdE1lc3NhZ2VzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NZXNzXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY0RhdGFSZXN1bHRNZXNzYWdlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVzc2FnZURhdGEoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX01ldHJpY0RhdGFSZXN1bHRzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNEYXRhUmVzdWx0KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNNYXRoQW5vbWFseURldGVjdG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5NZXRyaWNEYXRhUXVlcmllcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTURRXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01EUV0gIT0gbnVsbCAmJiBvdXRwdXRbX01EUV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01EUV0gPSBkZV9NZXRyaWNEYXRhUXVlcmllcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTURRXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY3MgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01ldHJpYyhlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfTWV0cmljU3RhdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NZV0gPSBkZV9NZXRyaWMob3V0cHV0W19NZV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19QXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19QXSA9IF9fc3RyaWN0UGFyc2VJbnQzMihvdXRwdXRbX1BdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1VdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY1N0cmVhbUVudHJpZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01ldHJpY1N0cmVhbUVudHJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNTdHJlYW1FbnRyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0FyXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Bcl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FyXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DRF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19DRF0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTFVEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19MVURdID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfTFVEXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTmFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19GQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRkFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19GQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TdGF0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TdGF0XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU3RhdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19PRl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfT0ZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19PRl0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWV0cmljU3RyZWFtRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5NZXRyaWNOYW1lcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTU5lXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01OZV0gIT0gbnVsbCAmJiBvdXRwdXRbX01OZV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01OZV0gPSBkZV9NZXRyaWNTdHJlYW1GaWx0ZXJNZXRyaWNOYW1lcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTU5lXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY1N0cmVhbUZpbHRlck1ldHJpY05hbWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfTWV0cmljU3RyZWFtRmlsdGVycyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWV0cmljU3RyZWFtRmlsdGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQWRkaXRpb25hbFN0YXRpc3RpY3MgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0U3RyaW5nKGVudHJ5KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXQuSW5jbHVkZU1ldHJpY3MgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0lNXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0lNXSAhPSBudWxsICYmIG91dHB1dFtfSU1dW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JTV0gPSBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzSW5jbHVkZU1ldHJpY3MoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0lNXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5BZGRpdGlvbmFsU3RhdGlzdGljcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfQVNdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQVNdICE9IG51bGwgJiYgb3V0cHV0W19BU11bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FTXSA9IGRlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NBZGRpdGlvbmFsU3RhdGlzdGljcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQVNdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWV0cmljU3RyZWFtU3RhdGlzdGljc0NvbmZpZ3VyYXRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQ29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfTWV0cmljU3RyZWFtU3RhdGlzdGljc0luY2x1ZGVNZXRyaWNzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzTWV0cmljKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzTWV0cmljID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTU5dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21lXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Pd25pbmdBY2NvdW50cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1BhcnRpYWxGYWlsdXJlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfRlJdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZSXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRlJdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRVR4XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FVHhdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19FVHhdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRkNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZDXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZEXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1B1dEFub21hbHlEZXRlY3Rvck91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXREYXNoYm9hcmRPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LkRhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRFZNXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0RWTV0gIT0gbnVsbCAmJiBvdXRwdXRbX0RWTV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RWTV0gPSBkZV9EYXNoYm9hcmRWYWxpZGF0aW9uTWVzc2FnZXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RWTV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXRJbnNpZ2h0UnVsZU91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXRNYW5hZ2VkSW5zaWdodFJ1bGVzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5GYWlsdXJlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19GXSAhPSBudWxsICYmIG91dHB1dFtfRl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZdID0gZGVfQmF0Y2hGYWlsdXJlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXRNZXRyaWNTdHJlYW1PdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19Bcl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQXJdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19Bcl0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmFuZ2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19TVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1RdID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfU1RdKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FVF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19FVF0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlTm90Rm91bmQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbWVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1JUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1JUXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1JJXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SSV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1JJXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01lc10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVzXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTWVzXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TaW5nbGVNZXRyaWNBbm9tYWx5RGV0ZWN0b3IgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTU5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LkRpbWVuc2lvbnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0RdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRF0gIT0gbnVsbCAmJiBvdXRwdXRbX0RdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EXSA9IGRlX0RpbWVuc2lvbnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU10pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU3RhcnRNZXRyaWNTdHJlYW1zT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1N0b3BNZXRyaWNTdHJlYW1zT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RhZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0tdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0tdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19LXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1ZhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19WYV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ZhXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9UYWdMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9UYWcoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RhZ1Jlc291cmNlT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RpbWVzdGFtcHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChlbnRyeSkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1VudGFnUmVzb3VyY2VPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVzZXJpYWxpemVNZXRhZGF0YSA9IChvdXRwdXQpID0+ICh7XG4gICAgaHR0cFN0YXR1c0NvZGU6IG91dHB1dC5zdGF0dXNDb2RlLFxuICAgIHJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdGlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3QtaWRcIl0gPz8gb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1yZXF1ZXN0LWlkXCJdLFxuICAgIGV4dGVuZGVkUmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16LWlkLTJcIl0sXG4gICAgY2ZJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1jZi1pZFwiXSxcbn0pO1xuY29uc3QgY29sbGVjdEJvZHlTdHJpbmcgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHkoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoYm9keSkgPT4gY29udGV4dC51dGY4RW5jb2Rlcihib2R5KSk7XG5jb25zdCB0aHJvd0RlZmF1bHRFcnJvciA9IHdpdGhCYXNlRXhjZXB0aW9uKF9fQmFzZUV4Y2VwdGlvbik7XG5jb25zdCBidWlsZEh0dHBScGNSZXF1ZXN0ID0gYXN5bmMgKGNvbnRleHQsIGhlYWRlcnMsIHBhdGgsIHJlc29sdmVkSG9zdG5hbWUsIGJvZHkpID0+IHtcbiAgICBjb25zdCB7IGhvc3RuYW1lLCBwcm90b2NvbCA9IFwiaHR0cHNcIiwgcG9ydCwgcGF0aDogYmFzZVBhdGggfSA9IGF3YWl0IGNvbnRleHQuZW5kcG9pbnQoKTtcbiAgICBjb25zdCBjb250ZW50cyA9IHtcbiAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lLFxuICAgICAgICBwb3J0LFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBwYXRoOiBiYXNlUGF0aC5lbmRzV2l0aChcIi9cIikgPyBiYXNlUGF0aC5zbGljZSgwLCAtMSkgKyBwYXRoIDogYmFzZVBhdGggKyBwYXRoLFxuICAgICAgICBoZWFkZXJzLFxuICAgIH07XG4gICAgaWYgKHJlc29sdmVkSG9zdG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZW50cy5ob3N0bmFtZSA9IHJlc29sdmVkSG9zdG5hbWU7XG4gICAgfVxuICAgIGlmIChib2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGVudHMuYm9keSA9IGJvZHk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX19IdHRwUmVxdWVzdChjb250ZW50cyk7XG59O1xuY29uc3QgU0hBUkVEX0hFQURFUlMgPSB7XG4gICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbn07XG5jb25zdCBfID0gXCIyMDEwLTA4LTAxXCI7XG5jb25zdCBfQSA9IFwiQWN0aW9uXCI7XG5jb25zdCBfQUEgPSBcIkFsYXJtQWN0aW9uc1wiO1xuY29uc3QgX0FBViA9IFwiQXBwcm94aW1hdGVBZ2dyZWdhdGVWYWx1ZVwiO1xuY29uc3QgX0FBbCA9IFwiQWxhcm1Bcm5cIjtcbmNvbnN0IF9BQ1VUID0gXCJBbGFybUNvbmZpZ3VyYXRpb25VcGRhdGVkVGltZXN0YW1wXCI7XG5jb25zdCBfQUQgPSBcIkFsYXJtRGVzY3JpcHRpb25cIjtcbmNvbnN0IF9BRFQgPSBcIkFub21hbHlEZXRlY3RvclR5cGVzXCI7XG5jb25zdCBfQURuID0gXCJBbm9tYWx5RGV0ZWN0b3JzXCI7XG5jb25zdCBfQUUgPSBcIkFjdGlvbnNFbmFibGVkXCI7XG5jb25zdCBfQUhJID0gXCJBbGFybUhpc3RvcnlJdGVtc1wiO1xuY29uc3QgX0FJID0gXCJBY2NvdW50SWRcIjtcbmNvbnN0IF9BTiA9IFwiQWxhcm1OYW1lc1wiO1xuY29uc3QgX0FOUCA9IFwiQWxhcm1OYW1lUHJlZml4XCI7XG5jb25zdCBfQU5sID0gXCJBbGFybU5hbWVcIjtcbmNvbnN0IF9BUCA9IFwiQWN0aW9uUHJlZml4XCI7XG5jb25zdCBfQVIgPSBcIkFsYXJtUnVsZVwiO1xuY29uc3QgX0FTID0gXCJBZGRpdGlvbmFsU3RhdGlzdGljc1wiO1xuY29uc3QgX0FTQiA9IFwiQWN0aW9uc1N1cHByZXNzZWRCeVwiO1xuY29uc3QgX0FTRVAgPSBcIkFjdGlvbnNTdXBwcmVzc29yRXh0ZW5zaW9uUGVyaW9kXCI7XG5jb25zdCBfQVNSID0gXCJBY3Rpb25zU3VwcHJlc3NlZFJlYXNvblwiO1xuY29uc3QgX0FTV1AgPSBcIkFjdGlvbnNTdXBwcmVzc29yV2FpdFBlcmlvZFwiO1xuY29uc3QgX0FTYyA9IFwiQWN0aW9uc1N1cHByZXNzb3JcIjtcbmNvbnN0IF9BU2cgPSBcIkFnZ3JlZ2F0aW9uU3RhdGlzdGljXCI7XG5jb25zdCBfQVQgPSBcIkFsYXJtVHlwZXNcIjtcbmNvbnN0IF9BVGwgPSBcIkFsYXJtVHlwZVwiO1xuY29uc3QgX0FVQyA9IFwiQXBwcm94aW1hdGVVbmlxdWVDb3VudFwiO1xuY29uc3QgX0FWID0gXCJBZ2dyZWdhdGVWYWx1ZVwiO1xuY29uc3QgX0FWcCA9IFwiQXBwcm94aW1hdGVWYWx1ZVwiO1xuY29uc3QgX0FyID0gXCJBcm5cIjtcbmNvbnN0IF9BdiA9IFwiQXZlcmFnZVwiO1xuY29uc3QgX0MgPSBcIkNvdW50c1wiO1xuY29uc3QgX0NBID0gXCJDb21wb3NpdGVBbGFybXNcIjtcbmNvbnN0IF9DRCA9IFwiQ3JlYXRpb25EYXRlXCI7XG5jb25zdCBfQ08gPSBcIkNvbXBhcmlzb25PcGVyYXRvclwiO1xuY29uc3QgX0NPQU4gPSBcIkNoaWxkcmVuT2ZBbGFybU5hbWVcIjtcbmNvbnN0IF9DbyA9IFwiQ29uZmlndXJhdGlvblwiO1xuY29uc3QgX0NvZCA9IFwiQ29kZVwiO1xuY29uc3QgX0NvbiA9IFwiQ29udHJpYnV0b3JzXCI7XG5jb25zdCBfRCA9IFwiRGltZW5zaW9uc1wiO1xuY29uc3QgX0RBID0gXCJEZWxldGVBbGFybXNcIjtcbmNvbnN0IF9EQUEgPSBcIkRpc2FibGVBbGFybUFjdGlvbnNcIjtcbmNvbnN0IF9EQUQgPSBcIkRlbGV0ZUFub21hbHlEZXRlY3RvclwiO1xuY29uc3QgX0RBRGUgPSBcIkRlc2NyaWJlQW5vbWFseURldGVjdG9yc1wiO1xuY29uc3QgX0RBRk0gPSBcIkRlc2NyaWJlQWxhcm1zRm9yTWV0cmljXCI7XG5jb25zdCBfREFIID0gXCJEZXNjcmliZUFsYXJtSGlzdG9yeVwiO1xuY29uc3QgX0RBYSA9IFwiRGFzaGJvYXJkQXJuXCI7XG5jb25zdCBfREFlID0gXCJEZXNjcmliZUFsYXJtc1wiO1xuY29uc3QgX0RCID0gXCJEYXNoYm9hcmRCb2R5XCI7XG5jb25zdCBfREQgPSBcIkRlbGV0ZURhc2hib2FyZHNcIjtcbmNvbnN0IF9ERSA9IFwiRGFzaGJvYXJkRW50cmllc1wiO1xuY29uc3QgX0RJUiA9IFwiRGVsZXRlSW5zaWdodFJ1bGVzXCI7XG5jb25zdCBfRElSZSA9IFwiRGVzY3JpYmVJbnNpZ2h0UnVsZXNcIjtcbmNvbnN0IF9ESVJpID0gXCJEaXNhYmxlSW5zaWdodFJ1bGVzXCI7XG5jb25zdCBfRE1TID0gXCJEZWxldGVNZXRyaWNTdHJlYW1cIjtcbmNvbnN0IF9ETiA9IFwiRGFzaGJvYXJkTmFtZXNcIjtcbmNvbnN0IF9ETlAgPSBcIkRhc2hib2FyZE5hbWVQcmVmaXhcIjtcbmNvbnN0IF9ETmEgPSBcIkRhc2hib2FyZE5hbWVcIjtcbmNvbnN0IF9EUCA9IFwiRGF0YVBhdGhcIjtcbmNvbnN0IF9EVEEgPSBcIkRhdGFwb2ludHNUb0FsYXJtXCI7XG5jb25zdCBfRFZNID0gXCJEYXNoYm9hcmRWYWxpZGF0aW9uTWVzc2FnZXNcIjtcbmNvbnN0IF9EYSA9IFwiRGF0YXBvaW50c1wiO1xuY29uc3QgX0RlID0gXCJEZWZpbml0aW9uXCI7XG5jb25zdCBfRSA9IFwiRXhwcmVzc2lvblwiO1xuY29uc3QgX0VBQSA9IFwiRW5hYmxlQWxhcm1BY3Rpb25zXCI7XG5jb25zdCBfRUQgPSBcIkVuZERhdGVcIjtcbmNvbnN0IF9FRiA9IFwiRXhjbHVkZUZpbHRlcnNcIjtcbmNvbnN0IF9FSVIgPSBcIkVuYWJsZUluc2lnaHRSdWxlc1wiO1xuY29uc3QgX0VMU0NQID0gXCJFdmFsdWF0ZUxvd1NhbXBsZUNvdW50UGVyY2VudGlsZVwiO1xuY29uc3QgX0VQID0gXCJFdmFsdWF0aW9uUGVyaW9kc1wiO1xuY29uc3QgX0VTID0gXCJFeHRlbmRlZFN0YXRpc3RpY1wiO1xuY29uc3QgX0VTdiA9IFwiRXZhbHVhdGlvblN0YXRlXCI7XG5jb25zdCBfRVN4ID0gXCJFeHRlbmRlZFN0YXRpc3RpY3NcIjtcbmNvbnN0IF9FVCA9IFwiRW5kVGltZVwiO1xuY29uc3QgX0VUUiA9IFwiRXhjbHVkZWRUaW1lUmFuZ2VzXCI7XG5jb25zdCBfRVR4ID0gXCJFeGNlcHRpb25UeXBlXCI7XG5jb25zdCBfRW4gPSBcIkVudHJpZXNcIjtcbmNvbnN0IF9GID0gXCJGYWlsdXJlc1wiO1xuY29uc3QgX0ZBID0gXCJGaXJlaG9zZUFyblwiO1xuY29uc3QgX0ZDID0gXCJGYWlsdXJlQ29kZVwiO1xuY29uc3QgX0ZEID0gXCJGYWlsdXJlRGVzY3JpcHRpb25cIjtcbmNvbnN0IF9GUiA9IFwiRmFpbHVyZVJlc291cmNlXCI7XG5jb25zdCBfR0QgPSBcIkdldERhc2hib2FyZFwiO1xuY29uc3QgX0dJUlIgPSBcIkdldEluc2lnaHRSdWxlUmVwb3J0XCI7XG5jb25zdCBfR01EID0gXCJHZXRNZXRyaWNEYXRhXCI7XG5jb25zdCBfR01TID0gXCJHZXRNZXRyaWNTdGF0aXN0aWNzXCI7XG5jb25zdCBfR01TZSA9IFwiR2V0TWV0cmljU3RyZWFtXCI7XG5jb25zdCBfR01XSSA9IFwiR2V0TWV0cmljV2lkZ2V0SW1hZ2VcIjtcbmNvbnN0IF9IRCA9IFwiSGlzdG9yeURhdGFcIjtcbmNvbnN0IF9ISVQgPSBcIkhpc3RvcnlJdGVtVHlwZVwiO1xuY29uc3QgX0hTID0gXCJIaXN0b3J5U3VtbWFyeVwiO1xuY29uc3QgX0kgPSBcIklkXCI7XG5jb25zdCBfSURBID0gXCJJbnN1ZmZpY2llbnREYXRhQWN0aW9uc1wiO1xuY29uc3QgX0lGID0gXCJJbmNsdWRlRmlsdGVyc1wiO1xuY29uc3QgX0lMQSA9IFwiSW5jbHVkZUxpbmtlZEFjY291bnRzXCI7XG5jb25zdCBfSUxBTSA9IFwiSW5jbHVkZUxpbmtlZEFjY291bnRzTWV0cmljc1wiO1xuY29uc3QgX0lNID0gXCJJbmNsdWRlTWV0cmljc1wiO1xuY29uc3QgX0lSID0gXCJJbnNpZ2h0UnVsZXNcIjtcbmNvbnN0IF9LID0gXCJLZXlcIjtcbmNvbnN0IF9LTCA9IFwiS2V5TGFiZWxzXCI7XG5jb25zdCBfS2UgPSBcIktleXNcIjtcbmNvbnN0IF9MID0gXCJMYWJlbFwiO1xuY29uc3QgX0xEID0gXCJMaXN0RGFzaGJvYXJkc1wiO1xuY29uc3QgX0xNID0gXCJMaXN0TWV0cmljc1wiO1xuY29uc3QgX0xNSVIgPSBcIkxpc3RNYW5hZ2VkSW5zaWdodFJ1bGVzXCI7XG5jb25zdCBfTE1TID0gXCJMaXN0TWV0cmljU3RyZWFtc1wiO1xuY29uc3QgX0xNYSA9IFwiTGFzdE1vZGlmaWVkXCI7XG5jb25zdCBfTE8gPSBcIkxhYmVsT3B0aW9uc1wiO1xuY29uc3QgX0xURlIgPSBcIkxpc3RUYWdzRm9yUmVzb3VyY2VcIjtcbmNvbnN0IF9MVUQgPSBcIkxhc3RVcGRhdGVEYXRlXCI7XG5jb25zdCBfTSA9IFwiTWV0cmljc1wiO1xuY29uc3QgX01BID0gXCJNZXRyaWNBbGFybXNcIjtcbmNvbnN0IF9NQ0MgPSBcIk1heENvbnRyaWJ1dG9yQ291bnRcIjtcbmNvbnN0IF9NQ1YgPSBcIk1heENvbnRyaWJ1dG9yVmFsdWVcIjtcbmNvbnN0IF9NRCA9IFwiTWF4RGF0YXBvaW50c1wiO1xuY29uc3QgX01EUSA9IFwiTWV0cmljRGF0YVF1ZXJpZXNcIjtcbmNvbnN0IF9NRFIgPSBcIk1ldHJpY0RhdGFSZXN1bHRzXCI7XG5jb25zdCBfTURlID0gXCJNZXRyaWNEYXRhXCI7XG5jb25zdCBfTURldCA9IFwiTWV0cmljRGF0YXBvaW50c1wiO1xuY29uc3QgX01NQUQgPSBcIk1ldHJpY01hdGhBbm9tYWx5RGV0ZWN0b3JcIjtcbmNvbnN0IF9NTiA9IFwiTWV0cmljTmFtZVwiO1xuY29uc3QgX01OZSA9IFwiTWV0cmljTmFtZXNcIjtcbmNvbnN0IF9NUiA9IFwiTWF4UmVjb3Jkc1wiO1xuY29uc3QgX01SYSA9IFwiTWF4UmVzdWx0c1wiO1xuY29uc3QgX01SYW4gPSBcIk1hbmFnZWRSdWxlc1wiO1xuY29uc3QgX01SYW5hID0gXCJNYW5hZ2VkUnVsZVwiO1xuY29uc3QgX01TID0gXCJNZXRyaWNTdGF0XCI7XG5jb25zdCBfTVQgPSBcIk1ldHJpY1RpbWV6b25lXCI7XG5jb25zdCBfTVcgPSBcIk1ldHJpY1dpZGdldFwiO1xuY29uc3QgX01XSSA9IFwiTWV0cmljV2lkZ2V0SW1hZ2VcIjtcbmNvbnN0IF9NYSA9IFwiTWF4aW11bVwiO1xuY29uc3QgX01lID0gXCJNZXRyaWNcIjtcbmNvbnN0IF9NZXMgPSBcIk1lc3NhZ2VcIjtcbmNvbnN0IF9NZXNzID0gXCJNZXNzYWdlc1wiO1xuY29uc3QgX01pID0gXCJNaW5pbXVtXCI7XG5jb25zdCBfTiA9IFwiTmFtZXNwYWNlXCI7XG5jb25zdCBfTlQgPSBcIk5leHRUb2tlblwiO1xuY29uc3QgX05hID0gXCJOYW1lXCI7XG5jb25zdCBfTmFtID0gXCJOYW1lc1wiO1xuY29uc3QgX09BID0gXCJPd25pbmdBY2NvdW50XCI7XG5jb25zdCBfT0F3ID0gXCJPd25pbmdBY2NvdW50c1wiO1xuY29uc3QgX09CID0gXCJPcmRlckJ5XCI7XG5jb25zdCBfT0YgPSBcIk91dHB1dEZvcm1hdFwiO1xuY29uc3QgX09LQSA9IFwiT0tBY3Rpb25zXCI7XG5jb25zdCBfUCA9IFwiUGVyaW9kXCI7XG5jb25zdCBfUEFEID0gXCJQdXRBbm9tYWx5RGV0ZWN0b3JcIjtcbmNvbnN0IF9QQ0EgPSBcIlB1dENvbXBvc2l0ZUFsYXJtXCI7XG5jb25zdCBfUEQgPSBcIlB1dERhc2hib2FyZFwiO1xuY29uc3QgX1BJUiA9IFwiUHV0SW5zaWdodFJ1bGVcIjtcbmNvbnN0IF9QTUEgPSBcIlB1dE1ldHJpY0FsYXJtXCI7XG5jb25zdCBfUE1EID0gXCJQdXRNZXRyaWNEYXRhXCI7XG5jb25zdCBfUE1JUiA9IFwiUHV0TWFuYWdlZEluc2lnaHRSdWxlc1wiO1xuY29uc3QgX1BNUyA9IFwiUHV0TWV0cmljU3RyZWFtXCI7XG5jb25zdCBfUE9BTiA9IFwiUGFyZW50c09mQWxhcm1OYW1lXCI7XG5jb25zdCBfUkEgPSBcIlJlY2VudGx5QWN0aXZlXCI7XG5jb25zdCBfUkFSTiA9IFwiUmVzb3VyY2VBUk5cIjtcbmNvbnN0IF9SQW8gPSBcIlJvbGVBcm5cIjtcbmNvbnN0IF9SRCA9IFwiUmV0dXJuRGF0YVwiO1xuY29uc3QgX1JEdSA9IFwiUnVsZURlZmluaXRpb25cIjtcbmNvbnN0IF9SSSA9IFwiUmVzb3VyY2VJZFwiO1xuY29uc3QgX1JOID0gXCJSdWxlTmFtZXNcIjtcbmNvbnN0IF9STnUgPSBcIlJ1bGVOYW1lXCI7XG5jb25zdCBfUlMgPSBcIlJ1bGVTdGF0ZVwiO1xuY29uc3QgX1JUID0gXCJSZXNvdXJjZVR5cGVcIjtcbmNvbnN0IF9TID0gXCJTdGF0XCI7XG5jb25zdCBfU0FTID0gXCJTZXRBbGFybVN0YXRlXCI7XG5jb25zdCBfU0IgPSBcIlNjYW5CeVwiO1xuY29uc3QgX1NDID0gXCJTdGF0aXN0aWNzQ29uZmlndXJhdGlvbnNcIjtcbmNvbnN0IF9TQ2EgPSBcIlNhbXBsZUNvdW50XCI7XG5jb25zdCBfU0N0ID0gXCJTdGF0dXNDb2RlXCI7XG5jb25zdCBfU0QgPSBcIlN0YXJ0RGF0ZVwiO1xuY29uc3QgX1NNQUQgPSBcIlNpbmdsZU1ldHJpY0Fub21hbHlEZXRlY3RvclwiO1xuY29uc3QgX1NNUyA9IFwiU3RhcnRNZXRyaWNTdHJlYW1zXCI7XG5jb25zdCBfU01TdCA9IFwiU3RvcE1ldHJpY1N0cmVhbXNcIjtcbmNvbnN0IF9TUiA9IFwiU3RvcmFnZVJlc29sdXRpb25cIjtcbmNvbnN0IF9TUkQgPSBcIlN0YXRlUmVhc29uRGF0YVwiO1xuY29uc3QgX1NSdCA9IFwiU3RhdGVSZWFzb25cIjtcbmNvbnN0IF9TVCA9IFwiU3RhcnRUaW1lXCI7XG5jb25zdCBfU1RUID0gXCJTdGF0ZVRyYW5zaXRpb25lZFRpbWVzdGFtcFwiO1xuY29uc3QgX1NVVCA9IFwiU3RhdGVVcGRhdGVkVGltZXN0YW1wXCI7XG5jb25zdCBfU1YgPSBcIlN0YXRlVmFsdWVcIjtcbmNvbnN0IF9TVnQgPSBcIlN0YXRpc3RpY1ZhbHVlc1wiO1xuY29uc3QgX1NjID0gXCJTY2hlbWFcIjtcbmNvbnN0IF9TaSA9IFwiU2l6ZVwiO1xuY29uc3QgX1N0ID0gXCJTdGF0aXN0aWNcIjtcbmNvbnN0IF9TdGEgPSBcIlN0YXRpc3RpY3NcIjtcbmNvbnN0IF9TdGF0ID0gXCJTdGF0ZVwiO1xuY29uc3QgX1N1ID0gXCJTdW1cIjtcbmNvbnN0IF9UID0gXCJUaW1lem9uZVwiO1xuY29uc3QgX1RLID0gXCJUYWdLZXlzXCI7XG5jb25zdCBfVE1EID0gXCJUcmVhdE1pc3NpbmdEYXRhXCI7XG5jb25zdCBfVE1JID0gXCJUaHJlc2hvbGRNZXRyaWNJZFwiO1xuY29uc3QgX1ROID0gXCJUZW1wbGF0ZU5hbWVcIjtcbmNvbnN0IF9UUiA9IFwiVGFnUmVzb3VyY2VcIjtcbmNvbnN0IF9UYSA9IFwiVGFnc1wiO1xuY29uc3QgX1RoID0gXCJUaHJlc2hvbGRcIjtcbmNvbnN0IF9UaSA9IFwiVGltZXN0YW1wXCI7XG5jb25zdCBfVGltID0gXCJUaW1lc3RhbXBzXCI7XG5jb25zdCBfVSA9IFwiVW5pdFwiO1xuY29uc3QgX1VDID0gXCJVbmlxdWVDb250cmlidXRvcnNcIjtcbmNvbnN0IF9VUiA9IFwiVW50YWdSZXNvdXJjZVwiO1xuY29uc3QgX1YgPSBcIlZlcnNpb25cIjtcbmNvbnN0IF9WYSA9IFwiVmFsdWVcIjtcbmNvbnN0IF9WYWwgPSBcIlZhbHVlc1wiO1xuY29uc3QgX2RWTSA9IFwiZGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzXCI7XG5jb25zdCBfZSA9IFwiZW50cnlcIjtcbmNvbnN0IF9tID0gXCJtZW1iZXJcIjtcbmNvbnN0IF9tZSA9IFwibWVzc2FnZVwiO1xuY29uc3QgcGFyc2VCb2R5ID0gKHN0cmVhbUJvZHksIGNvbnRleHQpID0+IGNvbGxlY3RCb2R5U3RyaW5nKHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGVuY29kZWQpID0+IHtcbiAgICBpZiAoZW5jb2RlZC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IFhNTFBhcnNlcih7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lUHJlZml4OiBcIlwiLFxuICAgICAgICAgICAgaHRtbEVudGl0aWVzOiB0cnVlLFxuICAgICAgICAgICAgaWdub3JlQXR0cmlidXRlczogZmFsc2UsXG4gICAgICAgICAgICBpZ25vcmVEZWNsYXJhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIHBhcnNlVGFnVmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgdHJpbVZhbHVlczogZmFsc2UsXG4gICAgICAgICAgICB0YWdWYWx1ZVByb2Nlc3NvcjogKF8sIHZhbCkgPT4gKHZhbC50cmltKCkgPT09IFwiXCIgJiYgdmFsLmluY2x1ZGVzKFwiXFxuXCIpID8gXCJcIiA6IHVuZGVmaW5lZCksXG4gICAgICAgIH0pO1xuICAgICAgICBwYXJzZXIuYWRkRW50aXR5KFwiI3hEXCIsIFwiXFxyXCIpO1xuICAgICAgICBwYXJzZXIuYWRkRW50aXR5KFwiIzEwXCIsIFwiXFxuXCIpO1xuICAgICAgICBjb25zdCBwYXJzZWRPYmogPSBwYXJzZXIucGFyc2UoZW5jb2RlZCk7XG4gICAgICAgIGNvbnN0IHRleHROb2RlTmFtZSA9IFwiI3RleHRcIjtcbiAgICAgICAgY29uc3Qga2V5ID0gT2JqZWN0LmtleXMocGFyc2VkT2JqKVswXTtcbiAgICAgICAgY29uc3QgcGFyc2VkT2JqVG9SZXR1cm4gPSBwYXJzZWRPYmpba2V5XTtcbiAgICAgICAgaWYgKHBhcnNlZE9ialRvUmV0dXJuW3RleHROb2RlTmFtZV0pIHtcbiAgICAgICAgICAgIHBhcnNlZE9ialRvUmV0dXJuW2tleV0gPSBwYXJzZWRPYmpUb1JldHVyblt0ZXh0Tm9kZU5hbWVdO1xuICAgICAgICAgICAgZGVsZXRlIHBhcnNlZE9ialRvUmV0dXJuW3RleHROb2RlTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9fZ2V0VmFsdWVGcm9tVGV4dE5vZGUocGFyc2VkT2JqVG9SZXR1cm4pO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59KTtcbmNvbnN0IHBhcnNlRXJyb3JCb2R5ID0gYXN5bmMgKGVycm9yQm9keSwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFyc2VCb2R5KGVycm9yQm9keSwgY29udGV4dCk7XG4gICAgaWYgKHZhbHVlLkVycm9yKSB7XG4gICAgICAgIHZhbHVlLkVycm9yLm1lc3NhZ2UgPSB2YWx1ZS5FcnJvci5tZXNzYWdlID8/IHZhbHVlLkVycm9yLk1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5jb25zdCBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nID0gKGZvcm1FbnRyaWVzKSA9PiBPYmplY3QuZW50cmllcyhmb3JtRW50cmllcylcbiAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IF9fZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgX19leHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgLmpvaW4oXCImXCIpO1xuY29uc3QgbG9hZFF1ZXJ5RXJyb3JDb2RlID0gKG91dHB1dCwgZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhLkVycm9yPy5Db2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuRXJyb3IuQ29kZTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID09IDQwNCkge1xuICAgICAgICByZXR1cm4gXCJOb3RGb3VuZFwiO1xuICAgIH1cbn07XG4iLCJpbXBvcnQgeyBnZXRDb21wcmVzc2lvblBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtY29tcHJlc3Npb25cIjtcbmltcG9ydCB7IGdldEVuZHBvaW50UGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0U2VyZGVQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlXCI7XG5pbXBvcnQgeyBDb21tYW5kIGFzICRDb21tYW5kIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgY29tbW9uUGFyYW1zIH0gZnJvbSBcIi4uL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgZGVfUHV0TWV0cmljRGF0YUNvbW1hbmQsIHNlX1B1dE1ldHJpY0RhdGFDb21tYW5kIH0gZnJvbSBcIi4uL3Byb3RvY29scy9Bd3NfcXVlcnlcIjtcbmV4cG9ydCB7ICRDb21tYW5kIH07XG5leHBvcnQgY2xhc3MgUHV0TWV0cmljRGF0YUNvbW1hbmQgZXh0ZW5kcyAkQ29tbWFuZFxuICAgIC5jbGFzc0J1aWxkZXIoKVxuICAgIC5lcCh7XG4gICAgLi4uY29tbW9uUGFyYW1zLFxufSlcbiAgICAubShmdW5jdGlvbiAoQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICAgIHJldHVybiBbXG4gICAgICAgIGdldFNlcmRlUGx1Z2luKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICAgICBnZXRFbmRwb2ludFBsdWdpbihjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSksXG4gICAgICAgIGdldENvbXByZXNzaW9uUGx1Z2luKGNvbmZpZywgeyBlbmNvZGluZ3M6IFtcImd6aXBcIl0gfSksXG4gICAgXTtcbn0pXG4gICAgLnMoXCJHcmFuaXRlU2VydmljZVZlcnNpb24yMDEwMDgwMVwiLCBcIlB1dE1ldHJpY0RhdGFcIiwge30pXG4gICAgLm4oXCJDbG91ZFdhdGNoQ2xpZW50XCIsIFwiUHV0TWV0cmljRGF0YUNvbW1hbmRcIilcbiAgICAuZih2b2lkIDAsIHZvaWQgMClcbiAgICAuc2VyKHNlX1B1dE1ldHJpY0RhdGFDb21tYW5kKVxuICAgIC5kZShkZV9QdXRNZXRyaWNEYXRhQ29tbWFuZClcbiAgICAuYnVpbGQoKSB7XG59XG4iLCJpbXBvcnQgeyBDbG91ZFdhdGNoQ2xpZW50LCBNZXRyaWNEYXR1bSwgUHV0TWV0cmljRGF0YUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaCdcblxuZXhwb3J0IGNsYXNzIENsb3VkV2F0Y2hNZXRyaWNDbGllbnQge1xuXHRwcml2YXRlIG1ldHJpY0RhdGE6IE1ldHJpY0RhdHVtW10gPSBbXVxuXHRwcml2YXRlIGNsb3VkV2F0Y2hDbGllbnQgPSBuZXcgQ2xvdWRXYXRjaENsaWVudCh7fSlcblxuXHQvLyBOb3JtYWxseSB3ZSdkIHdvcnJ5IGFib3V0IG1heCBtZXRyaWMgZGF0YSBwZXIgcmVxdWVzdCBidXQgdGhlIG1heCBpcyBjdXJyZW50bHkgMjAgYW5kIHdlIHdvbid0IGJlIHB1Ymxpc2hpbmcgdGhhdCBtYW55IG1ldHJpY3Ncblx0cHVibGljIHF1ZXVlTWV0cmljKG1ldHJpY0RhdHVtOiBNZXRyaWNEYXR1bSkge1xuXHRcdHRoaXMubWV0cmljRGF0YS5wdXNoKG1ldHJpY0RhdHVtKVxuXHR9XG5cblx0cHVibGljIGFzeW5jIGVtaXRRdWV1ZWRNZXRyaWNzKCkge1xuXHRcdGNvbnN0IHB1dE1ldHJpY0RhdGFDb21tYW5kID0gbmV3IFB1dE1ldHJpY0RhdGFDb21tYW5kKHtcblx0XHRcdE5hbWVzcGFjZTogcHJvY2Vzcy5lbnYuQVdTX0xBTUJEQV9GVU5DVElPTl9OQU1FLFxuXHRcdFx0TWV0cmljRGF0YTogdGhpcy5tZXRyaWNEYXRhLFxuXHRcdH0pXG5cblx0XHQvLyBTdHJ5a2VyIGRpc2FibGUgbmV4dC1saW5lIGFsbCBcIkkgZG8gbm90IGNhcmUgYWJvdXQgbXV0YXRpbmcgY29uc29sZSBzdGF0ZW1lbnRzXCJcblx0XHRjb25zb2xlLmRlYnVnKGBFbWl0dGluZyBtZXRyaWNzOlxcbiR7SlNPTi5zdHJpbmdpZnkocHV0TWV0cmljRGF0YUNvbW1hbmQuaW5wdXQsIG51bGwsIDIpfWApXG5cblx0XHRhd2FpdCB0aGlzLmNsb3VkV2F0Y2hDbGllbnQuc2VuZChwdXRNZXRyaWNEYXRhQ29tbWFuZClcblxuXHRcdHRoaXMubWV0cmljRGF0YSA9IFtdXG5cdH1cbn0iLCJpbXBvcnQgeyByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IGdldFNtaXRoeUNvbnRleHQsIG5vcm1hbGl6ZVByb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdFNFU0h0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyID0gYXN5bmMgKGNvbmZpZywgY29udGV4dCwgaW5wdXQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcGVyYXRpb246IGdldFNtaXRoeUNvbnRleHQoY29udGV4dCkub3BlcmF0aW9uLFxuICAgICAgICByZWdpb246IChhd2FpdCBub3JtYWxpemVQcm92aWRlcihjb25maWcucmVnaW9uKSgpKSB8fFxuICAgICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3RlZCBgcmVnaW9uYCB0byBiZSBjb25maWd1cmVkIGZvciBgYXdzLmF1dGgjc2lndjRgXCIpO1xuICAgICAgICAgICAgfSkoKSxcbiAgICB9O1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lSWQ6IFwiYXdzLmF1dGgjc2lndjRcIixcbiAgICAgICAgc2lnbmluZ1Byb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIG5hbWU6IFwic2VzXCIsXG4gICAgICAgICAgICByZWdpb246IGF1dGhQYXJhbWV0ZXJzLnJlZ2lvbixcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcGVydGllc0V4dHJhY3RvcjogKGNvbmZpZywgY29udGV4dCkgPT4gKHtcbiAgICAgICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTRVNIdHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gKGF1dGhQYXJhbWV0ZXJzKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuICAgIHN3aXRjaCAoYXV0aFBhcmFtZXRlcnMub3BlcmF0aW9uKSB7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgY29uc3QgY29uZmlnXzAgPSByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcoY29uZmlnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jb25maWdfMCxcbiAgICB9O1xufTtcbiIsImV4cG9ydCBjb25zdCByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzID0gKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogb3B0aW9ucy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBmYWxzZSxcbiAgICAgICAgdXNlRmlwc0VuZHBvaW50OiBvcHRpb25zLnVzZUZpcHNFbmRwb2ludCA/PyBmYWxzZSxcbiAgICAgICAgZGVmYXVsdFNpZ25pbmdOYW1lOiBcInNlc1wiLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IGNvbW1vblBhcmFtcyA9IHtcbiAgICBVc2VGSVBTOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUZpcHNFbmRwb2ludFwiIH0sXG4gICAgRW5kcG9pbnQ6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwiZW5kcG9pbnRcIiB9LFxuICAgIFJlZ2lvbjogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJyZWdpb25cIiB9LFxuICAgIFVzZUR1YWxTdGFjazogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJ1c2VEdWFsc3RhY2tFbmRwb2ludFwiIH0sXG59O1xuIiwiY29uc3QgcyA9IFwicmVxdWlyZWRcIiwgdCA9IFwiZm5cIiwgdSA9IFwiYXJndlwiLCB2ID0gXCJyZWZcIjtcbmNvbnN0IGEgPSB0cnVlLCBiID0gXCJpc1NldFwiLCBjID0gXCJib29sZWFuRXF1YWxzXCIsIGQgPSBcImVycm9yXCIsIGUgPSBcImVuZHBvaW50XCIsIGYgPSBcInRyZWVcIiwgZyA9IFwiUGFydGl0aW9uUmVzdWx0XCIsIGggPSB7IFtzXTogZmFsc2UsIFwidHlwZVwiOiBcIlN0cmluZ1wiIH0sIGkgPSB7IFtzXTogdHJ1ZSwgXCJkZWZhdWx0XCI6IGZhbHNlLCBcInR5cGVcIjogXCJCb29sZWFuXCIgfSwgaiA9IHsgW3ZdOiBcIkVuZHBvaW50XCIgfSwgayA9IHsgW3RdOiBjLCBbdV06IFt7IFt2XTogXCJVc2VGSVBTXCIgfSwgdHJ1ZV0gfSwgbCA9IHsgW3RdOiBjLCBbdV06IFt7IFt2XTogXCJVc2VEdWFsU3RhY2tcIiB9LCB0cnVlXSB9LCBtID0ge30sIG4gPSB7IFt0XTogXCJnZXRBdHRyXCIsIFt1XTogW3sgW3ZdOiBnIH0sIFwic3VwcG9ydHNGSVBTXCJdIH0sIG8gPSB7IFt0XTogYywgW3VdOiBbdHJ1ZSwgeyBbdF06IFwiZ2V0QXR0clwiLCBbdV06IFt7IFt2XTogZyB9LCBcInN1cHBvcnRzRHVhbFN0YWNrXCJdIH1dIH0sIHAgPSBba10sIHEgPSBbbF0sIHIgPSBbeyBbdl06IFwiUmVnaW9uXCIgfV07XG5jb25zdCBfZGF0YSA9IHsgdmVyc2lvbjogXCIxLjBcIiwgcGFyYW1ldGVyczogeyBSZWdpb246IGgsIFVzZUR1YWxTdGFjazogaSwgVXNlRklQUzogaSwgRW5kcG9pbnQ6IGggfSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt0XTogYiwgW3VdOiBbal0gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBwLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IEZJUFMgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgY29uZGl0aW9uczogcSwgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBEdWFsc3RhY2sgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBqLCBwcm9wZXJ0aWVzOiBtLCBoZWFkZXJzOiBtIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBbeyBbdF06IGIsIFt1XTogciB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt0XTogXCJhd3MucGFydGl0aW9uXCIsIFt1XTogciwgYXNzaWduOiBnIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW2ssIGxdLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3RdOiBjLCBbdV06IFthLCBuXSB9LCBvXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL2VtYWlsLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG0sIGhlYWRlcnM6IG0gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkZJUFMgYW5kIER1YWxTdGFjayBhcmUgZW5hYmxlZCwgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgb25lIG9yIGJvdGhcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHAsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdF06IGMsIFt1XTogW24sIGFdIH1dLCBydWxlczogW3sgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vZW1haWwtZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbSwgaGVhZGVyczogbSB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRklQUyBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IEZJUFNcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHEsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbb10sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9lbWFpbC57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbSwgaGVhZGVyczogbSB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRHVhbFN0YWNrIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRHVhbFN0YWNrXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9lbWFpbC57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbSwgaGVhZGVyczogbSB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBNaXNzaW5nIFJlZ2lvblwiLCB0eXBlOiBkIH1dIH07XG5leHBvcnQgY29uc3QgcnVsZVNldCA9IF9kYXRhO1xuIiwiaW1wb3J0IHsgcmVzb2x2ZUVuZHBvaW50IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1lbmRwb2ludHNcIjtcbmltcG9ydCB7IHJ1bGVTZXQgfSBmcm9tIFwiLi9ydWxlc2V0XCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgPSAoZW5kcG9pbnRQYXJhbXMsIGNvbnRleHQgPSB7fSkgPT4ge1xuICAgIHJldHVybiByZXNvbHZlRW5kcG9pbnQocnVsZVNldCwge1xuICAgICAgICBlbmRwb2ludFBhcmFtczogZW5kcG9pbnRQYXJhbXMsXG4gICAgICAgIGxvZ2dlcjogY29udGV4dC5sb2dnZXIsXG4gICAgfSk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IChydW50aW1lQ29uZmlnKSA9PiB7XG4gICAgY29uc3QgX2h0dHBBdXRoU2NoZW1lcyA9IHJ1bnRpbWVDb25maWcuaHR0cEF1dGhTY2hlbWVzO1xuICAgIGxldCBfaHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IHJ1bnRpbWVDb25maWcuaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICBsZXQgX2NyZWRlbnRpYWxzID0gcnVudGltZUNvbmZpZy5jcmVkZW50aWFscztcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRIdHRwQXV0aFNjaGVtZShodHRwQXV0aFNjaGVtZSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBfaHR0cEF1dGhTY2hlbWVzLmZpbmRJbmRleCgoc2NoZW1lKSA9PiBzY2hlbWUuc2NoZW1lSWQgPT09IGh0dHBBdXRoU2NoZW1lLnNjaGVtZUlkKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVzLnB1c2goaHR0cEF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lcy5zcGxpY2UoaW5kZXgsIDEsIGh0dHBBdXRoU2NoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9odHRwQXV0aFNjaGVtZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoaHR0cEF1dGhTY2hlbWVQcm92aWRlcikge1xuICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBodHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBzZXRDcmVkZW50aWFscyhjcmVkZW50aWFscykge1xuICAgICAgICAgICAgX2NyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRlbnRpYWxzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnLmh0dHBBdXRoU2NoZW1lcygpLFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyOiBjb25maWcuaHR0cEF1dGhTY2hlbWVQcm92aWRlcigpLFxuICAgICAgICBjcmVkZW50aWFsczogY29uZmlnLmNyZWRlbnRpYWxzKCksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBnZXRIb3N0SGVhZGVyUGx1Z2luLCByZXNvbHZlSG9zdEhlYWRlckNvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1ob3N0LWhlYWRlclwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyUGx1Z2luIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtbG9nZ2VyXCI7XG5pbXBvcnQgeyBnZXRSZWN1cnNpb25EZXRlY3Rpb25QbHVnaW4gfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1yZWN1cnNpb24tZGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBnZXRVc2VyQWdlbnRQbHVnaW4sIHJlc29sdmVVc2VyQWdlbnRDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudFwiO1xuaW1wb3J0IHsgcmVzb2x2ZVJlZ2lvbkNvbmZpZyB9IGZyb20gXCJAc21pdGh5L2NvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcsIGdldEh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0UGx1Z2luLCBnZXRIdHRwU2lnbmluZ1BsdWdpbiwgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBnZXRDb250ZW50TGVuZ3RoUGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1jb250ZW50LWxlbmd0aFwiO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZHBvaW50Q29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0UmV0cnlQbHVnaW4sIHJlc29sdmVSZXRyeUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtcmV0cnlcIjtcbmltcG9ydCB7IENsaWVudCBhcyBfX0NsaWVudCwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsIHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZywgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIjtcbmltcG9ydCB7IHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMsIH0gZnJvbSBcIi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIF9fZ2V0UnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWdcIjtcbmltcG9ydCB7IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyB9IGZyb20gXCIuL3J1bnRpbWVFeHRlbnNpb25zXCI7XG5leHBvcnQgeyBfX0NsaWVudCB9O1xuZXhwb3J0IGNsYXNzIFNFU0NsaWVudCBleHRlbmRzIF9fQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvciguLi5bY29uZmlndXJhdGlvbl0pIHtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18wID0gX19nZXRSdW50aW1lQ29uZmlnKGNvbmZpZ3VyYXRpb24gfHwge30pO1xuICAgICAgICBjb25zdCBfY29uZmlnXzEgPSByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzKF9jb25maWdfMCk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMiA9IHJlc29sdmVSZWdpb25Db25maWcoX2NvbmZpZ18xKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18zID0gcmVzb2x2ZUVuZHBvaW50Q29uZmlnKF9jb25maWdfMik7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNCA9IHJlc29sdmVSZXRyeUNvbmZpZyhfY29uZmlnXzMpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzUgPSByZXNvbHZlSG9zdEhlYWRlckNvbmZpZyhfY29uZmlnXzQpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzYgPSByZXNvbHZlVXNlckFnZW50Q29uZmlnKF9jb25maWdfNSk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNyA9IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyhfY29uZmlnXzYpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzggPSByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMoX2NvbmZpZ183LCBjb25maWd1cmF0aW9uPy5leHRlbnNpb25zIHx8IFtdKTtcbiAgICAgICAgc3VwZXIoX2NvbmZpZ184KTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBfY29uZmlnXzg7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRSZXRyeVBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0Q29udGVudExlbmd0aFBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SG9zdEhlYWRlclBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0TG9nZ2VyUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRSZWN1cnNpb25EZXRlY3Rpb25QbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFVzZXJBZ2VudFBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4odGhpcy5jb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyOiB0aGlzLmdldERlZmF1bHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcigpLFxuICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyOiB0aGlzLmdldElkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcigpLFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIdHRwU2lnbmluZ1BsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIGdldERlZmF1bHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcigpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTRVNIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcjtcbiAgICB9XG4gICAgZ2V0SWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyKCkge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGNvbmZpZykgPT4gbmV3IERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnKHtcbiAgICAgICAgICAgIFwiYXdzLmF1dGgjc2lndjRcIjogY29uZmlnLmNyZWRlbnRpYWxzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgcGFja2FnZUluZm8gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IHsgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiBhcyBhd3NDaGVja1ZlcnNpb24gfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgZGVmYXVsdFByb3ZpZGVyIGFzIGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlXCI7XG5pbXBvcnQgeyBkZWZhdWx0VXNlckFnZW50IH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtdXNlci1hZ2VudC1ub2RlXCI7XG5pbXBvcnQgeyBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLCBOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCBOT0RFX1VTRV9GSVBTX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCB9IGZyb20gXCJAc21pdGh5L2NvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgSGFzaCB9IGZyb20gXCJAc21pdGh5L2hhc2gtbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUywgTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgbG9hZENvbmZpZyBhcyBsb2FkTm9kZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBOb2RlSHR0cEhhbmRsZXIgYXMgUmVxdWVzdEhhbmRsZXIsIHN0cmVhbUNvbGxlY3RvciB9IGZyb20gXCJAc21pdGh5L25vZGUtaHR0cC1oYW5kbGVyXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVCb2R5TGVuZ3RoIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1ub2RlXCI7XG5pbXBvcnQgeyBERUZBVUxUX1JFVFJZX01PREUgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXJldHJ5XCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIGdldFNoYXJlZFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9ydW50aW1lQ29uZmlnLnNoYXJlZFwiO1xuaW1wb3J0IHsgbG9hZENvbmZpZ3NGb3JEZWZhdWx0TW9kZSB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IHJlc29sdmVEZWZhdWx0c01vZGVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZVwiO1xuaW1wb3J0IHsgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmV4cG9ydCBjb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24ocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBjb25zdCBkZWZhdWx0c01vZGUgPSByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnKGNvbmZpZyk7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZ1Byb3ZpZGVyID0gKCkgPT4gZGVmYXVsdHNNb2RlKCkudGhlbihsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlKTtcbiAgICBjb25zdCBjbGllbnRTaGFyZWRWYWx1ZXMgPSBnZXRTaGFyZWRSdW50aW1lQ29uZmlnKGNvbmZpZyk7XG4gICAgYXdzQ2hlY2tWZXJzaW9uKHByb2Nlc3MudmVyc2lvbik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY2xpZW50U2hhcmVkVmFsdWVzLFxuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIHJ1bnRpbWU6IFwibm9kZVwiLFxuICAgICAgICBkZWZhdWx0c01vZGUsXG4gICAgICAgIGJvZHlMZW5ndGhDaGVja2VyOiBjb25maWc/LmJvZHlMZW5ndGhDaGVja2VyID8/IGNhbGN1bGF0ZUJvZHlMZW5ndGgsXG4gICAgICAgIGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXI6IGNvbmZpZz8uY3JlZGVudGlhbERlZmF1bHRQcm92aWRlciA/PyBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyLFxuICAgICAgICBkZWZhdWx0VXNlckFnZW50UHJvdmlkZXI6IGNvbmZpZz8uZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyID8/XG4gICAgICAgICAgICBkZWZhdWx0VXNlckFnZW50KHsgc2VydmljZUlkOiBjbGllbnRTaGFyZWRWYWx1ZXMuc2VydmljZUlkLCBjbGllbnRWZXJzaW9uOiBwYWNrYWdlSW5mby52ZXJzaW9uIH0pLFxuICAgICAgICBtYXhBdHRlbXB0czogY29uZmlnPy5tYXhBdHRlbXB0cyA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TKSxcbiAgICAgICAgcmVnaW9uOiBjb25maWc/LnJlZ2lvbiA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUyksXG4gICAgICAgIHJlcXVlc3RIYW5kbGVyOiBjb25maWc/LnJlcXVlc3RIYW5kbGVyID8/IG5ldyBSZXF1ZXN0SGFuZGxlcihkZWZhdWx0Q29uZmlnUHJvdmlkZXIpLFxuICAgICAgICByZXRyeU1vZGU6IGNvbmZpZz8ucmV0cnlNb2RlID8/XG4gICAgICAgICAgICBsb2FkTm9kZUNvbmZpZyh7XG4gICAgICAgICAgICAgICAgLi4uTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGFzeW5jICgpID0+IChhd2FpdCBkZWZhdWx0Q29uZmlnUHJvdmlkZXIoKSkucmV0cnlNb2RlIHx8IERFRkFVTFRfUkVUUllfTU9ERSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBzaGEyNTY6IGNvbmZpZz8uc2hhMjU2ID8/IEhhc2guYmluZChudWxsLCBcInNoYTI1NlwiKSxcbiAgICAgICAgc3RyZWFtQ29sbGVjdG9yOiBjb25maWc/LnN0cmVhbUNvbGxlY3RvciA/PyBzdHJlYW1Db2xsZWN0b3IsXG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBjb25maWc/LnVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGxvYWROb2RlQ29uZmlnKE5PREVfVVNFX0RVQUxTVEFDS19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUyksXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogY29uZmlnPy51c2VGaXBzRW5kcG9pbnQgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUyksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBBd3NTZGtTaWdWNFNpZ25lciB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBOb09wTG9nZ2VyIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgcGFyc2VVcmwgfSBmcm9tIFwiQHNtaXRoeS91cmwtcGFyc2VyXCI7XG5pbXBvcnQgeyBmcm9tQmFzZTY0LCB0b0Jhc2U2NCB9IGZyb20gXCJAc21pdGh5L3V0aWwtYmFzZTY0XCI7XG5pbXBvcnQgeyBmcm9tVXRmOCwgdG9VdGY4IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQcm92aWRlciB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiO1xuaW1wb3J0IHsgZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgfSBmcm9tIFwiLi9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyXCI7XG5leHBvcnQgY29uc3QgZ2V0UnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcGlWZXJzaW9uOiBcIjIwMTAtMTItMDFcIixcbiAgICAgICAgYmFzZTY0RGVjb2RlcjogY29uZmlnPy5iYXNlNjREZWNvZGVyID8/IGZyb21CYXNlNjQsXG4gICAgICAgIGJhc2U2NEVuY29kZXI6IGNvbmZpZz8uYmFzZTY0RW5jb2RlciA/PyB0b0Jhc2U2NCxcbiAgICAgICAgZGlzYWJsZUhvc3RQcmVmaXg6IGNvbmZpZz8uZGlzYWJsZUhvc3RQcmVmaXggPz8gZmFsc2UsXG4gICAgICAgIGVuZHBvaW50UHJvdmlkZXI6IGNvbmZpZz8uZW5kcG9pbnRQcm92aWRlciA/PyBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlcixcbiAgICAgICAgZXh0ZW5zaW9uczogY29uZmlnPy5leHRlbnNpb25zID8/IFtdLFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyOiBjb25maWc/Lmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPz8gZGVmYXVsdFNFU0h0dHBBdXRoU2NoZW1lUHJvdmlkZXIsXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnPy5odHRwQXV0aFNjaGVtZXMgPz8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlcjogKGlwYykgPT4gaXBjLmdldElkZW50aXR5UHJvdmlkZXIoXCJhd3MuYXV0aCNzaWd2NFwiKSxcbiAgICAgICAgICAgICAgICBzaWduZXI6IG5ldyBBd3NTZGtTaWdWNFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbG9nZ2VyOiBjb25maWc/LmxvZ2dlciA/PyBuZXcgTm9PcExvZ2dlcigpLFxuICAgICAgICBzZXJ2aWNlSWQ6IGNvbmZpZz8uc2VydmljZUlkID8/IFwiU0VTXCIsXG4gICAgICAgIHVybFBhcnNlcjogY29uZmlnPy51cmxQYXJzZXIgPz8gcGFyc2VVcmwsXG4gICAgICAgIHV0ZjhEZWNvZGVyOiBjb25maWc/LnV0ZjhEZWNvZGVyID8/IGZyb21VdGY4LFxuICAgICAgICB1dGY4RW5jb2RlcjogY29uZmlnPy51dGY4RW5jb2RlciA/PyB0b1V0ZjgsXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgfSBmcm9tIFwiQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uXCI7XG5jb25zdCBhc1BhcnRpYWwgPSAodCkgPT4gdDtcbmV4cG9ydCBjb25zdCByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMgPSAocnVudGltZUNvbmZpZywgZXh0ZW5zaW9ucykgPT4ge1xuICAgIGNvbnN0IGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSB7XG4gICAgICAgIC4uLmFzUGFydGlhbChnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpKSxcbiAgICAgICAgLi4uYXNQYXJ0aWFsKGdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpKSxcbiAgICAgICAgLi4uYXNQYXJ0aWFsKGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSksXG4gICAgICAgIC4uLmFzUGFydGlhbChnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZykpLFxuICAgIH07XG4gICAgZXh0ZW5zaW9ucy5mb3JFYWNoKChleHRlbnNpb24pID0+IGV4dGVuc2lvbi5jb25maWd1cmUoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbikpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnJ1bnRpbWVDb25maWcsXG4gICAgICAgIC4uLnJlc29sdmVBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgICAgICAuLi5yZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksXG4gICAgICAgIC4uLnJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWcoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksXG4gICAgICAgIC4uLnJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fU2VydmljZUV4Y2VwdGlvbiwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5leHBvcnQgeyBfX1NlcnZpY2VFeGNlcHRpb24gfTtcbmV4cG9ydCBjbGFzcyBTRVNTZXJ2aWNlRXhjZXB0aW9uIGV4dGVuZHMgX19TZXJ2aWNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgU0VTU2VydmljZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNFU1NlcnZpY2VFeGNlcHRpb24gYXMgX19CYXNlRXhjZXB0aW9uIH0gZnJvbSBcIi4vU0VTU2VydmljZUV4Y2VwdGlvblwiO1xuZXhwb3J0IGNsYXNzIEFjY291bnRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFjY291bnRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjY291bnRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFscmVhZHlFeGlzdHNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5OYW1lID0gb3B0cy5OYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBCZWhhdmlvck9uTVhGYWlsdXJlID0ge1xuICAgIFJlamVjdE1lc3NhZ2U6IFwiUmVqZWN0TWVzc2FnZVwiLFxuICAgIFVzZURlZmF1bHRWYWx1ZTogXCJVc2VEZWZhdWx0VmFsdWVcIixcbn07XG5leHBvcnQgY29uc3QgQm91bmNlVHlwZSA9IHtcbiAgICBDb250ZW50UmVqZWN0ZWQ6IFwiQ29udGVudFJlamVjdGVkXCIsXG4gICAgRG9lc05vdEV4aXN0OiBcIkRvZXNOb3RFeGlzdFwiLFxuICAgIEV4Y2VlZGVkUXVvdGE6IFwiRXhjZWVkZWRRdW90YVwiLFxuICAgIE1lc3NhZ2VUb29MYXJnZTogXCJNZXNzYWdlVG9vTGFyZ2VcIixcbiAgICBUZW1wb3JhcnlGYWlsdXJlOiBcIlRlbXBvcmFyeUZhaWx1cmVcIixcbiAgICBVbmRlZmluZWQ6IFwiVW5kZWZpbmVkXCIsXG59O1xuZXhwb3J0IGNvbnN0IERzbkFjdGlvbiA9IHtcbiAgICBERUxBWUVEOiBcImRlbGF5ZWRcIixcbiAgICBERUxJVkVSRUQ6IFwiZGVsaXZlcmVkXCIsXG4gICAgRVhQQU5ERUQ6IFwiZXhwYW5kZWRcIixcbiAgICBGQUlMRUQ6IFwiZmFpbGVkXCIsXG4gICAgUkVMQVlFRDogXCJyZWxheWVkXCIsXG59O1xuZXhwb3J0IGNvbnN0IEJ1bGtFbWFpbFN0YXR1cyA9IHtcbiAgICBBY2NvdW50RGFpbHlRdW90YUV4Y2VlZGVkOiBcIkFjY291bnREYWlseVF1b3RhRXhjZWVkZWRcIixcbiAgICBBY2NvdW50U2VuZGluZ1BhdXNlZDogXCJBY2NvdW50U2VuZGluZ1BhdXNlZFwiLFxuICAgIEFjY291bnRTdXNwZW5kZWQ6IFwiQWNjb3VudFN1c3BlbmRlZFwiLFxuICAgIEFjY291bnRUaHJvdHRsZWQ6IFwiQWNjb3VudFRocm90dGxlZFwiLFxuICAgIENvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3Q6IFwiQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdFwiLFxuICAgIENvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkOiBcIkNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkXCIsXG4gICAgRmFpbGVkOiBcIkZhaWxlZFwiLFxuICAgIEludmFsaWRQYXJhbWV0ZXJWYWx1ZTogXCJJbnZhbGlkUGFyYW1ldGVyVmFsdWVcIixcbiAgICBJbnZhbGlkU2VuZGluZ1Bvb2xOYW1lOiBcIkludmFsaWRTZW5kaW5nUG9vbE5hbWVcIixcbiAgICBNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkOiBcIk1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRcIixcbiAgICBNZXNzYWdlUmVqZWN0ZWQ6IFwiTWVzc2FnZVJlamVjdGVkXCIsXG4gICAgU3VjY2VzczogXCJTdWNjZXNzXCIsXG4gICAgVGVtcGxhdGVEb2VzTm90RXhpc3Q6IFwiVGVtcGxhdGVEb2VzTm90RXhpc3RcIixcbiAgICBUcmFuc2llbnRGYWlsdXJlOiBcIlRyYW5zaWVudEZhaWx1cmVcIixcbn07XG5leHBvcnQgY2xhc3MgQ2Fubm90RGVsZXRlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ2Fubm90RGVsZXRlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJDYW5ub3REZWxldGVFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2Fubm90RGVsZXRlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTmFtZSA9IG9wdHMuTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkxpbWl0RXhjZWVkZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkxpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTGltaXRFeGNlZWRlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdWxlU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSdWxlU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTmFtZSA9IG9wdHMuTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRGltZW5zaW9uVmFsdWVTb3VyY2UgPSB7XG4gICAgRU1BSUxfSEVBREVSOiBcImVtYWlsSGVhZGVyXCIsXG4gICAgTElOS19UQUc6IFwibGlua1RhZ1wiLFxuICAgIE1FU1NBR0VfVEFHOiBcIm1lc3NhZ2VUYWdcIixcbn07XG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDb25maWd1cmF0aW9uU2V0QWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5Db25maWd1cmF0aW9uU2V0TmFtZSA9IG9wdHMuQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IENvbmZpZ3VyYXRpb25TZXRBdHRyaWJ1dGUgPSB7XG4gICAgREVMSVZFUllfT1BUSU9OUzogXCJkZWxpdmVyeU9wdGlvbnNcIixcbiAgICBFVkVOVF9ERVNUSU5BVElPTlM6IFwiZXZlbnREZXN0aW5hdGlvbnNcIixcbiAgICBSRVBVVEFUSU9OX09QVElPTlM6IFwicmVwdXRhdGlvbk9wdGlvbnNcIixcbiAgICBUUkFDS0lOR19PUFRJT05TOiBcInRyYWNraW5nT3B0aW9uc1wiLFxufTtcbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuQ29uZmlndXJhdGlvblNldE5hbWUgPSBvcHRzLkNvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJDb25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRXZlbnRUeXBlID0ge1xuICAgIEJPVU5DRTogXCJib3VuY2VcIixcbiAgICBDTElDSzogXCJjbGlja1wiLFxuICAgIENPTVBMQUlOVDogXCJjb21wbGFpbnRcIixcbiAgICBERUxJVkVSWTogXCJkZWxpdmVyeVwiLFxuICAgIE9QRU46IFwib3BlblwiLFxuICAgIFJFSkVDVDogXCJyZWplY3RcIixcbiAgICBSRU5ERVJJTkdfRkFJTFVSRTogXCJyZW5kZXJpbmdGYWlsdXJlXCIsXG4gICAgU0VORDogXCJzZW5kXCIsXG59O1xuZXhwb3J0IGNsYXNzIEV2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkV2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuQ29uZmlndXJhdGlvblNldE5hbWUgPSBvcHRzLkNvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgICAgICB0aGlzLkV2ZW50RGVzdGluYXRpb25OYW1lID0gb3B0cy5FdmVudERlc3RpbmF0aW9uTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZENsb3VkV2F0Y2hEZXN0aW5hdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZENsb3VkV2F0Y2hEZXN0aW5hdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICAgICAgdGhpcy5FdmVudERlc3RpbmF0aW9uTmFtZSA9IG9wdHMuRXZlbnREZXN0aW5hdGlvbk5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuQ29uZmlndXJhdGlvblNldE5hbWUgPSBvcHRzLkNvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgICAgICB0aGlzLkV2ZW50RGVzdGluYXRpb25OYW1lID0gb3B0cy5FdmVudERlc3RpbmF0aW9uTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuQ29uZmlndXJhdGlvblNldE5hbWUgPSBvcHRzLkNvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgICAgICB0aGlzLkV2ZW50RGVzdGluYXRpb25OYW1lID0gb3B0cy5FdmVudERlc3RpbmF0aW9uTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFRyYWNraW5nT3B0aW9uc0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFRyYWNraW5nT3B0aW9uc0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuQ29uZmlndXJhdGlvblNldE5hbWUgPSBvcHRzLkNvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxJbnZhbGlkQ29udGVudEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxJbnZhbGlkQ29udGVudEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZU5hbWUgPSBvcHRzLkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVOYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBGcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJGcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkZyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBGcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5Gcm9tRW1haWxBZGRyZXNzID0gb3B0cy5Gcm9tRW1haWxBZGRyZXNzO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBSZWNlaXB0RmlsdGVyUG9saWN5ID0ge1xuICAgIEFsbG93OiBcIkFsbG93XCIsXG4gICAgQmxvY2s6IFwiQmxvY2tcIixcbn07XG5leHBvcnQgY29uc3QgSW52b2NhdGlvblR5cGUgPSB7XG4gICAgRXZlbnQ6IFwiRXZlbnRcIixcbiAgICBSZXF1ZXN0UmVzcG9uc2U6IFwiUmVxdWVzdFJlc3BvbnNlXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNOU0FjdGlvbkVuY29kaW5nID0ge1xuICAgIEJhc2U2NDogXCJCYXNlNjRcIixcbiAgICBVVEY4OiBcIlVURi04XCIsXG59O1xuZXhwb3J0IGNvbnN0IFN0b3BTY29wZSA9IHtcbiAgICBSVUxFX1NFVDogXCJSdWxlU2V0XCIsXG59O1xuZXhwb3J0IGNvbnN0IFRsc1BvbGljeSA9IHtcbiAgICBPcHRpb25hbDogXCJPcHRpb25hbFwiLFxuICAgIFJlcXVpcmU6IFwiUmVxdWlyZVwiLFxufTtcbmV4cG9ydCBjbGFzcyBJbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5GdW5jdGlvbkFybiA9IG9wdHMuRnVuY3Rpb25Bcm47XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5CdWNrZXQgPSBvcHRzLkJ1Y2tldDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkU25zVG9waWNFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuVG9waWMgPSBvcHRzLlRvcGljO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUnVsZURvZXNOb3RFeGlzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUnVsZURvZXNOb3RFeGlzdEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTmFtZSA9IG9wdHMuTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkVGVtcGxhdGVFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuVGVtcGxhdGVOYW1lID0gb3B0cy5UZW1wbGF0ZU5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEN1c3RvbU1haWxGcm9tU3RhdHVzID0ge1xuICAgIEZhaWxlZDogXCJGYWlsZWRcIixcbiAgICBQZW5kaW5nOiBcIlBlbmRpbmdcIixcbiAgICBTdWNjZXNzOiBcIlN1Y2Nlc3NcIixcbiAgICBUZW1wb3JhcnlGYWlsdXJlOiBcIlRlbXBvcmFyeUZhaWx1cmVcIixcbn07XG5leHBvcnQgY2xhc3MgQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVOYW1lID0gb3B0cy5DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRXZlbnREZXN0aW5hdGlvbkRvZXNOb3RFeGlzdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkV2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkV2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRXZlbnREZXN0aW5hdGlvbkRvZXNOb3RFeGlzdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICAgICAgdGhpcy5FdmVudERlc3RpbmF0aW9uTmFtZSA9IG9wdHMuRXZlbnREZXN0aW5hdGlvbk5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlRyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVHJhY2tpbmdPcHRpb25zRG9lc05vdEV4aXN0RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgVmVyaWZpY2F0aW9uU3RhdHVzID0ge1xuICAgIEZhaWxlZDogXCJGYWlsZWRcIixcbiAgICBOb3RTdGFydGVkOiBcIk5vdFN0YXJ0ZWRcIixcbiAgICBQZW5kaW5nOiBcIlBlbmRpbmdcIixcbiAgICBTdWNjZXNzOiBcIlN1Y2Nlc3NcIixcbiAgICBUZW1wb3JhcnlGYWlsdXJlOiBcIlRlbXBvcmFyeUZhaWx1cmVcIixcbn07XG5leHBvcnQgY2xhc3MgVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5UZW1wbGF0ZU5hbWUgPSBvcHRzLlRlbXBsYXRlTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgSWRlbnRpdHlUeXBlID0ge1xuICAgIERvbWFpbjogXCJEb21haW5cIixcbiAgICBFbWFpbEFkZHJlc3M6IFwiRW1haWxBZGRyZXNzXCIsXG59O1xuZXhwb3J0IGNsYXNzIEludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFBvbGljeUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRQb2xpY3lFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRQb2xpY3lFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFBvbGljeUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFJlbmRlcmluZ1BhcmFtZXRlckV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZFJlbmRlcmluZ1BhcmFtZXRlckV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuVGVtcGxhdGVOYW1lID0gb3B0cy5UZW1wbGF0ZU5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWVzc2FnZVJlamVjdGVkIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTWVzc2FnZVJlamVjdGVkXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNZXNzYWdlUmVqZWN0ZWRcIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTWVzc2FnZVJlamVjdGVkLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJNaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE1pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5UZW1wbGF0ZU5hbWUgPSBvcHRzLlRlbXBsYXRlTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgTm90aWZpY2F0aW9uVHlwZSA9IHtcbiAgICBCb3VuY2U6IFwiQm91bmNlXCIsXG4gICAgQ29tcGxhaW50OiBcIkNvbXBsYWludFwiLFxuICAgIERlbGl2ZXJ5OiBcIkRlbGl2ZXJ5XCIsXG59O1xuZXhwb3J0IGNsYXNzIFByb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlByb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFByb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSHR0cFJlcXVlc3QgYXMgX19IdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGNvbGxlY3RCb2R5LCBkZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24gYXMgX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24sIGV4cGVjdE5vbk51bGwgYXMgX19leHBlY3ROb25OdWxsLCBleHBlY3RTdHJpbmcgYXMgX19leHBlY3RTdHJpbmcsIGV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50IGFzIF9fZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQsIGdldEFycmF5SWZTaW5nbGVJdGVtIGFzIF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0sIGdldFZhbHVlRnJvbVRleHROb2RlIGFzIF9fZ2V0VmFsdWVGcm9tVGV4dE5vZGUsIHBhcnNlQm9vbGVhbiBhcyBfX3BhcnNlQm9vbGVhbiwgcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0IGFzIF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0LCBzdHJpY3RQYXJzZUZsb2F0IGFzIF9fc3RyaWN0UGFyc2VGbG9hdCwgc3RyaWN0UGFyc2VMb25nIGFzIF9fc3RyaWN0UGFyc2VMb25nLCB3aXRoQmFzZUV4Y2VwdGlvbiwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBYTUxQYXJzZXIgfSBmcm9tIFwiZmFzdC14bWwtcGFyc2VyXCI7XG5pbXBvcnQgeyBBY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbiwgQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiwgQ2Fubm90RGVsZXRlRXhjZXB0aW9uLCBDb25maWd1cmF0aW9uU2V0QWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiwgQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiwgQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24sIEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb24sIEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uLCBDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uLCBFdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiwgRXZlbnREZXN0aW5hdGlvbkRvZXNOb3RFeGlzdEV4Y2VwdGlvbiwgRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uLCBJbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uLCBJbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvbiwgSW52YWxpZERlbGl2ZXJ5T3B0aW9uc0V4Y2VwdGlvbiwgSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb24sIEludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvbiwgSW52YWxpZFBvbGljeUV4Y2VwdGlvbiwgSW52YWxpZFJlbmRlcmluZ1BhcmFtZXRlckV4Y2VwdGlvbiwgSW52YWxpZFMzQ29uZmlndXJhdGlvbkV4Y2VwdGlvbiwgSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uLCBJbnZhbGlkU25zVG9waWNFeGNlcHRpb24sIEludmFsaWRUZW1wbGF0ZUV4Y2VwdGlvbiwgSW52YWxpZFRyYWNraW5nT3B0aW9uc0V4Y2VwdGlvbiwgTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiwgTWFpbEZyb21Eb21haW5Ob3RWZXJpZmllZEV4Y2VwdGlvbiwgTWVzc2FnZVJlamVjdGVkLCBNaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uLCBQcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvbiwgUnVsZURvZXNOb3RFeGlzdEV4Y2VwdGlvbiwgUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiwgVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24sIFRyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb24sIFRyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvbiwgfSBmcm9tIFwiLi4vbW9kZWxzL21vZGVsc18wXCI7XG5pbXBvcnQgeyBTRVNTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuLi9tb2RlbHMvU0VTU2VydmljZUV4Y2VwdGlvblwiO1xuZXhwb3J0IGNvbnN0IHNlX0Nsb25lUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfQ2xvbmVSZWNlaXB0UnVsZVNldFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfQ1JSUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlQ29uZmlndXJhdGlvblNldENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9DQ1MsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9DQ1NFRCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9DQ1NUTyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9DcmVhdGVDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9DQ1ZFVCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlUmVjZWlwdEZpbHRlckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9DcmVhdGVSZWNlaXB0RmlsdGVyUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9DUkYsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVJlY2VpcHRSdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0NyZWF0ZVJlY2VpcHRSdWxlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9DUlIsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0NyZWF0ZVJlY2VpcHRSdWxlU2V0UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9DUlJTcixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfQ3JlYXRlVGVtcGxhdGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0NULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVDb25maWd1cmF0aW9uU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0RlbGV0ZUNvbmZpZ3VyYXRpb25TZXRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RDUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RDU0VELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0RlbGV0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RDU1RPLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0RlbGV0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RDVkVULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVJZGVudGl0eUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVJZGVudGl0eVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfREksXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUlkZW50aXR5UG9saWN5Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0RlbGV0ZUlkZW50aXR5UG9saWN5UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9ESVAsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVJlY2VpcHRGaWx0ZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlUmVjZWlwdEZpbHRlclJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRFJGLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVSZWNlaXB0UnVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVSZWNlaXB0UnVsZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRFJSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVSZWNlaXB0UnVsZVNldENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVSZWNlaXB0UnVsZVNldFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRFJSUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlVGVtcGxhdGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVWZXJpZmllZEVtYWlsQWRkcmVzc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVWZXJpZmllZEVtYWlsQWRkcmVzc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRFZFQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBY3RpdmVSZWNlaXB0UnVsZVNldENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZXNjcmliZUFjdGl2ZVJlY2VpcHRSdWxlU2V0UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQVJSUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVDb25maWd1cmF0aW9uU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Rlc2NyaWJlQ29uZmlndXJhdGlvblNldFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRENTZSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVSZWNlaXB0UnVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZXNjcmliZVJlY2VpcHRSdWxlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EUlJlLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Rlc2NyaWJlUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RSUlNlLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRBY2NvdW50U2VuZGluZ0VuYWJsZWRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGNvbnN0IGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgW19BXTogX0dBU0UsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR0NWRVQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldElkZW50aXR5RGtpbUF0dHJpYnV0ZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0SWRlbnRpdHlEa2ltQXR0cmlidXRlc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR0lEQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dJTUZEQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0SWRlbnRpdHlOb3RpZmljYXRpb25BdHRyaWJ1dGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0dldElkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR0lOQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0SWRlbnRpdHlQb2xpY2llc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRJZGVudGl0eVBvbGljaWVzUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9HSVAsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldElkZW50aXR5VmVyaWZpY2F0aW9uQXR0cmlidXRlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRJZGVudGl0eVZlcmlmaWNhdGlvbkF0dHJpYnV0ZXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dJVkEsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldFNlbmRRdW90YUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICBbX0FdOiBfR1NRLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRTZW5kU3RhdGlzdGljc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICBbX0FdOiBfR1NTLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRUZW1wbGF0ZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR1QsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RDb25maWd1cmF0aW9uU2V0c0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9MaXN0Q29uZmlndXJhdGlvblNldHNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xDUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfTENWRVQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RJZGVudGl0aWVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RJZGVudGl0aWVzUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9MSSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdElkZW50aXR5UG9saWNpZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfTGlzdElkZW50aXR5UG9saWNpZXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xJUCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFJlY2VpcHRGaWx0ZXJzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RSZWNlaXB0RmlsdGVyc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfTFJGLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0UmVjZWlwdFJ1bGVTZXRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RSZWNlaXB0UnVsZVNldHNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xSUlMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUZW1wbGF0ZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfTGlzdFRlbXBsYXRlc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfTFQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RWZXJpZmllZEVtYWlsQWRkcmVzc2VzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBjb25zdCBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIFtfQV06IF9MVkVBLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRDb25maWd1cmF0aW9uU2V0RGVsaXZlcnlPcHRpb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1B1dENvbmZpZ3VyYXRpb25TZXREZWxpdmVyeU9wdGlvbnNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1BDU0RPLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRJZGVudGl0eVBvbGljeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9QdXRJZGVudGl0eVBvbGljeVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUElQLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9SZW9yZGVyUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfUmVvcmRlclJlY2VpcHRSdWxlU2V0UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9SUlJTLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZW5kQm91bmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1NlbmRCb3VuY2VSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NCLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZW5kQnVsa1RlbXBsYXRlZEVtYWlsQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1NlbmRCdWxrVGVtcGxhdGVkRW1haWxSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NCVEUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NlbmRDdXN0b21WZXJpZmljYXRpb25FbWFpbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZW5kQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NDVkUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NlbmRFbWFpbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZW5kRW1haWxSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NFLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZW5kUmF3RW1haWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU2VuZFJhd0VtYWlsUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TUkUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NlbmRUZW1wbGF0ZWRFbWFpbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZW5kVGVtcGxhdGVkRW1haWxSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NURSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2V0QWN0aXZlUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU2V0QWN0aXZlUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NBUlJTLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZXRJZGVudGl0eURraW1FbmFibGVkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1NldElkZW50aXR5RGtpbUVuYWJsZWRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NJREUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NldElkZW50aXR5RmVlZGJhY2tGb3J3YXJkaW5nRW5hYmxlZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZXRJZGVudGl0eUZlZWRiYWNrRm9yd2FyZGluZ0VuYWJsZWRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NJRkZFLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZXRJZGVudGl0eUhlYWRlcnNJbk5vdGlmaWNhdGlvbnNFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1NldElkZW50aXR5SGVhZGVyc0luTm90aWZpY2F0aW9uc0VuYWJsZWRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NJSElORSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZXRJZGVudGl0eU1haWxGcm9tRG9tYWluUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TSU1GRCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2V0SWRlbnRpdHlOb3RpZmljYXRpb25Ub3BpY0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZXRJZGVudGl0eU5vdGlmaWNhdGlvblRvcGljUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TSU5ULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZXRSZWNlaXB0UnVsZVBvc2l0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1NldFJlY2VpcHRSdWxlUG9zaXRpb25SZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NSUlAsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1Rlc3RSZW5kZXJUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9UZXN0UmVuZGVyVGVtcGxhdGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1RSVCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQWNjb3VudFNlbmRpbmdFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1VwZGF0ZUFjY291bnRTZW5kaW5nRW5hYmxlZFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVUFTRSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVXBkYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1VDU0VELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0UmVwdXRhdGlvbk1ldHJpY3NFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRSZXB1dGF0aW9uTWV0cmljc0VuYWJsZWRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1VDU1JNRSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQ29uZmlndXJhdGlvblNldFNlbmRpbmdFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nRW5hYmxlZFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVUNTU0UsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVXBkYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVUNTVE8sXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVXBkYXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVUNWRVQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVJlY2VpcHRSdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1VwZGF0ZVJlY2VpcHRSdWxlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9VUlIsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1VwZGF0ZVRlbXBsYXRlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9VVCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVmVyaWZ5RG9tYWluRGtpbUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9WZXJpZnlEb21haW5Ea2ltUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9WREQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1ZlcmlmeURvbWFpbklkZW50aXR5Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1ZlcmlmeURvbWFpbklkZW50aXR5UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9WREksXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1ZlcmlmeUVtYWlsQWRkcmVzc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9WZXJpZnlFbWFpbEFkZHJlc3NSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1ZFQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVmVyaWZ5RW1haWxJZGVudGl0eUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9WZXJpZnlFbWFpbElkZW50aXR5UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9WRUksXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Nsb25lUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0Nsb25lUmVjZWlwdFJ1bGVTZXRSZXNwb25zZShkYXRhLkNsb25lUmVjZWlwdFJ1bGVTZXRSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRSZXNwb25zZShkYXRhLkNyZWF0ZUNvbmZpZ3VyYXRpb25TZXRSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlc3BvbnNlKGRhdGEuQ3JlYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNSZXNwb25zZShkYXRhLkNyZWF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVSZWNlaXB0RmlsdGVyQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9DcmVhdGVSZWNlaXB0RmlsdGVyUmVzcG9uc2UoZGF0YS5DcmVhdGVSZWNlaXB0RmlsdGVyUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVSZWNlaXB0UnVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfQ3JlYXRlUmVjZWlwdFJ1bGVSZXNwb25zZShkYXRhLkNyZWF0ZVJlY2VpcHRSdWxlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVSZWNlaXB0UnVsZVNldENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfQ3JlYXRlUmVjZWlwdFJ1bGVTZXRSZXNwb25zZShkYXRhLkNyZWF0ZVJlY2VpcHRSdWxlU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfQ3JlYXRlVGVtcGxhdGVSZXNwb25zZShkYXRhLkNyZWF0ZVRlbXBsYXRlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVDb25maWd1cmF0aW9uU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVDb25maWd1cmF0aW9uU2V0UmVzcG9uc2UoZGF0YS5EZWxldGVDb25maWd1cmF0aW9uU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVsZXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXNwb25zZShkYXRhLkRlbGV0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVzcG9uc2UoZGF0YS5EZWxldGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlSWRlbnRpdHlDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZUlkZW50aXR5UmVzcG9uc2UoZGF0YS5EZWxldGVJZGVudGl0eVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlSWRlbnRpdHlQb2xpY3lDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZUlkZW50aXR5UG9saWN5UmVzcG9uc2UoZGF0YS5EZWxldGVJZGVudGl0eVBvbGljeVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlUmVjZWlwdEZpbHRlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVsZXRlUmVjZWlwdEZpbHRlclJlc3BvbnNlKGRhdGEuRGVsZXRlUmVjZWlwdEZpbHRlclJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlUmVjZWlwdFJ1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZVJlY2VpcHRSdWxlUmVzcG9uc2UoZGF0YS5EZWxldGVSZWNlaXB0UnVsZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UoZGF0YS5EZWxldGVSZWNlaXB0UnVsZVNldFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZVRlbXBsYXRlUmVzcG9uc2UoZGF0YS5EZWxldGVUZW1wbGF0ZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVmVyaWZpZWRFbWFpbEFkZHJlc3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFjdGl2ZVJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZXNjcmliZUFjdGl2ZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UoZGF0YS5EZXNjcmliZUFjdGl2ZVJlY2VpcHRSdWxlU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUNvbmZpZ3VyYXRpb25TZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlQ29uZmlndXJhdGlvblNldFJlc3BvbnNlKGRhdGEuRGVzY3JpYmVDb25maWd1cmF0aW9uU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVJlY2VpcHRSdWxlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZXNjcmliZVJlY2VpcHRSdWxlUmVzcG9uc2UoZGF0YS5EZXNjcmliZVJlY2VpcHRSdWxlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZXNjcmliZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UoZGF0YS5EZXNjcmliZVJlY2VpcHRSdWxlU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRBY2NvdW50U2VuZGluZ0VuYWJsZWRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldEFjY291bnRTZW5kaW5nRW5hYmxlZFJlc3BvbnNlKGRhdGEuR2V0QWNjb3VudFNlbmRpbmdFbmFibGVkUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlUmVzcG9uc2UoZGF0YS5HZXRDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRJZGVudGl0eURraW1BdHRyaWJ1dGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRJZGVudGl0eURraW1BdHRyaWJ1dGVzUmVzcG9uc2UoZGF0YS5HZXRJZGVudGl0eURraW1BdHRyaWJ1dGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRJZGVudGl0eU1haWxGcm9tRG9tYWluQXR0cmlidXRlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXNSZXNwb25zZShkYXRhLkdldElkZW50aXR5TWFpbEZyb21Eb21haW5BdHRyaWJ1dGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRJZGVudGl0eU5vdGlmaWNhdGlvbkF0dHJpYnV0ZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldElkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlc1Jlc3BvbnNlKGRhdGEuR2V0SWRlbnRpdHlOb3RpZmljYXRpb25BdHRyaWJ1dGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRJZGVudGl0eVBvbGljaWVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRJZGVudGl0eVBvbGljaWVzUmVzcG9uc2UoZGF0YS5HZXRJZGVudGl0eVBvbGljaWVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRJZGVudGl0eVZlcmlmaWNhdGlvbkF0dHJpYnV0ZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldElkZW50aXR5VmVyaWZpY2F0aW9uQXR0cmlidXRlc1Jlc3BvbnNlKGRhdGEuR2V0SWRlbnRpdHlWZXJpZmljYXRpb25BdHRyaWJ1dGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRTZW5kUXVvdGFDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldFNlbmRRdW90YVJlc3BvbnNlKGRhdGEuR2V0U2VuZFF1b3RhUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRTZW5kU3RhdGlzdGljc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0U2VuZFN0YXRpc3RpY3NSZXNwb25zZShkYXRhLkdldFNlbmRTdGF0aXN0aWNzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0VGVtcGxhdGVSZXNwb25zZShkYXRhLkdldFRlbXBsYXRlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0Q29uZmlndXJhdGlvblNldHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RDb25maWd1cmF0aW9uU2V0c1Jlc3BvbnNlKGRhdGEuTGlzdENvbmZpZ3VyYXRpb25TZXRzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlc1Jlc3BvbnNlKGRhdGEuTGlzdEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0SWRlbnRpdGllc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdElkZW50aXRpZXNSZXNwb25zZShkYXRhLkxpc3RJZGVudGl0aWVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0SWRlbnRpdHlQb2xpY2llc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdElkZW50aXR5UG9saWNpZXNSZXNwb25zZShkYXRhLkxpc3RJZGVudGl0eVBvbGljaWVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0UmVjZWlwdEZpbHRlcnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RSZWNlaXB0RmlsdGVyc1Jlc3BvbnNlKGRhdGEuTGlzdFJlY2VpcHRGaWx0ZXJzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0UmVjZWlwdFJ1bGVTZXRzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0UmVjZWlwdFJ1bGVTZXRzUmVzcG9uc2UoZGF0YS5MaXN0UmVjZWlwdFJ1bGVTZXRzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VGVtcGxhdGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0VGVtcGxhdGVzUmVzcG9uc2UoZGF0YS5MaXN0VGVtcGxhdGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VmVyaWZpZWRFbWFpbEFkZHJlc3Nlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdFZlcmlmaWVkRW1haWxBZGRyZXNzZXNSZXNwb25zZShkYXRhLkxpc3RWZXJpZmllZEVtYWlsQWRkcmVzc2VzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXRDb25maWd1cmF0aW9uU2V0RGVsaXZlcnlPcHRpb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9QdXRDb25maWd1cmF0aW9uU2V0RGVsaXZlcnlPcHRpb25zUmVzcG9uc2UoZGF0YS5QdXRDb25maWd1cmF0aW9uU2V0RGVsaXZlcnlPcHRpb25zUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXRJZGVudGl0eVBvbGljeUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfUHV0SWRlbnRpdHlQb2xpY3lSZXNwb25zZShkYXRhLlB1dElkZW50aXR5UG9saWN5UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9SZW9yZGVyUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1Jlb3JkZXJSZWNlaXB0UnVsZVNldFJlc3BvbnNlKGRhdGEuUmVvcmRlclJlY2VpcHRSdWxlU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZW5kQm91bmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZW5kQm91bmNlUmVzcG9uc2UoZGF0YS5TZW5kQm91bmNlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZW5kQnVsa1RlbXBsYXRlZEVtYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZW5kQnVsa1RlbXBsYXRlZEVtYWlsUmVzcG9uc2UoZGF0YS5TZW5kQnVsa1RlbXBsYXRlZEVtYWlsUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZW5kQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1NlbmRDdXN0b21WZXJpZmljYXRpb25FbWFpbFJlc3BvbnNlKGRhdGEuU2VuZEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZW5kRW1haWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1NlbmRFbWFpbFJlc3BvbnNlKGRhdGEuU2VuZEVtYWlsUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZW5kUmF3RW1haWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1NlbmRSYXdFbWFpbFJlc3BvbnNlKGRhdGEuU2VuZFJhd0VtYWlsUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZW5kVGVtcGxhdGVkRW1haWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1NlbmRUZW1wbGF0ZWRFbWFpbFJlc3BvbnNlKGRhdGEuU2VuZFRlbXBsYXRlZEVtYWlsUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZXRBY3RpdmVSZWNlaXB0UnVsZVNldENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2V0QWN0aXZlUmVjZWlwdFJ1bGVTZXRSZXNwb25zZShkYXRhLlNldEFjdGl2ZVJlY2VpcHRSdWxlU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZXRJZGVudGl0eURraW1FbmFibGVkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZXRJZGVudGl0eURraW1FbmFibGVkUmVzcG9uc2UoZGF0YS5TZXRJZGVudGl0eURraW1FbmFibGVkUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZXRJZGVudGl0eUZlZWRiYWNrRm9yd2FyZGluZ0VuYWJsZWRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1NldElkZW50aXR5RmVlZGJhY2tGb3J3YXJkaW5nRW5hYmxlZFJlc3BvbnNlKGRhdGEuU2V0SWRlbnRpdHlGZWVkYmFja0ZvcndhcmRpbmdFbmFibGVkUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZXRJZGVudGl0eUhlYWRlcnNJbk5vdGlmaWNhdGlvbnNFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZXRJZGVudGl0eUhlYWRlcnNJbk5vdGlmaWNhdGlvbnNFbmFibGVkUmVzcG9uc2UoZGF0YS5TZXRJZGVudGl0eUhlYWRlcnNJbk5vdGlmaWNhdGlvbnNFbmFibGVkUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZXRJZGVudGl0eU1haWxGcm9tRG9tYWluQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZXRJZGVudGl0eU1haWxGcm9tRG9tYWluUmVzcG9uc2UoZGF0YS5TZXRJZGVudGl0eU1haWxGcm9tRG9tYWluUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZXRJZGVudGl0eU5vdGlmaWNhdGlvblRvcGljQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZXRJZGVudGl0eU5vdGlmaWNhdGlvblRvcGljUmVzcG9uc2UoZGF0YS5TZXRJZGVudGl0eU5vdGlmaWNhdGlvblRvcGljUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZXRSZWNlaXB0UnVsZVBvc2l0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZXRSZWNlaXB0UnVsZVBvc2l0aW9uUmVzcG9uc2UoZGF0YS5TZXRSZWNlaXB0UnVsZVBvc2l0aW9uUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9UZXN0UmVuZGVyVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1Rlc3RSZW5kZXJUZW1wbGF0ZVJlc3BvbnNlKGRhdGEuVGVzdFJlbmRlclRlbXBsYXRlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVBY2NvdW50U2VuZGluZ0VuYWJsZWRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfVXBkYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXNwb25zZShkYXRhLlVwZGF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0UmVwdXRhdGlvbk1ldHJpY3NFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQ29uZmlndXJhdGlvblNldFNlbmRpbmdFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfVXBkYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1Jlc3BvbnNlKGRhdGEuVXBkYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVJlY2VpcHRSdWxlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9VcGRhdGVSZWNlaXB0UnVsZVJlc3BvbnNlKGRhdGEuVXBkYXRlUmVjZWlwdFJ1bGVSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9VcGRhdGVUZW1wbGF0ZVJlc3BvbnNlKGRhdGEuVXBkYXRlVGVtcGxhdGVSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1ZlcmlmeURvbWFpbkRraW1Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1ZlcmlmeURvbWFpbkRraW1SZXNwb25zZShkYXRhLlZlcmlmeURvbWFpbkRraW1SZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1ZlcmlmeURvbWFpbklkZW50aXR5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9WZXJpZnlEb21haW5JZGVudGl0eVJlc3BvbnNlKGRhdGEuVmVyaWZ5RG9tYWluSWRlbnRpdHlSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1ZlcmlmeUVtYWlsQWRkcmVzc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1ZlcmlmeUVtYWlsSWRlbnRpdHlDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1ZlcmlmeUVtYWlsSWRlbnRpdHlSZXNwb25zZShkYXRhLlZlcmlmeUVtYWlsSWRlbnRpdHlSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuY29uc3QgZGVfQ29tbWFuZEVycm9yID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZE91dHB1dCA9IHtcbiAgICAgICAgLi4ub3V0cHV0LFxuICAgICAgICBib2R5OiBhd2FpdCBwYXJzZUVycm9yQm9keShvdXRwdXQuYm9keSwgY29udGV4dCksXG4gICAgfTtcbiAgICBjb25zdCBlcnJvckNvZGUgPSBsb2FkUXVlcnlFcnJvckNvZGUob3V0cHV0LCBwYXJzZWRPdXRwdXQuYm9keSk7XG4gICAgc3dpdGNoIChlcnJvckNvZGUpIHtcbiAgICAgICAgY2FzZSBcIkFscmVhZHlFeGlzdHNcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0FscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0FscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkxpbWl0RXhjZWVkZWRcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0xpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlJ1bGVTZXREb2VzTm90RXhpc3RcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI1J1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1J1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNDb25maWd1cmF0aW9uU2V0QWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRDb25maWd1cmF0aW9uU2V0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNJbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3RcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0NvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0NvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkV2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNFdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNJbnZhbGlkRmlyZWhvc2VEZXN0aW5hdGlvbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRTTlNEZXN0aW5hdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRUcmFja2luZ09wdGlvbnNcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlRyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI1RyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1RyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVBbHJlYWR5RXhpc3RzXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkZyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Gcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRMYW1iZGFGdW5jdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjSW52YWxpZExhbWJkYUZ1bmN0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRTM0NvbmZpZ3VyYXRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRTbnNUb3BpY1wiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkU25zVG9waWNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlJ1bGVEb2VzTm90RXhpc3RcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI1J1bGVEb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1J1bGVEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRUZW1wbGF0ZVwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkVGVtcGxhdGVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkV2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0V2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0V2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlRyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjVHJhY2tpbmdPcHRpb25zRG9lc05vdEV4aXN0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9UcmFja2luZ09wdGlvbnNEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNhbm5vdERlbGV0ZVwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjQ2Fubm90RGVsZXRlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DYW5ub3REZWxldGVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlRlbXBsYXRlRG9lc05vdEV4aXN0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWREZWxpdmVyeU9wdGlvbnNcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRQb2xpY3lcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRQb2xpY3lFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRQb2xpY3lFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk1lc3NhZ2VSZWplY3RlZFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjTWVzc2FnZVJlamVjdGVkXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9NZXNzYWdlUmVqZWN0ZWRSZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkFjY291bnRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNBY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNDb25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI01haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX01haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlByb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNQcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk1pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI01pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX01pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0RlZmF1bHRFcnJvcih7XG4gICAgICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgICAgIHBhcnNlZEJvZHk6IHBhcnNlZEJvZHkuRXJyb3IsXG4gICAgICAgICAgICAgICAgZXJyb3JDb2RlLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcbmNvbnN0IGRlX0FjY291bnRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9BY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0FscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0FscmVhZHlFeGlzdHNFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEFscmVhZHlFeGlzdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0Nhbm5vdERlbGV0ZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfQ2Fubm90RGVsZXRlRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDYW5ub3REZWxldGVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9Db25maWd1cmF0aW9uU2V0QWxyZWFkeUV4aXN0c0V4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3RFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0NvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3RFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9Db25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0V2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9FdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0V2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0V2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEV2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0Zyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBGcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnZhbGlkRmlyZWhvc2VEZXN0aW5hdGlvbkV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZExhbWJkYUZ1bmN0aW9uRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQb2xpY3lFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRQb2xpY3lFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRQb2xpY3lFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTTlNEZXN0aW5hdGlvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTbnNUb3BpY0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkU25zVG9waWNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRUZW1wbGF0ZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkVGVtcGxhdGVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IExpbWl0RXhjZWVkZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX01haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX01haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IE1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX01lc3NhZ2VSZWplY3RlZFJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfTWVzc2FnZVJlamVjdGVkKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNZXNzYWdlUmVqZWN0ZWQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX01pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX01pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IE1pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Byb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9Qcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1J1bGVEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX1J1bGVEb2VzTm90RXhpc3RFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJ1bGVEb2VzTm90RXhpc3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1J1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX1J1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJ1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9UZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1RyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX1RyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1RyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfVHJhY2tpbmdPcHRpb25zRG9lc05vdEV4aXN0RXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBUcmFja2luZ09wdGlvbnNEb2VzTm90RXhpc3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IHNlX0FkZEhlYWRlckFjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0hOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0hOXSA9IGlucHV0W19ITl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSFZdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSFZdID0gaW5wdXRbX0hWXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQWRkcmVzc0xpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQm9keSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0NvbnRlbnQoaW5wdXRbX1RdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGV4dC4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0hdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0NvbnRlbnQoaW5wdXRbX0hdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSHRtbC4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Cb3VuY2VBY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UQV0gPSBpbnB1dFtfVEFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NSQ10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TUkNdID0gaW5wdXRbX1NSQ107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU0NdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU0NdID0gaW5wdXRbX1NDXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01dID0gaW5wdXRbX01dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU10gPSBpbnB1dFtfU107XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0JvdW5jZWRSZWNpcGllbnRJbmZvID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SXSA9IGlucHV0W19SXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SQV0gPSBpbnB1dFtfUkFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0JUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0JUXSA9IGlucHV0W19CVF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUkRGXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SZWNpcGllbnREc25GaWVsZHMoaW5wdXRbX1JERl0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBSZWNpcGllbnREc25GaWVsZHMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQm91bmNlZFJlY2lwaWVudEluZm9MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0JvdW5jZWRSZWNpcGllbnRJbmZvKGVudHJ5LCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfS4ke2tleX1gXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9CdWxrRW1haWxEZXN0aW5hdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0Rlc3RpbmF0aW9uKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERlc3RpbmF0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUlRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01lc3NhZ2VUYWdMaXN0KGlucHV0W19SVF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1JUXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlJlcGxhY2VtZW50VGFncyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFJlcGxhY2VtZW50VGFncy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JURF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SVERdID0gaW5wdXRbX1JURF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0J1bGtFbWFpbERlc3RpbmF0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9CdWxrRW1haWxEZXN0aW5hdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ2xvbmVSZWNlaXB0UnVsZVNldFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlNOXSA9IGlucHV0W19SU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX09SU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfT1JTTl0gPSBpbnB1dFtfT1JTTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Nsb3VkV2F0Y2hEZXN0aW5hdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0RDXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9DbG91ZFdhdGNoRGltZW5zaW9uQ29uZmlndXJhdGlvbnMoaW5wdXRbX0RDXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRENdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGltZW5zaW9uQ29uZmlndXJhdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25Db25maWd1cmF0aW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9DbG91ZFdhdGNoRGltZW5zaW9uQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ROXSA9IGlucHV0W19ETl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRFZTXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0RWU10gPSBpbnB1dFtfRFZTXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19ERFZdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRERWXSA9IGlucHV0W19ERFZdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9DbG91ZFdhdGNoRGltZW5zaW9uQ29uZmlndXJhdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQ2xvdWRXYXRjaERpbWVuc2lvbkNvbmZpZ3VyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0NvbmZpZ3VyYXRpb25TZXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05dID0gaW5wdXRbX05dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Db25maWd1cmF0aW9uU2V0QXR0cmlidXRlTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Db250ZW50ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRGFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRGFdID0gaW5wdXRbX0RhXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NdID0gaW5wdXRbX0NdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FdmVudERlc3RpbmF0aW9uKGlucHV0W19FRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBFdmVudERlc3RpbmF0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0NvbmZpZ3VyYXRpb25TZXQoaW5wdXRbX0NTXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYENvbmZpZ3VyYXRpb25TZXQuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ3JlYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RPXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UcmFja2luZ09wdGlvbnMoaW5wdXRbX1RPXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRyYWNraW5nT3B0aW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9DcmVhdGVDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRkVBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ZFQV0gPSBpbnB1dFtfRkVBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UU10gPSBpbnB1dFtfVFNdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RDXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RDXSA9IGlucHV0W19UQ107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU1JVUkxdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU1JVUkxdID0gaW5wdXRbX1NSVVJMXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19GUlVSTF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19GUlVSTF0gPSBpbnB1dFtfRlJVUkxdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9DcmVhdGVSZWNlaXB0RmlsdGVyUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ZdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1JlY2VpcHRGaWx0ZXIoaW5wdXRbX0ZdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRmlsdGVyLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0NyZWF0ZVJlY2VpcHRSdWxlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SU05dID0gaW5wdXRbX1JTTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQWZdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQWZdID0gaW5wdXRbX0FmXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SdV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmVjZWlwdFJ1bGUoaW5wdXRbX1J1XSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFJ1bGUuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ3JlYXRlUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ3JlYXRlVGVtcGxhdGVSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfVGVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RlbXBsYXRlKGlucHV0W19UZV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUZW1wbGF0ZS4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VETl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FRE5dID0gaW5wdXRbX0VETl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZUNvbmZpZ3VyYXRpb25TZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVsZXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZUlkZW50aXR5UG9saWN5UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSV0gPSBpbnB1dFtfSV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUE5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUE5dID0gaW5wdXRbX1BOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVsZXRlSWRlbnRpdHlSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVsZXRlUmVjZWlwdEZpbHRlclJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19GTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19GTl0gPSBpbnB1dFtfRk5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVSZWNlaXB0UnVsZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlNOXSA9IGlucHV0W19SU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JOXSA9IGlucHV0W19STl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZVJlY2VpcHRSdWxlU2V0UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SU05dID0gaW5wdXRbX1JTTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZVRlbXBsYXRlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZVZlcmlmaWVkRW1haWxBZGRyZXNzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0VBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VBXSA9IGlucHV0W19FQV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGl2ZXJ5T3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RQXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RQXSA9IGlucHV0W19UUF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlQWN0aXZlUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlQ29uZmlndXJhdGlvblNldFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0NTQU5dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0NvbmZpZ3VyYXRpb25TZXRBdHRyaWJ1dGVMaXN0KGlucHV0W19DU0FOXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQ1NBTl0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5Db25maWd1cmF0aW9uU2V0QXR0cmlidXRlTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBDb25maWd1cmF0aW9uU2V0QXR0cmlidXRlTmFtZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVzY3JpYmVSZWNlaXB0UnVsZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlNOXSA9IGlucHV0W19SU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JOXSA9IGlucHV0W19STl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVzdGluYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UQW9dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FkZHJlc3NMaXN0KGlucHV0W19UQW9dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19UQW9dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVG9BZGRyZXNzZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUb0FkZHJlc3Nlcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0NBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BZGRyZXNzTGlzdChpbnB1dFtfQ0FdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19DQV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5DY0FkZHJlc3NlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYENjQWRkcmVzc2VzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQkFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FkZHJlc3NMaXN0KGlucHV0W19CQV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0JBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkJjY0FkZHJlc3NlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEJjY0FkZHJlc3Nlcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9FdmVudERlc3RpbmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VdID0gaW5wdXRbX0VdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01FVF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRXZlbnRUeXBlcyhpbnB1dFtfTUVUXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfTUVUXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLk1hdGNoaW5nRXZlbnRUeXBlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1hdGNoaW5nRXZlbnRUeXBlcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0tGRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfS2luZXNpc0ZpcmVob3NlRGVzdGluYXRpb24oaW5wdXRbX0tGRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBLaW5lc2lzRmlyZWhvc2VEZXN0aW5hdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0NXRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQ2xvdWRXYXRjaERlc3RpbmF0aW9uKGlucHV0W19DV0RdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgQ2xvdWRXYXRjaERlc3RpbmF0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU05TRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfU05TRGVzdGluYXRpb24oaW5wdXRbX1NOU0RdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU05TRGVzdGluYXRpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRXZlbnRUeXBlcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9FeHRlbnNpb25GaWVsZCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVmFdID0gaW5wdXRbX1ZhXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRXh0ZW5zaW9uRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0V4dGVuc2lvbkZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfS4ke2tleX1gXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0dldElkZW50aXR5RGtpbUF0dHJpYnV0ZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSWRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0lkZW50aXR5TGlzdChpbnB1dFtfSWRdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19JZF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5JZGVudGl0aWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSWRlbnRpdGllcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRJZGVudGl0eU1haWxGcm9tRG9tYWluQXR0cmlidXRlc1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JZF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfSWRlbnRpdHlMaXN0KGlucHV0W19JZF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0lkXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLklkZW50aXRpZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBJZGVudGl0aWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0dldElkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlc1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JZF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfSWRlbnRpdHlMaXN0KGlucHV0W19JZF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0lkXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLklkZW50aXRpZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBJZGVudGl0aWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0dldElkZW50aXR5UG9saWNpZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QTm9dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1BvbGljeU5hbWVMaXN0KGlucHV0W19QTm9dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19QTm9dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUG9saWN5TmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBQb2xpY3lOYW1lcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRJZGVudGl0eVZlcmlmaWNhdGlvbkF0dHJpYnV0ZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSWRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0lkZW50aXR5TGlzdChpbnB1dFtfSWRdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19JZF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5JZGVudGl0aWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSWRlbnRpdGllcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRUZW1wbGF0ZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UTl0gPSBpbnB1dFtfVE5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9JZGVudGl0eUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfS2luZXNpc0ZpcmVob3NlRGVzdGluYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JQU1SQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0lBTVJBUk5dID0gaW5wdXRbX0lBTVJBUk5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RTQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0RTQVJOXSA9IGlucHV0W19EU0FSTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xhbWJkYUFjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBXSA9IGlucHV0W19UQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRkFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRkFdID0gaW5wdXRbX0ZBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19JVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JVF0gPSBpbnB1dFtfSVRdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0Q29uZmlndXJhdGlvblNldHNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRdID0gaW5wdXRbX05UXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NSV0gPSBpbnB1dFtfTUldO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRdID0gaW5wdXRbX05UXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NUl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NUl0gPSBpbnB1dFtfTVJdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0SWRlbnRpdGllc1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JVGRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSVRkXSA9IGlucHV0W19JVGRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTUldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTUldID0gaW5wdXRbX01JXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTGlzdElkZW50aXR5UG9saWNpZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTGlzdFJlY2VpcHRGaWx0ZXJzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0UmVjZWlwdFJ1bGVTZXRzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xpc3RUZW1wbGF0ZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRdID0gaW5wdXRbX05UXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NSV0gPSBpbnB1dFtfTUldO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NZXNzYWdlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfU3VdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0NvbnRlbnQoaW5wdXRbX1N1XSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFN1YmplY3QuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19CXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Cb2R5KGlucHV0W19CXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEJvZHkuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWVzc2FnZURzbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JNXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JNXSA9IGlucHV0W19STV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQURdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQURdID0gaW5wdXRbX0FEXS50b0lTT1N0cmluZygpLnNwbGl0KFwiLlwiKVswXSArIFwiWlwiO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VGXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FeHRlbnNpb25GaWVsZExpc3QoaW5wdXRbX0VGXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRUZdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRXh0ZW5zaW9uRmllbGRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRXh0ZW5zaW9uRmllbGRzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01lc3NhZ2VUYWcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05dID0gaW5wdXRbX05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1ZhXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ZhXSA9IGlucHV0W19WYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01lc3NhZ2VUYWdMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01lc3NhZ2VUYWcoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1BvbGljeU5hbWVMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1B1dENvbmZpZ3VyYXRpb25TZXREZWxpdmVyeU9wdGlvbnNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19ET10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRGVsaXZlcnlPcHRpb25zKGlucHV0W19ET10sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEZWxpdmVyeU9wdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHV0SWRlbnRpdHlQb2xpY3lSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QTl0gPSBpbnB1dFtfUE5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1BdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUF0gPSBpbnB1dFtfUF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1Jhd01lc3NhZ2UgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19EYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EYV0gPSBjb250ZXh0LmJhc2U2NEVuY29kZXIoaW5wdXRbX0RhXSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1JlY2VpcHRBY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19TQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUzNBY3Rpb24oaW5wdXRbX1NBXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFMzQWN0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQkFvXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Cb3VuY2VBY3Rpb24oaW5wdXRbX0JBb10sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBCb3VuY2VBY3Rpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19XQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfV29ya21haWxBY3Rpb24oaW5wdXRbX1dBXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFdvcmttYWlsQWN0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTEFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0xhbWJkYUFjdGlvbihpbnB1dFtfTEFdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgTGFtYmRhQWN0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU0F0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9TdG9wQWN0aW9uKGlucHV0W19TQXRdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU3RvcEFjdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FIQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQWRkSGVhZGVyQWN0aW9uKGlucHV0W19BSEFdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgQWRkSGVhZGVyQWN0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU05TQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfU05TQWN0aW9uKGlucHV0W19TTlNBXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFNOU0FjdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNlaXB0QWN0aW9uc0xpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmVjZWlwdEFjdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUmVjZWlwdEZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSUZdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1JlY2VpcHRJcEZpbHRlcihpbnB1dFtfSUZdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSXBGaWx0ZXIuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUmVjZWlwdElwRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DaV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DaV0gPSBpbnB1dFtfQ2ldO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNlaXB0UnVsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FXSA9IGlucHV0W19FXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UUF0gPSBpbnB1dFtfVFBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SZWNpcGllbnRzTGlzdChpbnB1dFtfUmVdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19SZV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5SZWNpcGllbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUmVjaXBpZW50cy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FjXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SZWNlaXB0QWN0aW9uc0xpc3QoaW5wdXRbX0FjXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQWNdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuQWN0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TRWNdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU0VjXSA9IGlucHV0W19TRWNdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNlaXB0UnVsZU5hbWVzTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNpcGllbnREc25GaWVsZHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19GUl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19GUl0gPSBpbnB1dFtfRlJdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQV0gPSBpbnB1dFtfQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUk1lXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JNZV0gPSBpbnB1dFtfUk1lXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TdF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TdF0gPSBpbnB1dFtfU3RdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RDaV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EQ2ldID0gaW5wdXRbX0RDaV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTEFEXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0xBRF0gPSBpbnB1dFtfTEFEXS50b0lTT1N0cmluZygpLnNwbGl0KFwiLlwiKVswXSArIFwiWlwiO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VGXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FeHRlbnNpb25GaWVsZExpc3QoaW5wdXRbX0VGXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRUZdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRXh0ZW5zaW9uRmllbGRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRXh0ZW5zaW9uRmllbGRzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1JlY2lwaWVudHNMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1Jlb3JkZXJSZWNlaXB0UnVsZVNldFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlNOXSA9IGlucHV0W19SU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JOdV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmVjZWlwdFJ1bGVOYW1lc0xpc3QoaW5wdXRbX1JOdV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1JOdV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5SdWxlTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBSdWxlTmFtZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUzNBY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UQV0gPSBpbnB1dFtfVEFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0JOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0JOXSA9IGlucHV0W19CTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfT0tQXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX09LUF0gPSBpbnB1dFtfT0tQXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19LS0FdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfS0tBXSA9IGlucHV0W19LS0FdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TZW5kQm91bmNlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX09NSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19PTUldID0gaW5wdXRbX09NSV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQlNdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQlNdID0gaW5wdXRbX0JTXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FeF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FeF0gPSBpbnB1dFtfRXhdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXNzYWdlRHNuKGlucHV0W19NRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXNzYWdlRHNuLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQlJJTF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQm91bmNlZFJlY2lwaWVudEluZm9MaXN0KGlucHV0W19CUklMXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQlJJTF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5Cb3VuY2VkUmVjaXBpZW50SW5mb0xpc3QgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBCb3VuY2VkUmVjaXBpZW50SW5mb0xpc3QuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19CU0FdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQlNBXSA9IGlucHV0W19CU0FdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TZW5kQnVsa1RlbXBsYXRlZEVtYWlsUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1NvXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NvXSA9IGlucHV0W19Tb107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU0FvXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NBb10gPSBpbnB1dFtfU0FvXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SVEFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FkZHJlc3NMaXN0KGlucHV0W19SVEFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19SVEFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUmVwbHlUb0FkZHJlc3NlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFJlcGx5VG9BZGRyZXNzZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SUF0gPSBpbnB1dFtfUlBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JQQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SUEFdID0gaW5wdXRbX1JQQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EVGVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01lc3NhZ2VUYWdMaXN0KGlucHV0W19EVGVdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EVGVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGVmYXVsdFRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEZWZhdWx0VGFncy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RlXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RlXSA9IGlucHV0W19UZV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVEFlXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBZV0gPSBpbnB1dFtfVEFlXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EVERdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRFREXSA9IGlucHV0W19EVERdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9CdWxrRW1haWxEZXN0aW5hdGlvbkxpc3QoaW5wdXRbX0RlXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRGVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGVzdGluYXRpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGVzdGluYXRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NlbmRDdXN0b21WZXJpZmljYXRpb25FbWFpbFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19FQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FQV0gPSBpbnB1dFtfRUFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2VuZEVtYWlsUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1NvXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NvXSA9IGlucHV0W19Tb107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRGVzdGluYXRpb24oaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGVzdGluYXRpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXNzYWdlKGlucHV0W19NXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1lc3NhZ2UuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SVEFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FkZHJlc3NMaXN0KGlucHV0W19SVEFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19SVEFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUmVwbHlUb0FkZHJlc3NlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFJlcGx5VG9BZGRyZXNzZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SUF0gPSBpbnB1dFtfUlBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NBb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TQW9dID0gaW5wdXRbX1NBb107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUlBBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JQQV0gPSBpbnB1dFtfUlBBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UYV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWVzc2FnZVRhZ0xpc3QoaW5wdXRbX1RhXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVGFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVGFncyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRhZ3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TZW5kUmF3RW1haWxSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfU29dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU29dID0gaW5wdXRbX1NvXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EZV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQWRkcmVzc0xpc3QoaW5wdXRbX0RlXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRGVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGVzdGluYXRpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGVzdGluYXRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUk1hXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SYXdNZXNzYWdlKGlucHV0W19STWFdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUmF3TWVzc2FnZS4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0ZBcl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19GQXJdID0gaW5wdXRbX0ZBcl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU0FvXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NBb10gPSBpbnB1dFtfU0FvXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SUEFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlBBXSA9IGlucHV0W19SUEFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXNzYWdlVGFnTGlzdChpbnB1dFtfVGFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19UYV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5UYWdzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGFncy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DU05dID0gaW5wdXRbX0NTTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NlbmRUZW1wbGF0ZWRFbWFpbFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19Tb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19Tb10gPSBpbnB1dFtfU29dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0Rlc3RpbmF0aW9uKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERlc3RpbmF0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUlRBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BZGRyZXNzTGlzdChpbnB1dFtfUlRBXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfUlRBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlJlcGx5VG9BZGRyZXNzZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBSZXBseVRvQWRkcmVzc2VzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUlBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlBdID0gaW5wdXRbX1JQXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TQW9dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU0FvXSA9IGlucHV0W19TQW9dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JQQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SUEFdID0gaW5wdXRbX1JQQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVGFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01lc3NhZ2VUYWdMaXN0KGlucHV0W19UYV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1RhXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUYWdzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UZV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UZV0gPSBpbnB1dFtfVGVdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RBZV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UQWVdID0gaW5wdXRbX1RBZV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVERdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVERdID0gaW5wdXRbX1REXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2V0QWN0aXZlUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2V0SWRlbnRpdHlEa2ltRW5hYmxlZFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ldID0gaW5wdXRbX0ldO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RFXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0RFXSA9IGlucHV0W19ERV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldElkZW50aXR5RmVlZGJhY2tGb3J3YXJkaW5nRW5hYmxlZFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ldID0gaW5wdXRbX0ldO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0ZFXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ZFXSA9IGlucHV0W19GRV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldElkZW50aXR5SGVhZGVyc0luTm90aWZpY2F0aW9uc0VuYWJsZWRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVG9dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRvXSA9IGlucHV0W19OVG9dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRV0gPSBpbnB1dFtfRV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldElkZW50aXR5TWFpbEZyb21Eb21haW5SZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NRkRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTUZEXSA9IGlucHV0W19NRkRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0JPTVhGXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0JPTVhGXSA9IGlucHV0W19CT01YRl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldElkZW50aXR5Tm90aWZpY2F0aW9uVG9waWNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVG9dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRvXSA9IGlucHV0W19OVG9dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NUXSA9IGlucHV0W19TVF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldFJlY2VpcHRSdWxlUG9zaXRpb25SZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19STl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19STl0gPSBpbnB1dFtfUk5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FmXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FmXSA9IGlucHV0W19BZl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NOU0FjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBXSA9IGlucHV0W19UQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRW5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRW5dID0gaW5wdXRbX0VuXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU05TRGVzdGluYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBUk5dID0gaW5wdXRbX1RBUk5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TdG9wQWN0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfU2NdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU2NdID0gaW5wdXRbX1NjXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UQV0gPSBpbnB1dFtfVEFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9UZW1wbGF0ZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU1BdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU1BdID0gaW5wdXRbX1NQXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UUGVdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVFBlXSA9IGlucHV0W19UUGVdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0hQXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0hQXSA9IGlucHV0W19IUF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1Rlc3RSZW5kZXJUZW1wbGF0ZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UTl0gPSBpbnB1dFtfVE5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1REXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1REXSA9IGlucHV0W19URF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1RyYWNraW5nT3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0NSRF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DUkRdID0gaW5wdXRbX0NSRF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZUFjY291bnRTZW5kaW5nRW5hYmxlZFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VdID0gaW5wdXRbX0VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FdmVudERlc3RpbmF0aW9uKGlucHV0W19FRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBFdmVudERlc3RpbmF0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRSZXB1dGF0aW9uTWV0cmljc0VuYWJsZWRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VdID0gaW5wdXRbX0VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0U2VuZGluZ0VuYWJsZWRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VdID0gaW5wdXRbX0VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DU05dID0gaW5wdXRbX0NTTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVE9dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RyYWNraW5nT3B0aW9ucyhpbnB1dFtfVE9dLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVHJhY2tpbmdPcHRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVE5dID0gaW5wdXRbX1ROXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19GRUFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRkVBXSA9IGlucHV0W19GRUFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RTXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RTXSA9IGlucHV0W19UU107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVENdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVENdID0gaW5wdXRbX1RDXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TUlVSTF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TUlVSTF0gPSBpbnB1dFtfU1JVUkxdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0ZSVVJMXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ZSVVJMXSA9IGlucHV0W19GUlVSTF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZVJlY2VpcHRSdWxlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SU05dID0gaW5wdXRbX1JTTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUnVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1JlY2VpcHRSdWxlKGlucHV0W19SdV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBSdWxlLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZVRlbXBsYXRlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UZW1wbGF0ZShpbnB1dFtfVGVdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGVtcGxhdGUuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVmVyaWZ5RG9tYWluRGtpbVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19Eb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19Eb10gPSBpbnB1dFtfRG9dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9WZXJpZnlEb21haW5JZGVudGl0eVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19Eb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19Eb10gPSBpbnB1dFtfRG9dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9WZXJpZnlFbWFpbEFkZHJlc3NSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRUFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRUFdID0gaW5wdXRbX0VBXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVmVyaWZ5RW1haWxJZGVudGl0eVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19FQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FQV0gPSBpbnB1dFtfRUFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Xb3JrbWFpbEFjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBXSA9IGlucHV0W19UQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfT0FdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfT0FdID0gaW5wdXRbX09BXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3QgZGVfQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQWRkSGVhZGVyQWN0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfSE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfSE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfSFZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hWXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfSFZdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0FkZHJlc3NMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Cb3VuY2VBY3Rpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVEFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUkNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NSQ10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSQ10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TQ10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0NdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TQ10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU10pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQnVsa0VtYWlsRGVzdGluYXRpb25TdGF0dXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19TdF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU3RdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19Fcl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRXJdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19Fcl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NSWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01JZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01JZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQnVsa0VtYWlsRGVzdGluYXRpb25TdGF0dXNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9CdWxrRW1haWxEZXN0aW5hdGlvblN0YXR1cyhlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ2Fubm90RGVsZXRlRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Nsb25lUmVjZWlwdFJ1bGVTZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DbG91ZFdhdGNoRGVzdGluYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LkRpbWVuc2lvbkNvbmZpZ3VyYXRpb25zID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EQ10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19EQ10gIT0gbnVsbCAmJiBvdXRwdXRbX0RDXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RDXSA9IGRlX0Nsb3VkV2F0Y2hEaW1lbnNpb25Db25maWd1cmF0aW9ucyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRENdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Nsb3VkV2F0Y2hEaW1lbnNpb25Db25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfRE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRFZTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EVlNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19EVlNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRERWXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19ERFZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19ERFZdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Nsb3VkV2F0Y2hEaW1lbnNpb25Db25maWd1cmF0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQ2xvdWRXYXRjaERpbWVuc2lvbkNvbmZpZ3VyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbmZpZ3VyYXRpb25TZXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1NOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1NOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Db25maWd1cmF0aW9uU2V0cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQ29uZmlndXJhdGlvblNldChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ3JlYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ3JlYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0NyZWF0ZVJlY2VpcHRGaWx0ZXJSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DcmVhdGVSZWNlaXB0UnVsZVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0NyZWF0ZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ3JlYXRlVGVtcGxhdGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19GRUFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZFQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ZFQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVFNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UU10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUlVSTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1JVUkxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TUlVSTF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19GUlVSTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRlJVUkxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19GUlVSTF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DVkVUTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1ZFVE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19DVkVUTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NWRVROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DVkVUTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NWRVROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGVsZXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxldGVDb25maWd1cmF0aW9uU2V0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVsZXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RlbGV0ZUlkZW50aXR5UG9saWN5UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVsZXRlSWRlbnRpdHlSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxldGVSZWNlaXB0RmlsdGVyUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVsZXRlUmVjZWlwdFJ1bGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxldGVSZWNlaXB0UnVsZVNldFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RlbGV0ZVRlbXBsYXRlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVsaXZlcnlPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVFBdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RQXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVFBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Rlc2NyaWJlQWN0aXZlUmVjZWlwdFJ1bGVTZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NZV0gPSBkZV9SZWNlaXB0UnVsZVNldE1ldGFkYXRhKG91dHB1dFtfTWVdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5SdWxlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfUnVsXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1J1bF0gIT0gbnVsbCAmJiBvdXRwdXRbX1J1bF1bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SdWxdID0gZGVfUmVjZWlwdFJ1bGVzTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfUnVsXVtfbWVdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZXNjcmliZUNvbmZpZ3VyYXRpb25TZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DU10gPSBkZV9Db25maWd1cmF0aW9uU2V0KG91dHB1dFtfQ1NdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5FdmVudERlc3RpbmF0aW9ucyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRUR2XSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0VEdl0gIT0gbnVsbCAmJiBvdXRwdXRbX0VEdl1bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FRHZdID0gZGVfRXZlbnREZXN0aW5hdGlvbnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0VEdl1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UT10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVE9dID0gZGVfVHJhY2tpbmdPcHRpb25zKG91dHB1dFtfVE9dLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRE9dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RPXSA9IGRlX0RlbGl2ZXJ5T3B0aW9ucyhvdXRwdXRbX0RPXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1JPXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19ST10gPSBkZV9SZXB1dGF0aW9uT3B0aW9ucyhvdXRwdXRbX1JPXSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZXNjcmliZVJlY2VpcHRSdWxlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19SdV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUnVdID0gZGVfUmVjZWlwdFJ1bGUob3V0cHV0W19SdV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVzY3JpYmVSZWNlaXB0UnVsZVNldFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01lXSA9IGRlX1JlY2VpcHRSdWxlU2V0TWV0YWRhdGEob3V0cHV0W19NZV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LlJ1bGVzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19SdWxdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfUnVsXSAhPSBudWxsICYmIG91dHB1dFtfUnVsXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1J1bF0gPSBkZV9SZWNlaXB0UnVsZXNMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19SdWxdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RraW1BdHRyaWJ1dGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBvdXRwdXQucmVkdWNlKChhY2MsIHBhaXIpID0+IHtcbiAgICAgICAgaWYgKHBhaXJbXCJ2YWx1ZVwiXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2NbcGFpcltcImtleVwiXV0gPSBkZV9JZGVudGl0eURraW1BdHRyaWJ1dGVzKHBhaXJbXCJ2YWx1ZVwiXSwgY29udGV4dCk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufTtcbmNvbnN0IGRlX0V2ZW50RGVzdGluYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfRV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0Lk1hdGNoaW5nRXZlbnRUeXBlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTUVUXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01FVF0gIT0gbnVsbCAmJiBvdXRwdXRbX01FVF1bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NRVRdID0gZGVfRXZlbnRUeXBlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTUVUXVtfbWVdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0tGRF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfS0ZEXSA9IGRlX0tpbmVzaXNGaXJlaG9zZURlc3RpbmF0aW9uKG91dHB1dFtfS0ZEXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NXRF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1dEXSA9IGRlX0Nsb3VkV2F0Y2hEZXN0aW5hdGlvbihvdXRwdXRbX0NXRF0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TTlNEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TTlNEXSA9IGRlX1NOU0Rlc3RpbmF0aW9uKG91dHB1dFtfU05TRF0sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19FRE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VETl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0VETl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRXZlbnREZXN0aW5hdGlvbkRvZXNOb3RFeGlzdEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1NOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1NOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VETl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRUROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRUROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9FdmVudERlc3RpbmF0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRXZlbnREZXN0aW5hdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfRXZlbnRUeXBlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Zyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0ZFQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRkVBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkVBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRBY2NvdW50U2VuZGluZ0VuYWJsZWRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VdID0gX19wYXJzZUJvb2xlYW4ob3V0cHV0W19FXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19GRUFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZFQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ZFQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVFNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UU10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UQ10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVENdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UQ10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUlVSTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1JVUkxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TUlVSTF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19GUlVSTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRlJVUkxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19GUlVSTF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0SWRlbnRpdHlEa2ltQXR0cmlidXRlc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5Ea2ltQXR0cmlidXRlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfREFdID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfREFdICE9IG51bGwgJiYgb3V0cHV0W19EQV1bX2VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RBXSA9IGRlX0RraW1BdHRyaWJ1dGVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19EQV1bX2VdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRJZGVudGl0eU1haWxGcm9tRG9tYWluQXR0cmlidXRlc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5NYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX01GREFdID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTUZEQV0gIT0gbnVsbCAmJiBvdXRwdXRbX01GREFdW19lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NRkRBXSA9IGRlX01haWxGcm9tRG9tYWluQXR0cmlidXRlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTUZEQV1bX2VdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRJZGVudGl0eU5vdGlmaWNhdGlvbkF0dHJpYnV0ZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXQuTm90aWZpY2F0aW9uQXR0cmlidXRlcyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTkFdID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTkFdICE9IG51bGwgJiYgb3V0cHV0W19OQV1bX2VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05BXSA9IGRlX05vdGlmaWNhdGlvbkF0dHJpYnV0ZXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX05BXVtfZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldElkZW50aXR5UG9saWNpZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXQuUG9saWNpZXMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1BvXSA9IHt9O1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1BvXSAhPSBudWxsICYmIG91dHB1dFtfUG9dW19lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Qb10gPSBkZV9Qb2xpY3lNYXAoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX1BvXVtfZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldElkZW50aXR5VmVyaWZpY2F0aW9uQXR0cmlidXRlc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5WZXJpZmljYXRpb25BdHRyaWJ1dGVzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19WQV0gPSB7fTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19WQV0gIT0gbnVsbCAmJiBvdXRwdXRbX1ZBXVtfZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVkFdID0gZGVfVmVyaWZpY2F0aW9uQXR0cmlidXRlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfVkFdW19lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0U2VuZFF1b3RhUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NSFNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01IU10gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19NSFNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTVNSXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NU1JdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfTVNSXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NMSF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0xIXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX1NMSF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0U2VuZFN0YXRpc3RpY3NSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXQuU2VuZERhdGFQb2ludHMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1NEUF0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19TRFBdICE9IG51bGwgJiYgb3V0cHV0W19TRFBdW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0RQXSA9IGRlX1NlbmREYXRhUG9pbnRMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19TRFBdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldFRlbXBsYXRlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVGVdID0gZGVfVGVtcGxhdGUob3V0cHV0W19UZV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSWRlbnRpdHlEa2ltQXR0cmlidXRlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0RFXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19ERV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX0RFXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0RWU2tdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RWU2tdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19EVlNrXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXQuRGtpbVRva2VucyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRFRrXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0RUa10gIT0gbnVsbCAmJiBvdXRwdXRbX0RUa11bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EVGtdID0gZGVfVmVyaWZpY2F0aW9uVG9rZW5MaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19EVGtdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0lkZW50aXR5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0lkZW50aXR5TWFpbEZyb21Eb21haW5BdHRyaWJ1dGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTUZEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NRkRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NRkRdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTUZEU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTUZEU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01GRFNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQk9NWEZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0JPTVhGXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQk9NWEZdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0lkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0JUb10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQlRvXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQlRvXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NUb10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1RvXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1RvXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0RUZWxdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RUZWxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19EVGVsXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0ZFXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19GRV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX0ZFXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0hJQk5FXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19ISUJORV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX0hJQk5FXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0hJQ05FXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19ISUNORV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX0hJQ05FXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0hJRE5FXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19ISURORV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX0hJRE5FXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JZGVudGl0eVZlcmlmaWNhdGlvbkF0dHJpYnV0ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19WU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVlNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19WU10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19WVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19WVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZENsb3VkV2F0Y2hEZXN0aW5hdGlvbkV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1NOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1NOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VETl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRUROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRUROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DU05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19DU05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRUROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FRE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19FRE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0ZBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19GQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ZBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkUG9saWN5RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZFMzQ29uZmlndXJhdGlvbkV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0J1XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19CdV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0J1XSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19FRE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VETl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0VETl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVG9dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RvXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVG9dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRUZW1wbGF0ZUV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0tpbmVzaXNGaXJlaG9zZURlc3RpbmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfSUFNUkFSTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSUFNUkFSTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0lBTVJBUk5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRFNBUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RTQVJOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRFNBUk5dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xhbWJkYUFjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0ZBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19GQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ZBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0lUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0lUXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpc3RDb25maWd1cmF0aW9uU2V0c1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5Db25maWd1cmF0aW9uU2V0cyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfQ1NvXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0NTb10gIT0gbnVsbCAmJiBvdXRwdXRbX0NTb11bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DU29dID0gZGVfQ29uZmlndXJhdGlvblNldHMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0NTb11bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19DVkVUXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0NWRVRdICE9IG51bGwgJiYgb3V0cHV0W19DVkVUXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NWRVRdID0gZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0NWRVRdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05UXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTlRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpc3RJZGVudGl0aWVzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LklkZW50aXRpZXMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0lkXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0lkXSAhPSBudWxsICYmIG91dHB1dFtfSWRdW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSWRdID0gZGVfSWRlbnRpdHlMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19JZF1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdElkZW50aXR5UG9saWNpZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXQuUG9saWN5TmFtZXMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1BOb10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19QTm9dICE9IG51bGwgJiYgb3V0cHV0W19QTm9dW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUE5vXSA9IGRlX1BvbGljeU5hbWVMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19QTm9dW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpc3RSZWNlaXB0RmlsdGVyc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5GaWx0ZXJzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19GaV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19GaV0gIT0gbnVsbCAmJiBvdXRwdXRbX0ZpXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZpXSA9IGRlX1JlY2VpcHRGaWx0ZXJMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19GaV1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdFJlY2VpcHRSdWxlU2V0c1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5SdWxlU2V0cyA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfUlNdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfUlNdICE9IG51bGwgJiYgb3V0cHV0W19SU11bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SU10gPSBkZV9SZWNlaXB0UnVsZVNldHNMaXN0cyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfUlNdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05UXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTlRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpc3RUZW1wbGF0ZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXQuVGVtcGxhdGVzTWV0YWRhdGEgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1RNXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1RNXSAhPSBudWxsICYmIG91dHB1dFtfVE1dW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVE1dID0gZGVfVGVtcGxhdGVNZXRhZGF0YUxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX1RNXVtfbWVdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaXN0VmVyaWZpZWRFbWFpbEFkZHJlc3Nlc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5WZXJpZmllZEVtYWlsQWRkcmVzc2VzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19WRUFlXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1ZFQWVdICE9IG51bGwgJiYgb3V0cHV0W19WRUFlXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ZFQWVdID0gZGVfQWRkcmVzc0xpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX1ZFQWVdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01haWxGcm9tRG9tYWluQXR0cmlidXRlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gb3V0cHV0LnJlZHVjZSgoYWNjLCBwYWlyKSA9PiB7XG4gICAgICAgIGlmIChwYWlyW1widmFsdWVcIl0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgICAgYWNjW3BhaXJbXCJrZXlcIl1dID0gZGVfSWRlbnRpdHlNYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXMocGFpcltcInZhbHVlXCJdLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59O1xuY29uc3QgZGVfTWFpbEZyb21Eb21haW5Ob3RWZXJpZmllZEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9NZXNzYWdlUmVqZWN0ZWQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWlzc2luZ1JlbmRlcmluZ0F0dHJpYnV0ZUV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Ob3RpZmljYXRpb25BdHRyaWJ1dGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBvdXRwdXQucmVkdWNlKChhY2MsIHBhaXIpID0+IHtcbiAgICAgICAgaWYgKHBhaXJbXCJ2YWx1ZVwiXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2NbcGFpcltcImtleVwiXV0gPSBkZV9JZGVudGl0eU5vdGlmaWNhdGlvbkF0dHJpYnV0ZXMocGFpcltcInZhbHVlXCJdLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59O1xuY29uc3QgZGVfUG9saWN5TWFwID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBvdXRwdXQucmVkdWNlKChhY2MsIHBhaXIpID0+IHtcbiAgICAgICAgaWYgKHBhaXJbXCJ2YWx1ZVwiXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2NbcGFpcltcImtleVwiXV0gPSBfX2V4cGVjdFN0cmluZyhwYWlyW1widmFsdWVcIl0pO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG5jb25zdCBkZV9Qb2xpY3lOYW1lTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Byb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1B1dENvbmZpZ3VyYXRpb25TZXREZWxpdmVyeU9wdGlvbnNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXRJZGVudGl0eVBvbGljeVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1JlY2VpcHRBY3Rpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19TQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0FdID0gZGVfUzNBY3Rpb24ob3V0cHV0W19TQV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19CQW9dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0JBb10gPSBkZV9Cb3VuY2VBY3Rpb24ob3V0cHV0W19CQW9dLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfV0FdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1dBXSA9IGRlX1dvcmttYWlsQWN0aW9uKG91dHB1dFtfV0FdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTEFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0xBXSA9IGRlX0xhbWJkYUFjdGlvbihvdXRwdXRbX0xBXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NBdF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0F0XSA9IGRlX1N0b3BBY3Rpb24ob3V0cHV0W19TQXRdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUhBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BSEFdID0gZGVfQWRkSGVhZGVyQWN0aW9uKG91dHB1dFtfQUhBXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NOU0FdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NOU0FdID0gZGVfU05TQWN0aW9uKG91dHB1dFtfU05TQV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmVjZWlwdEFjdGlvbnNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9SZWNlaXB0QWN0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWNlaXB0RmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfSUZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0lGXSA9IGRlX1JlY2VpcHRJcEZpbHRlcihvdXRwdXRbX0lGXSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9SZWNlaXB0RmlsdGVyTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUmVjZWlwdEZpbHRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmVjZWlwdElwRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1BdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQ2ldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NpXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1JlY2VpcHRSdWxlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX0VdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVFBdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RQXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVFBdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5SZWNpcGllbnRzID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19SZV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19SZV0gIT0gbnVsbCAmJiBvdXRwdXRbX1JlXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JlXSA9IGRlX1JlY2lwaWVudHNMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19SZV1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LkFjdGlvbnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0FjXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0FjXSAhPSBudWxsICYmIG91dHB1dFtfQWNdW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQWNdID0gZGVfUmVjZWlwdEFjdGlvbnNMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19BY11bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TRWNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NFY10gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX1NFY10pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmVjZWlwdFJ1bGVTZXRNZXRhZGF0YSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NUcl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1RyXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX0NUcl0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1JlY2VpcHRSdWxlU2V0c0xpc3RzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9SZWNlaXB0UnVsZVNldE1ldGFkYXRhKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWNlaXB0UnVsZXNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9SZWNlaXB0UnVsZShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmVjaXBpZW50c0xpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0U3RyaW5nKGVudHJ5KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZW9yZGVyUmVjZWlwdFJ1bGVTZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9SZXB1dGF0aW9uT3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1NFZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0VlXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfU0VlXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1JNRV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUk1FXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfUk1FXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0xGU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTEZTXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX0xGU10pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1J1bGVEb2VzTm90RXhpc3RFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TM0FjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0JOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19CTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0JOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX09LUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfT0tQXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfT0tQXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0tLQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfS0tBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfS0tBXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZW5kQm91bmNlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NSWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01JZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01JZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2VuZEJ1bGtUZW1wbGF0ZWRFbWFpbFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dC5TdGF0dXMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1N0XSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1N0XSAhPSBudWxsICYmIG91dHB1dFtfU3RdW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU3RdID0gZGVfQnVsa0VtYWlsRGVzdGluYXRpb25TdGF0dXNMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19TdF1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2VuZEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NSWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01JZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01JZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2VuZERhdGFQb2ludCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RpXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UaV0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19UaV0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfREFlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EQWVdID0gX19zdHJpY3RQYXJzZUxvbmcob3V0cHV0W19EQWVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQm9dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0JvXSA9IF9fc3RyaWN0UGFyc2VMb25nKG91dHB1dFtfQm9dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQ29dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NvXSA9IF9fc3RyaWN0UGFyc2VMb25nKG91dHB1dFtfQ29dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUmVqXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SZWpdID0gX19zdHJpY3RQYXJzZUxvbmcob3V0cHV0W19SZWpdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NlbmREYXRhUG9pbnRMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9TZW5kRGF0YVBvaW50KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TZW5kRW1haWxSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01JZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTUllXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTUllXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZW5kUmF3RW1haWxSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01JZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTUllXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTUllXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZW5kVGVtcGxhdGVkRW1haWxSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01JZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTUllXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTUllXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZXRBY3RpdmVSZWNlaXB0UnVsZVNldFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NldElkZW50aXR5RGtpbUVuYWJsZWRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZXRJZGVudGl0eUZlZWRiYWNrRm9yd2FyZGluZ0VuYWJsZWRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZXRJZGVudGl0eUhlYWRlcnNJbk5vdGlmaWNhdGlvbnNFbmFibGVkUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpblJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NldElkZW50aXR5Tm90aWZpY2F0aW9uVG9waWNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZXRSZWNlaXB0UnVsZVBvc2l0aW9uUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU05TQWN0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVEFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVEFdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRW5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VuXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRW5dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NOU0Rlc3RpbmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVEFSTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVEFSTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RBUk5dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1N0b3BBY3Rpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19TY10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU2NdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TY10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVEFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UQV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVGVtcGxhdGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1BdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TUF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UUGVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RQZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RQZV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19IUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSFBdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19IUF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVGVtcGxhdGVNZXRhZGF0YSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NUcl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1RyXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX0NUcl0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlTWV0YWRhdGFMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9UZW1wbGF0ZU1ldGFkYXRhKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UZXN0UmVuZGVyVGVtcGxhdGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1JUZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUlRlXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfUlRlXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9UcmFja2luZ09wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DUkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NSRF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NSRF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1NOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1NOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9UcmFja2luZ09wdGlvbnNEb2VzTm90RXhpc3RFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVXBkYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVXBkYXRlUmVjZWlwdFJ1bGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9VcGRhdGVUZW1wbGF0ZVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1ZlcmlmaWNhdGlvbkF0dHJpYnV0ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIG91dHB1dC5yZWR1Y2UoKGFjYywgcGFpcikgPT4ge1xuICAgICAgICBpZiAocGFpcltcInZhbHVlXCJdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGFjY1twYWlyW1wia2V5XCJdXSA9IGRlX0lkZW50aXR5VmVyaWZpY2F0aW9uQXR0cmlidXRlcyhwYWlyW1widmFsdWVcIl0sIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG5jb25zdCBkZV9WZXJpZmljYXRpb25Ub2tlbkxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0U3RyaW5nKGVudHJ5KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9WZXJpZnlEb21haW5Ea2ltUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0LkRraW1Ub2tlbnMgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0RUa10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19EVGtdICE9IG51bGwgJiYgb3V0cHV0W19EVGtdW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRFRrXSA9IGRlX1ZlcmlmaWNhdGlvblRva2VuTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRFRrXVtfbWVdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9WZXJpZnlEb21haW5JZGVudGl0eVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVlRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ZUXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVlRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1ZlcmlmeUVtYWlsSWRlbnRpdHlSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Xb3JrbWFpbEFjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX09BXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19PQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX09BXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZXNlcmlhbGl6ZU1ldGFkYXRhID0gKG91dHB1dCkgPT4gKHtcbiAgICBodHRwU3RhdHVzQ29kZTogb3V0cHV0LnN0YXR1c0NvZGUsXG4gICAgcmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0aWRcIl0gPz8gb3V0cHV0LmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdC1pZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16LXJlcXVlc3QtaWRcIl0sXG4gICAgZXh0ZW5kZWRSZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotaWQtMlwiXSxcbiAgICBjZklkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16LWNmLWlkXCJdLFxufSk7XG5jb25zdCBjb2xsZWN0Qm9keVN0cmluZyA9IChzdHJlYW1Cb2R5LCBjb250ZXh0KSA9PiBjb2xsZWN0Qm9keShzdHJlYW1Cb2R5LCBjb250ZXh0KS50aGVuKChib2R5KSA9PiBjb250ZXh0LnV0ZjhFbmNvZGVyKGJvZHkpKTtcbmNvbnN0IHRocm93RGVmYXVsdEVycm9yID0gd2l0aEJhc2VFeGNlcHRpb24oX19CYXNlRXhjZXB0aW9uKTtcbmNvbnN0IGJ1aWxkSHR0cFJwY1JlcXVlc3QgPSBhc3luYyAoY29udGV4dCwgaGVhZGVycywgcGF0aCwgcmVzb2x2ZWRIb3N0bmFtZSwgYm9keSkgPT4ge1xuICAgIGNvbnN0IHsgaG9zdG5hbWUsIHByb3RvY29sID0gXCJodHRwc1wiLCBwb3J0LCBwYXRoOiBiYXNlUGF0aCB9ID0gYXdhaXQgY29udGV4dC5lbmRwb2ludCgpO1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge1xuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgIHBvcnQsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIHBhdGg6IGJhc2VQYXRoLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VQYXRoLnNsaWNlKDAsIC0xKSArIHBhdGggOiBiYXNlUGF0aCArIHBhdGgsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgfTtcbiAgICBpZiAocmVzb2x2ZWRIb3N0bmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRlbnRzLmhvc3RuYW1lID0gcmVzb2x2ZWRIb3N0bmFtZTtcbiAgICB9XG4gICAgaWYgKGJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZW50cy5ib2R5ID0gYm9keTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfX0h0dHBSZXF1ZXN0KGNvbnRlbnRzKTtcbn07XG5jb25zdCBTSEFSRURfSEVBREVSUyA9IHtcbiAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxufTtcbmNvbnN0IF8gPSBcIjIwMTAtMTItMDFcIjtcbmNvbnN0IF9BID0gXCJBY3Rpb25cIjtcbmNvbnN0IF9BRCA9IFwiQXJyaXZhbERhdGVcIjtcbmNvbnN0IF9BSEEgPSBcIkFkZEhlYWRlckFjdGlvblwiO1xuY29uc3QgX0FjID0gXCJBY3Rpb25zXCI7XG5jb25zdCBfQWYgPSBcIkFmdGVyXCI7XG5jb25zdCBfQiA9IFwiQm9keVwiO1xuY29uc3QgX0JBID0gXCJCY2NBZGRyZXNzZXNcIjtcbmNvbnN0IF9CQW8gPSBcIkJvdW5jZUFjdGlvblwiO1xuY29uc3QgX0JOID0gXCJCdWNrZXROYW1lXCI7XG5jb25zdCBfQk9NWEYgPSBcIkJlaGF2aW9yT25NWEZhaWx1cmVcIjtcbmNvbnN0IF9CUklMID0gXCJCb3VuY2VkUmVjaXBpZW50SW5mb0xpc3RcIjtcbmNvbnN0IF9CUyA9IFwiQm91bmNlU2VuZGVyXCI7XG5jb25zdCBfQlNBID0gXCJCb3VuY2VTZW5kZXJBcm5cIjtcbmNvbnN0IF9CVCA9IFwiQm91bmNlVHlwZVwiO1xuY29uc3QgX0JUbyA9IFwiQm91bmNlVG9waWNcIjtcbmNvbnN0IF9CbyA9IFwiQm91bmNlc1wiO1xuY29uc3QgX0J1ID0gXCJCdWNrZXRcIjtcbmNvbnN0IF9DID0gXCJDaGFyc2V0XCI7XG5jb25zdCBfQ0EgPSBcIkNjQWRkcmVzc2VzXCI7XG5jb25zdCBfQ0NTID0gXCJDcmVhdGVDb25maWd1cmF0aW9uU2V0XCI7XG5jb25zdCBfQ0NTRUQgPSBcIkNyZWF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uXCI7XG5jb25zdCBfQ0NTVE8gPSBcIkNyZWF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNcIjtcbmNvbnN0IF9DQ1ZFVCA9IFwiQ3JlYXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVwiO1xuY29uc3QgX0NSRCA9IFwiQ3VzdG9tUmVkaXJlY3REb21haW5cIjtcbmNvbnN0IF9DUkYgPSBcIkNyZWF0ZVJlY2VpcHRGaWx0ZXJcIjtcbmNvbnN0IF9DUlIgPSBcIkNyZWF0ZVJlY2VpcHRSdWxlXCI7XG5jb25zdCBfQ1JSUyA9IFwiQ2xvbmVSZWNlaXB0UnVsZVNldFwiO1xuY29uc3QgX0NSUlNyID0gXCJDcmVhdGVSZWNlaXB0UnVsZVNldFwiO1xuY29uc3QgX0NTID0gXCJDb25maWd1cmF0aW9uU2V0XCI7XG5jb25zdCBfQ1NBTiA9IFwiQ29uZmlndXJhdGlvblNldEF0dHJpYnV0ZU5hbWVzXCI7XG5jb25zdCBfQ1NOID0gXCJDb25maWd1cmF0aW9uU2V0TmFtZVwiO1xuY29uc3QgX0NTbyA9IFwiQ29uZmlndXJhdGlvblNldHNcIjtcbmNvbnN0IF9DVCA9IFwiQ3JlYXRlVGVtcGxhdGVcIjtcbmNvbnN0IF9DVG8gPSBcIkNvbXBsYWludFRvcGljXCI7XG5jb25zdCBfQ1RyID0gXCJDcmVhdGVkVGltZXN0YW1wXCI7XG5jb25zdCBfQ1ZFVCA9IFwiQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZXNcIjtcbmNvbnN0IF9DVkVUTiA9IFwiQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZU5hbWVcIjtcbmNvbnN0IF9DV0QgPSBcIkNsb3VkV2F0Y2hEZXN0aW5hdGlvblwiO1xuY29uc3QgX0NpID0gXCJDaWRyXCI7XG5jb25zdCBfQ28gPSBcIkNvbXBsYWludHNcIjtcbmNvbnN0IF9EID0gXCJEZXN0aW5hdGlvblwiO1xuY29uc3QgX0RBID0gXCJEa2ltQXR0cmlidXRlc1wiO1xuY29uc3QgX0RBUlJTID0gXCJEZXNjcmliZUFjdGl2ZVJlY2VpcHRSdWxlU2V0XCI7XG5jb25zdCBfREFlID0gXCJEZWxpdmVyeUF0dGVtcHRzXCI7XG5jb25zdCBfREMgPSBcIkRpbWVuc2lvbkNvbmZpZ3VyYXRpb25zXCI7XG5jb25zdCBfRENTID0gXCJEZWxldGVDb25maWd1cmF0aW9uU2V0XCI7XG5jb25zdCBfRENTRUQgPSBcIkRlbGV0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uXCI7XG5jb25zdCBfRENTVE8gPSBcIkRlbGV0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNcIjtcbmNvbnN0IF9EQ1NlID0gXCJEZXNjcmliZUNvbmZpZ3VyYXRpb25TZXRcIjtcbmNvbnN0IF9EQ1ZFVCA9IFwiRGVsZXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVwiO1xuY29uc3QgX0RDaSA9IFwiRGlhZ25vc3RpY0NvZGVcIjtcbmNvbnN0IF9ERFYgPSBcIkRlZmF1bHREaW1lbnNpb25WYWx1ZVwiO1xuY29uc3QgX0RFID0gXCJEa2ltRW5hYmxlZFwiO1xuY29uc3QgX0RJID0gXCJEZWxldGVJZGVudGl0eVwiO1xuY29uc3QgX0RJUCA9IFwiRGVsZXRlSWRlbnRpdHlQb2xpY3lcIjtcbmNvbnN0IF9ETiA9IFwiRGltZW5zaW9uTmFtZVwiO1xuY29uc3QgX0RPID0gXCJEZWxpdmVyeU9wdGlvbnNcIjtcbmNvbnN0IF9EUkYgPSBcIkRlbGV0ZVJlY2VpcHRGaWx0ZXJcIjtcbmNvbnN0IF9EUlIgPSBcIkRlbGV0ZVJlY2VpcHRSdWxlXCI7XG5jb25zdCBfRFJSUyA9IFwiRGVsZXRlUmVjZWlwdFJ1bGVTZXRcIjtcbmNvbnN0IF9EUlJTZSA9IFwiRGVzY3JpYmVSZWNlaXB0UnVsZVNldFwiO1xuY29uc3QgX0RSUmUgPSBcIkRlc2NyaWJlUmVjZWlwdFJ1bGVcIjtcbmNvbnN0IF9EU0FSTiA9IFwiRGVsaXZlcnlTdHJlYW1BUk5cIjtcbmNvbnN0IF9EVCA9IFwiRGVsZXRlVGVtcGxhdGVcIjtcbmNvbnN0IF9EVEQgPSBcIkRlZmF1bHRUZW1wbGF0ZURhdGFcIjtcbmNvbnN0IF9EVGUgPSBcIkRlZmF1bHRUYWdzXCI7XG5jb25zdCBfRFRlbCA9IFwiRGVsaXZlcnlUb3BpY1wiO1xuY29uc3QgX0RUayA9IFwiRGtpbVRva2Vuc1wiO1xuY29uc3QgX0RWRUEgPSBcIkRlbGV0ZVZlcmlmaWVkRW1haWxBZGRyZXNzXCI7XG5jb25zdCBfRFZTID0gXCJEaW1lbnNpb25WYWx1ZVNvdXJjZVwiO1xuY29uc3QgX0RWU2sgPSBcIkRraW1WZXJpZmljYXRpb25TdGF0dXNcIjtcbmNvbnN0IF9EYSA9IFwiRGF0YVwiO1xuY29uc3QgX0RlID0gXCJEZXN0aW5hdGlvbnNcIjtcbmNvbnN0IF9EbyA9IFwiRG9tYWluXCI7XG5jb25zdCBfRSA9IFwiRW5hYmxlZFwiO1xuY29uc3QgX0VBID0gXCJFbWFpbEFkZHJlc3NcIjtcbmNvbnN0IF9FRCA9IFwiRXZlbnREZXN0aW5hdGlvblwiO1xuY29uc3QgX0VETiA9IFwiRXZlbnREZXN0aW5hdGlvbk5hbWVcIjtcbmNvbnN0IF9FRHYgPSBcIkV2ZW50RGVzdGluYXRpb25zXCI7XG5jb25zdCBfRUYgPSBcIkV4dGVuc2lvbkZpZWxkc1wiO1xuY29uc3QgX0VuID0gXCJFbmNvZGluZ1wiO1xuY29uc3QgX0VyID0gXCJFcnJvclwiO1xuY29uc3QgX0V4ID0gXCJFeHBsYW5hdGlvblwiO1xuY29uc3QgX0YgPSBcIkZpbHRlclwiO1xuY29uc3QgX0ZBID0gXCJGdW5jdGlvbkFyblwiO1xuY29uc3QgX0ZBciA9IFwiRnJvbUFyblwiO1xuY29uc3QgX0ZFID0gXCJGb3J3YXJkaW5nRW5hYmxlZFwiO1xuY29uc3QgX0ZFQSA9IFwiRnJvbUVtYWlsQWRkcmVzc1wiO1xuY29uc3QgX0ZOID0gXCJGaWx0ZXJOYW1lXCI7XG5jb25zdCBfRlIgPSBcIkZpbmFsUmVjaXBpZW50XCI7XG5jb25zdCBfRlJVUkwgPSBcIkZhaWx1cmVSZWRpcmVjdGlvblVSTFwiO1xuY29uc3QgX0ZpID0gXCJGaWx0ZXJzXCI7XG5jb25zdCBfR0FTRSA9IFwiR2V0QWNjb3VudFNlbmRpbmdFbmFibGVkXCI7XG5jb25zdCBfR0NWRVQgPSBcIkdldEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVcIjtcbmNvbnN0IF9HSURBID0gXCJHZXRJZGVudGl0eURraW1BdHRyaWJ1dGVzXCI7XG5jb25zdCBfR0lNRkRBID0gXCJHZXRJZGVudGl0eU1haWxGcm9tRG9tYWluQXR0cmlidXRlc1wiO1xuY29uc3QgX0dJTkEgPSBcIkdldElkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlc1wiO1xuY29uc3QgX0dJUCA9IFwiR2V0SWRlbnRpdHlQb2xpY2llc1wiO1xuY29uc3QgX0dJVkEgPSBcIkdldElkZW50aXR5VmVyaWZpY2F0aW9uQXR0cmlidXRlc1wiO1xuY29uc3QgX0dTUSA9IFwiR2V0U2VuZFF1b3RhXCI7XG5jb25zdCBfR1NTID0gXCJHZXRTZW5kU3RhdGlzdGljc1wiO1xuY29uc3QgX0dUID0gXCJHZXRUZW1wbGF0ZVwiO1xuY29uc3QgX0ggPSBcIkh0bWxcIjtcbmNvbnN0IF9ISUJORSA9IFwiSGVhZGVyc0luQm91bmNlTm90aWZpY2F0aW9uc0VuYWJsZWRcIjtcbmNvbnN0IF9ISUNORSA9IFwiSGVhZGVyc0luQ29tcGxhaW50Tm90aWZpY2F0aW9uc0VuYWJsZWRcIjtcbmNvbnN0IF9ISURORSA9IFwiSGVhZGVyc0luRGVsaXZlcnlOb3RpZmljYXRpb25zRW5hYmxlZFwiO1xuY29uc3QgX0hOID0gXCJIZWFkZXJOYW1lXCI7XG5jb25zdCBfSFAgPSBcIkh0bWxQYXJ0XCI7XG5jb25zdCBfSFYgPSBcIkhlYWRlclZhbHVlXCI7XG5jb25zdCBfSSA9IFwiSWRlbnRpdHlcIjtcbmNvbnN0IF9JQU1SQVJOID0gXCJJQU1Sb2xlQVJOXCI7XG5jb25zdCBfSUYgPSBcIklwRmlsdGVyXCI7XG5jb25zdCBfSVQgPSBcIkludm9jYXRpb25UeXBlXCI7XG5jb25zdCBfSVRkID0gXCJJZGVudGl0eVR5cGVcIjtcbmNvbnN0IF9JZCA9IFwiSWRlbnRpdGllc1wiO1xuY29uc3QgX0tGRCA9IFwiS2luZXNpc0ZpcmVob3NlRGVzdGluYXRpb25cIjtcbmNvbnN0IF9LS0EgPSBcIkttc0tleUFyblwiO1xuY29uc3QgX0xBID0gXCJMYW1iZGFBY3Rpb25cIjtcbmNvbnN0IF9MQUQgPSBcIkxhc3RBdHRlbXB0RGF0ZVwiO1xuY29uc3QgX0xDUyA9IFwiTGlzdENvbmZpZ3VyYXRpb25TZXRzXCI7XG5jb25zdCBfTENWRVQgPSBcIkxpc3RDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlc1wiO1xuY29uc3QgX0xGUyA9IFwiTGFzdEZyZXNoU3RhcnRcIjtcbmNvbnN0IF9MSSA9IFwiTGlzdElkZW50aXRpZXNcIjtcbmNvbnN0IF9MSVAgPSBcIkxpc3RJZGVudGl0eVBvbGljaWVzXCI7XG5jb25zdCBfTFJGID0gXCJMaXN0UmVjZWlwdEZpbHRlcnNcIjtcbmNvbnN0IF9MUlJTID0gXCJMaXN0UmVjZWlwdFJ1bGVTZXRzXCI7XG5jb25zdCBfTFQgPSBcIkxpc3RUZW1wbGF0ZXNcIjtcbmNvbnN0IF9MVkVBID0gXCJMaXN0VmVyaWZpZWRFbWFpbEFkZHJlc3Nlc1wiO1xuY29uc3QgX00gPSBcIk1lc3NhZ2VcIjtcbmNvbnN0IF9NRCA9IFwiTWVzc2FnZURzblwiO1xuY29uc3QgX01FVCA9IFwiTWF0Y2hpbmdFdmVudFR5cGVzXCI7XG5jb25zdCBfTUZEID0gXCJNYWlsRnJvbURvbWFpblwiO1xuY29uc3QgX01GREEgPSBcIk1haWxGcm9tRG9tYWluQXR0cmlidXRlc1wiO1xuY29uc3QgX01GRFMgPSBcIk1haWxGcm9tRG9tYWluU3RhdHVzXCI7XG5jb25zdCBfTUhTID0gXCJNYXgyNEhvdXJTZW5kXCI7XG5jb25zdCBfTUkgPSBcIk1heEl0ZW1zXCI7XG5jb25zdCBfTUllID0gXCJNZXNzYWdlSWRcIjtcbmNvbnN0IF9NUiA9IFwiTWF4UmVzdWx0c1wiO1xuY29uc3QgX01TUiA9IFwiTWF4U2VuZFJhdGVcIjtcbmNvbnN0IF9NZSA9IFwiTWV0YWRhdGFcIjtcbmNvbnN0IF9OID0gXCJOYW1lXCI7XG5jb25zdCBfTkEgPSBcIk5vdGlmaWNhdGlvbkF0dHJpYnV0ZXNcIjtcbmNvbnN0IF9OVCA9IFwiTmV4dFRva2VuXCI7XG5jb25zdCBfTlRvID0gXCJOb3RpZmljYXRpb25UeXBlXCI7XG5jb25zdCBfT0EgPSBcIk9yZ2FuaXphdGlvbkFyblwiO1xuY29uc3QgX09LUCA9IFwiT2JqZWN0S2V5UHJlZml4XCI7XG5jb25zdCBfT01JID0gXCJPcmlnaW5hbE1lc3NhZ2VJZFwiO1xuY29uc3QgX09SU04gPSBcIk9yaWdpbmFsUnVsZVNldE5hbWVcIjtcbmNvbnN0IF9QID0gXCJQb2xpY3lcIjtcbmNvbnN0IF9QQ1NETyA9IFwiUHV0Q29uZmlndXJhdGlvblNldERlbGl2ZXJ5T3B0aW9uc1wiO1xuY29uc3QgX1BJUCA9IFwiUHV0SWRlbnRpdHlQb2xpY3lcIjtcbmNvbnN0IF9QTiA9IFwiUG9saWN5TmFtZVwiO1xuY29uc3QgX1BObyA9IFwiUG9saWN5TmFtZXNcIjtcbmNvbnN0IF9QbyA9IFwiUG9saWNpZXNcIjtcbmNvbnN0IF9SID0gXCJSZWNpcGllbnRcIjtcbmNvbnN0IF9SQSA9IFwiUmVjaXBpZW50QXJuXCI7XG5jb25zdCBfUkRGID0gXCJSZWNpcGllbnREc25GaWVsZHNcIjtcbmNvbnN0IF9STSA9IFwiUmVwb3J0aW5nTXRhXCI7XG5jb25zdCBfUk1FID0gXCJSZXB1dGF0aW9uTWV0cmljc0VuYWJsZWRcIjtcbmNvbnN0IF9STWEgPSBcIlJhd01lc3NhZ2VcIjtcbmNvbnN0IF9STWUgPSBcIlJlbW90ZU10YVwiO1xuY29uc3QgX1JOID0gXCJSdWxlTmFtZVwiO1xuY29uc3QgX1JOdSA9IFwiUnVsZU5hbWVzXCI7XG5jb25zdCBfUk8gPSBcIlJlcHV0YXRpb25PcHRpb25zXCI7XG5jb25zdCBfUlAgPSBcIlJldHVyblBhdGhcIjtcbmNvbnN0IF9SUEEgPSBcIlJldHVyblBhdGhBcm5cIjtcbmNvbnN0IF9SUlJTID0gXCJSZW9yZGVyUmVjZWlwdFJ1bGVTZXRcIjtcbmNvbnN0IF9SUyA9IFwiUnVsZVNldHNcIjtcbmNvbnN0IF9SU04gPSBcIlJ1bGVTZXROYW1lXCI7XG5jb25zdCBfUlQgPSBcIlJlcGxhY2VtZW50VGFnc1wiO1xuY29uc3QgX1JUQSA9IFwiUmVwbHlUb0FkZHJlc3Nlc1wiO1xuY29uc3QgX1JURCA9IFwiUmVwbGFjZW1lbnRUZW1wbGF0ZURhdGFcIjtcbmNvbnN0IF9SVGUgPSBcIlJlbmRlcmVkVGVtcGxhdGVcIjtcbmNvbnN0IF9SZSA9IFwiUmVjaXBpZW50c1wiO1xuY29uc3QgX1JlaiA9IFwiUmVqZWN0c1wiO1xuY29uc3QgX1J1ID0gXCJSdWxlXCI7XG5jb25zdCBfUnVsID0gXCJSdWxlc1wiO1xuY29uc3QgX1MgPSBcIlNlbmRlclwiO1xuY29uc3QgX1NBID0gXCJTM0FjdGlvblwiO1xuY29uc3QgX1NBUlJTID0gXCJTZXRBY3RpdmVSZWNlaXB0UnVsZVNldFwiO1xuY29uc3QgX1NBbyA9IFwiU291cmNlQXJuXCI7XG5jb25zdCBfU0F0ID0gXCJTdG9wQWN0aW9uXCI7XG5jb25zdCBfU0IgPSBcIlNlbmRCb3VuY2VcIjtcbmNvbnN0IF9TQlRFID0gXCJTZW5kQnVsa1RlbXBsYXRlZEVtYWlsXCI7XG5jb25zdCBfU0MgPSBcIlN0YXR1c0NvZGVcIjtcbmNvbnN0IF9TQ1ZFID0gXCJTZW5kQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxcIjtcbmNvbnN0IF9TRFAgPSBcIlNlbmREYXRhUG9pbnRzXCI7XG5jb25zdCBfU0UgPSBcIlNlbmRFbWFpbFwiO1xuY29uc3QgX1NFYyA9IFwiU2NhbkVuYWJsZWRcIjtcbmNvbnN0IF9TRWUgPSBcIlNlbmRpbmdFbmFibGVkXCI7XG5jb25zdCBfU0lERSA9IFwiU2V0SWRlbnRpdHlEa2ltRW5hYmxlZFwiO1xuY29uc3QgX1NJRkZFID0gXCJTZXRJZGVudGl0eUZlZWRiYWNrRm9yd2FyZGluZ0VuYWJsZWRcIjtcbmNvbnN0IF9TSUhJTkUgPSBcIlNldElkZW50aXR5SGVhZGVyc0luTm90aWZpY2F0aW9uc0VuYWJsZWRcIjtcbmNvbnN0IF9TSU1GRCA9IFwiU2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpblwiO1xuY29uc3QgX1NJTlQgPSBcIlNldElkZW50aXR5Tm90aWZpY2F0aW9uVG9waWNcIjtcbmNvbnN0IF9TTEggPSBcIlNlbnRMYXN0MjRIb3Vyc1wiO1xuY29uc3QgX1NOU0EgPSBcIlNOU0FjdGlvblwiO1xuY29uc3QgX1NOU0QgPSBcIlNOU0Rlc3RpbmF0aW9uXCI7XG5jb25zdCBfU1AgPSBcIlN1YmplY3RQYXJ0XCI7XG5jb25zdCBfU1JDID0gXCJTbXRwUmVwbHlDb2RlXCI7XG5jb25zdCBfU1JFID0gXCJTZW5kUmF3RW1haWxcIjtcbmNvbnN0IF9TUlJQID0gXCJTZXRSZWNlaXB0UnVsZVBvc2l0aW9uXCI7XG5jb25zdCBfU1JVUkwgPSBcIlN1Y2Nlc3NSZWRpcmVjdGlvblVSTFwiO1xuY29uc3QgX1NUID0gXCJTbnNUb3BpY1wiO1xuY29uc3QgX1NURSA9IFwiU2VuZFRlbXBsYXRlZEVtYWlsXCI7XG5jb25zdCBfU2MgPSBcIlNjb3BlXCI7XG5jb25zdCBfU28gPSBcIlNvdXJjZVwiO1xuY29uc3QgX1N0ID0gXCJTdGF0dXNcIjtcbmNvbnN0IF9TdSA9IFwiU3ViamVjdFwiO1xuY29uc3QgX1QgPSBcIlRleHRcIjtcbmNvbnN0IF9UQSA9IFwiVG9waWNBcm5cIjtcbmNvbnN0IF9UQVJOID0gXCJUb3BpY0FSTlwiO1xuY29uc3QgX1RBZSA9IFwiVGVtcGxhdGVBcm5cIjtcbmNvbnN0IF9UQW8gPSBcIlRvQWRkcmVzc2VzXCI7XG5jb25zdCBfVEMgPSBcIlRlbXBsYXRlQ29udGVudFwiO1xuY29uc3QgX1REID0gXCJUZW1wbGF0ZURhdGFcIjtcbmNvbnN0IF9UTSA9IFwiVGVtcGxhdGVzTWV0YWRhdGFcIjtcbmNvbnN0IF9UTiA9IFwiVGVtcGxhdGVOYW1lXCI7XG5jb25zdCBfVE8gPSBcIlRyYWNraW5nT3B0aW9uc1wiO1xuY29uc3QgX1RQID0gXCJUbHNQb2xpY3lcIjtcbmNvbnN0IF9UUGUgPSBcIlRleHRQYXJ0XCI7XG5jb25zdCBfVFJUID0gXCJUZXN0UmVuZGVyVGVtcGxhdGVcIjtcbmNvbnN0IF9UUyA9IFwiVGVtcGxhdGVTdWJqZWN0XCI7XG5jb25zdCBfVGEgPSBcIlRhZ3NcIjtcbmNvbnN0IF9UZSA9IFwiVGVtcGxhdGVcIjtcbmNvbnN0IF9UaSA9IFwiVGltZXN0YW1wXCI7XG5jb25zdCBfVG8gPSBcIlRvcGljXCI7XG5jb25zdCBfVUFTRSA9IFwiVXBkYXRlQWNjb3VudFNlbmRpbmdFbmFibGVkXCI7XG5jb25zdCBfVUNTRUQgPSBcIlVwZGF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uXCI7XG5jb25zdCBfVUNTUk1FID0gXCJVcGRhdGVDb25maWd1cmF0aW9uU2V0UmVwdXRhdGlvbk1ldHJpY3NFbmFibGVkXCI7XG5jb25zdCBfVUNTU0UgPSBcIlVwZGF0ZUNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nRW5hYmxlZFwiO1xuY29uc3QgX1VDU1RPID0gXCJVcGRhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zXCI7XG5jb25zdCBfVUNWRVQgPSBcIlVwZGF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVcIjtcbmNvbnN0IF9VUlIgPSBcIlVwZGF0ZVJlY2VpcHRSdWxlXCI7XG5jb25zdCBfVVQgPSBcIlVwZGF0ZVRlbXBsYXRlXCI7XG5jb25zdCBfViA9IFwiVmVyc2lvblwiO1xuY29uc3QgX1ZBID0gXCJWZXJpZmljYXRpb25BdHRyaWJ1dGVzXCI7XG5jb25zdCBfVkREID0gXCJWZXJpZnlEb21haW5Ea2ltXCI7XG5jb25zdCBfVkRJID0gXCJWZXJpZnlEb21haW5JZGVudGl0eVwiO1xuY29uc3QgX1ZFQSA9IFwiVmVyaWZ5RW1haWxBZGRyZXNzXCI7XG5jb25zdCBfVkVBZSA9IFwiVmVyaWZpZWRFbWFpbEFkZHJlc3Nlc1wiO1xuY29uc3QgX1ZFSSA9IFwiVmVyaWZ5RW1haWxJZGVudGl0eVwiO1xuY29uc3QgX1ZTID0gXCJWZXJpZmljYXRpb25TdGF0dXNcIjtcbmNvbnN0IF9WVCA9IFwiVmVyaWZpY2F0aW9uVG9rZW5cIjtcbmNvbnN0IF9WYSA9IFwiVmFsdWVcIjtcbmNvbnN0IF9XQSA9IFwiV29ya21haWxBY3Rpb25cIjtcbmNvbnN0IF9lID0gXCJlbnRyeVwiO1xuY29uc3QgX20gPSBcIm1lc3NhZ2VcIjtcbmNvbnN0IF9tZSA9IFwibWVtYmVyXCI7XG5jb25zdCBwYXJzZUJvZHkgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHlTdHJpbmcoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoZW5jb2RlZCkgPT4ge1xuICAgIGlmIChlbmNvZGVkLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgWE1MUGFyc2VyKHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWVQcmVmaXg6IFwiXCIsXG4gICAgICAgICAgICBodG1sRW50aXRpZXM6IHRydWUsXG4gICAgICAgICAgICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgICAgICAgICAgIGlnbm9yZURlY2xhcmF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgcGFyc2VUYWdWYWx1ZTogZmFsc2UsXG4gICAgICAgICAgICB0cmltVmFsdWVzOiBmYWxzZSxcbiAgICAgICAgICAgIHRhZ1ZhbHVlUHJvY2Vzc29yOiAoXywgdmFsKSA9PiAodmFsLnRyaW0oKSA9PT0gXCJcIiAmJiB2YWwuaW5jbHVkZXMoXCJcXG5cIikgPyBcIlwiIDogdW5kZWZpbmVkKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcnNlci5hZGRFbnRpdHkoXCIjeERcIiwgXCJcXHJcIik7XG4gICAgICAgIHBhcnNlci5hZGRFbnRpdHkoXCIjMTBcIiwgXCJcXG5cIik7XG4gICAgICAgIGNvbnN0IHBhcnNlZE9iaiA9IHBhcnNlci5wYXJzZShlbmNvZGVkKTtcbiAgICAgICAgY29uc3QgdGV4dE5vZGVOYW1lID0gXCIjdGV4dFwiO1xuICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhwYXJzZWRPYmopWzBdO1xuICAgICAgICBjb25zdCBwYXJzZWRPYmpUb1JldHVybiA9IHBhcnNlZE9ialtrZXldO1xuICAgICAgICBpZiAocGFyc2VkT2JqVG9SZXR1cm5bdGV4dE5vZGVOYW1lXSkge1xuICAgICAgICAgICAgcGFyc2VkT2JqVG9SZXR1cm5ba2V5XSA9IHBhcnNlZE9ialRvUmV0dXJuW3RleHROb2RlTmFtZV07XG4gICAgICAgICAgICBkZWxldGUgcGFyc2VkT2JqVG9SZXR1cm5bdGV4dE5vZGVOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX19nZXRWYWx1ZUZyb21UZXh0Tm9kZShwYXJzZWRPYmpUb1JldHVybik7XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn0pO1xuY29uc3QgcGFyc2VFcnJvckJvZHkgPSBhc3luYyAoZXJyb3JCb2R5LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBhd2FpdCBwYXJzZUJvZHkoZXJyb3JCb2R5LCBjb250ZXh0KTtcbiAgICBpZiAodmFsdWUuRXJyb3IpIHtcbiAgICAgICAgdmFsdWUuRXJyb3IubWVzc2FnZSA9IHZhbHVlLkVycm9yLm1lc3NhZ2UgPz8gdmFsdWUuRXJyb3IuTWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbmNvbnN0IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcgPSAoZm9ybUVudHJpZXMpID0+IE9iamVjdC5lbnRyaWVzKGZvcm1FbnRyaWVzKVxuICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gX19leHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBfX2V4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAuam9pbihcIiZcIik7XG5jb25zdCBsb2FkUXVlcnlFcnJvckNvZGUgPSAob3V0cHV0LCBkYXRhKSA9PiB7XG4gICAgaWYgKGRhdGEuRXJyb3I/LkNvZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZGF0YS5FcnJvci5Db2RlO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPT0gNDA0KSB7XG4gICAgICAgIHJldHVybiBcIk5vdEZvdW5kXCI7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IGdldEVuZHBvaW50UGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0U2VyZGVQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlXCI7XG5pbXBvcnQgeyBDb21tYW5kIGFzICRDb21tYW5kIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgY29tbW9uUGFyYW1zIH0gZnJvbSBcIi4uL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgZGVfU2VuZEVtYWlsQ29tbWFuZCwgc2VfU2VuZEVtYWlsQ29tbWFuZCB9IGZyb20gXCIuLi9wcm90b2NvbHMvQXdzX3F1ZXJ5XCI7XG5leHBvcnQgeyAkQ29tbWFuZCB9O1xuZXhwb3J0IGNsYXNzIFNlbmRFbWFpbENvbW1hbmQgZXh0ZW5kcyAkQ29tbWFuZFxuICAgIC5jbGFzc0J1aWxkZXIoKVxuICAgIC5lcCh7XG4gICAgLi4uY29tbW9uUGFyYW1zLFxufSlcbiAgICAubShmdW5jdGlvbiAoQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICAgIHJldHVybiBbXG4gICAgICAgIGdldFNlcmRlUGx1Z2luKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICAgICBnZXRFbmRwb2ludFBsdWdpbihjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSksXG4gICAgXTtcbn0pXG4gICAgLnMoXCJTaW1wbGVFbWFpbFNlcnZpY2VcIiwgXCJTZW5kRW1haWxcIiwge30pXG4gICAgLm4oXCJTRVNDbGllbnRcIiwgXCJTZW5kRW1haWxDb21tYW5kXCIpXG4gICAgLmYodm9pZCAwLCB2b2lkIDApXG4gICAgLnNlcihzZV9TZW5kRW1haWxDb21tYW5kKVxuICAgIC5kZShkZV9TZW5kRW1haWxDb21tYW5kKVxuICAgIC5idWlsZCgpIHtcbn1cbiIsImltcG9ydCB7IFVzZXIgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodCdcblxuZXhwb3J0IGNsYXNzIFF1aWNrU2lnaHRVc2VyIHtcblx0YXJuOiBzdHJpbmcgLy8gYXJuOmF3czpxdWlja3NpZ2h0OjxSRUdJT04+OjxBQ0NPVU5UPjp1c2VyL2RlZmF1bHQvPElBTSBST0xFIE5BTUU+LzxTVFMgU0VTU0lPTj5cblx0ZW1haWw6IHN0cmluZ1xuXHRsYXN0QWNjZXNzOiBEYXRlIC8vIENvbWVzIGZyb20gQ2xvdWRUcmFpbFxuXHRyb2xlOiBRdWlja1NpZ2h0Um9sZVxuXHR1c2VybmFtZTogc3RyaW5nIC8vIDxJQU0gUk9MRT4vPFNUUyBTRVNTSU9OPlxuXHRpYW1Sb2xlOiBzdHJpbmdcblx0c3RzU2Vzc2lvbjogc3RyaW5nXG5cdGludmFsaWQ6IGJvb2xlYW4gLy8gVXNlciBpcyBpbnZhbGlkIGlmIHVzZXJuYW1lIGlzIFwiTi9BXCIuIFNlZSBSRUFETUUubWQgZm9yIG1vcmUgZGV0YWlsc1xuXG5cdGNvbnN0cnVjdG9yKHF1aWNrU2lnaHRVc2VyOiBVc2VyKSB7XG5cdFx0dGhpcy5hcm4gPSBxdWlja1NpZ2h0VXNlci5Bcm5cblx0XHR0aGlzLmVtYWlsID0gcXVpY2tTaWdodFVzZXIuRW1haWxcblx0XHR0aGlzLnJvbGUgPSBRdWlja1NpZ2h0Um9sZVtxdWlja1NpZ2h0VXNlci5Sb2xlIGFzIGtleW9mIHR5cGVvZiBRdWlja1NpZ2h0Um9sZV0gLy8gT25seSB2YWx1ZXMgdGhhdCB3aWxsIGJlIHJldHVybmVkIC8vIGFsc28gdGhlIGtleW9mIHR5cGVvZiBoYWNrIGNhbWUgZnJvbSBoZXJlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MjYyMzkwNVxuXHRcdHRoaXMudXNlcm5hbWUgPSBxdWlja1NpZ2h0VXNlci5Vc2VyTmFtZVxuXHRcdHRoaXMuaW52YWxpZCA9IHRoaXMudXNlcm5hbWUgPT09ICdOL0EnXG5cdFx0Y29uc3QgW2lhbVJvbGUsIHN0c1Nlc3Npb25dID0gdGhpcy51c2VybmFtZS5zcGxpdCgnLycpXG5cdFx0dGhpcy5pYW1Sb2xlID0gaWFtUm9sZVxuXHRcdHRoaXMuc3RzU2Vzc2lvbiA9IHN0c1Nlc3Npb25cblx0fVxufVxuXG5leHBvcnQgZW51bSBRdWlja1NpZ2h0Um9sZSB7XG5cdFJFQURFUiA9ICdSRUFERVInLCBBVVRIT1IgPSAnQVVUSE9SJywgQURNSU4gPSAnQURNSU4nXG59XG4iLCJpbXBvcnQgeyBTZW5kRW1haWxDb21tYW5kLCBTRVNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtc2VzJ1xuaW1wb3J0IHsgUXVpY2tTaWdodFVzZXIgfSBmcm9tICcuL1F1aWNrU2lnaHRVc2VyJ1xuXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uTWFuYWdlciB7XG5cdHByaXZhdGUgc2VzQ2xpZW50ID0gbmV3IFNFU0NsaWVudCh7fSlcblx0cHJpdmF0ZSBub0xhc3RBY2Nlc3NEYXRlID0gbmV3IERhdGUoMCkudG9Mb2NhbGVTdHJpbmcoKVxuXG5cdHB1YmxpYyBhc3luYyBub3RpZnlVc2VyKHVzZXI6IFF1aWNrU2lnaHRVc2VyKSB7XG5cdFx0Ly8gU3RyeWtlciBkaXNhYmxlIG5leHQtbGluZSBhbGwgXCJJIGRvIG5vdCBjYXJlIGFib3V0IG11dGF0aW5nIGNvbnNvbGUgc3RhdGVtZW50c1wiXG5cdFx0Y29uc29sZS5kZWJ1ZyhgTm90aWZ5aW5nICR7SlNPTi5zdHJpbmdpZnkodXNlciwgbnVsbCwgMSl9YClcblx0XHRcblx0XHQvLyBJZiB0aGUgZGF0ZSBpcyAxOTcwLCB3ZSBkaWRuJ3QgZmluZCBhbnkgYWN0aXZpdHkgZm9yIHRoZSB1c2VyXG5cdFx0Y29uc3QgbGFzdEFjY2VzcyA9XG5cdFx0XHR1c2VyLmxhc3RBY2Nlc3MudG9Mb2NhbGVTdHJpbmcoKSA9PT0gdGhpcy5ub0xhc3RBY2Nlc3NEYXRlXG5cdFx0XHRcdD8gYG5vdCBpbiB0aGUgbGFzdCAke3Byb2Nlc3MuZW52LmRlbGV0ZURheXN9IGRheXNgXG5cdFx0XHRcdDogdXNlci5sYXN0QWNjZXNzLnRvTG9jYWxlRGF0ZVN0cmluZygpXG5cblx0XHRjb25zdCBzdWJqZWN0ID0gYEk6IFF1aWNrU2lnaHQgdXNlciAke3VzZXIudXNlcm5hbWV9IGluIGFjY291bnQgJHtwcm9jZXNzLmVudi5hY2NvdW50QWxpYXN9IHdpbGwgYmUgZGVsZXRlZGBcblx0XHRjb25zdCBib2R5ID0gYEluIG9yZGVyIHRvIDxhIGhyZWY9XCJodHRwczovL2F3cy5hbWF6b24uY29tL3F1aWNrc2lnaHQvcHJpY2luZy9cIj5jb250cm9sIGNvc3RzICgkMjQvbW9udGgvdXNlcik8L2E+LFxuICAgIHlvdXIgQVdTIFF1aWNrU2lnaHQgdXNlciAnJHt1c2VyLnVzZXJuYW1lfScgXG4gICAgd2lsbCBiZSBkZWxldGVkIHdoZW4geW91IGhhdmUgbm90IGFjY2Vzc2VkIFF1aWNrU2lnaHQgaW4gJHtwcm9jZXNzLmVudi5kZWxldGVEYXlzfSBkYXlzLiBcbiAgICBDbG91ZFRyYWlsIHJlY29yZHMgaW5kaWNhdGUgdGhhdCB5b3VyIGxhc3QgYWNjZXNzIHdhcyAke2xhc3RBY2Nlc3N9LjxiciAvPjxiciAvPlxuICAgIFxuICAgIFlvdSBjYW4ga2VlcCB5b3VyIHVzZXIgYnkgbG9nZ2luZyBpbiBhbmQgdGFraW5nIGFjdGlvbnMgaW4gUXVpY2tTaWdodC4gXG4gICAgQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBkbyBub3RoaW5nLCBhbmQgeW91ciB1c2VyIHdpbGwgYmUgYXV0b21hdGljYWxseSBkZWxldGVkLiBcbiAgICBOZXZlciBmZWFyLCB5b3Ugc2ltcGx5IGxvZyBiYWNrIGludG8gUXVpY2tTaWdodCBhbmQgZW50ZXIgeW91ciBlLW1haWwsIGFuZCB5b3VyIHVzZXIgZ2V0cyByZWNyZWF0ZWQuIFxuICAgIE5vIGRhc2hib2FyZHMgb3Igb3RoZXIgcmVzb3VyY2VzIHdpbGwgYmUgZGVsZXRlZCBhdCB0aGlzIHRpbWUgKHdlIG1heSBjbGVhbiB0aG9zZSB1cCBpbiB0aGUgZnV0dXJlLCB3aXRoIG5vdGlmaWNhdGlvbiwgb2YgY291cnNlKS48YnIgLz48YnIgLz5cbiAgICBcbiAgICBBY2NvdW50IE51bWJlcjogJHtwcm9jZXNzLmVudi5hd3NBY2NvdW50SWR9PGJyIC8+XG4gICAgQWNjb3VudCBBbGlhczogJHtwcm9jZXNzLmVudi5hY2NvdW50QWxpYXN9PGJyIC8+XG4gICAgQXNzdW1lZCBSb2xlOiAke3VzZXIuaWFtUm9sZX08YnIgLz5cbiAgICBFbWFpbDogJHt1c2VyLmVtYWlsfTxiciAvPjxiciAvPlxuICBcbiAgICBGb3IgZnVydGhlciBhc3Npc3RhbmNlLCBjb250YWN0IDxhIGhyZWY9XCJtYWlsdG86JHtwcm9jZXNzLmVudi5jb250YWN0fVwiPiR7cHJvY2Vzcy5lbnYuY29udGFjdH08L2E+LiBUaGFuayB5b3UgYW5kIGhhdmUgYSBmYW50YXN0aWNhbGx5IGZ1bi1maWxsZWQgZGF5IPCfpbMuXG4gICAgYFxuXG5cdFx0Y29uc3Qgc2VuZEVtYWlsQ29tbWFuZCA9IG5ldyBTZW5kRW1haWxDb21tYW5kKHtcblx0XHRcdFNvdXJjZTogYCR7cHJvY2Vzcy5lbnYuYWNjb3VudEFsaWFzfSBDbG91ZCBBY2NvdW50IEFkbWluaXN0cmF0b3I8JHtwcm9jZXNzLmVudi5mcm9tfT5gLFxuXHRcdFx0RGVzdGluYXRpb246IHtcblx0XHRcdFx0VG9BZGRyZXNzZXM6IFt1c2VyLmVtYWlsXSxcblx0XHRcdFx0Q2NBZGRyZXNzZXM6IEpTT04ucGFyc2UocHJvY2Vzcy5lbnYuY2MpLFxuXHRcdFx0fSxcblx0XHRcdFJlcGx5VG9BZGRyZXNzZXM6IFtwcm9jZXNzLmVudi5yZXBseVRvXSxcblx0XHRcdFNvdXJjZUFybjogcHJvY2Vzcy5lbnYuc2VzQXJuLFxuXHRcdFx0TWVzc2FnZToge1xuXHRcdFx0XHRTdWJqZWN0OiB7IERhdGE6IHN1YmplY3QgfSxcblx0XHRcdFx0Qm9keToge1xuXHRcdFx0XHRcdEh0bWw6IHsgRGF0YTogYm9keSB9LFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9KVxuXG5cdFx0YXdhaXQgdGhpcy5zZXNDbGllbnQuc2VuZChzZW5kRW1haWxDb21tYW5kKVxuXHR9XG59IiwiaW1wb3J0IHsgcmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0LCBub3JtYWxpemVQcm92aWRlciB9IGZyb20gXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRRdWlja1NpZ2h0SHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIgPSBhc3luYyAoY29uZmlnLCBjb250ZXh0LCBpbnB1dCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIG9wZXJhdGlvbjogZ2V0U21pdGh5Q29udGV4dChjb250ZXh0KS5vcGVyYXRpb24sXG4gICAgICAgIHJlZ2lvbjogKGF3YWl0IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5yZWdpb24pKCkpIHx8XG4gICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImV4cGVjdGVkIGByZWdpb25gIHRvIGJlIGNvbmZpZ3VyZWQgZm9yIGBhd3MuYXV0aCNzaWd2NGBcIik7XG4gICAgICAgICAgICB9KSgpLFxuICAgIH07XG59O1xuZnVuY3Rpb24gY3JlYXRlQXdzQXV0aFNpZ3Y0SHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzY2hlbWVJZDogXCJhd3MuYXV0aCNzaWd2NFwiLFxuICAgICAgICBzaWduaW5nUHJvcGVydGllczoge1xuICAgICAgICAgICAgbmFtZTogXCJxdWlja3NpZ2h0XCIsXG4gICAgICAgICAgICByZWdpb246IGF1dGhQYXJhbWV0ZXJzLnJlZ2lvbixcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcGVydGllc0V4dHJhY3RvcjogKGNvbmZpZywgY29udGV4dCkgPT4gKHtcbiAgICAgICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRRdWlja1NpZ2h0SHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IChhdXRoUGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBbXTtcbiAgICBzd2l0Y2ggKGF1dGhQYXJhbWV0ZXJzLm9wZXJhdGlvbikge1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goY3JlYXRlQXdzQXV0aFNpZ3Y0SHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNvbmZpZ18wID0gcmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnKGNvbmZpZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY29uZmlnXzAsXG4gICAgfTtcbn07XG4iLCJleHBvcnQgY29uc3QgcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyA9IChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdXNlRHVhbHN0YWNrRW5kcG9pbnQ6IG9wdGlvbnMudXNlRHVhbHN0YWNrRW5kcG9pbnQgPz8gZmFsc2UsXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogb3B0aW9ucy51c2VGaXBzRW5kcG9pbnQgPz8gZmFsc2UsXG4gICAgICAgIGRlZmF1bHRTaWduaW5nTmFtZTogXCJxdWlja3NpZ2h0XCIsXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgY29tbW9uUGFyYW1zID0ge1xuICAgIFVzZUZJUFM6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwidXNlRmlwc0VuZHBvaW50XCIgfSxcbiAgICBFbmRwb2ludDogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJlbmRwb2ludFwiIH0sXG4gICAgUmVnaW9uOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInJlZ2lvblwiIH0sXG4gICAgVXNlRHVhbFN0YWNrOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUR1YWxzdGFja0VuZHBvaW50XCIgfSxcbn07XG4iLCJjb25zdCBzID0gXCJyZXF1aXJlZFwiLCB0ID0gXCJmblwiLCB1ID0gXCJhcmd2XCIsIHYgPSBcInJlZlwiO1xuY29uc3QgYSA9IHRydWUsIGIgPSBcImlzU2V0XCIsIGMgPSBcImJvb2xlYW5FcXVhbHNcIiwgZCA9IFwiZXJyb3JcIiwgZSA9IFwiZW5kcG9pbnRcIiwgZiA9IFwidHJlZVwiLCBnID0gXCJQYXJ0aXRpb25SZXN1bHRcIiwgaCA9IHsgW3NdOiBmYWxzZSwgXCJ0eXBlXCI6IFwiU3RyaW5nXCIgfSwgaSA9IHsgW3NdOiB0cnVlLCBcImRlZmF1bHRcIjogZmFsc2UsIFwidHlwZVwiOiBcIkJvb2xlYW5cIiB9LCBqID0geyBbdl06IFwiRW5kcG9pbnRcIiB9LCBrID0geyBbdF06IGMsIFt1XTogW3sgW3ZdOiBcIlVzZUZJUFNcIiB9LCB0cnVlXSB9LCBsID0geyBbdF06IGMsIFt1XTogW3sgW3ZdOiBcIlVzZUR1YWxTdGFja1wiIH0sIHRydWVdIH0sIG0gPSB7fSwgbiA9IHsgW3RdOiBcImdldEF0dHJcIiwgW3VdOiBbeyBbdl06IGcgfSwgXCJzdXBwb3J0c0ZJUFNcIl0gfSwgbyA9IHsgW3RdOiBjLCBbdV06IFt0cnVlLCB7IFt0XTogXCJnZXRBdHRyXCIsIFt1XTogW3sgW3ZdOiBnIH0sIFwic3VwcG9ydHNEdWFsU3RhY2tcIl0gfV0gfSwgcCA9IFtrXSwgcSA9IFtsXSwgciA9IFt7IFt2XTogXCJSZWdpb25cIiB9XTtcbmNvbnN0IF9kYXRhID0geyB2ZXJzaW9uOiBcIjEuMFwiLCBwYXJhbWV0ZXJzOiB7IFJlZ2lvbjogaCwgVXNlRHVhbFN0YWNrOiBpLCBVc2VGSVBTOiBpLCBFbmRwb2ludDogaCB9LCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3RdOiBiLCBbdV06IFtqXSB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IHAsIGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogRklQUyBhbmQgY3VzdG9tIGVuZHBvaW50IGFyZSBub3Qgc3VwcG9ydGVkXCIsIHR5cGU6IGQgfSwgeyBjb25kaXRpb25zOiBxLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IER1YWxzdGFjayBhbmQgY3VzdG9tIGVuZHBvaW50IGFyZSBub3Qgc3VwcG9ydGVkXCIsIHR5cGU6IGQgfSwgeyBlbmRwb2ludDogeyB1cmw6IGosIHByb3BlcnRpZXM6IG0sIGhlYWRlcnM6IG0gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IFt7IFt0XTogYiwgW3VdOiByIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3RdOiBcImF3cy5wYXJ0aXRpb25cIiwgW3VdOiByLCBhc3NpZ246IGcgfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbaywgbF0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdF06IGMsIFt1XTogW2EsIG5dIH0sIG9dLCBydWxlczogW3sgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vcXVpY2tzaWdodC1maXBzLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZHVhbFN0YWNrRG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBtLCBoZWFkZXJzOiBtIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJGSVBTIGFuZCBEdWFsU3RhY2sgYXJlIGVuYWJsZWQsIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IG9uZSBvciBib3RoXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBwLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3RdOiBjLCBbdV06IFtuLCBhXSB9XSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3F1aWNrc2lnaHQtZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbSwgaGVhZGVyczogbSB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRklQUyBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IEZJUFNcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHEsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbb10sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9xdWlja3NpZ2h0LntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZHVhbFN0YWNrRG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBtLCBoZWFkZXJzOiBtIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJEdWFsU3RhY2sgaXMgZW5hYmxlZCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBEdWFsU3RhY2tcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3F1aWNrc2lnaHQue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG0sIGhlYWRlcnM6IG0gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogTWlzc2luZyBSZWdpb25cIiwgdHlwZTogZCB9XSB9O1xuZXhwb3J0IGNvbnN0IHJ1bGVTZXQgPSBfZGF0YTtcbiIsImltcG9ydCB7IHJlc29sdmVFbmRwb2ludCB9IGZyb20gXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBydWxlU2V0IH0gZnJvbSBcIi4vcnVsZXNldFwiO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyID0gKGVuZHBvaW50UGFyYW1zLCBjb250ZXh0ID0ge30pID0+IHtcbiAgICByZXR1cm4gcmVzb2x2ZUVuZHBvaW50KHJ1bGVTZXQsIHtcbiAgICAgICAgZW5kcG9pbnRQYXJhbXM6IGVuZHBvaW50UGFyYW1zLFxuICAgICAgICBsb2dnZXI6IGNvbnRleHQubG9nZ2VyLFxuICAgIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSAocnVudGltZUNvbmZpZykgPT4ge1xuICAgIGNvbnN0IF9odHRwQXV0aFNjaGVtZXMgPSBydW50aW1lQ29uZmlnLmh0dHBBdXRoU2NoZW1lcztcbiAgICBsZXQgX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBydW50aW1lQ29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgbGV0IF9jcmVkZW50aWFscyA9IHJ1bnRpbWVDb25maWcuY3JlZGVudGlhbHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0SHR0cEF1dGhTY2hlbWUoaHR0cEF1dGhTY2hlbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gX2h0dHBBdXRoU2NoZW1lcy5maW5kSW5kZXgoKHNjaGVtZSkgPT4gc2NoZW1lLnNjaGVtZUlkID09PSBodHRwQXV0aFNjaGVtZS5zY2hlbWVJZCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lcy5wdXNoKGh0dHBBdXRoU2NoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZXMuc3BsaWNlKGluZGV4LCAxLCBodHRwQXV0aFNjaGVtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lcygpIHtcbiAgICAgICAgICAgIHJldHVybiBfaHR0cEF1dGhTY2hlbWVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXRIdHRwQXV0aFNjaGVtZVByb3ZpZGVyKGh0dHBBdXRoU2NoZW1lUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q3JlZGVudGlhbHMoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIF9jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICB9LFxuICAgICAgICBjcmVkZW50aWFscygpIHtcbiAgICAgICAgICAgIHJldHVybiBfY3JlZGVudGlhbHM7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBodHRwQXV0aFNjaGVtZXM6IGNvbmZpZy5odHRwQXV0aFNjaGVtZXMoKSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSxcbiAgICAgICAgY3JlZGVudGlhbHM6IGNvbmZpZy5jcmVkZW50aWFscygpLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgZ2V0SG9zdEhlYWRlclBsdWdpbiwgcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXJcIjtcbmltcG9ydCB7IGdldExvZ2dlclBsdWdpbiB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLWxvZ2dlclwiO1xuaW1wb3J0IHsgZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtcmVjdXJzaW9uLWRldGVjdGlvblwiO1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50UGx1Z2luLCByZXNvbHZlVXNlckFnZW50Q29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXVzZXItYWdlbnRcIjtcbmltcG9ydCB7IHJlc29sdmVSZWdpb25Db25maWcgfSBmcm9tIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnLCBnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbiwgZ2V0SHR0cFNpZ25pbmdQbHVnaW4sIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuaW1wb3J0IHsgZ2V0Q29udGVudExlbmd0aFBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtY29udGVudC1sZW5ndGhcIjtcbmltcG9ydCB7IHJlc29sdmVFbmRwb2ludENvbmZpZyB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnRcIjtcbmltcG9ydCB7IGdldFJldHJ5UGx1Z2luLCByZXNvbHZlUmV0cnlDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCI7XG5pbXBvcnQgeyBDbGllbnQgYXMgX19DbGllbnQsIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgZGVmYXVsdFF1aWNrU2lnaHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciwgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnLCB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiO1xuaW1wb3J0IHsgcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycywgfSBmcm9tIFwiLi9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IGdldFJ1bnRpbWVDb25maWcgYXMgX19nZXRSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vcnVudGltZUNvbmZpZ1wiO1xuaW1wb3J0IHsgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zIH0gZnJvbSBcIi4vcnVudGltZUV4dGVuc2lvbnNcIjtcbmV4cG9ydCB7IF9fQ2xpZW50IH07XG5leHBvcnQgY2xhc3MgUXVpY2tTaWdodENsaWVudCBleHRlbmRzIF9fQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvciguLi5bY29uZmlndXJhdGlvbl0pIHtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18wID0gX19nZXRSdW50aW1lQ29uZmlnKGNvbmZpZ3VyYXRpb24gfHwge30pO1xuICAgICAgICBjb25zdCBfY29uZmlnXzEgPSByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzKF9jb25maWdfMCk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMiA9IHJlc29sdmVSZWdpb25Db25maWcoX2NvbmZpZ18xKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18zID0gcmVzb2x2ZUVuZHBvaW50Q29uZmlnKF9jb25maWdfMik7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNCA9IHJlc29sdmVSZXRyeUNvbmZpZyhfY29uZmlnXzMpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzUgPSByZXNvbHZlSG9zdEhlYWRlckNvbmZpZyhfY29uZmlnXzQpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzYgPSByZXNvbHZlVXNlckFnZW50Q29uZmlnKF9jb25maWdfNSk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNyA9IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyhfY29uZmlnXzYpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzggPSByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMoX2NvbmZpZ183LCBjb25maWd1cmF0aW9uPy5leHRlbnNpb25zIHx8IFtdKTtcbiAgICAgICAgc3VwZXIoX2NvbmZpZ184KTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBfY29uZmlnXzg7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRSZXRyeVBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0Q29udGVudExlbmd0aFBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SG9zdEhlYWRlclBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0TG9nZ2VyUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRSZWN1cnNpb25EZXRlY3Rpb25QbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFVzZXJBZ2VudFBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4odGhpcy5jb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyOiB0aGlzLmdldERlZmF1bHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcigpLFxuICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyOiB0aGlzLmdldElkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcigpLFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIdHRwU2lnbmluZ1BsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIGdldERlZmF1bHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcigpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRRdWlja1NpZ2h0SHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXI7XG4gICAgfVxuICAgIGdldElkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcigpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIChjb25maWcpID0+IG5ldyBEZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZyh7XG4gICAgICAgICAgICBcImF3cy5hdXRoI3NpZ3Y0XCI6IGNvbmZpZy5jcmVkZW50aWFscyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHBhY2thZ2VJbmZvIGZyb20gXCIuLi9wYWNrYWdlLmpzb25cIjtcbmltcG9ydCB7IGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gYXMgYXdzQ2hlY2tWZXJzaW9uIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IGRlZmF1bHRQcm92aWRlciBhcyBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyIH0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZVwiO1xuaW1wb3J0IHsgZGVmYXVsdFVzZXJBZ2VudCB9IGZyb20gXCJAYXdzLXNkay91dGlsLXVzZXItYWdlbnQtbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUywgTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsIE5PREVfVVNFX0RVQUxTVEFDS19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgfSBmcm9tIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IEhhc2ggfSBmcm9tIFwiQHNtaXRoeS9oYXNoLW5vZGVcIjtcbmltcG9ydCB7IE5PREVfTUFYX0FUVEVNUFRfQ09ORklHX09QVElPTlMsIE5PREVfUkVUUllfTU9ERV9DT05GSUdfT1BUSU9OUyB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtcmV0cnlcIjtcbmltcG9ydCB7IGxvYWRDb25maWcgYXMgbG9hZE5vZGVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlclwiO1xuaW1wb3J0IHsgTm9kZUh0dHBIYW5kbGVyIGFzIFJlcXVlc3RIYW5kbGVyLCBzdHJlYW1Db2xsZWN0b3IgfSBmcm9tIFwiQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlclwiO1xuaW1wb3J0IHsgY2FsY3VsYXRlQm9keUxlbmd0aCB9IGZyb20gXCJAc21pdGh5L3V0aWwtYm9keS1sZW5ndGgtbm9kZVwiO1xuaW1wb3J0IHsgREVGQVVMVF9SRVRSWV9NT0RFIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1yZXRyeVwiO1xuaW1wb3J0IHsgZ2V0UnVudGltZUNvbmZpZyBhcyBnZXRTaGFyZWRSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vcnVudGltZUNvbmZpZy5zaGFyZWRcIjtcbmltcG9ydCB7IGxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1kZWZhdWx0cy1tb2RlLW5vZGVcIjtcbmltcG9ydCB7IGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5leHBvcnQgY29uc3QgZ2V0UnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uKHByb2Nlc3MudmVyc2lvbik7XG4gICAgY29uc3QgZGVmYXVsdHNNb2RlID0gcmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyhjb25maWcpO1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWdQcm92aWRlciA9ICgpID0+IGRlZmF1bHRzTW9kZSgpLnRoZW4obG9hZENvbmZpZ3NGb3JEZWZhdWx0TW9kZSk7XG4gICAgY29uc3QgY2xpZW50U2hhcmVkVmFsdWVzID0gZ2V0U2hhcmVkUnVudGltZUNvbmZpZyhjb25maWcpO1xuICAgIGF3c0NoZWNrVmVyc2lvbihwcm9jZXNzLnZlcnNpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNsaWVudFNoYXJlZFZhbHVlcyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBydW50aW1lOiBcIm5vZGVcIixcbiAgICAgICAgZGVmYXVsdHNNb2RlLFxuICAgICAgICBib2R5TGVuZ3RoQ2hlY2tlcjogY29uZmlnPy5ib2R5TGVuZ3RoQ2hlY2tlciA/PyBjYWxjdWxhdGVCb2R5TGVuZ3RoLFxuICAgICAgICBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyOiBjb25maWc/LmNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIgPz8gY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcixcbiAgICAgICAgZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyOiBjb25maWc/LmRlZmF1bHRVc2VyQWdlbnRQcm92aWRlciA/P1xuICAgICAgICAgICAgZGVmYXVsdFVzZXJBZ2VudCh7IHNlcnZpY2VJZDogY2xpZW50U2hhcmVkVmFsdWVzLnNlcnZpY2VJZCwgY2xpZW50VmVyc2lvbjogcGFja2FnZUluZm8udmVyc2lvbiB9KSxcbiAgICAgICAgbWF4QXR0ZW1wdHM6IGNvbmZpZz8ubWF4QXR0ZW1wdHMgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUyksXG4gICAgICAgIHJlZ2lvbjogY29uZmlnPy5yZWdpb24gPz8gbG9hZE5vZGVDb25maWcoTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsIE5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMpLFxuICAgICAgICByZXF1ZXN0SGFuZGxlcjogY29uZmlnPy5yZXF1ZXN0SGFuZGxlciA/PyBuZXcgUmVxdWVzdEhhbmRsZXIoZGVmYXVsdENvbmZpZ1Byb3ZpZGVyKSxcbiAgICAgICAgcmV0cnlNb2RlOiBjb25maWc/LnJldHJ5TW9kZSA/P1xuICAgICAgICAgICAgbG9hZE5vZGVDb25maWcoe1xuICAgICAgICAgICAgICAgIC4uLk5PREVfUkVUUllfTU9ERV9DT05GSUdfT1BUSU9OUyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBhc3luYyAoKSA9PiAoYXdhaXQgZGVmYXVsdENvbmZpZ1Byb3ZpZGVyKCkpLnJldHJ5TW9kZSB8fCBERUZBVUxUX1JFVFJZX01PREUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgc2hhMjU2OiBjb25maWc/LnNoYTI1NiA/PyBIYXNoLmJpbmQobnVsbCwgXCJzaGEyNTZcIiksXG4gICAgICAgIHN0cmVhbUNvbGxlY3RvcjogY29uZmlnPy5zdHJlYW1Db2xsZWN0b3IgPz8gc3RyZWFtQ29sbGVjdG9yLFxuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogY29uZmlnPy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMpLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IGNvbmZpZz8udXNlRmlwc0VuZHBvaW50ID8/IGxvYWROb2RlQ29uZmlnKE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMpLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgQXdzU2RrU2lnVjRTaWduZXIgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgTm9PcExvZ2dlciB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IHBhcnNlVXJsIH0gZnJvbSBcIkBzbWl0aHkvdXJsLXBhcnNlclwiO1xuaW1wb3J0IHsgZnJvbUJhc2U2NCwgdG9CYXNlNjQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiO1xuaW1wb3J0IHsgZnJvbVV0ZjgsIHRvVXRmOCB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXRmOFwiO1xuaW1wb3J0IHsgZGVmYXVsdFF1aWNrU2lnaHRIdHRwQXV0aFNjaGVtZVByb3ZpZGVyIH0gZnJvbSBcIi4vYXV0aC9odHRwQXV0aFNjaGVtZVByb3ZpZGVyXCI7XG5pbXBvcnQgeyBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciB9IGZyb20gXCIuL2VuZHBvaW50L2VuZHBvaW50UmVzb2x2ZXJcIjtcbmV4cG9ydCBjb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwaVZlcnNpb246IFwiMjAxOC0wNC0wMVwiLFxuICAgICAgICBiYXNlNjREZWNvZGVyOiBjb25maWc/LmJhc2U2NERlY29kZXIgPz8gZnJvbUJhc2U2NCxcbiAgICAgICAgYmFzZTY0RW5jb2RlcjogY29uZmlnPy5iYXNlNjRFbmNvZGVyID8/IHRvQmFzZTY0LFxuICAgICAgICBkaXNhYmxlSG9zdFByZWZpeDogY29uZmlnPy5kaXNhYmxlSG9zdFByZWZpeCA/PyBmYWxzZSxcbiAgICAgICAgZW5kcG9pbnRQcm92aWRlcjogY29uZmlnPy5lbmRwb2ludFByb3ZpZGVyID8/IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyLFxuICAgICAgICBleHRlbnNpb25zOiBjb25maWc/LmV4dGVuc2lvbnMgPz8gW10sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZz8uaHR0cEF1dGhTY2hlbWVQcm92aWRlciA/PyBkZWZhdWx0UXVpY2tTaWdodEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIsXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnPy5odHRwQXV0aFNjaGVtZXMgPz8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlcjogKGlwYykgPT4gaXBjLmdldElkZW50aXR5UHJvdmlkZXIoXCJhd3MuYXV0aCNzaWd2NFwiKSxcbiAgICAgICAgICAgICAgICBzaWduZXI6IG5ldyBBd3NTZGtTaWdWNFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbG9nZ2VyOiBjb25maWc/LmxvZ2dlciA/PyBuZXcgTm9PcExvZ2dlcigpLFxuICAgICAgICBzZXJ2aWNlSWQ6IGNvbmZpZz8uc2VydmljZUlkID8/IFwiUXVpY2tTaWdodFwiLFxuICAgICAgICB1cmxQYXJzZXI6IGNvbmZpZz8udXJsUGFyc2VyID8/IHBhcnNlVXJsLFxuICAgICAgICB1dGY4RGVjb2RlcjogY29uZmlnPy51dGY4RGVjb2RlciA/PyBmcm9tVXRmOCxcbiAgICAgICAgdXRmOEVuY29kZXI6IGNvbmZpZz8udXRmOEVuY29kZXIgPz8gdG9VdGY4LFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIH0gZnJvbSBcIkBhd3Mtc2RrL3JlZ2lvbi1jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvblwiO1xuY29uc3QgYXNQYXJ0aWFsID0gKHQpID0+IHQ7XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zID0gKHJ1bnRpbWVDb25maWcsIGV4dGVuc2lvbnMpID0+IHtcbiAgICBjb25zdCBleHRlbnNpb25Db25maWd1cmF0aW9uID0ge1xuICAgICAgICAuLi5hc1BhcnRpYWwoZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSksXG4gICAgICAgIC4uLmFzUGFydGlhbChnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSksXG4gICAgICAgIC4uLmFzUGFydGlhbChnZXRIdHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZykpLFxuICAgICAgICAuLi5hc1BhcnRpYWwoZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpKSxcbiAgICB9O1xuICAgIGV4dGVuc2lvbnMuZm9yRWFjaCgoZXh0ZW5zaW9uKSA9PiBleHRlbnNpb24uY29uZmlndXJlKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5ydW50aW1lQ29uZmlnLFxuICAgICAgICAuLi5yZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihleHRlbnNpb25Db25maWd1cmF0aW9uKSxcbiAgICAgICAgLi4ucmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgICAgICAuLi5yZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgICAgICAuLi5yZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgU2VydmljZUV4Y2VwdGlvbiBhcyBfX1NlcnZpY2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IHsgX19TZXJ2aWNlRXhjZXB0aW9uIH07XG5leHBvcnQgY2xhc3MgUXVpY2tTaWdodFNlcnZpY2VFeGNlcHRpb24gZXh0ZW5kcyBfX1NlcnZpY2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBRdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNFTlNJVElWRV9TVFJJTkcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBRdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi9RdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvblwiO1xuZXhwb3J0IGNsYXNzIEFjY2Vzc0RlbmllZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkFjY2Vzc0RlbmllZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjY2Vzc0RlbmllZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEVkaXRpb24gPSB7XG4gICAgRU5URVJQUklTRTogXCJFTlRFUlBSSVNFXCIsXG4gICAgRU5URVJQUklTRV9BTkRfUTogXCJFTlRFUlBSSVNFX0FORF9RXCIsXG4gICAgU1RBTkRBUkQ6IFwiU1RBTkRBUkRcIixcbn07XG5leHBvcnQgY29uc3QgRGFzaGJvYXJkQmVoYXZpb3IgPSB7XG4gICAgRElTQUJMRUQ6IFwiRElTQUJMRURcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbn07XG5leHBvcnQgY29uc3QgU2ltcGxlQXR0cmlidXRlQWdncmVnYXRpb25GdW5jdGlvbiA9IHtcbiAgICBVTklRVUVfVkFMVUU6IFwiVU5JUVVFX1ZBTFVFXCIsXG59O1xuZXhwb3J0IGNvbnN0IENhdGVnb3JpY2FsQWdncmVnYXRpb25GdW5jdGlvbiA9IHtcbiAgICBDT1VOVDogXCJDT1VOVFwiLFxuICAgIERJU1RJTkNUX0NPVU5UOiBcIkRJU1RJTkNUX0NPVU5UXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGVBZ2dyZWdhdGlvbkZ1bmN0aW9uID0ge1xuICAgIENPVU5UOiBcIkNPVU5UXCIsXG4gICAgRElTVElOQ1RfQ09VTlQ6IFwiRElTVElOQ1RfQ09VTlRcIixcbiAgICBNQVg6IFwiTUFYXCIsXG4gICAgTUlOOiBcIk1JTlwiLFxufTtcbmV4cG9ydCBjb25zdCBTaW1wbGVOdW1lcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uID0ge1xuICAgIEFWRVJBR0U6IFwiQVZFUkFHRVwiLFxuICAgIENPVU5UOiBcIkNPVU5UXCIsXG4gICAgRElTVElOQ1RfQ09VTlQ6IFwiRElTVElOQ1RfQ09VTlRcIixcbiAgICBNQVg6IFwiTUFYXCIsXG4gICAgTUVESUFOOiBcIk1FRElBTlwiLFxuICAgIE1JTjogXCJNSU5cIixcbiAgICBTVERFVjogXCJTVERFVlwiLFxuICAgIFNUREVWUDogXCJTVERFVlBcIixcbiAgICBTVU06IFwiU1VNXCIsXG4gICAgVkFSOiBcIlZBUlwiLFxuICAgIFZBUlA6IFwiVkFSUFwiLFxufTtcbmV4cG9ydCBjb25zdCBTb3J0RGlyZWN0aW9uID0ge1xuICAgIEFTQzogXCJBU0NcIixcbiAgICBERVNDOiBcIkRFU0NcIixcbn07XG5leHBvcnQgY29uc3QgQW5hbHlzaXNFcnJvclR5cGUgPSB7XG4gICAgQUNDRVNTX0RFTklFRDogXCJBQ0NFU1NfREVOSUVEXCIsXG4gICAgQ09MVU1OX0dFT0dSQVBISUNfUk9MRV9NSVNNQVRDSDogXCJDT0xVTU5fR0VPR1JBUEhJQ19ST0xFX01JU01BVENIXCIsXG4gICAgQ09MVU1OX1JFUExBQ0VNRU5UX01JU1NJTkc6IFwiQ09MVU1OX1JFUExBQ0VNRU5UX01JU1NJTkdcIixcbiAgICBDT0xVTU5fVFlQRV9NSVNNQVRDSDogXCJDT0xVTU5fVFlQRV9NSVNNQVRDSFwiLFxuICAgIERBVEFfU0VUX05PVF9GT1VORDogXCJEQVRBX1NFVF9OT1RfRk9VTkRcIixcbiAgICBJTlRFUk5BTF9GQUlMVVJFOiBcIklOVEVSTkFMX0ZBSUxVUkVcIixcbiAgICBQQVJBTUVURVJfTk9UX0ZPVU5EOiBcIlBBUkFNRVRFUl9OT1RfRk9VTkRcIixcbiAgICBQQVJBTUVURVJfVFlQRV9JTlZBTElEOiBcIlBBUkFNRVRFUl9UWVBFX0lOVkFMSURcIixcbiAgICBQQVJBTUVURVJfVkFMVUVfSU5DT01QQVRJQkxFOiBcIlBBUkFNRVRFUl9WQUxVRV9JTkNPTVBBVElCTEVcIixcbiAgICBTT1VSQ0VfTk9UX0ZPVU5EOiBcIlNPVVJDRV9OT1RfRk9VTkRcIixcbn07XG5leHBvcnQgY29uc3QgUmVzb3VyY2VTdGF0dXMgPSB7XG4gICAgQ1JFQVRJT05fRkFJTEVEOiBcIkNSRUFUSU9OX0ZBSUxFRFwiLFxuICAgIENSRUFUSU9OX0lOX1BST0dSRVNTOiBcIkNSRUFUSU9OX0lOX1BST0dSRVNTXCIsXG4gICAgQ1JFQVRJT05fU1VDQ0VTU0ZVTDogXCJDUkVBVElPTl9TVUNDRVNTRlVMXCIsXG4gICAgREVMRVRFRDogXCJERUxFVEVEXCIsXG4gICAgVVBEQVRFX0ZBSUxFRDogXCJVUERBVEVfRkFJTEVEXCIsXG4gICAgVVBEQVRFX0lOX1BST0dSRVNTOiBcIlVQREFURV9JTl9QUk9HUkVTU1wiLFxuICAgIFVQREFURV9TVUNDRVNTRlVMOiBcIlVQREFURV9TVUNDRVNTRlVMXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlc2l6ZU9wdGlvbiA9IHtcbiAgICBGSVhFRDogXCJGSVhFRFwiLFxuICAgIFJFU1BPTlNJVkU6IFwiUkVTUE9OU0lWRVwiLFxufTtcbmV4cG9ydCBjb25zdCBQYXBlck9yaWVudGF0aW9uID0ge1xuICAgIExBTkRTQ0FQRTogXCJMQU5EU0NBUEVcIixcbiAgICBQT1JUUkFJVDogXCJQT1JUUkFJVFwiLFxufTtcbmV4cG9ydCBjb25zdCBQYXBlclNpemUgPSB7XG4gICAgQTA6IFwiQTBcIixcbiAgICBBMTogXCJBMVwiLFxuICAgIEEyOiBcIkEyXCIsXG4gICAgQTM6IFwiQTNcIixcbiAgICBBNDogXCJBNFwiLFxuICAgIEE1OiBcIkE1XCIsXG4gICAgSklTX0I0OiBcIkpJU19CNFwiLFxuICAgIEpJU19CNTogXCJKSVNfQjVcIixcbiAgICBVU19MRUdBTDogXCJVU19MRUdBTFwiLFxuICAgIFVTX0xFVFRFUjogXCJVU19MRVRURVJcIixcbiAgICBVU19UQUJMT0lEX0xFREdFUjogXCJVU19UQUJMT0lEX0xFREdFUlwiLFxufTtcbmV4cG9ydCBjb25zdCBTaGVldENvbnRlbnRUeXBlID0ge1xuICAgIElOVEVSQUNUSVZFOiBcIklOVEVSQUNUSVZFXCIsXG4gICAgUEFHSU5BVEVEOiBcIlBBR0lOQVRFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBTcGVjaWFsVmFsdWUgPSB7XG4gICAgRU1QVFk6IFwiRU1QVFlcIixcbiAgICBOVUxMOiBcIk5VTExcIixcbiAgICBPVEhFUjogXCJPVEhFUlwiLFxufTtcbmV4cG9ydCBjb25zdCBOZWdhdGl2ZVZhbHVlRGlzcGxheU1vZGUgPSB7XG4gICAgTkVHQVRJVkU6IFwiTkVHQVRJVkVcIixcbiAgICBQT1NJVElWRTogXCJQT1NJVElWRVwiLFxufTtcbmV4cG9ydCBjb25zdCBOdW1iZXJTY2FsZSA9IHtcbiAgICBBVVRPOiBcIkFVVE9cIixcbiAgICBCSUxMSU9OUzogXCJCSUxMSU9OU1wiLFxuICAgIE1JTExJT05TOiBcIk1JTExJT05TXCIsXG4gICAgTk9ORTogXCJOT05FXCIsXG4gICAgVEhPVVNBTkRTOiBcIlRIT1VTQU5EU1wiLFxuICAgIFRSSUxMSU9OUzogXCJUUklMTElPTlNcIixcbn07XG5leHBvcnQgY29uc3QgTnVtZXJpY1NlcGFyYXRvclN5bWJvbCA9IHtcbiAgICBDT01NQTogXCJDT01NQVwiLFxuICAgIERPVDogXCJET1RcIixcbiAgICBTUEFDRTogXCJTUEFDRVwiLFxufTtcbmV4cG9ydCBjb25zdCBWaXNpYmlsaXR5ID0ge1xuICAgIEhJRERFTjogXCJISURERU5cIixcbiAgICBWSVNJQkxFOiBcIlZJU0lCTEVcIixcbn07XG5leHBvcnQgY29uc3QgQ29sdW1uUm9sZSA9IHtcbiAgICBESU1FTlNJT046IFwiRElNRU5TSU9OXCIsXG4gICAgTUVBU1VSRTogXCJNRUFTVVJFXCIsXG59O1xuZXhwb3J0IGNvbnN0IENyb3NzRGF0YXNldFR5cGVzID0ge1xuICAgIEFMTF9EQVRBU0VUUzogXCJBTExfREFUQVNFVFNcIixcbiAgICBTSU5HTEVfREFUQVNFVDogXCJTSU5HTEVfREFUQVNFVFwiLFxufTtcbmV4cG9ydCBjb25zdCBDYXRlZ29yeUZpbHRlck1hdGNoT3BlcmF0b3IgPSB7XG4gICAgQ09OVEFJTlM6IFwiQ09OVEFJTlNcIixcbiAgICBET0VTX05PVF9DT05UQUlOOiBcIkRPRVNfTk9UX0NPTlRBSU5cIixcbiAgICBET0VTX05PVF9FUVVBTDogXCJET0VTX05PVF9FUVVBTFwiLFxuICAgIEVORFNfV0lUSDogXCJFTkRTX1dJVEhcIixcbiAgICBFUVVBTFM6IFwiRVFVQUxTXCIsXG4gICAgU1RBUlRTX1dJVEg6IFwiU1RBUlRTX1dJVEhcIixcbn07XG5leHBvcnQgY29uc3QgRmlsdGVyTnVsbE9wdGlvbiA9IHtcbiAgICBBTExfVkFMVUVTOiBcIkFMTF9WQUxVRVNcIixcbiAgICBOT05fTlVMTFNfT05MWTogXCJOT05fTlVMTFNfT05MWVwiLFxuICAgIE5VTExTX09OTFk6IFwiTlVMTFNfT05MWVwiLFxufTtcbmV4cG9ydCBjb25zdCBDYXRlZ29yeUZpbHRlclNlbGVjdEFsbE9wdGlvbnMgPSB7XG4gICAgRklMVEVSX0FMTF9WQUxVRVM6IFwiRklMVEVSX0FMTF9WQUxVRVNcIixcbn07XG5leHBvcnQgY29uc3QgTnVtZXJpY0VxdWFsaXR5TWF0Y2hPcGVyYXRvciA9IHtcbiAgICBET0VTX05PVF9FUVVBTDogXCJET0VTX05PVF9FUVVBTFwiLFxuICAgIEVRVUFMUzogXCJFUVVBTFNcIixcbn07XG5leHBvcnQgY29uc3QgTnVtZXJpY0ZpbHRlclNlbGVjdEFsbE9wdGlvbnMgPSB7XG4gICAgRklMVEVSX0FMTF9WQUxVRVM6IFwiRklMVEVSX0FMTF9WQUxVRVNcIixcbn07XG5leHBvcnQgY29uc3QgQW5jaG9yT3B0aW9uID0ge1xuICAgIE5PVzogXCJOT1dcIixcbn07XG5leHBvcnQgY29uc3QgVGltZUdyYW51bGFyaXR5ID0ge1xuICAgIERBWTogXCJEQVlcIixcbiAgICBIT1VSOiBcIkhPVVJcIixcbiAgICBNSUxMSVNFQ09ORDogXCJNSUxMSVNFQ09ORFwiLFxuICAgIE1JTlVURTogXCJNSU5VVEVcIixcbiAgICBNT05USDogXCJNT05USFwiLFxuICAgIFFVQVJURVI6IFwiUVVBUlRFUlwiLFxuICAgIFNFQ09ORDogXCJTRUNPTkRcIixcbiAgICBXRUVLOiBcIldFRUtcIixcbiAgICBZRUFSOiBcIllFQVJcIixcbn07XG5leHBvcnQgY29uc3QgV2lkZ2V0U3RhdHVzID0ge1xuICAgIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gICAgRU5BQkxFRDogXCJFTkFCTEVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlbGF0aXZlRGF0ZVR5cGUgPSB7XG4gICAgTEFTVDogXCJMQVNUXCIsXG4gICAgTkVYVDogXCJORVhUXCIsXG4gICAgTk9XOiBcIk5PV1wiLFxuICAgIFBSRVZJT1VTOiBcIlBSRVZJT1VTXCIsXG4gICAgVEhJUzogXCJUSElTXCIsXG59O1xuZXhwb3J0IGNvbnN0IEZpbHRlclZpc3VhbFNjb3BlID0ge1xuICAgIEFMTF9WSVNVQUxTOiBcIkFMTF9WSVNVQUxTXCIsXG4gICAgU0VMRUNURURfVklTVUFMUzogXCJTRUxFQ1RFRF9WSVNVQUxTXCIsXG59O1xuZXhwb3J0IGNvbnN0IERheU9mVGhlV2VlayA9IHtcbiAgICBGUklEQVk6IFwiRlJJREFZXCIsXG4gICAgTU9OREFZOiBcIk1PTkRBWVwiLFxuICAgIFNBVFVSREFZOiBcIlNBVFVSREFZXCIsXG4gICAgU1VOREFZOiBcIlNVTkRBWVwiLFxuICAgIFRIVVJTREFZOiBcIlRIVVJTREFZXCIsXG4gICAgVFVFU0RBWTogXCJUVUVTREFZXCIsXG4gICAgV0VETkVTREFZOiBcIldFRE5FU0RBWVwiLFxufTtcbmV4cG9ydCBjb25zdCBWYWx1ZVdoZW5VbnNldE9wdGlvbiA9IHtcbiAgICBOVUxMOiBcIk5VTExcIixcbiAgICBSRUNPTU1FTkRFRF9WQUxVRTogXCJSRUNPTU1FTkRFRF9WQUxVRVwiLFxufTtcbmV4cG9ydCBjb25zdCBQYXJhbWV0ZXJWYWx1ZVR5cGUgPSB7XG4gICAgTVVMVElfVkFMVUVEOiBcIk1VTFRJX1ZBTFVFRFwiLFxuICAgIFNJTkdMRV9WQUxVRUQ6IFwiU0lOR0xFX1ZBTFVFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBGb250RGVjb3JhdGlvbiA9IHtcbiAgICBOT05FOiBcIk5PTkVcIixcbiAgICBVTkRFUkxJTkU6IFwiVU5ERVJMSU5FXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlbGF0aXZlRm9udFNpemUgPSB7XG4gICAgRVhUUkFfTEFSR0U6IFwiRVhUUkFfTEFSR0VcIixcbiAgICBFWFRSQV9TTUFMTDogXCJFWFRSQV9TTUFMTFwiLFxuICAgIExBUkdFOiBcIkxBUkdFXCIsXG4gICAgTUVESVVNOiBcIk1FRElVTVwiLFxuICAgIFNNQUxMOiBcIlNNQUxMXCIsXG59O1xuZXhwb3J0IGNvbnN0IEZvbnRTdHlsZSA9IHtcbiAgICBJVEFMSUM6IFwiSVRBTElDXCIsXG4gICAgTk9STUFMOiBcIk5PUk1BTFwiLFxufTtcbmV4cG9ydCBjb25zdCBGb250V2VpZ2h0TmFtZSA9IHtcbiAgICBCT0xEOiBcIkJPTERcIixcbiAgICBOT1JNQUw6IFwiTk9STUFMXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNoZWV0Q29udHJvbERhdGVUaW1lUGlja2VyVHlwZSA9IHtcbiAgICBEQVRFX1JBTkdFOiBcIkRBVEVfUkFOR0VcIixcbiAgICBTSU5HTEVfVkFMVUVEOiBcIlNJTkdMRV9WQUxVRURcIixcbn07XG5leHBvcnQgY29uc3QgU2hlZXRDb250cm9sTGlzdFR5cGUgPSB7XG4gICAgTVVMVElfU0VMRUNUOiBcIk1VTFRJX1NFTEVDVFwiLFxuICAgIFNJTkdMRV9TRUxFQ1Q6IFwiU0lOR0xFX1NFTEVDVFwiLFxufTtcbmV4cG9ydCBjb25zdCBTaGVldENvbnRyb2xTbGlkZXJUeXBlID0ge1xuICAgIFJBTkdFOiBcIlJBTkdFXCIsXG4gICAgU0lOR0xFX1BPSU5UOiBcIlNJTkdMRV9QT0lOVFwiLFxufTtcbmV4cG9ydCBjb25zdCBMYXlvdXRFbGVtZW50VHlwZSA9IHtcbiAgICBGSUxURVJfQ09OVFJPTDogXCJGSUxURVJfQ09OVFJPTFwiLFxuICAgIFBBUkFNRVRFUl9DT05UUk9MOiBcIlBBUkFNRVRFUl9DT05UUk9MXCIsXG4gICAgVEVYVF9CT1g6IFwiVEVYVF9CT1hcIixcbiAgICBWSVNVQUw6IFwiVklTVUFMXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNlY3Rpb25QYWdlQnJlYWtTdGF0dXMgPSB7XG4gICAgRElTQUJMRUQ6IFwiRElTQUJMRURcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbn07XG5leHBvcnQgY29uc3QgU2VsZWN0ZWRGaWVsZE9wdGlvbnMgPSB7XG4gICAgQUxMX0ZJRUxEUzogXCJBTExfRklFTERTXCIsXG59O1xuZXhwb3J0IGNvbnN0IFRhcmdldFZpc3VhbE9wdGlvbnMgPSB7XG4gICAgQUxMX1ZJU1VBTFM6IFwiQUxMX1ZJU1VBTFNcIixcbn07XG5leHBvcnQgY29uc3QgU2VsZWN0QWxsVmFsdWVPcHRpb25zID0ge1xuICAgIEFMTF9WQUxVRVM6IFwiQUxMX1ZBTFVFU1wiLFxufTtcbmV4cG9ydCBjb25zdCBVUkxUYXJnZXRDb25maWd1cmF0aW9uID0ge1xuICAgIE5FV19UQUI6IFwiTkVXX1RBQlwiLFxuICAgIE5FV19XSU5ET1c6IFwiTkVXX1dJTkRPV1wiLFxuICAgIFNBTUVfVEFCOiBcIlNBTUVfVEFCXCIsXG59O1xuZXhwb3J0IGNvbnN0IFZpc3VhbEN1c3RvbUFjdGlvblRyaWdnZXIgPSB7XG4gICAgREFUQV9QT0lOVF9DTElDSzogXCJEQVRBX1BPSU5UX0NMSUNLXCIsXG4gICAgREFUQV9QT0lOVF9NRU5VOiBcIkRBVEFfUE9JTlRfTUVOVVwiLFxufTtcbmV4cG9ydCBjb25zdCBCYXJzQXJyYW5nZW1lbnQgPSB7XG4gICAgQ0xVU1RFUkVEOiBcIkNMVVNURVJFRFwiLFxuICAgIFNUQUNLRUQ6IFwiU1RBQ0tFRFwiLFxuICAgIFNUQUNLRURfUEVSQ0VOVDogXCJTVEFDS0VEX1BFUkNFTlRcIixcbn07XG5leHBvcnQgY29uc3QgRGF0YUxhYmVsQ29udGVudCA9IHtcbiAgICBQRVJDRU5UOiBcIlBFUkNFTlRcIixcbiAgICBWQUxVRTogXCJWQUxVRVwiLFxuICAgIFZBTFVFX0FORF9QRVJDRU5UOiBcIlZBTFVFX0FORF9QRVJDRU5UXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGFMYWJlbE92ZXJsYXAgPSB7XG4gICAgRElTQUJMRV9PVkVSTEFQOiBcIkRJU0FCTEVfT1ZFUkxBUFwiLFxuICAgIEVOQUJMRV9PVkVSTEFQOiBcIkVOQUJMRV9PVkVSTEFQXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGFMYWJlbFBvc2l0aW9uID0ge1xuICAgIEJPVFRPTTogXCJCT1RUT01cIixcbiAgICBJTlNJREU6IFwiSU5TSURFXCIsXG4gICAgTEVGVDogXCJMRUZUXCIsXG4gICAgT1VUU0lERTogXCJPVVRTSURFXCIsXG4gICAgUklHSFQ6IFwiUklHSFRcIixcbiAgICBUT1A6IFwiVE9QXCIsXG59O1xuZXhwb3J0IGNvbnN0IExlZ2VuZFBvc2l0aW9uID0ge1xuICAgIEFVVE86IFwiQVVUT1wiLFxuICAgIEJPVFRPTTogXCJCT1RUT01cIixcbiAgICBSSUdIVDogXCJSSUdIVFwiLFxuICAgIFRPUDogXCJUT1BcIixcbn07XG5leHBvcnQgY29uc3QgQmFyQ2hhcnRPcmllbnRhdGlvbiA9IHtcbiAgICBIT1JJWk9OVEFMOiBcIkhPUklaT05UQUxcIixcbiAgICBWRVJUSUNBTDogXCJWRVJUSUNBTFwiLFxufTtcbmV4cG9ydCBjb25zdCBBeGlzQmluZGluZyA9IHtcbiAgICBQUklNQVJZX1lBWElTOiBcIlBSSU1BUllfWUFYSVNcIixcbiAgICBTRUNPTkRBUllfWUFYSVM6IFwiU0VDT05EQVJZX1lBWElTXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlZmVyZW5jZUxpbmVTZXJpZXNUeXBlID0ge1xuICAgIEJBUjogXCJCQVJcIixcbiAgICBMSU5FOiBcIkxJTkVcIixcbn07XG5leHBvcnQgY29uc3QgUmVmZXJlbmNlTGluZUxhYmVsSG9yaXpvbnRhbFBvc2l0aW9uID0ge1xuICAgIENFTlRFUjogXCJDRU5URVJcIixcbiAgICBMRUZUOiBcIkxFRlRcIixcbiAgICBSSUdIVDogXCJSSUdIVFwiLFxufTtcbmV4cG9ydCBjb25zdCBSZWZlcmVuY2VMaW5lVmFsdWVMYWJlbFJlbGF0aXZlUG9zaXRpb24gPSB7XG4gICAgQUZURVJfQ1VTVE9NX0xBQkVMOiBcIkFGVEVSX0NVU1RPTV9MQUJFTFwiLFxuICAgIEJFRk9SRV9DVVNUT01fTEFCRUw6IFwiQkVGT1JFX0NVU1RPTV9MQUJFTFwiLFxufTtcbmV4cG9ydCBjb25zdCBSZWZlcmVuY2VMaW5lTGFiZWxWZXJ0aWNhbFBvc2l0aW9uID0ge1xuICAgIEFCT1ZFOiBcIkFCT1ZFXCIsXG4gICAgQkVMT1c6IFwiQkVMT1dcIixcbn07XG5leHBvcnQgY29uc3QgUmVmZXJlbmNlTGluZVBhdHRlcm5UeXBlID0ge1xuICAgIERBU0hFRDogXCJEQVNIRURcIixcbiAgICBET1RURUQ6IFwiRE9UVEVEXCIsXG4gICAgU09MSUQ6IFwiU09MSURcIixcbn07XG5leHBvcnQgY29uc3QgUGFuZWxCb3JkZXJTdHlsZSA9IHtcbiAgICBEQVNIRUQ6IFwiREFTSEVEXCIsXG4gICAgRE9UVEVEOiBcIkRPVFRFRFwiLFxuICAgIFNPTElEOiBcIlNPTElEXCIsXG59O1xuZXhwb3J0IGNvbnN0IEhvcml6b250YWxUZXh0QWxpZ25tZW50ID0ge1xuICAgIEFVVE86IFwiQVVUT1wiLFxuICAgIENFTlRFUjogXCJDRU5URVJcIixcbiAgICBMRUZUOiBcIkxFRlRcIixcbiAgICBSSUdIVDogXCJSSUdIVFwiLFxufTtcbmV4cG9ydCBjb25zdCBTbWFsbE11bHRpcGxlc0F4aXNQbGFjZW1lbnQgPSB7XG4gICAgSU5TSURFOiBcIklOU0lERVwiLFxuICAgIE9VVFNJREU6IFwiT1VUU0lERVwiLFxufTtcbmV4cG9ydCBjb25zdCBTbWFsbE11bHRpcGxlc0F4aXNTY2FsZSA9IHtcbiAgICBJTkRFUEVOREVOVDogXCJJTkRFUEVOREVOVFwiLFxuICAgIFNIQVJFRDogXCJTSEFSRURcIixcbn07XG5leHBvcnQgY29uc3QgT3RoZXJDYXRlZ29yaWVzID0ge1xuICAgIEVYQ0xVREU6IFwiRVhDTFVERVwiLFxuICAgIElOQ0xVREU6IFwiSU5DTFVERVwiLFxufTtcbmV4cG9ydCBjb25zdCBUb29sdGlwVGl0bGVUeXBlID0ge1xuICAgIE5PTkU6IFwiTk9ORVwiLFxuICAgIFBSSU1BUllfVkFMVUU6IFwiUFJJTUFSWV9WQUxVRVwiLFxufTtcbmV4cG9ydCBjb25zdCBTZWxlY3RlZFRvb2x0aXBUeXBlID0ge1xuICAgIEJBU0lDOiBcIkJBU0lDXCIsXG4gICAgREVUQUlMRUQ6IFwiREVUQUlMRURcIixcbn07XG5leHBvcnQgY29uc3QgUGl2b3RUYWJsZURhdGFQYXRoVHlwZSA9IHtcbiAgICBDT1VOVF9NRVRSSUNfQ09MVU1OOiBcIkNPVU5UX01FVFJJQ19DT0xVTU5cIixcbiAgICBFTVBUWV9DT0xVTU5fSEVBREVSOiBcIkVNUFRZX0NPTFVNTl9IRUFERVJcIixcbiAgICBISUVSQVJDSFlfUk9XU19MQVlPVVRfQ09MVU1OOiBcIkhJRVJBUkNIWV9ST1dTX0xBWU9VVF9DT0xVTU5cIixcbiAgICBNVUxUSVBMRV9ST1dfTUVUUklDU19DT0xVTU46IFwiTVVMVElQTEVfUk9XX01FVFJJQ1NfQ09MVU1OXCIsXG59O1xuZXhwb3J0IGNvbnN0IENhbGN1bGF0ZWRGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRXhwcmVzc2lvbiAmJiB7IEV4cHJlc3Npb246IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDdXN0b21Db2xvckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRmllbGRWYWx1ZSAmJiB7IEZpZWxkVmFsdWU6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDb2xvcnNDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DdXN0b21Db2xvcnMgJiYgeyBDdXN0b21Db2xvcnM6IG9iai5DdXN0b21Db2xvcnMubWFwKChpdGVtKSA9PiBDdXN0b21Db2xvckZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5OdWxsU3RyaW5nICYmIHsgTnVsbFN0cmluZzogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEN1cnJlbmN5RGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlByZWZpeCAmJiB7IFByZWZpeDogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLlN1ZmZpeCAmJiB7IFN1ZmZpeDogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLk51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uOiBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5OdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IE51bWJlckRpc3BsYXlGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5QcmVmaXggJiYgeyBQcmVmaXg6IFNFTlNJVElWRV9TVFJJTkcgfSksXG4gICAgLi4uKG9iai5TdWZmaXggJiYgeyBTdWZmaXg6IFNFTlNJVElWRV9TVFJJTkcgfSksXG4gICAgLi4uKG9iai5OdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbjogTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBQZXJjZW50YWdlRGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlByZWZpeCAmJiB7IFByZWZpeDogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLlN1ZmZpeCAmJiB7IFN1ZmZpeDogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLk51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uOiBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5OdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IE51bWVyaWNGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5OdW1iZXJEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIE51bWJlckRpc3BsYXlGb3JtYXRDb25maWd1cmF0aW9uOiBOdW1iZXJEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouTnVtYmVyRGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouQ3VycmVuY3lEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIEN1cnJlbmN5RGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb246IEN1cnJlbmN5RGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkN1cnJlbmN5RGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouUGVyY2VudGFnZURpc3BsYXlGb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgUGVyY2VudGFnZURpc3BsYXlGb3JtYXRDb25maWd1cmF0aW9uOiBQZXJjZW50YWdlRGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlBlcmNlbnRhZ2VEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRlVGltZUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLk51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uOiBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5OdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLk51bWVyaWNGb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgTnVtZXJpY0Zvcm1hdENvbmZpZ3VyYXRpb246IE51bWVyaWNGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5OdW1lcmljRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBOdW1iZXJGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Gb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgRm9ybWF0Q29uZmlndXJhdGlvbjogTnVtZXJpY0Zvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgU3RyaW5nRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb246IE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLk51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouTnVtZXJpY0Zvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBOdW1lcmljRm9ybWF0Q29uZmlndXJhdGlvbjogTnVtZXJpY0Zvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLk51bWVyaWNGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlN0cmluZ0Zvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBTdHJpbmdGb3JtYXRDb25maWd1cmF0aW9uOiBTdHJpbmdGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5TdHJpbmdGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLk51bWJlckZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBOdW1iZXJGb3JtYXRDb25maWd1cmF0aW9uOiBOdW1iZXJGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5OdW1iZXJGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkRhdGVUaW1lRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIERhdGVUaW1lRm9ybWF0Q29uZmlndXJhdGlvbjogRGF0ZVRpbWVGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRlVGltZUZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ29sdW1uQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IEZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouQ29sb3JzQ29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIENvbG9yc0NvbmZpZ3VyYXRpb246IENvbG9yc0NvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkNvbG9yc0NvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgUm9sbGluZ0RhdGVDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5FeHByZXNzaW9uICYmIHsgRXhwcmVzc2lvbjogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRpbWVFcXVhbGl0eUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUm9sbGluZ0RhdGUgJiYgeyBSb2xsaW5nRGF0ZTogUm9sbGluZ0RhdGVDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Sb2xsaW5nRGF0ZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUaW1lUmFuZ2VGaWx0ZXJWYWx1ZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUm9sbGluZ0RhdGUgJiYgeyBSb2xsaW5nRGF0ZTogUm9sbGluZ0RhdGVDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Sb2xsaW5nRGF0ZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUaW1lUmFuZ2VGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlJhbmdlTWluaW11bVZhbHVlICYmIHsgUmFuZ2VNaW5pbXVtVmFsdWU6IFRpbWVSYW5nZUZpbHRlclZhbHVlRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5SYW5nZU1pbmltdW1WYWx1ZSkgfSksXG4gICAgLi4uKG9iai5SYW5nZU1heGltdW1WYWx1ZSAmJiB7IFJhbmdlTWF4aW11bVZhbHVlOiBUaW1lUmFuZ2VGaWx0ZXJWYWx1ZUZpbHRlclNlbnNpdGl2ZUxvZyhvYmouUmFuZ2VNYXhpbXVtVmFsdWUpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5UaW1lRXF1YWxpdHlGaWx0ZXIgJiYgeyBUaW1lRXF1YWxpdHlGaWx0ZXI6IFRpbWVFcXVhbGl0eUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyhvYmouVGltZUVxdWFsaXR5RmlsdGVyKSB9KSxcbiAgICAuLi4ob2JqLlRpbWVSYW5nZUZpbHRlciAmJiB7IFRpbWVSYW5nZUZpbHRlcjogVGltZVJhbmdlRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5UaW1lUmFuZ2VGaWx0ZXIpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRmlsdGVyR3JvdXBGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkZpbHRlcnMgJiYgeyBGaWx0ZXJzOiBvYmouRmlsdGVycy5tYXAoKGl0ZW0pID0+IEZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRlVGltZURlZmF1bHRWYWx1ZXNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlN0YXRpY1ZhbHVlcyAmJiB7IFN0YXRpY1ZhbHVlczogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLlJvbGxpbmdEYXRlICYmIHsgUm9sbGluZ0RhdGU6IFJvbGxpbmdEYXRlQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouUm9sbGluZ0RhdGUpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGF0ZVRpbWVWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkN1c3RvbVZhbHVlICYmIHsgQ3VzdG9tVmFsdWU6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRlVGltZVBhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EZWZhdWx0VmFsdWVzICYmIHsgRGVmYXVsdFZhbHVlczogRGF0ZVRpbWVEZWZhdWx0VmFsdWVzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EZWZhdWx0VmFsdWVzKSB9KSxcbiAgICAuLi4ob2JqLlZhbHVlV2hlblVuc2V0ICYmIHtcbiAgICAgICAgVmFsdWVXaGVuVW5zZXQ6IERhdGVUaW1lVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5WYWx1ZVdoZW5VbnNldCksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEZWNpbWFsRGVmYXVsdFZhbHVlc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU3RhdGljVmFsdWVzICYmIHsgU3RhdGljVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGVjaW1hbFZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ3VzdG9tVmFsdWUgJiYgeyBDdXN0b21WYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlY2ltYWxQYXJhbWV0ZXJEZWNsYXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRGVmYXVsdFZhbHVlcyAmJiB7IERlZmF1bHRWYWx1ZXM6IERlY2ltYWxEZWZhdWx0VmFsdWVzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EZWZhdWx0VmFsdWVzKSB9KSxcbiAgICAuLi4ob2JqLlZhbHVlV2hlblVuc2V0ICYmIHtcbiAgICAgICAgVmFsdWVXaGVuVW5zZXQ6IERlY2ltYWxWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlZhbHVlV2hlblVuc2V0KSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEludGVnZXJEZWZhdWx0VmFsdWVzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TdGF0aWNWYWx1ZXMgJiYgeyBTdGF0aWNWYWx1ZXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBJbnRlZ2VyVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DdXN0b21WYWx1ZSAmJiB7IEN1c3RvbVZhbHVlOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgSW50ZWdlclBhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EZWZhdWx0VmFsdWVzICYmIHsgRGVmYXVsdFZhbHVlczogSW50ZWdlckRlZmF1bHRWYWx1ZXNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRlZmF1bHRWYWx1ZXMpIH0pLFxuICAgIC4uLihvYmouVmFsdWVXaGVuVW5zZXQgJiYge1xuICAgICAgICBWYWx1ZVdoZW5VbnNldDogSW50ZWdlclZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouVmFsdWVXaGVuVW5zZXQpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgU3RyaW5nRGVmYXVsdFZhbHVlc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU3RhdGljVmFsdWVzICYmIHsgU3RhdGljVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgU3RyaW5nVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DdXN0b21WYWx1ZSAmJiB7IEN1c3RvbVZhbHVlOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgU3RyaW5nUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRlZmF1bHRWYWx1ZXMgJiYgeyBEZWZhdWx0VmFsdWVzOiBTdHJpbmdEZWZhdWx0VmFsdWVzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EZWZhdWx0VmFsdWVzKSB9KSxcbiAgICAuLi4ob2JqLlZhbHVlV2hlblVuc2V0ICYmIHtcbiAgICAgICAgVmFsdWVXaGVuVW5zZXQ6IFN0cmluZ1ZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouVmFsdWVXaGVuVW5zZXQpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlN0cmluZ1BhcmFtZXRlckRlY2xhcmF0aW9uICYmIHtcbiAgICAgICAgU3RyaW5nUGFyYW1ldGVyRGVjbGFyYXRpb246IFN0cmluZ1BhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5TdHJpbmdQYXJhbWV0ZXJEZWNsYXJhdGlvbiksXG4gICAgfSksXG4gICAgLi4uKG9iai5EZWNpbWFsUGFyYW1ldGVyRGVjbGFyYXRpb24gJiYge1xuICAgICAgICBEZWNpbWFsUGFyYW1ldGVyRGVjbGFyYXRpb246IERlY2ltYWxQYXJhbWV0ZXJEZWNsYXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkludGVnZXJQYXJhbWV0ZXJEZWNsYXJhdGlvbiAmJiB7XG4gICAgICAgIEludGVnZXJQYXJhbWV0ZXJEZWNsYXJhdGlvbjogSW50ZWdlclBhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5JbnRlZ2VyUGFyYW1ldGVyRGVjbGFyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbiAmJiB7XG4gICAgICAgIERhdGVUaW1lUGFyYW1ldGVyRGVjbGFyYXRpb246IERhdGVUaW1lUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRhdGVUaW1lUGFyYW1ldGVyRGVjbGFyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgU2hlZXRFbGVtZW50UmVuZGVyaW5nUnVsZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRXhwcmVzc2lvbiAmJiB7IEV4cHJlc3Npb246IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBGcmVlRm9ybUxheW91dEVsZW1lbnRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlJlbmRlcmluZ1J1bGVzICYmIHtcbiAgICAgICAgUmVuZGVyaW5nUnVsZXM6IG9iai5SZW5kZXJpbmdSdWxlcy5tYXAoKGl0ZW0pID0+IFNoZWV0RWxlbWVudFJlbmRlcmluZ1J1bGVGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRnJlZUZvcm1MYXlvdXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBGcmVlRm9ybVNlY3Rpb25MYXlvdXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBTZWN0aW9uTGF5b3V0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgQm9keVNlY3Rpb25Db250ZW50RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBCb2R5U2VjdGlvbkNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IEhlYWRlckZvb3RlclNlY3Rpb25Db25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBTZWN0aW9uQmFzZWRMYXlvdXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBMYXlvdXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBMYXlvdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IEN1c3RvbVBhcmFtZXRlclZhbHVlc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU3RyaW5nVmFsdWVzICYmIHsgU3RyaW5nVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouSW50ZWdlclZhbHVlcyAmJiB7IEludGVnZXJWYWx1ZXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG4gICAgLi4uKG9iai5EZWNpbWFsVmFsdWVzICYmIHsgRGVjaW1hbFZhbHVlczogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLkRhdGVUaW1lVmFsdWVzICYmIHsgRGF0ZVRpbWVWYWx1ZXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DdXN0b21WYWx1ZXMgJiYgeyBDdXN0b21WYWx1ZXM6IEN1c3RvbVBhcmFtZXRlclZhbHVlc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3VzdG9tVmFsdWVzKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlc3RpbmF0aW9uUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgQ3VzdG9tVmFsdWVzQ29uZmlndXJhdGlvbjogQ3VzdG9tVmFsdWVzQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3VzdG9tVmFsdWVzQ29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlZhbHVlICYmIHsgVmFsdWU6IERlc3RpbmF0aW9uUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5WYWx1ZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25TZXRQYXJhbWV0ZXJzT3BlcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5QYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25zICYmIHtcbiAgICAgICAgUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uczogb2JqLlBhcmFtZXRlclZhbHVlQ29uZmlndXJhdGlvbnMubWFwKChpdGVtKSA9PiBTZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVmlzdWFsQ3VzdG9tQWN0aW9uT3BlcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TZXRQYXJhbWV0ZXJzT3BlcmF0aW9uICYmIHtcbiAgICAgICAgU2V0UGFyYW1ldGVyc09wZXJhdGlvbjogQ3VzdG9tQWN0aW9uU2V0UGFyYW1ldGVyc09wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouU2V0UGFyYW1ldGVyc09wZXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBWaXN1YWxDdXN0b21BY3Rpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGFQYXRoTGFiZWxUeXBlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5GaWVsZFZhbHVlICYmIHsgRmllbGRWYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGFMYWJlbFR5cGVGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFQYXRoTGFiZWxUeXBlICYmIHsgRGF0YVBhdGhMYWJlbFR5cGU6IERhdGFQYXRoTGFiZWxUeXBlRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRhUGF0aExhYmVsVHlwZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRhTGFiZWxPcHRpb25zRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EYXRhTGFiZWxUeXBlcyAmJiB7XG4gICAgICAgIERhdGFMYWJlbFR5cGVzOiBvYmouRGF0YUxhYmVsVHlwZXMubWFwKChpdGVtKSA9PiBEYXRhTGFiZWxUeXBlRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IENhdGVnb3JpY2FsRGltZW5zaW9uRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBGb3JtYXRDb25maWd1cmF0aW9uOiBTdHJpbmdGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Gb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGVEaW1lbnNpb25GaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IERhdGVUaW1lRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBOdW1lcmljYWxEaW1lbnNpb25GaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgRGltZW5zaW9uRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNhdGVnb3JpY2FsRGltZW5zaW9uRmllbGQgJiYge1xuICAgICAgICBDYXRlZ29yaWNhbERpbWVuc2lvbkZpZWxkOiBDYXRlZ29yaWNhbERpbWVuc2lvbkZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DYXRlZ29yaWNhbERpbWVuc2lvbkZpZWxkKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkRhdGVEaW1lbnNpb25GaWVsZCAmJiB7IERhdGVEaW1lbnNpb25GaWVsZDogRGF0ZURpbWVuc2lvbkZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRlRGltZW5zaW9uRmllbGQpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ2FsY3VsYXRlZE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRXhwcmVzc2lvbiAmJiB7IEV4cHJlc3Npb246IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDYXRlZ29yaWNhbE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IFN0cmluZ0Zvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGF0ZU1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IERhdGVUaW1lRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBOdW1lcmljYWxNZWFzdXJlRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ2F0ZWdvcmljYWxNZWFzdXJlRmllbGQgJiYge1xuICAgICAgICBDYXRlZ29yaWNhbE1lYXN1cmVGaWVsZDogQ2F0ZWdvcmljYWxNZWFzdXJlRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkNhdGVnb3JpY2FsTWVhc3VyZUZpZWxkKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkRhdGVNZWFzdXJlRmllbGQgJiYgeyBEYXRlTWVhc3VyZUZpZWxkOiBEYXRlTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRlTWVhc3VyZUZpZWxkKSB9KSxcbiAgICAuLi4ob2JqLkNhbGN1bGF0ZWRNZWFzdXJlRmllbGQgJiYge1xuICAgICAgICBDYWxjdWxhdGVkTWVhc3VyZUZpZWxkOiBDYWxjdWxhdGVkTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DYWxjdWxhdGVkTWVhc3VyZUZpZWxkKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEJhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlZhbHVlcyAmJiB7IFZhbHVlczogb2JqLlZhbHVlcy5tYXAoKGl0ZW0pID0+IE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBCYXJDaGFydEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFJlZmVyZW5jZUxpbmVTdGF0aWNEYXRhQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVmFsdWUgJiYgeyBWYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFJlZmVyZW5jZUxpbmVEYXRhQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU3RhdGljQ29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIFN0YXRpY0NvbmZpZ3VyYXRpb246IFJlZmVyZW5jZUxpbmVTdGF0aWNEYXRhQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouU3RhdGljQ29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBSZWZlcmVuY2VMaW5lVmFsdWVMYWJlbENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBGb3JtYXRDb25maWd1cmF0aW9uOiBOdW1lcmljRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBSZWZlcmVuY2VMaW5lTGFiZWxDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5WYWx1ZUxhYmVsQ29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIFZhbHVlTGFiZWxDb25maWd1cmF0aW9uOiBSZWZlcmVuY2VMaW5lVmFsdWVMYWJlbENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlZhbHVlTGFiZWxDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFJlZmVyZW5jZUxpbmVGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgRGF0YUNvbmZpZ3VyYXRpb246IFJlZmVyZW5jZUxpbmVEYXRhQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRGF0YUNvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouTGFiZWxDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgTGFiZWxDb25maWd1cmF0aW9uOiBSZWZlcmVuY2VMaW5lTGFiZWxDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5MYWJlbENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGF0YVBhdGhWYWx1ZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRmllbGRWYWx1ZSAmJiB7IEZpZWxkVmFsdWU6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRhUGF0aENvbG9yRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5FbGVtZW50ICYmIHsgRWxlbWVudDogRGF0YVBhdGhWYWx1ZUZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRWxlbWVudCkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBWaXN1YWxQYWxldHRlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Db2xvck1hcCAmJiB7IENvbG9yTWFwOiBvYmouQ29sb3JNYXAubWFwKChpdGVtKSA9PiBEYXRhUGF0aENvbG9yRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEJhckNoYXJ0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVmlzdWFsUGFsZXR0ZSAmJiB7IFZpc3VhbFBhbGV0dGU6IFZpc3VhbFBhbGV0dGVGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlZpc3VhbFBhbGV0dGUpIH0pLFxuICAgIC4uLihvYmouRGF0YUxhYmVscyAmJiB7IERhdGFMYWJlbHM6IERhdGFMYWJlbE9wdGlvbnNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRhdGFMYWJlbHMpIH0pLFxuICAgIC4uLihvYmouUmVmZXJlbmNlTGluZXMgJiYge1xuICAgICAgICBSZWZlcmVuY2VMaW5lczogb2JqLlJlZmVyZW5jZUxpbmVzLm1hcCgoaXRlbSkgPT4gUmVmZXJlbmNlTGluZUZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbiIsImltcG9ydCB7IFNFTlNJVElWRV9TVFJJTkcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBDYWxjdWxhdGVkRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2csIENvbHVtbkNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2csIFBhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nLCB9IGZyb20gXCIuL21vZGVsc18wXCI7XG5pbXBvcnQgeyBRdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi9RdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvblwiO1xuZXhwb3J0IGNvbnN0IFNuYXBzaG90RmlsZUZvcm1hdFR5cGUgPSB7XG4gICAgQ1NWOiBcIkNTVlwiLFxuICAgIEVYQ0VMOiBcIkVYQ0VMXCIsXG4gICAgUERGOiBcIlBERlwiLFxufTtcbmV4cG9ydCBjb25zdCBTbmFwc2hvdEZpbGVTaGVldFNlbGVjdGlvblNjb3BlID0ge1xuICAgIEFMTF9WSVNVQUxTOiBcIkFMTF9WSVNVQUxTXCIsXG4gICAgU0VMRUNURURfVklTVUFMUzogXCJTRUxFQ1RFRF9WSVNVQUxTXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iQW5hbHlzaXNQcm9wZXJ0eVRvT3ZlcnJpZGUgPSB7XG4gICAgTkFNRTogXCJOYW1lXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iRGFzaGJvYXJkUHJvcGVydHlUb092ZXJyaWRlID0ge1xuICAgIE5BTUU6IFwiTmFtZVwiLFxufTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUV4cG9ydEpvYkRhdGFTZXRQcm9wZXJ0eVRvT3ZlcnJpZGUgPSB7XG4gICAgTkFNRTogXCJOYW1lXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iRGF0YVNvdXJjZVByb3BlcnR5VG9PdmVycmlkZSA9IHtcbiAgICBDQVRBTE9HOiBcIkNhdGFsb2dcIixcbiAgICBDTFVTVEVSX0lEOiBcIkNsdXN0ZXJJZFwiLFxuICAgIERBVEFCQVNFOiBcIkRhdGFiYXNlXCIsXG4gICAgREFUQV9TRVRfTkFNRTogXCJEYXRhU2V0TmFtZVwiLFxuICAgIERJU0FCTEVfU1NMOiBcIkRpc2FibGVTc2xcIixcbiAgICBET01BSU46IFwiRG9tYWluXCIsXG4gICAgSE9TVDogXCJIb3N0XCIsXG4gICAgSU5TVEFOQ0VfSUQ6IFwiSW5zdGFuY2VJZFwiLFxuICAgIE1BTklGRVNUX0ZJTEVfTE9DQVRJT046IFwiTWFuaWZlc3RGaWxlTG9jYXRpb25cIixcbiAgICBOQU1FOiBcIk5hbWVcIixcbiAgICBQQVNTV09SRDogXCJQYXNzd29yZFwiLFxuICAgIFBPUlQ6IFwiUG9ydFwiLFxuICAgIFJPTEVfQVJOOiBcIlJvbGVBcm5cIixcbiAgICBTRUNSRVRfQVJOOiBcIlNlY3JldEFyblwiLFxuICAgIFVTRVJOQU1FOiBcIlVzZXJuYW1lXCIsXG4gICAgV0FSRUhPVVNFOiBcIldhcmVob3VzZVwiLFxuICAgIFdPUktfR1JPVVA6IFwiV29ya0dyb3VwXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iUmVmcmVzaFNjaGVkdWxlUHJvcGVydHlUb092ZXJyaWRlID0ge1xuICAgIFNUQVJUX0FGVEVSX0RBVEVfVElNRTogXCJTdGFydEFmdGVyRGF0ZVRpbWVcIixcbn07XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVFeHBvcnRKb2JUaGVtZVByb3BlcnR5VG9PdmVycmlkZSA9IHtcbiAgICBOQU1FOiBcIk5hbWVcIixcbn07XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVFeHBvcnRKb2JWUENDb25uZWN0aW9uUHJvcGVydHlUb092ZXJyaWRlID0ge1xuICAgIEROU19SRVNPTFZFUlM6IFwiRG5zUmVzb2x2ZXJzXCIsXG4gICAgTkFNRTogXCJOYW1lXCIsXG4gICAgUk9MRV9BUk46IFwiUm9sZUFyblwiLFxufTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUV4cG9ydEZvcm1hdCA9IHtcbiAgICBDTE9VREZPUk1BVElPTl9KU09OOiBcIkNMT1VERk9STUFUSU9OX0pTT05cIixcbiAgICBRVUlDS1NJR0hUX0pTT046IFwiUVVJQ0tTSUdIVF9KU09OXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iU3RhdHVzID0ge1xuICAgIEZBSUxFRDogXCJGQUlMRURcIixcbiAgICBJTl9QUk9HUkVTUzogXCJJTl9QUk9HUkVTU1wiLFxuICAgIFFVRVVFRF9GT1JfSU1NRURJQVRFX0VYRUNVVElPTjogXCJRVUVVRURfRk9SX0lNTUVESUFURV9FWEVDVVRJT05cIixcbiAgICBTVUNDRVNTRlVMOiBcIlNVQ0NFU1NGVUxcIixcbn07XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVJbXBvcnRGYWlsdXJlQWN0aW9uID0ge1xuICAgIERPX05PVEhJTkc6IFwiRE9fTk9USElOR1wiLFxuICAgIFJPTExCQUNLOiBcIlJPTExCQUNLXCIsXG59O1xuZXhwb3J0IGNvbnN0IFN0YXJidXJzdFByb2R1Y3RUeXBlID0ge1xuICAgIEVOVEVSUFJJU0U6IFwiRU5URVJQUklTRVwiLFxuICAgIEdBTEFYWTogXCJHQUxBWFlcIixcbn07XG5leHBvcnQgdmFyIERhdGFTb3VyY2VQYXJhbWV0ZXJzO1xuKGZ1bmN0aW9uIChEYXRhU291cmNlUGFyYW1ldGVycykge1xuICAgIERhdGFTb3VyY2VQYXJhbWV0ZXJzLnZpc2l0ID0gKHZhbHVlLCB2aXNpdG9yKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZS5BbWF6b25FbGFzdGljc2VhcmNoUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuQW1hem9uRWxhc3RpY3NlYXJjaFBhcmFtZXRlcnModmFsdWUuQW1hem9uRWxhc3RpY3NlYXJjaFBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuQXRoZW5hUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuQXRoZW5hUGFyYW1ldGVycyh2YWx1ZS5BdGhlbmFQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLkF1cm9yYVBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkF1cm9yYVBhcmFtZXRlcnModmFsdWUuQXVyb3JhUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5BdXJvcmFQb3N0Z3JlU3FsUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuQXVyb3JhUG9zdGdyZVNxbFBhcmFtZXRlcnModmFsdWUuQXVyb3JhUG9zdGdyZVNxbFBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuQXdzSW90QW5hbHl0aWNzUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuQXdzSW90QW5hbHl0aWNzUGFyYW1ldGVycyh2YWx1ZS5Bd3NJb3RBbmFseXRpY3NQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLkppcmFQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5KaXJhUGFyYW1ldGVycyh2YWx1ZS5KaXJhUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5NYXJpYURiUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuTWFyaWFEYlBhcmFtZXRlcnModmFsdWUuTWFyaWFEYlBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuTXlTcWxQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5NeVNxbFBhcmFtZXRlcnModmFsdWUuTXlTcWxQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLk9yYWNsZVBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLk9yYWNsZVBhcmFtZXRlcnModmFsdWUuT3JhY2xlUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5Qb3N0Z3JlU3FsUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuUG9zdGdyZVNxbFBhcmFtZXRlcnModmFsdWUuUG9zdGdyZVNxbFBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuUHJlc3RvUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuUHJlc3RvUGFyYW1ldGVycyh2YWx1ZS5QcmVzdG9QYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLlJkc1BhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlJkc1BhcmFtZXRlcnModmFsdWUuUmRzUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5SZWRzaGlmdFBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlJlZHNoaWZ0UGFyYW1ldGVycyh2YWx1ZS5SZWRzaGlmdFBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuUzNQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5TM1BhcmFtZXRlcnModmFsdWUuUzNQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLlNlcnZpY2VOb3dQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5TZXJ2aWNlTm93UGFyYW1ldGVycyh2YWx1ZS5TZXJ2aWNlTm93UGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5Tbm93Zmxha2VQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5Tbm93Zmxha2VQYXJhbWV0ZXJzKHZhbHVlLlNub3dmbGFrZVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuU3BhcmtQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5TcGFya1BhcmFtZXRlcnModmFsdWUuU3BhcmtQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLlNxbFNlcnZlclBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlNxbFNlcnZlclBhcmFtZXRlcnModmFsdWUuU3FsU2VydmVyUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5UZXJhZGF0YVBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlRlcmFkYXRhUGFyYW1ldGVycyh2YWx1ZS5UZXJhZGF0YVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuVHdpdHRlclBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlR3aXR0ZXJQYXJhbWV0ZXJzKHZhbHVlLlR3aXR0ZXJQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLkFtYXpvbk9wZW5TZWFyY2hQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5BbWF6b25PcGVuU2VhcmNoUGFyYW1ldGVycyh2YWx1ZS5BbWF6b25PcGVuU2VhcmNoUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5FeGFzb2xQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5FeGFzb2xQYXJhbWV0ZXJzKHZhbHVlLkV4YXNvbFBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuRGF0YWJyaWNrc1BhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkRhdGFicmlja3NQYXJhbWV0ZXJzKHZhbHVlLkRhdGFicmlja3NQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLlN0YXJidXJzdFBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlN0YXJidXJzdFBhcmFtZXRlcnModmFsdWUuU3RhcmJ1cnN0UGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5Ucmlub1BhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlRyaW5vUGFyYW1ldGVycyh2YWx1ZS5Ucmlub1BhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuQmlnUXVlcnlQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5CaWdRdWVyeVBhcmFtZXRlcnModmFsdWUuQmlnUXVlcnlQYXJhbWV0ZXJzKTtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuXyh2YWx1ZS4kdW5rbm93blswXSwgdmFsdWUuJHVua25vd25bMV0pO1xuICAgIH07XG59KShEYXRhU291cmNlUGFyYW1ldGVycyB8fCAoRGF0YVNvdXJjZVBhcmFtZXRlcnMgPSB7fSkpO1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlSW1wb3J0Sm9iU3RhdHVzID0ge1xuICAgIEZBSUxFRDogXCJGQUlMRURcIixcbiAgICBGQUlMRURfUk9MTEJBQ0tfQ09NUExFVEVEOiBcIkZBSUxFRF9ST0xMQkFDS19DT01QTEVURURcIixcbiAgICBGQUlMRURfUk9MTEJBQ0tfRVJST1I6IFwiRkFJTEVEX1JPTExCQUNLX0VSUk9SXCIsXG4gICAgRkFJTEVEX1JPTExCQUNLX0lOX1BST0dSRVNTOiBcIkZBSUxFRF9ST0xMQkFDS19JTl9QUk9HUkVTU1wiLFxuICAgIElOX1BST0dSRVNTOiBcIklOX1BST0dSRVNTXCIsXG4gICAgUVVFVUVEX0ZPUl9JTU1FRElBVEVfRVhFQ1VUSU9OOiBcIlFVRVVFRF9GT1JfSU1NRURJQVRFX0VYRUNVVElPTlwiLFxuICAgIFNVQ0NFU1NGVUw6IFwiU1VDQ0VTU0ZVTFwiLFxufTtcbmV4cG9ydCBjb25zdCBBc3NpZ25tZW50U3RhdHVzID0ge1xuICAgIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gICAgRFJBRlQ6IFwiRFJBRlRcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbn07XG5leHBvcnQgY29uc3QgQXV0aGVudGljYXRpb25NZXRob2RPcHRpb24gPSB7XG4gICAgQUNUSVZFX0RJUkVDVE9SWTogXCJBQ1RJVkVfRElSRUNUT1JZXCIsXG4gICAgSUFNX0FORF9RVUlDS1NJR0hUOiBcIklBTV9BTkRfUVVJQ0tTSUdIVFwiLFxuICAgIElBTV9JREVOVElUWV9DRU5URVI6IFwiSUFNX0lERU5USVRZX0NFTlRFUlwiLFxuICAgIElBTV9PTkxZOiBcIklBTV9PTkxZXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VUeXBlID0ge1xuICAgIFJFRFNISUZUOiBcIlJFRFNISUZUXCIsXG59O1xuZXhwb3J0IGNvbnN0IEF1dGhvclNwZWNpZmllZEFnZ3JlZ2F0aW9uID0ge1xuICAgIEFWRVJBR0U6IFwiQVZFUkFHRVwiLFxuICAgIENPVU5UOiBcIkNPVU5UXCIsXG4gICAgRElTVElOQ1RfQ09VTlQ6IFwiRElTVElOQ1RfQ09VTlRcIixcbiAgICBNQVg6IFwiTUFYXCIsXG4gICAgTUVESUFOOiBcIk1FRElBTlwiLFxuICAgIE1JTjogXCJNSU5cIixcbiAgICBQRVJDRU5USUxFOiBcIlBFUkNFTlRJTEVcIixcbiAgICBTVERFVjogXCJTVERFVlwiLFxuICAgIFNUREVWUDogXCJTVERFVlBcIixcbiAgICBTVU06IFwiU1VNXCIsXG4gICAgVkFSOiBcIlZBUlwiLFxuICAgIFZBUlA6IFwiVkFSUFwiLFxufTtcbmV4cG9ydCBjbGFzcyBJbnRlcm5hbEZhaWx1cmVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnRlcm5hbEZhaWx1cmVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJzZXJ2ZXJcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludGVybmFsRmFpbHVyZUV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwic2VydmVyXCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnRlcm5hbEZhaWx1cmVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgICAgICB0aGlzLlJlcXVlc3RJZCA9IG9wdHMuUmVxdWVzdElkO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgICAgICB0aGlzLlJlcXVlc3RJZCA9IG9wdHMuUmVxdWVzdElkO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBFeGNlcHRpb25SZXNvdXJjZVR5cGUgPSB7XG4gICAgQUNDT1VOVF9TRVRUSU5HUzogXCJBQ0NPVU5UX1NFVFRJTkdTXCIsXG4gICAgREFUQV9TRVQ6IFwiREFUQV9TRVRcIixcbiAgICBEQVRBX1NPVVJDRTogXCJEQVRBX1NPVVJDRVwiLFxuICAgIEdST1VQOiBcIkdST1VQXCIsXG4gICAgSUFNUE9MSUNZX0FTU0lHTk1FTlQ6IFwiSUFNUE9MSUNZX0FTU0lHTk1FTlRcIixcbiAgICBJTkdFU1RJT046IFwiSU5HRVNUSU9OXCIsXG4gICAgTkFNRVNQQUNFOiBcIk5BTUVTUEFDRVwiLFxuICAgIFVTRVI6IFwiVVNFUlwiLFxuICAgIFZQQ19DT05ORUNUSU9OOiBcIlZQQ19DT05ORUNUSU9OXCIsXG59O1xuZXhwb3J0IGNsYXNzIFJlc291cmNlRXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUmVzb3VyY2VFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlc291cmNlRXhpc3RzRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlc291cmNlRXhpc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXNvdXJjZVR5cGUgPSBvcHRzLlJlc291cmNlVHlwZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVzb3VyY2VUeXBlID0gb3B0cy5SZXNvdXJjZVR5cGU7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRocm90dGxpbmdFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJUaHJvdHRsaW5nRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUaHJvdHRsaW5nRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRocm90dGxpbmdFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgICAgICB0aGlzLlJlcXVlc3RJZCA9IG9wdHMuUmVxdWVzdElkO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBDb2x1bW5EYXRhVHlwZSA9IHtcbiAgICBEQVRFVElNRTogXCJEQVRFVElNRVwiLFxuICAgIERFQ0lNQUw6IFwiREVDSU1BTFwiLFxuICAgIElOVEVHRVI6IFwiSU5URUdFUlwiLFxuICAgIFNUUklORzogXCJTVFJJTkdcIixcbn07XG5leHBvcnQgY29uc3QgQ29sdW1uRGF0YVN1YlR5cGUgPSB7XG4gICAgRklYRUQ6IFwiRklYRURcIixcbiAgICBGTE9BVDogXCJGTE9BVFwiLFxufTtcbmV4cG9ydCBjb25zdCBDYXRlZ29yeUZpbHRlckZ1bmN0aW9uID0ge1xuICAgIENPTlRBSU5TOiBcIkNPTlRBSU5TXCIsXG4gICAgRVhBQ1Q6IFwiRVhBQ1RcIixcbn07XG5leHBvcnQgY29uc3QgQ2F0ZWdvcnlGaWx0ZXJUeXBlID0ge1xuICAgIENVU1RPTV9GSUxURVI6IFwiQ1VTVE9NX0ZJTFRFUlwiLFxuICAgIENVU1RPTV9GSUxURVJfTElTVDogXCJDVVNUT01fRklMVEVSX0xJU1RcIixcbiAgICBGSUxURVJfTElTVDogXCJGSUxURVJfTElTVFwiLFxufTtcbmV4cG9ydCBjb25zdCBDb2x1bW5EYXRhUm9sZSA9IHtcbiAgICBESU1FTlNJT046IFwiRElNRU5TSU9OXCIsXG4gICAgTUVBU1VSRTogXCJNRUFTVVJFXCIsXG59O1xuZXhwb3J0IGNvbnN0IEdlb1NwYXRpYWxDb3VudHJ5Q29kZSA9IHtcbiAgICBVUzogXCJVU1wiLFxufTtcbmV4cG9ydCBjb25zdCBDb2x1bW5PcmRlcmluZ1R5cGUgPSB7XG4gICAgR1JFQVRFUl9JU19CRVRURVI6IFwiR1JFQVRFUl9JU19CRVRURVJcIixcbiAgICBMRVNTRVJfSVNfQkVUVEVSOiBcIkxFU1NFUl9JU19CRVRURVJcIixcbiAgICBTUEVDSUZJRUQ6IFwiU1BFQ0lGSUVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IEdlb1NwYXRpYWxEYXRhUm9sZSA9IHtcbiAgICBDSVRZOiBcIkNJVFlcIixcbiAgICBDT1VOVFJZOiBcIkNPVU5UUllcIixcbiAgICBDT1VOVFk6IFwiQ09VTlRZXCIsXG4gICAgTEFUSVRVREU6IFwiTEFUSVRVREVcIixcbiAgICBMT05HSVRVREU6IFwiTE9OR0lUVURFXCIsXG4gICAgUE9TVENPREU6IFwiUE9TVENPREVcIixcbiAgICBTVEFURTogXCJTVEFURVwiLFxufTtcbmV4cG9ydCBjb25zdCBDb2x1bW5UYWdOYW1lID0ge1xuICAgIENPTFVNTl9ERVNDUklQVElPTjogXCJDT0xVTU5fREVTQ1JJUFRJT05cIixcbiAgICBDT0xVTU5fR0VPR1JBUEhJQ19ST0xFOiBcIkNPTFVNTl9HRU9HUkFQSElDX1JPTEVcIixcbn07XG5leHBvcnQgY29uc3QgVW5kZWZpbmVkU3BlY2lmaWVkVmFsdWVUeXBlID0ge1xuICAgIExFQVNUOiBcIkxFQVNUXCIsXG4gICAgTU9TVDogXCJNT1NUXCIsXG59O1xuZXhwb3J0IGNsYXNzIENvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcInNlcnZlclwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ29uY3VycmVudFVwZGF0aW5nRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJzZXJ2ZXJcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENvbmZsaWN0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ29uZmxpY3RFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkNvbmZsaWN0RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENvbmZsaWN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgQ29uc3RhbnRUeXBlID0ge1xuICAgIENPTExFQ1RJVkU6IFwiQ09MTEVDVElWRVwiLFxuICAgIFJBTkdFOiBcIlJBTkdFXCIsXG4gICAgU0lOR1VMQVI6IFwiU0lOR1VMQVJcIixcbn07XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VVbmF2YWlsYWJsZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJzZXJ2ZXJcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcInNlcnZlclwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzb3VyY2VVbmF2YWlsYWJsZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVzb3VyY2VUeXBlID0gb3B0cy5SZXNvdXJjZVR5cGU7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUHJlY29uZGl0aW9uTm90TWV0RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IFZhbGlkYXRpb25TdHJhdGVneU1vZGUgPSB7XG4gICAgTEVOSUVOVDogXCJMRU5JRU5UXCIsXG4gICAgU1RSSUNUOiBcIlNUUklDVFwiLFxufTtcbmV4cG9ydCBjbGFzcyBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXNvdXJjZVR5cGUgPSBvcHRzLlJlc291cmNlVHlwZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlVuc3VwcG9ydGVkVXNlckVkaXRpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlVuc3VwcG9ydGVkVXNlckVkaXRpb25FeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IERhc2hib2FyZFVJU3RhdGUgPSB7XG4gICAgQ09MTEFQU0VEOiBcIkNPTExBUFNFRFwiLFxuICAgIEVYUEFOREVEOiBcIkVYUEFOREVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGFzZXRQYXJhbWV0ZXJWYWx1ZVR5cGUgPSB7XG4gICAgTVVMVElfVkFMVUVEOiBcIk1VTFRJX1ZBTFVFRFwiLFxuICAgIFNJTkdMRV9WQUxVRUQ6IFwiU0lOR0xFX1ZBTFVFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXRhU2V0SW1wb3J0TW9kZSA9IHtcbiAgICBESVJFQ1RfUVVFUlk6IFwiRElSRUNUX1FVRVJZXCIsXG4gICAgU1BJQ0U6IFwiU1BJQ0VcIixcbn07XG5leHBvcnQgdmFyIFRyYW5zZm9ybU9wZXJhdGlvbjtcbihmdW5jdGlvbiAoVHJhbnNmb3JtT3BlcmF0aW9uKSB7XG4gICAgVHJhbnNmb3JtT3BlcmF0aW9uLnZpc2l0ID0gKHZhbHVlLCB2aXNpdG9yKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZS5Qcm9qZWN0T3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5Qcm9qZWN0T3BlcmF0aW9uKHZhbHVlLlByb2plY3RPcGVyYXRpb24pO1xuICAgICAgICBpZiAodmFsdWUuRmlsdGVyT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5GaWx0ZXJPcGVyYXRpb24odmFsdWUuRmlsdGVyT3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKHZhbHVlLkNyZWF0ZUNvbHVtbnNPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkNyZWF0ZUNvbHVtbnNPcGVyYXRpb24odmFsdWUuQ3JlYXRlQ29sdW1uc09wZXJhdGlvbik7XG4gICAgICAgIGlmICh2YWx1ZS5SZW5hbWVDb2x1bW5PcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlJlbmFtZUNvbHVtbk9wZXJhdGlvbih2YWx1ZS5SZW5hbWVDb2x1bW5PcGVyYXRpb24pO1xuICAgICAgICBpZiAodmFsdWUuQ2FzdENvbHVtblR5cGVPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkNhc3RDb2x1bW5UeXBlT3BlcmF0aW9uKHZhbHVlLkNhc3RDb2x1bW5UeXBlT3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKHZhbHVlLlRhZ0NvbHVtbk9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuVGFnQ29sdW1uT3BlcmF0aW9uKHZhbHVlLlRhZ0NvbHVtbk9wZXJhdGlvbik7XG4gICAgICAgIGlmICh2YWx1ZS5VbnRhZ0NvbHVtbk9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuVW50YWdDb2x1bW5PcGVyYXRpb24odmFsdWUuVW50YWdDb2x1bW5PcGVyYXRpb24pO1xuICAgICAgICBpZiAodmFsdWUuT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24odmFsdWUuT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuXyh2YWx1ZS4kdW5rbm93blswXSwgdmFsdWUuJHVua25vd25bMV0pO1xuICAgIH07XG59KShUcmFuc2Zvcm1PcGVyYXRpb24gfHwgKFRyYW5zZm9ybU9wZXJhdGlvbiA9IHt9KSk7XG5leHBvcnQgY29uc3QgSm9pblR5cGUgPSB7XG4gICAgSU5ORVI6IFwiSU5ORVJcIixcbiAgICBMRUZUOiBcIkxFRlRcIixcbiAgICBPVVRFUjogXCJPVVRFUlwiLFxuICAgIFJJR0hUOiBcIlJJR0hUXCIsXG59O1xuZXhwb3J0IGNvbnN0IElucHV0Q29sdW1uRGF0YVR5cGUgPSB7XG4gICAgQklUOiBcIkJJVFwiLFxuICAgIEJPT0xFQU46IFwiQk9PTEVBTlwiLFxuICAgIERBVEVUSU1FOiBcIkRBVEVUSU1FXCIsXG4gICAgREVDSU1BTDogXCJERUNJTUFMXCIsXG4gICAgSU5URUdFUjogXCJJTlRFR0VSXCIsXG4gICAgSlNPTjogXCJKU09OXCIsXG4gICAgU1RSSU5HOiBcIlNUUklOR1wiLFxufTtcbmV4cG9ydCBjb25zdCBGaWxlRm9ybWF0ID0ge1xuICAgIENMRjogXCJDTEZcIixcbiAgICBDU1Y6IFwiQ1NWXCIsXG4gICAgRUxGOiBcIkVMRlwiLFxuICAgIEpTT046IFwiSlNPTlwiLFxuICAgIFRTVjogXCJUU1ZcIixcbiAgICBYTFNYOiBcIlhMU1hcIixcbn07XG5leHBvcnQgY29uc3QgVGV4dFF1YWxpZmllciA9IHtcbiAgICBET1VCTEVfUVVPVEU6IFwiRE9VQkxFX1FVT1RFXCIsXG4gICAgU0lOR0xFX1FVT1RFOiBcIlNJTkdMRV9RVU9URVwiLFxufTtcbmV4cG9ydCB2YXIgUGh5c2ljYWxUYWJsZTtcbihmdW5jdGlvbiAoUGh5c2ljYWxUYWJsZSkge1xuICAgIFBoeXNpY2FsVGFibGUudmlzaXQgPSAodmFsdWUsIHZpc2l0b3IpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlLlJlbGF0aW9uYWxUYWJsZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuUmVsYXRpb25hbFRhYmxlKHZhbHVlLlJlbGF0aW9uYWxUYWJsZSk7XG4gICAgICAgIGlmICh2YWx1ZS5DdXN0b21TcWwgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkN1c3RvbVNxbCh2YWx1ZS5DdXN0b21TcWwpO1xuICAgICAgICBpZiAodmFsdWUuUzNTb3VyY2UgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlMzU291cmNlKHZhbHVlLlMzU291cmNlKTtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuXyh2YWx1ZS4kdW5rbm93blswXSwgdmFsdWUuJHVua25vd25bMV0pO1xuICAgIH07XG59KShQaHlzaWNhbFRhYmxlIHx8IChQaHlzaWNhbFRhYmxlID0ge30pKTtcbmV4cG9ydCBjb25zdCBSb3dMZXZlbFBlcm1pc3Npb25Gb3JtYXRWZXJzaW9uID0ge1xuICAgIFZFUlNJT05fMTogXCJWRVJTSU9OXzFcIixcbiAgICBWRVJTSU9OXzI6IFwiVkVSU0lPTl8yXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJvd0xldmVsUGVybWlzc2lvblBvbGljeSA9IHtcbiAgICBERU5ZX0FDQ0VTUzogXCJERU5ZX0FDQ0VTU1wiLFxuICAgIEdSQU5UX0FDQ0VTUzogXCJHUkFOVF9BQ0NFU1NcIixcbn07XG5leHBvcnQgY29uc3QgU3RhdHVzID0ge1xuICAgIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gICAgRU5BQkxFRDogXCJFTkFCTEVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGFTb3VyY2VUeXBlID0ge1xuICAgIEFET0JFX0FOQUxZVElDUzogXCJBRE9CRV9BTkFMWVRJQ1NcIixcbiAgICBBTUFaT05fRUxBU1RJQ1NFQVJDSDogXCJBTUFaT05fRUxBU1RJQ1NFQVJDSFwiLFxuICAgIEFNQVpPTl9PUEVOU0VBUkNIOiBcIkFNQVpPTl9PUEVOU0VBUkNIXCIsXG4gICAgQVRIRU5BOiBcIkFUSEVOQVwiLFxuICAgIEFVUk9SQTogXCJBVVJPUkFcIixcbiAgICBBVVJPUkFfUE9TVEdSRVNRTDogXCJBVVJPUkFfUE9TVEdSRVNRTFwiLFxuICAgIEFXU19JT1RfQU5BTFlUSUNTOiBcIkFXU19JT1RfQU5BTFlUSUNTXCIsXG4gICAgQklHUVVFUlk6IFwiQklHUVVFUllcIixcbiAgICBEQVRBQlJJQ0tTOiBcIkRBVEFCUklDS1NcIixcbiAgICBFWEFTT0w6IFwiRVhBU09MXCIsXG4gICAgR0lUSFVCOiBcIkdJVEhVQlwiLFxuICAgIEpJUkE6IFwiSklSQVwiLFxuICAgIE1BUklBREI6IFwiTUFSSUFEQlwiLFxuICAgIE1ZU1FMOiBcIk1ZU1FMXCIsXG4gICAgT1JBQ0xFOiBcIk9SQUNMRVwiLFxuICAgIFBPU1RHUkVTUUw6IFwiUE9TVEdSRVNRTFwiLFxuICAgIFBSRVNUTzogXCJQUkVTVE9cIixcbiAgICBSRURTSElGVDogXCJSRURTSElGVFwiLFxuICAgIFMzOiBcIlMzXCIsXG4gICAgU0FMRVNGT1JDRTogXCJTQUxFU0ZPUkNFXCIsXG4gICAgU0VSVklDRU5PVzogXCJTRVJWSUNFTk9XXCIsXG4gICAgU05PV0ZMQUtFOiBcIlNOT1dGTEFLRVwiLFxuICAgIFNQQVJLOiBcIlNQQVJLXCIsXG4gICAgU1FMU0VSVkVSOiBcIlNRTFNFUlZFUlwiLFxuICAgIFNUQVJCVVJTVDogXCJTVEFSQlVSU1RcIixcbiAgICBURVJBREFUQTogXCJURVJBREFUQVwiLFxuICAgIFRJTUVTVFJFQU06IFwiVElNRVNUUkVBTVwiLFxuICAgIFRSSU5POiBcIlRSSU5PXCIsXG4gICAgVFdJVFRFUjogXCJUV0lUVEVSXCIsXG59O1xuZXhwb3J0IGNvbnN0IEZvbGRlclR5cGUgPSB7XG4gICAgUkVTVFJJQ1RFRDogXCJSRVNUUklDVEVEXCIsXG4gICAgU0hBUkVEOiBcIlNIQVJFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBTaGFyaW5nTW9kZWwgPSB7XG4gICAgQUNDT1VOVDogXCJBQ0NPVU5UXCIsXG4gICAgTkFNRVNQQUNFOiBcIk5BTUVTUEFDRVwiLFxufTtcbmV4cG9ydCBjb25zdCBNZW1iZXJUeXBlID0ge1xuICAgIEFOQUxZU0lTOiBcIkFOQUxZU0lTXCIsXG4gICAgREFTSEJPQVJEOiBcIkRBU0hCT0FSRFwiLFxuICAgIERBVEFTRVQ6IFwiREFUQVNFVFwiLFxuICAgIERBVEFTT1VSQ0U6IFwiREFUQVNPVVJDRVwiLFxuICAgIFRPUElDOiBcIlRPUElDXCIsXG59O1xuZXhwb3J0IGNvbnN0IEluZ2VzdGlvblR5cGUgPSB7XG4gICAgRlVMTF9SRUZSRVNIOiBcIkZVTExfUkVGUkVTSFwiLFxuICAgIElOQ1JFTUVOVEFMX1JFRlJFU0g6IFwiSU5DUkVNRU5UQUxfUkVGUkVTSFwiLFxufTtcbmV4cG9ydCBjb25zdCBJbmdlc3Rpb25TdGF0dXMgPSB7XG4gICAgQ0FOQ0VMTEVEOiBcIkNBTkNFTExFRFwiLFxuICAgIENPTVBMRVRFRDogXCJDT01QTEVURURcIixcbiAgICBGQUlMRUQ6IFwiRkFJTEVEXCIsXG4gICAgSU5JVElBTElaRUQ6IFwiSU5JVElBTElaRURcIixcbiAgICBRVUVVRUQ6IFwiUVVFVUVEXCIsXG4gICAgUlVOTklORzogXCJSVU5OSU5HXCIsXG59O1xuZXhwb3J0IGNvbnN0IElkZW50aXR5U3RvcmUgPSB7XG4gICAgUVVJQ0tTSUdIVDogXCJRVUlDS1NJR0hUXCIsXG59O1xuZXhwb3J0IGNvbnN0IE5hbWVzcGFjZVN0YXR1cyA9IHtcbiAgICBDUkVBVEVEOiBcIkNSRUFURURcIixcbiAgICBDUkVBVElORzogXCJDUkVBVElOR1wiLFxuICAgIERFTEVUSU5HOiBcIkRFTEVUSU5HXCIsXG4gICAgTk9OX1JFVFJZQUJMRV9GQUlMVVJFOiBcIk5PTl9SRVRSWUFCTEVfRkFJTFVSRVwiLFxuICAgIFJFVFJZQUJMRV9GQUlMVVJFOiBcIlJFVFJZQUJMRV9GQUlMVVJFXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlZnJlc2hJbnRlcnZhbCA9IHtcbiAgICBEQUlMWTogXCJEQUlMWVwiLFxuICAgIEhPVVJMWTogXCJIT1VSTFlcIixcbiAgICBNSU5VVEUxNTogXCJNSU5VVEUxNVwiLFxuICAgIE1JTlVURTMwOiBcIk1JTlVURTMwXCIsXG4gICAgTU9OVEhMWTogXCJNT05USExZXCIsXG4gICAgV0VFS0xZOiBcIldFRUtMWVwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXlPZldlZWsgPSB7XG4gICAgRlJJREFZOiBcIkZSSURBWVwiLFxuICAgIE1PTkRBWTogXCJNT05EQVlcIixcbiAgICBTQVRVUkRBWTogXCJTQVRVUkRBWVwiLFxuICAgIFNVTkRBWTogXCJTVU5EQVlcIixcbiAgICBUSFVSU0RBWTogXCJUSFVSU0RBWVwiLFxuICAgIFRVRVNEQVk6IFwiVFVFU0RBWVwiLFxuICAgIFdFRE5FU0RBWTogXCJXRURORVNEQVlcIixcbn07XG5leHBvcnQgY29uc3QgUm9sZSA9IHtcbiAgICBBRE1JTjogXCJBRE1JTlwiLFxuICAgIEFVVEhPUjogXCJBVVRIT1JcIixcbiAgICBSRUFERVI6IFwiUkVBREVSXCIsXG59O1xuZXhwb3J0IGNvbnN0IERlZmF1bHRBZ2dyZWdhdGlvbiA9IHtcbiAgICBBVkVSQUdFOiBcIkFWRVJBR0VcIixcbiAgICBDT1VOVDogXCJDT1VOVFwiLFxuICAgIERJU1RJTkNUX0NPVU5UOiBcIkRJU1RJTkNUX0NPVU5UXCIsXG4gICAgTUFYOiBcIk1BWFwiLFxuICAgIE1FRElBTjogXCJNRURJQU5cIixcbiAgICBNSU46IFwiTUlOXCIsXG4gICAgU1RERVY6IFwiU1RERVZcIixcbiAgICBTVERFVlA6IFwiU1RERVZQXCIsXG4gICAgU1VNOiBcIlNVTVwiLFxuICAgIFZBUjogXCJWQVJcIixcbiAgICBWQVJQOiBcIlZBUlBcIixcbn07XG5leHBvcnQgY29uc3QgRGlzcGxheUZvcm1hdCA9IHtcbiAgICBBVVRPOiBcIkFVVE9cIixcbiAgICBDVVJSRU5DWTogXCJDVVJSRU5DWVwiLFxuICAgIERBVEU6IFwiREFURVwiLFxuICAgIE5VTUJFUjogXCJOVU1CRVJcIixcbiAgICBQRVJDRU5UOiBcIlBFUkNFTlRcIixcbiAgICBTVFJJTkc6IFwiU1RSSU5HXCIsXG59O1xuZXhwb3J0IGNvbnN0IFRvcGljTnVtZXJpY1NlcGFyYXRvclN5bWJvbCA9IHtcbiAgICBDT01NQTogXCJDT01NQVwiLFxuICAgIERPVDogXCJET1RcIixcbn07XG5leHBvcnQgY29uc3QgU25hcHNob3RKb2JTM1Jlc3VsdEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUzNVcmkgJiYgeyBTM1VyaTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNuYXBzaG90Sm9iUmVzdWx0RmlsZUdyb3VwRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TM1Jlc3VsdHMgJiYgeyBTM1Jlc3VsdHM6IG9iai5TM1Jlc3VsdHMubWFwKChpdGVtKSA9PiBTbmFwc2hvdEpvYlMzUmVzdWx0RmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEFub255bW91c1VzZXJTbmFwc2hvdEpvYlJlc3VsdEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVJbXBvcnRKb2JEYXRhU291cmNlQ3JlZGVudGlhbFBhaXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlSW1wb3J0Sm9iRGF0YVNvdXJjZUNyZWRlbnRpYWxzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DcmVkZW50aWFsUGFpciAmJiB7IENyZWRlbnRpYWxQYWlyOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVJbXBvcnRKb2JEYXRhU291cmNlT3ZlcnJpZGVQYXJhbWV0ZXJzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EYXRhU291cmNlUGFyYW1ldGVycyAmJiB7IERhdGFTb3VyY2VQYXJhbWV0ZXJzOiBvYmouRGF0YVNvdXJjZVBhcmFtZXRlcnMgfSksXG4gICAgLi4uKG9iai5DcmVkZW50aWFscyAmJiB7IENyZWRlbnRpYWxzOiBBc3NldEJ1bmRsZUltcG9ydEpvYkRhdGFTb3VyY2VDcmVkZW50aWFsc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3JlZGVudGlhbHMpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVJbXBvcnRKb2JPdmVycmlkZVBhcmFtZXRlcnNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFTb3VyY2VzICYmIHtcbiAgICAgICAgRGF0YVNvdXJjZXM6IG9iai5EYXRhU291cmNlcy5tYXAoKGl0ZW0pID0+IEFzc2V0QnVuZGxlSW1wb3J0Sm9iRGF0YVNvdXJjZU92ZXJyaWRlUGFyYW1ldGVyc0ZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUltcG9ydFNvdXJjZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQm9keSAmJiB7IEJvZHk6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUltcG9ydFNvdXJjZURlc2NyaXB0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Cb2R5ICYmIHsgQm9keTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IENhbGN1bGF0ZWRDb2x1bW5GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkV4cHJlc3Npb24gJiYgeyBFeHByZXNzaW9uOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGF0ZVRpbWVQYXJhbWV0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlZhbHVlcyAmJiB7IFZhbHVlczogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlY2ltYWxQYXJhbWV0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlZhbHVlcyAmJiB7IFZhbHVlczogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEludGVnZXJQYXJhbWV0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlZhbHVlcyAmJiB7IFZhbHVlczogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFN0cmluZ1BhcmFtZXRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVmFsdWVzICYmIHsgVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgX1BhcmFtZXRlcnNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlN0cmluZ1BhcmFtZXRlcnMgJiYge1xuICAgICAgICBTdHJpbmdQYXJhbWV0ZXJzOiBvYmouU3RyaW5nUGFyYW1ldGVycy5tYXAoKGl0ZW0pID0+IFN0cmluZ1BhcmFtZXRlckZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG4gICAgLi4uKG9iai5JbnRlZ2VyUGFyYW1ldGVycyAmJiB7XG4gICAgICAgIEludGVnZXJQYXJhbWV0ZXJzOiBvYmouSW50ZWdlclBhcmFtZXRlcnMubWFwKChpdGVtKSA9PiBJbnRlZ2VyUGFyYW1ldGVyRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkRlY2ltYWxQYXJhbWV0ZXJzICYmIHtcbiAgICAgICAgRGVjaW1hbFBhcmFtZXRlcnM6IG9iai5EZWNpbWFsUGFyYW1ldGVycy5tYXAoKGl0ZW0pID0+IERlY2ltYWxQYXJhbWV0ZXJGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxuICAgIC4uLihvYmouRGF0ZVRpbWVQYXJhbWV0ZXJzICYmIHtcbiAgICAgICAgRGF0ZVRpbWVQYXJhbWV0ZXJzOiBvYmouRGF0ZVRpbWVQYXJhbWV0ZXJzLm1hcCgoaXRlbSkgPT4gRGF0ZVRpbWVQYXJhbWV0ZXJGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ3JlYXRlQW5hbHlzaXNSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5QYXJhbWV0ZXJzICYmIHsgUGFyYW1ldGVyczogX1BhcmFtZXRlcnNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlBhcmFtZXRlcnMpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ3JlYXRlQ29sdW1uc09wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ29sdW1ucyAmJiB7IENvbHVtbnM6IG9iai5Db2x1bW5zLm1hcCgoaXRlbSkgPT4gQ2FsY3VsYXRlZENvbHVtbkZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXNoYm9hcmRWZXJzaW9uRGVmaW5pdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ2FsY3VsYXRlZEZpZWxkcyAmJiB7XG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IG9iai5DYWxjdWxhdGVkRmllbGRzLm1hcCgoaXRlbSkgPT4gQ2FsY3VsYXRlZEZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLlBhcmFtZXRlckRlY2xhcmF0aW9ucyAmJiB7XG4gICAgICAgIFBhcmFtZXRlckRlY2xhcmF0aW9uczogb2JqLlBhcmFtZXRlckRlY2xhcmF0aW9ucy5tYXAoKGl0ZW0pID0+IFBhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkNvbHVtbkNvbmZpZ3VyYXRpb25zICYmIHtcbiAgICAgICAgQ29sdW1uQ29uZmlndXJhdGlvbnM6IG9iai5Db2x1bW5Db25maWd1cmF0aW9ucy5tYXAoKGl0ZW0pID0+IENvbHVtbkNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ3JlYXRlRGFzaGJvYXJkUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUGFyYW1ldGVycyAmJiB7IFBhcmFtZXRlcnM6IF9QYXJhbWV0ZXJzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5QYXJhbWV0ZXJzKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEZpbHRlck9wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ29uZGl0aW9uRXhwcmVzc2lvbiAmJiB7IENvbmRpdGlvbkV4cHJlc3Npb246IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUcmFuc2Zvcm1PcGVyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiB7XG4gICAgaWYgKG9iai5Qcm9qZWN0T3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB7IFByb2plY3RPcGVyYXRpb246IG9iai5Qcm9qZWN0T3BlcmF0aW9uIH07XG4gICAgaWYgKG9iai5GaWx0ZXJPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHsgRmlsdGVyT3BlcmF0aW9uOiBGaWx0ZXJPcGVyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkZpbHRlck9wZXJhdGlvbikgfTtcbiAgICBpZiAob2JqLkNyZWF0ZUNvbHVtbnNPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHsgQ3JlYXRlQ29sdW1uc09wZXJhdGlvbjogQ3JlYXRlQ29sdW1uc09wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3JlYXRlQ29sdW1uc09wZXJhdGlvbikgfTtcbiAgICBpZiAob2JqLlJlbmFtZUNvbHVtbk9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4geyBSZW5hbWVDb2x1bW5PcGVyYXRpb246IG9iai5SZW5hbWVDb2x1bW5PcGVyYXRpb24gfTtcbiAgICBpZiAob2JqLkNhc3RDb2x1bW5UeXBlT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB7IENhc3RDb2x1bW5UeXBlT3BlcmF0aW9uOiBvYmouQ2FzdENvbHVtblR5cGVPcGVyYXRpb24gfTtcbiAgICBpZiAob2JqLlRhZ0NvbHVtbk9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4geyBUYWdDb2x1bW5PcGVyYXRpb246IG9iai5UYWdDb2x1bW5PcGVyYXRpb24gfTtcbiAgICBpZiAob2JqLlVudGFnQ29sdW1uT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB7IFVudGFnQ29sdW1uT3BlcmF0aW9uOiBvYmouVW50YWdDb2x1bW5PcGVyYXRpb24gfTtcbiAgICBpZiAob2JqLk92ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4geyBPdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb246IG9iai5PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24gfTtcbiAgICBpZiAob2JqLiR1bmtub3duICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB7IFtvYmouJHVua25vd25bMF1dOiBcIlVOS05PV05cIiB9O1xufTtcbmV4cG9ydCBjb25zdCBMb2dpY2FsVGFibGVGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFUcmFuc2Zvcm1zICYmIHtcbiAgICAgICAgRGF0YVRyYW5zZm9ybXM6IG9iai5EYXRhVHJhbnNmb3Jtcy5tYXAoKGl0ZW0pID0+IFRyYW5zZm9ybU9wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBSb3dMZXZlbFBlcm1pc3Npb25UYWdSdWxlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5NYXRjaEFsbFZhbHVlICYmIHsgTWF0Y2hBbGxWYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFJvd0xldmVsUGVybWlzc2lvblRhZ0NvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlRhZ1J1bGVzICYmIHsgVGFnUnVsZXM6IG9iai5UYWdSdWxlcy5tYXAoKGl0ZW0pID0+IFJvd0xldmVsUGVybWlzc2lvblRhZ1J1bGVGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ3JlYXRlRGF0YVNldFJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlBoeXNpY2FsVGFibGVNYXAgJiYge1xuICAgICAgICBQaHlzaWNhbFRhYmxlTWFwOiBPYmplY3QuZW50cmllcyhvYmouUGh5c2ljYWxUYWJsZU1hcCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKChhY2Nba2V5XSA9IHZhbHVlKSwgYWNjKSwge30pLFxuICAgIH0pLFxuICAgIC4uLihvYmouTG9naWNhbFRhYmxlTWFwICYmIHtcbiAgICAgICAgTG9naWNhbFRhYmxlTWFwOiBPYmplY3QuZW50cmllcyhvYmouTG9naWNhbFRhYmxlTWFwKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoKGFjY1trZXldID0gTG9naWNhbFRhYmxlRmlsdGVyU2Vuc2l0aXZlTG9nKHZhbHVlKSksIGFjYyksIHt9KSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLlJvd0xldmVsUGVybWlzc2lvblRhZ0NvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uOiBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Sb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGFTb3VyY2VDcmVkZW50aWFsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ3JlZGVudGlhbFBhaXIgJiYgeyBDcmVkZW50aWFsUGFpcjogb2JqLkNyZWRlbnRpYWxQYWlyIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ3JlYXRlRGF0YVNvdXJjZVJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFTb3VyY2VQYXJhbWV0ZXJzICYmIHsgRGF0YVNvdXJjZVBhcmFtZXRlcnM6IG9iai5EYXRhU291cmNlUGFyYW1ldGVycyB9KSxcbiAgICAuLi4ob2JqLkNyZWRlbnRpYWxzICYmIHsgQ3JlZGVudGlhbHM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUZW1wbGF0ZVZlcnNpb25EZWZpbml0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DYWxjdWxhdGVkRmllbGRzICYmIHtcbiAgICAgICAgQ2FsY3VsYXRlZEZpZWxkczogb2JqLkNhbGN1bGF0ZWRGaWVsZHMubWFwKChpdGVtKSA9PiBDYWxjdWxhdGVkRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxuICAgIC4uLihvYmouUGFyYW1ldGVyRGVjbGFyYXRpb25zICYmIHtcbiAgICAgICAgUGFyYW1ldGVyRGVjbGFyYXRpb25zOiBvYmouUGFyYW1ldGVyRGVjbGFyYXRpb25zLm1hcCgoaXRlbSkgPT4gUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxuICAgIC4uLihvYmouQ29sdW1uQ29uZmlndXJhdGlvbnMgJiYge1xuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogb2JqLkNvbHVtbkNvbmZpZ3VyYXRpb25zLm1hcCgoaXRlbSkgPT4gQ29sdW1uQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDcmVhdGVUZW1wbGF0ZVJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFNlbWFudGljVHlwZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVHJ1dGh5Q2VsbFZhbHVlICYmIHsgVHJ1dGh5Q2VsbFZhbHVlOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouVHJ1dGh5Q2VsbFZhbHVlU3lub255bXMgJiYgeyBUcnV0aHlDZWxsVmFsdWVTeW5vbnltczogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLkZhbHNleUNlbGxWYWx1ZSAmJiB7IEZhbHNleUNlbGxWYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLkZhbHNleUNlbGxWYWx1ZVN5bm9ueW1zICYmIHsgRmFsc2V5Q2VsbFZhbHVlU3lub255bXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbiIsImltcG9ydCB7IFNFTlNJVElWRV9TVFJJTkcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBfUGFyYW1ldGVyc0ZpbHRlclNlbnNpdGl2ZUxvZywgQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2VEZXNjcmlwdGlvbkZpbHRlclNlbnNpdGl2ZUxvZywgTG9naWNhbFRhYmxlRmlsdGVyU2Vuc2l0aXZlTG9nLCBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nLCBTZW1hbnRpY1R5cGVGaWx0ZXJTZW5zaXRpdmVMb2csIH0gZnJvbSBcIi4vbW9kZWxzXzJcIjtcbmltcG9ydCB7IFF1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuL1F1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uXCI7XG5leHBvcnQgY29uc3QgVG9waWNUaW1lR3JhbnVsYXJpdHkgPSB7XG4gICAgREFZOiBcIkRBWVwiLFxuICAgIEhPVVI6IFwiSE9VUlwiLFxuICAgIE1JTlVURTogXCJNSU5VVEVcIixcbiAgICBNT05USDogXCJNT05USFwiLFxuICAgIFFVQVJURVI6IFwiUVVBUlRFUlwiLFxuICAgIFNFQ09ORDogXCJTRUNPTkRcIixcbiAgICBXRUVLOiBcIldFRUtcIixcbiAgICBZRUFSOiBcIllFQVJcIixcbn07XG5leHBvcnQgY29uc3QgRmlsdGVyQ2xhc3MgPSB7XG4gICAgQ09ORElUSU9OQUxfVkFMVUVfRklMVEVSOiBcIkNPTkRJVElPTkFMX1ZBTFVFX0ZJTFRFUlwiLFxuICAgIEVORk9SQ0VEX1ZBTFVFX0ZJTFRFUjogXCJFTkZPUkNFRF9WQUxVRV9GSUxURVJcIixcbiAgICBOQU1FRF9WQUxVRV9GSUxURVI6IFwiTkFNRURfVkFMVUVfRklMVEVSXCIsXG59O1xuZXhwb3J0IGNvbnN0IE5hbWVkRmlsdGVyVHlwZSA9IHtcbiAgICBDQVRFR09SWV9GSUxURVI6IFwiQ0FURUdPUllfRklMVEVSXCIsXG4gICAgREFURV9SQU5HRV9GSUxURVI6IFwiREFURV9SQU5HRV9GSUxURVJcIixcbiAgICBOVU1FUklDX0VRVUFMSVRZX0ZJTFRFUjogXCJOVU1FUklDX0VRVUFMSVRZX0ZJTFRFUlwiLFxuICAgIE5VTUVSSUNfUkFOR0VfRklMVEVSOiBcIk5VTUVSSUNfUkFOR0VfRklMVEVSXCIsXG4gICAgUkVMQVRJVkVfREFURV9GSUxURVI6IFwiUkVMQVRJVkVfREFURV9GSUxURVJcIixcbn07XG5leHBvcnQgY29uc3QgTmFtZWRGaWx0ZXJBZ2dUeXBlID0ge1xuICAgIEFWRVJBR0U6IFwiQVZFUkFHRVwiLFxuICAgIENPVU5UOiBcIkNPVU5UXCIsXG4gICAgRElTVElOQ1RfQ09VTlQ6IFwiRElTVElOQ1RfQ09VTlRcIixcbiAgICBNQVg6IFwiTUFYXCIsXG4gICAgTUVESUFOOiBcIk1FRElBTlwiLFxuICAgIE1JTjogXCJNSU5cIixcbiAgICBOT19BR0dSRUdBVElPTjogXCJOT19BR0dSRUdBVElPTlwiLFxuICAgIFNUREVWOiBcIlNUREVWXCIsXG4gICAgU1RERVZQOiBcIlNUREVWUFwiLFxuICAgIFNVTTogXCJTVU1cIixcbiAgICBWQVI6IFwiVkFSXCIsXG4gICAgVkFSUDogXCJWQVJQXCIsXG59O1xuZXhwb3J0IGNvbnN0IFRvcGljUmVsYXRpdmVEYXRlRmlsdGVyRnVuY3Rpb24gPSB7XG4gICAgTEFTVDogXCJMQVNUXCIsXG4gICAgTkVYVDogXCJORVhUXCIsXG4gICAgTk9XOiBcIk5PV1wiLFxuICAgIFBSRVZJT1VTOiBcIlBSRVZJT1VTXCIsXG4gICAgVEhJUzogXCJUSElTXCIsXG59O1xuZXhwb3J0IGNvbnN0IE5hbWVkRW50aXR5QWdnVHlwZSA9IHtcbiAgICBBVkVSQUdFOiBcIkFWRVJBR0VcIixcbiAgICBDT1VOVDogXCJDT1VOVFwiLFxuICAgIENVU1RPTTogXCJDVVNUT01cIixcbiAgICBESVNUSU5DVF9DT1VOVDogXCJESVNUSU5DVF9DT1VOVFwiLFxuICAgIE1BWDogXCJNQVhcIixcbiAgICBNRURJQU46IFwiTUVESUFOXCIsXG4gICAgTUlOOiBcIk1JTlwiLFxuICAgIFBFUkNFTlRJTEU6IFwiUEVSQ0VOVElMRVwiLFxuICAgIFNUREVWOiBcIlNUREVWXCIsXG4gICAgU1RERVZQOiBcIlNUREVWUFwiLFxuICAgIFNVTTogXCJTVU1cIixcbiAgICBWQVI6IFwiVkFSXCIsXG4gICAgVkFSUDogXCJWQVJQXCIsXG59O1xuZXhwb3J0IGNvbnN0IFByb3BlcnR5Um9sZSA9IHtcbiAgICBJRDogXCJJRFwiLFxuICAgIFBSSU1BUlk6IFwiUFJJTUFSWVwiLFxufTtcbmV4cG9ydCBjb25zdCBQcm9wZXJ0eVVzYWdlID0ge1xuICAgIERJTUVOU0lPTjogXCJESU1FTlNJT05cIixcbiAgICBJTkhFUklUOiBcIklOSEVSSVRcIixcbiAgICBNRUFTVVJFOiBcIk1FQVNVUkVcIixcbn07XG5leHBvcnQgY29uc3QgVG9waWNVc2VyRXhwZXJpZW5jZVZlcnNpb24gPSB7XG4gICAgTEVHQUNZOiBcIkxFR0FDWVwiLFxuICAgIE5FV19SRUFERVJfRVhQRVJJRU5DRTogXCJORVdfUkVBREVSX0VYUEVSSUVOQ0VcIixcbn07XG5leHBvcnQgY29uc3QgVG9waWNTY2hlZHVsZVR5cGUgPSB7XG4gICAgREFJTFk6IFwiREFJTFlcIixcbiAgICBIT1VSTFk6IFwiSE9VUkxZXCIsXG4gICAgTU9OVEhMWTogXCJNT05USExZXCIsXG4gICAgV0VFS0xZOiBcIldFRUtMWVwiLFxufTtcbmV4cG9ydCBjb25zdCBWUENDb25uZWN0aW9uQXZhaWxhYmlsaXR5U3RhdHVzID0ge1xuICAgIEFWQUlMQUJMRTogXCJBVkFJTEFCTEVcIixcbiAgICBQQVJUSUFMTFlfQVZBSUxBQkxFOiBcIlBBUlRJQUxMWV9BVkFJTEFCTEVcIixcbiAgICBVTkFWQUlMQUJMRTogXCJVTkFWQUlMQUJMRVwiLFxufTtcbmV4cG9ydCBjb25zdCBWUENDb25uZWN0aW9uUmVzb3VyY2VTdGF0dXMgPSB7XG4gICAgQ1JFQVRJT05fRkFJTEVEOiBcIkNSRUFUSU9OX0ZBSUxFRFwiLFxuICAgIENSRUFUSU9OX0lOX1BST0dSRVNTOiBcIkNSRUFUSU9OX0lOX1BST0dSRVNTXCIsXG4gICAgQ1JFQVRJT05fU1VDQ0VTU0ZVTDogXCJDUkVBVElPTl9TVUNDRVNTRlVMXCIsXG4gICAgREVMRVRFRDogXCJERUxFVEVEXCIsXG4gICAgREVMRVRJT05fRkFJTEVEOiBcIkRFTEVUSU9OX0ZBSUxFRFwiLFxuICAgIERFTEVUSU9OX0lOX1BST0dSRVNTOiBcIkRFTEVUSU9OX0lOX1BST0dSRVNTXCIsXG4gICAgVVBEQVRFX0ZBSUxFRDogXCJVUERBVEVfRkFJTEVEXCIsXG4gICAgVVBEQVRFX0lOX1BST0dSRVNTOiBcIlVQREFURV9JTl9QUk9HUkVTU1wiLFxuICAgIFVQREFURV9TVUNDRVNTRlVMOiBcIlVQREFURV9TVUNDRVNTRlVMXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhc2hib2FyZEVycm9yVHlwZSA9IHtcbiAgICBBQ0NFU1NfREVOSUVEOiBcIkFDQ0VTU19ERU5JRURcIixcbiAgICBDT0xVTU5fR0VPR1JBUEhJQ19ST0xFX01JU01BVENIOiBcIkNPTFVNTl9HRU9HUkFQSElDX1JPTEVfTUlTTUFUQ0hcIixcbiAgICBDT0xVTU5fUkVQTEFDRU1FTlRfTUlTU0lORzogXCJDT0xVTU5fUkVQTEFDRU1FTlRfTUlTU0lOR1wiLFxuICAgIENPTFVNTl9UWVBFX01JU01BVENIOiBcIkNPTFVNTl9UWVBFX01JU01BVENIXCIsXG4gICAgREFUQV9TRVRfTk9UX0ZPVU5EOiBcIkRBVEFfU0VUX05PVF9GT1VORFwiLFxuICAgIElOVEVSTkFMX0ZBSUxVUkU6IFwiSU5URVJOQUxfRkFJTFVSRVwiLFxuICAgIFBBUkFNRVRFUl9OT1RfRk9VTkQ6IFwiUEFSQU1FVEVSX05PVF9GT1VORFwiLFxuICAgIFBBUkFNRVRFUl9UWVBFX0lOVkFMSUQ6IFwiUEFSQU1FVEVSX1RZUEVfSU5WQUxJRFwiLFxuICAgIFBBUkFNRVRFUl9WQUxVRV9JTkNPTVBBVElCTEU6IFwiUEFSQU1FVEVSX1ZBTFVFX0lOQ09NUEFUSUJMRVwiLFxuICAgIFNPVVJDRV9OT1RfRk9VTkQ6IFwiU09VUkNFX05PVF9GT1VORFwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXNoYm9hcmRGaWx0ZXJBdHRyaWJ1dGUgPSB7XG4gICAgREFTSEJPQVJEX05BTUU6IFwiREFTSEJPQVJEX05BTUVcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9PV05FUjogXCJESVJFQ1RfUVVJQ0tTSUdIVF9PV05FUlwiLFxuICAgIERJUkVDVF9RVUlDS1NJR0hUX1NPTEVfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfU09MRV9PV05FUlwiLFxuICAgIERJUkVDVF9RVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUjogXCJESVJFQ1RfUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVJcIixcbiAgICBRVUlDS1NJR0hUX09XTkVSOiBcIlFVSUNLU0lHSFRfT1dORVJcIixcbiAgICBRVUlDS1NJR0hUX1VTRVI6IFwiUVVJQ0tTSUdIVF9VU0VSXCIsXG4gICAgUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVI6IFwiUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVJcIixcbn07XG5leHBvcnQgY29uc3QgRGF0YVNldEZpbHRlckF0dHJpYnV0ZSA9IHtcbiAgICBEQVRBU0VUX05BTUU6IFwiREFUQVNFVF9OQU1FXCIsXG4gICAgRElSRUNUX1FVSUNLU0lHSFRfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfT1dORVJcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9TT0xFX09XTkVSOiBcIkRJUkVDVF9RVUlDS1NJR0hUX1NPTEVfT1dORVJcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfVklFV0VSX09SX09XTkVSXCIsXG4gICAgUVVJQ0tTSUdIVF9PV05FUjogXCJRVUlDS1NJR0hUX09XTkVSXCIsXG4gICAgUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVI6IFwiUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVJcIixcbn07XG5leHBvcnQgY29uc3QgTG9va2JhY2tXaW5kb3dTaXplVW5pdCA9IHtcbiAgICBEQVk6IFwiREFZXCIsXG4gICAgSE9VUjogXCJIT1VSXCIsXG4gICAgV0VFSzogXCJXRUVLXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGFTb3VyY2VFcnJvckluZm9UeXBlID0ge1xuICAgIEFDQ0VTU19ERU5JRUQ6IFwiQUNDRVNTX0RFTklFRFwiLFxuICAgIENPTkZMSUNUOiBcIkNPTkZMSUNUXCIsXG4gICAgQ09QWV9TT1VSQ0VfTk9UX0ZPVU5EOiBcIkNPUFlfU09VUkNFX05PVF9GT1VORFwiLFxuICAgIEVOR0lORV9WRVJTSU9OX05PVF9TVVBQT1JURUQ6IFwiRU5HSU5FX1ZFUlNJT05fTk9UX1NVUFBPUlRFRFwiLFxuICAgIEdFTkVSSUNfU1FMX0ZBSUxVUkU6IFwiR0VORVJJQ19TUUxfRkFJTFVSRVwiLFxuICAgIFRJTUVPVVQ6IFwiVElNRU9VVFwiLFxuICAgIFVOS05PV046IFwiVU5LTk9XTlwiLFxuICAgIFVOS05PV05fSE9TVDogXCJVTktOT1dOX0hPU1RcIixcbn07XG5leHBvcnQgY29uc3QgRGF0YVNvdXJjZUZpbHRlckF0dHJpYnV0ZSA9IHtcbiAgICBEQVRBU09VUkNFX05BTUU6IFwiREFUQVNPVVJDRV9OQU1FXCIsXG4gICAgRElSRUNUX1FVSUNLU0lHSFRfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfT1dORVJcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9TT0xFX09XTkVSOiBcIkRJUkVDVF9RVUlDS1NJR0hUX1NPTEVfT1dORVJcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfVklFV0VSX09SX09XTkVSXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNuYXBzaG90Sm9iU3RhdHVzID0ge1xuICAgIENPTVBMRVRFRDogXCJDT01QTEVURURcIixcbiAgICBGQUlMRUQ6IFwiRkFJTEVEXCIsXG4gICAgUVVFVUVEOiBcIlFVRVVFRFwiLFxuICAgIFJVTk5JTkc6IFwiUlVOTklOR1wiLFxufTtcbmV4cG9ydCBjbGFzcyBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgSW5nZXN0aW9uRXJyb3JUeXBlID0ge1xuICAgIEFDQ09VTlRfQ0FQQUNJVFlfTElNSVRfRVhDRUVERUQ6IFwiQUNDT1VOVF9DQVBBQ0lUWV9MSU1JVF9FWENFRURFRFwiLFxuICAgIENPTk5FQ1RJT05fRkFJTFVSRTogXCJDT05ORUNUSU9OX0ZBSUxVUkVcIixcbiAgICBDVVJTT1JfTk9UX0VOQUJMRUQ6IFwiQ1VSU09SX05PVF9FTkFCTEVEXCIsXG4gICAgQ1VTVE9NRVJfRVJST1I6IFwiQ1VTVE9NRVJfRVJST1JcIixcbiAgICBEQVRBX1NFVF9ERUxFVEVEOiBcIkRBVEFfU0VUX0RFTEVURURcIixcbiAgICBEQVRBX1NFVF9OT1RfU1BJQ0U6IFwiREFUQV9TRVRfTk9UX1NQSUNFXCIsXG4gICAgREFUQV9TRVRfU0laRV9MSU1JVF9FWENFRURFRDogXCJEQVRBX1NFVF9TSVpFX0xJTUlUX0VYQ0VFREVEXCIsXG4gICAgREFUQV9TT1VSQ0VfQVVUSF9GQUlMRUQ6IFwiREFUQV9TT1VSQ0VfQVVUSF9GQUlMRURcIixcbiAgICBEQVRBX1NPVVJDRV9DT05ORUNUSU9OX0ZBSUxFRDogXCJEQVRBX1NPVVJDRV9DT05ORUNUSU9OX0ZBSUxFRFwiLFxuICAgIERBVEFfU09VUkNFX05PVF9GT1VORDogXCJEQVRBX1NPVVJDRV9OT1RfRk9VTkRcIixcbiAgICBEQVRBX1RPTEVSQU5DRV9FWENFUFRJT046IFwiREFUQV9UT0xFUkFOQ0VfRVhDRVBUSU9OXCIsXG4gICAgRFVQTElDQVRFX0NPTFVNTl9OQU1FU19GT1VORDogXCJEVVBMSUNBVEVfQ09MVU1OX05BTUVTX0ZPVU5EXCIsXG4gICAgRUxBU1RJQ1NFQVJDSF9DVVJTT1JfTk9UX0VOQUJMRUQ6IFwiRUxBU1RJQ1NFQVJDSF9DVVJTT1JfTk9UX0VOQUJMRURcIixcbiAgICBGQUlMVVJFX1RPX0FTU1VNRV9ST0xFOiBcIkZBSUxVUkVfVE9fQVNTVU1FX1JPTEVcIixcbiAgICBGQUlMVVJFX1RPX1BST0NFU1NfSlNPTl9GSUxFOiBcIkZBSUxVUkVfVE9fUFJPQ0VTU19KU09OX0ZJTEVcIixcbiAgICBJQU1fUk9MRV9OT1RfQVZBSUxBQkxFOiBcIklBTV9ST0xFX05PVF9BVkFJTEFCTEVcIixcbiAgICBJTkdFU1RJT05fQ0FOQ0VMRUQ6IFwiSU5HRVNUSU9OX0NBTkNFTEVEXCIsXG4gICAgSU5HRVNUSU9OX1NVUEVSU0VERUQ6IFwiSU5HRVNUSU9OX1NVUEVSU0VERURcIixcbiAgICBJTlRFUk5BTF9TRVJWSUNFX0VSUk9SOiBcIklOVEVSTkFMX1NFUlZJQ0VfRVJST1JcIixcbiAgICBJTlZBTElEX0RBVEFQUkVQX1NZTlRBWDogXCJJTlZBTElEX0RBVEFQUkVQX1NZTlRBWFwiLFxuICAgIElOVkFMSURfREFUQV9TT1VSQ0VfQ09ORklHOiBcIklOVkFMSURfREFUQV9TT1VSQ0VfQ09ORklHXCIsXG4gICAgSU5WQUxJRF9EQVRFX0ZPUk1BVDogXCJJTlZBTElEX0RBVEVfRk9STUFUXCIsXG4gICAgSU9UX0RBVEFfU0VUX0ZJTEVfRU1QVFk6IFwiSU9UX0RBVEFfU0VUX0ZJTEVfRU1QVFlcIixcbiAgICBJT1RfRklMRV9OT1RfRk9VTkQ6IFwiSU9UX0ZJTEVfTk9UX0ZPVU5EXCIsXG4gICAgT0FVVEhfVE9LRU5fRkFJTFVSRTogXCJPQVVUSF9UT0tFTl9GQUlMVVJFXCIsXG4gICAgUEFTU1dPUkRfQVVUSEVOVElDQVRJT05fRkFJTFVSRTogXCJQQVNTV09SRF9BVVRIRU5USUNBVElPTl9GQUlMVVJFXCIsXG4gICAgUEVSTUlTU0lPTl9ERU5JRUQ6IFwiUEVSTUlTU0lPTl9ERU5JRURcIixcbiAgICBQRVJNSVNTSU9OX05PVF9GT1VORDogXCJQRVJNSVNTSU9OX05PVF9GT1VORFwiLFxuICAgIFFVRVJZX1RJTUVPVVQ6IFwiUVVFUllfVElNRU9VVFwiLFxuICAgIFJFRlJFU0hfU1VQUFJFU1NFRF9CWV9FRElUOiBcIlJFRlJFU0hfU1VQUFJFU1NFRF9CWV9FRElUXCIsXG4gICAgUk9XX1NJWkVfTElNSVRfRVhDRUVERUQ6IFwiUk9XX1NJWkVfTElNSVRfRVhDRUVERURcIixcbiAgICBTM19GSUxFX0lOQUNDRVNTSUJMRTogXCJTM19GSUxFX0lOQUNDRVNTSUJMRVwiLFxuICAgIFMzX01BTklGRVNUX0VSUk9SOiBcIlMzX01BTklGRVNUX0VSUk9SXCIsXG4gICAgUzNfVVBMT0FERURfRklMRV9ERUxFVEVEOiBcIlMzX1VQTE9BREVEX0ZJTEVfREVMRVRFRFwiLFxuICAgIFNPVVJDRV9BUElfTElNSVRfRVhDRUVERURfRkFJTFVSRTogXCJTT1VSQ0VfQVBJX0xJTUlUX0VYQ0VFREVEX0ZBSUxVUkVcIixcbiAgICBTT1VSQ0VfUkVTT1VSQ0VfTElNSVRfRVhDRUVERUQ6IFwiU09VUkNFX1JFU09VUkNFX0xJTUlUX0VYQ0VFREVEXCIsXG4gICAgU1BJQ0VfVEFCTEVfTk9UX0ZPVU5EOiBcIlNQSUNFX1RBQkxFX05PVF9GT1VORFwiLFxuICAgIFNRTF9FWENFUFRJT046IFwiU1FMX0VYQ0VQVElPTlwiLFxuICAgIFNRTF9JTlZBTElEX1BBUkFNRVRFUl9WQUxVRTogXCJTUUxfSU5WQUxJRF9QQVJBTUVURVJfVkFMVUVcIixcbiAgICBTUUxfTlVNRVJJQ19PVkVSRkxPVzogXCJTUUxfTlVNRVJJQ19PVkVSRkxPV1wiLFxuICAgIFNRTF9TQ0hFTUFfTUlTTUFUQ0hfRVJST1I6IFwiU1FMX1NDSEVNQV9NSVNNQVRDSF9FUlJPUlwiLFxuICAgIFNRTF9UQUJMRV9OT1RfRk9VTkQ6IFwiU1FMX1RBQkxFX05PVF9GT1VORFwiLFxuICAgIFNTTF9DRVJUSUZJQ0FURV9WQUxJREFUSU9OX0ZBSUxVUkU6IFwiU1NMX0NFUlRJRklDQVRFX1ZBTElEQVRJT05fRkFJTFVSRVwiLFxuICAgIFVOUkVTT0xWQUJMRV9IT1NUOiBcIlVOUkVTT0xWQUJMRV9IT1NUXCIsXG4gICAgVU5ST1VUQUJMRV9IT1NUOiBcIlVOUk9VVEFCTEVfSE9TVFwiLFxufTtcbmV4cG9ydCBjb25zdCBJbmdlc3Rpb25SZXF1ZXN0U291cmNlID0ge1xuICAgIE1BTlVBTDogXCJNQU5VQUxcIixcbiAgICBTQ0hFRFVMRUQ6IFwiU0NIRURVTEVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IEluZ2VzdGlvblJlcXVlc3RUeXBlID0ge1xuICAgIEVESVQ6IFwiRURJVFwiLFxuICAgIEZVTExfUkVGUkVTSDogXCJGVUxMX1JFRlJFU0hcIixcbiAgICBJTkNSRU1FTlRBTF9SRUZSRVNIOiBcIklOQ1JFTUVOVEFMX1JFRlJFU0hcIixcbiAgICBJTklUSUFMX0lOR0VTVElPTjogXCJJTklUSUFMX0lOR0VTVElPTlwiLFxufTtcbmV4cG9ydCBjb25zdCBOYW1lc3BhY2VFcnJvclR5cGUgPSB7XG4gICAgSU5URVJOQUxfU0VSVklDRV9FUlJPUjogXCJJTlRFUk5BTF9TRVJWSUNFX0VSUk9SXCIsXG4gICAgUEVSTUlTU0lPTl9ERU5JRUQ6IFwiUEVSTUlTU0lPTl9ERU5JRURcIixcbn07XG5leHBvcnQgY29uc3QgVGVtcGxhdGVFcnJvclR5cGUgPSB7XG4gICAgQUNDRVNTX0RFTklFRDogXCJBQ0NFU1NfREVOSUVEXCIsXG4gICAgREFUQV9TRVRfTk9UX0ZPVU5EOiBcIkRBVEFfU0VUX05PVF9GT1VORFwiLFxuICAgIElOVEVSTkFMX0ZBSUxVUkU6IFwiSU5URVJOQUxfRkFJTFVSRVwiLFxuICAgIFNPVVJDRV9OT1RfRk9VTkQ6IFwiU09VUkNFX05PVF9GT1VORFwiLFxufTtcbmV4cG9ydCBjb25zdCBUaGVtZVR5cGUgPSB7XG4gICAgQUxMOiBcIkFMTFwiLFxuICAgIENVU1RPTTogXCJDVVNUT01cIixcbiAgICBRVUlDS1NJR0hUOiBcIlFVSUNLU0lHSFRcIixcbn07XG5leHBvcnQgY29uc3QgVGhlbWVFcnJvclR5cGUgPSB7XG4gICAgSU5URVJOQUxfRkFJTFVSRTogXCJJTlRFUk5BTF9GQUlMVVJFXCIsXG59O1xuZXhwb3J0IGNvbnN0IFRvcGljUmVmcmVzaFN0YXR1cyA9IHtcbiAgICBDQU5DRUxMRUQ6IFwiQ0FOQ0VMTEVEXCIsXG4gICAgQ09NUExFVEVEOiBcIkNPTVBMRVRFRFwiLFxuICAgIEZBSUxFRDogXCJGQUlMRURcIixcbiAgICBJTklUSUFMSVpFRDogXCJJTklUSUFMSVpFRFwiLFxuICAgIFJVTk5JTkc6IFwiUlVOTklOR1wiLFxufTtcbmV4cG9ydCBjb25zdCBJZGVudGl0eVR5cGUgPSB7XG4gICAgSUFNOiBcIklBTVwiLFxuICAgIElBTV9JREVOVElUWV9DRU5URVI6IFwiSUFNX0lERU5USVRZX0NFTlRFUlwiLFxuICAgIFFVSUNLU0lHSFQ6IFwiUVVJQ0tTSUdIVFwiLFxufTtcbmV4cG9ydCBjb25zdCBVc2VyUm9sZSA9IHtcbiAgICBBRE1JTjogXCJBRE1JTlwiLFxuICAgIEFVVEhPUjogXCJBVVRIT1JcIixcbiAgICBSRUFERVI6IFwiUkVBREVSXCIsXG4gICAgUkVTVFJJQ1RFRF9BVVRIT1I6IFwiUkVTVFJJQ1RFRF9BVVRIT1JcIixcbiAgICBSRVNUUklDVEVEX1JFQURFUjogXCJSRVNUUklDVEVEX1JFQURFUlwiLFxufTtcbmV4cG9ydCBjb25zdCBOZXR3b3JrSW50ZXJmYWNlU3RhdHVzID0ge1xuICAgIEFUVEFDSE1FTlRfRkFJTEVEX1JPTExCQUNLX0ZBSUxFRDogXCJBVFRBQ0hNRU5UX0ZBSUxFRF9ST0xMQkFDS19GQUlMRURcIixcbiAgICBBVkFJTEFCTEU6IFwiQVZBSUxBQkxFXCIsXG4gICAgQ1JFQVRJTkc6IFwiQ1JFQVRJTkdcIixcbiAgICBDUkVBVElPTl9GQUlMRUQ6IFwiQ1JFQVRJT05fRkFJTEVEXCIsXG4gICAgREVMRVRFRDogXCJERUxFVEVEXCIsXG4gICAgREVMRVRJTkc6IFwiREVMRVRJTkdcIixcbiAgICBERUxFVElPTl9GQUlMRUQ6IFwiREVMRVRJT05fRkFJTEVEXCIsXG4gICAgREVMRVRJT05fU0NIRURVTEVEOiBcIkRFTEVUSU9OX1NDSEVEVUxFRFwiLFxuICAgIFVQREFURV9GQUlMRUQ6IFwiVVBEQVRFX0ZBSUxFRFwiLFxuICAgIFVQREFUSU5HOiBcIlVQREFUSU5HXCIsXG59O1xuZXhwb3J0IGNsYXNzIERvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiRG9tYWluTm90V2hpdGVsaXN0ZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkRvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIERvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRW1iZWRkaW5nSWRlbnRpdHlUeXBlID0ge1xuICAgIEFOT05ZTU9VUzogXCJBTk9OWU1PVVNcIixcbiAgICBJQU06IFwiSUFNXCIsXG4gICAgUVVJQ0tTSUdIVDogXCJRVUlDS1NJR0hUXCIsXG59O1xuZXhwb3J0IGNvbnN0IEZvbGRlckZpbHRlckF0dHJpYnV0ZSA9IHtcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9PV05FUjogXCJESVJFQ1RfUVVJQ0tTSUdIVF9PV05FUlwiLFxuICAgIERJUkVDVF9RVUlDS1NJR0hUX1NPTEVfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfU09MRV9PV05FUlwiLFxuICAgIERJUkVDVF9RVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUjogXCJESVJFQ1RfUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVJcIixcbiAgICBGT0xERVJfTkFNRTogXCJGT0xERVJfTkFNRVwiLFxuICAgIFBBUkVOVF9GT0xERVJfQVJOOiBcIlBBUkVOVF9GT0xERVJfQVJOXCIsXG4gICAgUVVJQ0tTSUdIVF9PV05FUjogXCJRVUlDS1NJR0hUX09XTkVSXCIsXG4gICAgUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVI6IFwiUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVJcIixcbn07XG5leHBvcnQgY2xhc3MgU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlNlc3Npb25MaWZldGltZUluTWludXRlc0ludmFsaWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlNlc3Npb25MaWZldGltZUluTWludXRlc0ludmFsaWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFVuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJVbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJVbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFVuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgICAgICB0aGlzLlJlcXVlc3RJZCA9IG9wdHMuUmVxdWVzdElkO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBRdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAgICAgICB0aGlzLiRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBRdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJZGVudGl0eVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25cIjtcbiAgICAgICAgdGhpcy4kZmF1bHQgPSBcImNsaWVudFwiO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgR3JvdXBGaWx0ZXJBdHRyaWJ1dGUgPSB7XG4gICAgR1JPVVBfTkFNRTogXCJHUk9VUF9OQU1FXCIsXG59O1xuZXhwb3J0IGNvbnN0IEdyb3VwRmlsdGVyT3BlcmF0b3IgPSB7XG4gICAgU3RhcnRzV2l0aDogXCJTdGFydHNXaXRoXCIsXG59O1xuZXhwb3J0IGNsYXNzIEludmFsaWRSZXF1ZXN0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFJlcXVlc3RFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uXCI7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRSZXF1ZXN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgVG9waWNDYWxjdWxhdGVkRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkV4cHJlc3Npb24gJiYgeyBFeHByZXNzaW9uOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouU2VtYW50aWNUeXBlICYmIHsgU2VtYW50aWNUeXBlOiBTZW1hbnRpY1R5cGVGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlNlbWFudGljVHlwZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY0NvbHVtbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU2VtYW50aWNUeXBlICYmIHsgU2VtYW50aWNUeXBlOiBTZW1hbnRpY1R5cGVGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlNlbWFudGljVHlwZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY0NhdGVnb3J5RmlsdGVyQ29uc3RhbnRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljQ2F0ZWdvcnlGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNvbnN0YW50ICYmIHsgQ29uc3RhbnQ6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY1JhbmdlRmlsdGVyQ29uc3RhbnRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljRGF0ZVJhbmdlRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Db25zdGFudCAmJiB7IENvbnN0YW50OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVG9waWNTaW5ndWxhckZpbHRlckNvbnN0YW50RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY051bWVyaWNFcXVhbGl0eUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ29uc3RhbnQgJiYgeyBDb25zdGFudDogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljTnVtZXJpY1JhbmdlRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Db25zdGFudCAmJiB7IENvbnN0YW50OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVG9waWNSZWxhdGl2ZURhdGVGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNvbnN0YW50ICYmIHsgQ29uc3RhbnQ6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY0ZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ2F0ZWdvcnlGaWx0ZXIgJiYgeyBDYXRlZ29yeUZpbHRlcjogVG9waWNDYXRlZ29yeUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ2F0ZWdvcnlGaWx0ZXIpIH0pLFxuICAgIC4uLihvYmouTnVtZXJpY0VxdWFsaXR5RmlsdGVyICYmIHtcbiAgICAgICAgTnVtZXJpY0VxdWFsaXR5RmlsdGVyOiBUb3BpY051bWVyaWNFcXVhbGl0eUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyhvYmouTnVtZXJpY0VxdWFsaXR5RmlsdGVyKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLk51bWVyaWNSYW5nZUZpbHRlciAmJiB7XG4gICAgICAgIE51bWVyaWNSYW5nZUZpbHRlcjogVG9waWNOdW1lcmljUmFuZ2VGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLk51bWVyaWNSYW5nZUZpbHRlciksXG4gICAgfSksXG4gICAgLi4uKG9iai5EYXRlUmFuZ2VGaWx0ZXIgJiYgeyBEYXRlUmFuZ2VGaWx0ZXI6IFRvcGljRGF0ZVJhbmdlRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRlUmFuZ2VGaWx0ZXIpIH0pLFxuICAgIC4uLihvYmouUmVsYXRpdmVEYXRlRmlsdGVyICYmIHtcbiAgICAgICAgUmVsYXRpdmVEYXRlRmlsdGVyOiBUb3BpY1JlbGF0aXZlRGF0ZUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyhvYmouUmVsYXRpdmVEYXRlRmlsdGVyKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGFzZXRNZXRhZGF0YUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRmlsdGVycyAmJiB7IEZpbHRlcnM6IG9iai5GaWx0ZXJzLm1hcCgoaXRlbSkgPT4gVG9waWNGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpIH0pLFxuICAgIC4uLihvYmouQ29sdW1ucyAmJiB7IENvbHVtbnM6IG9iai5Db2x1bW5zLm1hcCgoaXRlbSkgPT4gVG9waWNDb2x1bW5GaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpIH0pLFxuICAgIC4uLihvYmouQ2FsY3VsYXRlZEZpZWxkcyAmJiB7XG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IG9iai5DYWxjdWxhdGVkRmllbGRzLm1hcCgoaXRlbSkgPT4gVG9waWNDYWxjdWxhdGVkRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVG9waWNEZXRhaWxzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBDcmVhdGVUb3BpY1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGFTZXRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlBoeXNpY2FsVGFibGVNYXAgJiYge1xuICAgICAgICBQaHlzaWNhbFRhYmxlTWFwOiBPYmplY3QuZW50cmllcyhvYmouUGh5c2ljYWxUYWJsZU1hcCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKChhY2Nba2V5XSA9IHZhbHVlKSwgYWNjKSwge30pLFxuICAgIH0pLFxuICAgIC4uLihvYmouTG9naWNhbFRhYmxlTWFwICYmIHtcbiAgICAgICAgTG9naWNhbFRhYmxlTWFwOiBPYmplY3QuZW50cmllcyhvYmouTG9naWNhbFRhYmxlTWFwKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoKGFjY1trZXldID0gTG9naWNhbFRhYmxlRmlsdGVyU2Vuc2l0aXZlTG9nKHZhbHVlKSksIGFjYyksIHt9KSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLlJvd0xldmVsUGVybWlzc2lvblRhZ0NvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uOiBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Sb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlQW5hbHlzaXNEZWZpbml0aW9uUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlQXNzZXRCdW5kbGVFeHBvcnRKb2JSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRG93bmxvYWRVcmwgJiYgeyBEb3dubG9hZFVybDogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlQXNzZXRCdW5kbGVJbXBvcnRKb2JSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2UgJiYge1xuICAgICAgICBBc3NldEJ1bmRsZUltcG9ydFNvdXJjZTogQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2VEZXNjcmlwdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2UpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGVzY3JpYmVEYXNoYm9hcmREZWZpbml0aW9uUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFNuYXBzaG90Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUGFyYW1ldGVycyAmJiB7IFBhcmFtZXRlcnM6IF9QYXJhbWV0ZXJzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5QYXJhbWV0ZXJzKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlRGFzaGJvYXJkU25hcHNob3RKb2JSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgU25hcHNob3RKb2JSZXN1bHRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlRGFzaGJvYXJkU25hcHNob3RKb2JSZXN1bHRSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgRGVzY3JpYmVEYXRhU2V0UmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFTZXQgJiYgeyBEYXRhU2V0OiBEYXRhU2V0RmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRhU2V0KSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlVGVtcGxhdGVEZWZpbml0aW9uUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlVG9waWNSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgU2Vzc2lvblRhZ0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVmFsdWUgJiYgeyBWYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEdlbmVyYXRlRW1iZWRVcmxGb3JBbm9ueW1vdXNVc2VyUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU2Vzc2lvblRhZ3MgJiYgeyBTZXNzaW9uVGFnczogb2JqLlNlc3Npb25UYWdzLm1hcCgoaXRlbSkgPT4gU2Vzc2lvblRhZ0ZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBHZW5lcmF0ZUVtYmVkVXJsRm9yQW5vbnltb3VzVXNlclJlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5FbWJlZFVybCAmJiB7IEVtYmVkVXJsOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgR2VuZXJhdGVFbWJlZFVybEZvclJlZ2lzdGVyZWRVc2VyUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkVtYmVkVXJsICYmIHsgRW1iZWRVcmw6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBHZXREYXNoYm9hcmRFbWJlZFVybFJlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5FbWJlZFVybCAmJiB7IEVtYmVkVXJsOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgR2V0U2Vzc2lvbkVtYmVkVXJsUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkVtYmVkVXJsICYmIHsgRW1iZWRVcmw6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbiIsImltcG9ydCB7IGF3c0V4cGVjdFVuaW9uIGFzIF9fZXhwZWN0VW5pb24gfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgcmVxdWVzdEJ1aWxkZXIgYXMgcmIgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBfanNvbiwgY29sbGVjdEJvZHksIGRlY29yYXRlU2VydmljZUV4Y2VwdGlvbiBhcyBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbiwgZXhwZWN0Qm9vbGVhbiBhcyBfX2V4cGVjdEJvb2xlYW4sIGV4cGVjdEludDMyIGFzIF9fZXhwZWN0SW50MzIsIGV4cGVjdExvbmcgYXMgX19leHBlY3RMb25nLCBleHBlY3ROb25OdWxsIGFzIF9fZXhwZWN0Tm9uTnVsbCwgZXhwZWN0TnVtYmVyIGFzIF9fZXhwZWN0TnVtYmVyLCBleHBlY3RPYmplY3QgYXMgX19leHBlY3RPYmplY3QsIGV4cGVjdFN0cmluZyBhcyBfX2V4cGVjdFN0cmluZywgbGltaXRlZFBhcnNlRG91YmxlIGFzIF9fbGltaXRlZFBhcnNlRG91YmxlLCBtYXAsIHBhcnNlRXBvY2hUaW1lc3RhbXAgYXMgX19wYXJzZUVwb2NoVGltZXN0YW1wLCBzZXJpYWxpemVGbG9hdCBhcyBfX3NlcmlhbGl6ZUZsb2F0LCB0YWtlLCB3aXRoQmFzZUV4Y2VwdGlvbiwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBBY2Nlc3NEZW5pZWRFeGNlcHRpb24sIH0gZnJvbSBcIi4uL21vZGVscy9tb2RlbHNfMFwiO1xuaW1wb3J0IHsgQ29uY3VycmVudFVwZGF0aW5nRXhjZXB0aW9uLCBDb25mbGljdEV4Y2VwdGlvbiwgSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uLCBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24sIExpbWl0RXhjZWVkZWRFeGNlcHRpb24sIFByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvbiwgUmVzb3VyY2VFeGlzdHNFeGNlcHRpb24sIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24sIFJlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb24sIFRocm90dGxpbmdFeGNlcHRpb24sIFRyYW5zZm9ybU9wZXJhdGlvbiwgVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvbiwgfSBmcm9tIFwiLi4vbW9kZWxzL21vZGVsc18yXCI7XG5pbXBvcnQgeyBEb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvbiwgSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uLCBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uLCBJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiwgUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvbiwgU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvbiwgVW5zdXBwb3J0ZWRQcmljaW5nUGxhbkV4Y2VwdGlvbiwgfSBmcm9tIFwiLi4vbW9kZWxzL21vZGVsc18zXCI7XG5pbXBvcnQgeyBRdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi4vbW9kZWxzL1F1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uXCI7XG5leHBvcnQgY29uc3Qgc2VfQ2FuY2VsSW5nZXN0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L2luZ2VzdGlvbnMve0luZ2VzdGlvbklkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJJbmdlc3Rpb25JZFwiLCAoKSA9PiBpbnB1dC5Jbmdlc3Rpb25JZCwgXCJ7SW5nZXN0aW9uSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUFjY291bnRDdXN0b21pemF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2N1c3RvbWl6YXRpb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19uXTogWywgaW5wdXRbX05dXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBY2NvdW50Q3VzdG9taXphdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBUYWdzOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUFjY291bnRTdWJzY3JpcHRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudC97QXdzQWNjb3VudElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBY2NvdW50TmFtZTogW10sXG4gICAgICAgIEFjdGl2ZURpcmVjdG9yeU5hbWU6IFtdLFxuICAgICAgICBBZG1pbkdyb3VwOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIEF1dGhlbnRpY2F0aW9uTWV0aG9kOiBbXSxcbiAgICAgICAgQXV0aG9yR3JvdXA6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgQ29udGFjdE51bWJlcjogW10sXG4gICAgICAgIERpcmVjdG9yeUlkOiBbXSxcbiAgICAgICAgRWRpdGlvbjogW10sXG4gICAgICAgIEVtYWlsQWRkcmVzczogW10sXG4gICAgICAgIEZpcnN0TmFtZTogW10sXG4gICAgICAgIExhc3ROYW1lOiBbXSxcbiAgICAgICAgTm90aWZpY2F0aW9uRW1haWw6IFtdLFxuICAgICAgICBSZWFkZXJHcm91cDogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSZWFsbTogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUFuYWx5c2lzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2FuYWx5c2VzL3tBbmFseXNpc0lkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbmFseXNpc0lkXCIsICgpID0+IGlucHV0LkFuYWx5c2lzSWQsIFwie0FuYWx5c2lzSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEZWZpbml0aW9uOiAoXykgPT4gc2VfQW5hbHlzaXNEZWZpbml0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBGb2xkZXJBcm5zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBQYXJhbWV0ZXJzOiAoXykgPT4gc2VfX1BhcmFtZXRlcnMoXywgY29udGV4dCksXG4gICAgICAgIFBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFNvdXJjZUVudGl0eTogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBUYWdzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRoZW1lQXJuOiBbXSxcbiAgICAgICAgVmFsaWRhdGlvblN0cmF0ZWd5OiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZURhc2hib2FyZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGFzaGJvYXJkUHVibGlzaE9wdGlvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgRGVmaW5pdGlvbjogKF8pID0+IHNlX0Rhc2hib2FyZFZlcnNpb25EZWZpbml0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBGb2xkZXJBcm5zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIExpbmtFbnRpdGllczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBMaW5rU2hhcmluZ0NvbmZpZ3VyYXRpb246IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBhcmFtZXRlcnM6IChfKSA9PiBzZV9fUGFyYW1ldGVycyhfLCBjb250ZXh0KSxcbiAgICAgICAgUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgU291cmNlRW50aXR5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVGhlbWVBcm46IFtdLFxuICAgICAgICBWYWxpZGF0aW9uU3RyYXRlZ3k6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVmVyc2lvbkRlc2NyaXB0aW9uOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlRGF0YVNldENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNldHNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uR3JvdXBzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIENvbHVtbkxldmVsUGVybWlzc2lvblJ1bGVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIERhdGFTZXRJZDogW10sXG4gICAgICAgIERhdGFTZXRVc2FnZUNvbmZpZ3VyYXRpb246IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgRGF0YXNldFBhcmFtZXRlcnM6IChfKSA9PiBzZV9EYXRhc2V0UGFyYW1ldGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRmllbGRGb2xkZXJzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIEZvbGRlckFybnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgSW1wb3J0TW9kZTogW10sXG4gICAgICAgIExvZ2ljYWxUYWJsZU1hcDogKF8pID0+IHNlX0xvZ2ljYWxUYWJsZU1hcChfLCBjb250ZXh0KSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFBoeXNpY2FsVGFibGVNYXA6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUm93TGV2ZWxQZXJtaXNzaW9uRGF0YVNldDogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlRGF0YVNvdXJjZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNvdXJjZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3JlZGVudGlhbHM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgRGF0YVNvdXJjZUlkOiBbXSxcbiAgICAgICAgRGF0YVNvdXJjZVBhcmFtZXRlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgRm9sZGVyQXJuczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgU3NsUHJvcGVydGllczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBUYWdzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFR5cGU6IFtdLFxuICAgICAgICBWcGNDb25uZWN0aW9uUHJvcGVydGllczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVGb2xkZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVycy97Rm9sZGVySWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkZvbGRlcklkXCIsICgpID0+IGlucHV0LkZvbGRlcklkLCBcIntGb2xkZXJJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEZvbGRlclR5cGU6IFtdLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGFyZW50Rm9sZGVyQXJuOiBbXSxcbiAgICAgICAgUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgU2hhcmluZ01vZGVsOiBbXSxcbiAgICAgICAgVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVGb2xkZXJNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVycy97Rm9sZGVySWR9L21lbWJlcnMve01lbWJlclR5cGV9L3tNZW1iZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTWVtYmVySWRcIiwgKCkgPT4gaW5wdXQuTWVtYmVySWQsIFwie01lbWJlcklkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTWVtYmVyVHlwZVwiLCAoKSA9PiBpbnB1dC5NZW1iZXJUeXBlLCBcIntNZW1iZXJUeXBlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVHcm91cENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L2dyb3Vwc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEZXNjcmlwdGlvbjogW10sXG4gICAgICAgIEdyb3VwTmFtZTogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUdyb3VwTWVtYmVyc2hpcENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzL3tHcm91cE5hbWV9L21lbWJlcnMve01lbWJlck5hbWV9XCIpO1xuICAgIGIucChcIk1lbWJlck5hbWVcIiwgKCkgPT4gaW5wdXQuTWVtYmVyTmFtZSwgXCJ7TWVtYmVyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkdyb3VwTmFtZVwiLCAoKSA9PiBpbnB1dC5Hcm91cE5hbWUsIFwie0dyb3VwTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlSUFNUG9saWN5QXNzaWdubWVudENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L2lhbS1wb2xpY3ktYXNzaWdubWVudHNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQXNzaWdubWVudE5hbWU6IFtdLFxuICAgICAgICBBc3NpZ25tZW50U3RhdHVzOiBbXSxcbiAgICAgICAgSWRlbnRpdGllczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBQb2xpY3lBcm46IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVJbmdlc3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L2luZ2VzdGlvbnMve0luZ2VzdGlvbklkfVwiKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJJbmdlc3Rpb25JZFwiLCAoKSA9PiBpbnB1dC5Jbmdlc3Rpb25JZCwgXCJ7SW5nZXN0aW9uSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBJbmdlc3Rpb25UeXBlOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVOYW1lc3BhY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgSWRlbnRpdHlTdG9yZTogW10sXG4gICAgICAgIE5hbWVzcGFjZTogW10sXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9yZWZyZXNoLXNjaGVkdWxlc1wiKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBTY2hlZHVsZTogKF8pID0+IHNlX1JlZnJlc2hTY2hlZHVsZShfLCBjb250ZXh0KSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlUm9sZU1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3JvbGVzL3tSb2xlfS9tZW1iZXJzL3tNZW1iZXJOYW1lfVwiKTtcbiAgICBiLnAoXCJNZW1iZXJOYW1lXCIsICgpID0+IGlucHV0Lk1lbWJlck5hbWUsIFwie01lbWJlck5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJSb2xlXCIsICgpID0+IGlucHV0LlJvbGUsIFwie1JvbGV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmluaXRpb246IChfKSA9PiBzZV9UZW1wbGF0ZVZlcnNpb25EZWZpbml0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgU291cmNlRW50aXR5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVmFsaWRhdGlvblN0cmF0ZWd5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFZlcnNpb25EZXNjcmlwdGlvbjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVRlbXBsYXRlQWxpYXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGVtcGxhdGVzL3tUZW1wbGF0ZUlkfS9hbGlhc2VzL3tBbGlhc05hbWV9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFsaWFzTmFtZVwiLCAoKSA9PiBpbnB1dC5BbGlhc05hbWUsIFwie0FsaWFzTmFtZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFRlbXBsYXRlVmVyc2lvbk51bWJlcjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RoZW1lcy97VGhlbWVJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGhlbWVJZFwiLCAoKSA9PiBpbnB1dC5UaGVtZUlkLCBcIntUaGVtZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmFzZVRoZW1lSWQ6IFtdLFxuICAgICAgICBDb25maWd1cmF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBUYWdzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFZlcnNpb25EZXNjcmlwdGlvbjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVRoZW1lQWxpYXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfS9hbGlhc2VzL3tBbGlhc05hbWV9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRoZW1lSWRcIiwgKCkgPT4gaW5wdXQuVGhlbWVJZCwgXCJ7VGhlbWVJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFsaWFzTmFtZVwiLCAoKSA9PiBpbnB1dC5BbGlhc05hbWUsIFwie0FsaWFzTmFtZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFRoZW1lVmVyc2lvbk51bWJlcjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVRvcGljQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RvcGljc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBUYWdzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRvcGljOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRvcGljSWQ6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVUb3BpY1JlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L3NjaGVkdWxlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUb3BpY0lkXCIsICgpID0+IGlucHV0LlRvcGljSWQsIFwie1RvcGljSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEYXRhc2V0QXJuOiBbXSxcbiAgICAgICAgRGF0YXNldE5hbWU6IFtdLFxuICAgICAgICBSZWZyZXNoU2NoZWR1bGU6IChfKSA9PiBzZV9Ub3BpY1JlZnJlc2hTY2hlZHVsZShfLCBjb250ZXh0KSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlVlBDQ29ubmVjdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS92cGMtY29ubmVjdGlvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRG5zUmVzb2x2ZXJzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBSb2xlQXJuOiBbXSxcbiAgICAgICAgU2VjdXJpdHlHcm91cElkczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTdWJuZXRJZHM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBWUENDb25uZWN0aW9uSWQ6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVBY2NvdW50Q3VzdG9taXphdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2N1c3RvbWl6YXRpb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19uXTogWywgaW5wdXRbX05dXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUFjY291bnRTdWJzY3JpcHRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50L3tBd3NBY2NvdW50SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQW5hbHlzaXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9hbmFseXNlcy97QW5hbHlzaXNJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQW5hbHlzaXNJZFwiLCAoKSA9PiBpbnB1dC5BbmFseXNpc0lkLCBcIntBbmFseXNpc0lkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX3J3aWRdOiBbKCkgPT4gaW5wdXQuUmVjb3ZlcnlXaW5kb3dJbkRheXMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX1JXSURdLnRvU3RyaW5nKCldLFxuICAgICAgICBbX2Zkd3JdOiBbKCkgPT4gaW5wdXQuRm9yY2VEZWxldGVXaXRob3V0UmVjb3ZlcnkgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX0ZEV1JdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW192bl06IFsoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19WTl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVEYXRhU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlRGF0YVNldFJlZnJlc2hQcm9wZXJ0aWVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3JlZnJlc2gtcHJvcGVydGllc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZURhdGFTb3VyY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNvdXJjZXMve0RhdGFTb3VyY2VJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNvdXJjZUlkXCIsICgpID0+IGlucHV0LkRhdGFTb3VyY2VJZCwgXCJ7RGF0YVNvdXJjZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVGb2xkZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9mb2xkZXJzL3tGb2xkZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVGb2xkZXJNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVycy97Rm9sZGVySWR9L21lbWJlcnMve01lbWJlclR5cGV9L3tNZW1iZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTWVtYmVySWRcIiwgKCkgPT4gaW5wdXQuTWVtYmVySWQsIFwie01lbWJlcklkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTWVtYmVyVHlwZVwiLCAoKSA9PiBpbnB1dC5NZW1iZXJUeXBlLCBcIntNZW1iZXJUeXBlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVHcm91cENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzL3tHcm91cE5hbWV9XCIpO1xuICAgIGIucChcIkdyb3VwTmFtZVwiLCAoKSA9PiBpbnB1dC5Hcm91cE5hbWUsIFwie0dyb3VwTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlR3JvdXBNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9ncm91cHMve0dyb3VwTmFtZX0vbWVtYmVycy97TWVtYmVyTmFtZX1cIik7XG4gICAgYi5wKFwiTWVtYmVyTmFtZVwiLCAoKSA9PiBpbnB1dC5NZW1iZXJOYW1lLCBcIntNZW1iZXJOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiR3JvdXBOYW1lXCIsICgpID0+IGlucHV0Lkdyb3VwTmFtZSwgXCJ7R3JvdXBOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlL3tOYW1lc3BhY2V9L2lhbS1wb2xpY3ktYXNzaWdubWVudHMve0Fzc2lnbm1lbnROYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBc3NpZ25tZW50TmFtZVwiLCAoKSA9PiBpbnB1dC5Bc3NpZ25tZW50TmFtZSwgXCJ7QXNzaWdubWVudE5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUlkZW50aXR5UHJvcGFnYXRpb25Db25maWdDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9pZGVudGl0eS1wcm9wYWdhdGlvbi1jb25maWcve1NlcnZpY2V9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlNlcnZpY2VcIiwgKCkgPT4gaW5wdXQuU2VydmljZSwgXCJ7U2VydmljZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlTmFtZXNwYWNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVJlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9yZWZyZXNoLXNjaGVkdWxlcy97U2NoZWR1bGVJZH1cIik7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiU2NoZWR1bGVJZFwiLCAoKSA9PiBpbnB1dC5TY2hlZHVsZUlkLCBcIntTY2hlZHVsZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVSb2xlQ3VzdG9tUGVybWlzc2lvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vcm9sZXMve1JvbGV9L2N1c3RvbS1wZXJtaXNzaW9uXCIpO1xuICAgIGIucChcIlJvbGVcIiwgKCkgPT4gaW5wdXQuUm9sZSwgXCJ7Um9sZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlUm9sZU1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3JvbGVzL3tSb2xlfS9tZW1iZXJzL3tNZW1iZXJOYW1lfVwiKTtcbiAgICBiLnAoXCJNZW1iZXJOYW1lXCIsICgpID0+IGlucHV0Lk1lbWJlck5hbWUsIFwie01lbWJlck5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJSb2xlXCIsICgpID0+IGlucHV0LlJvbGUsIFwie1JvbGV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGVtcGxhdGVzL3tUZW1wbGF0ZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUZW1wbGF0ZUlkXCIsICgpID0+IGlucHV0LlRlbXBsYXRlSWQsIFwie1RlbXBsYXRlSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfdm5dOiBbKCkgPT4gaW5wdXQuVmVyc2lvbk51bWJlciAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVk5dLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVGVtcGxhdGVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH0vYWxpYXNlcy97QWxpYXNOYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUZW1wbGF0ZUlkXCIsICgpID0+IGlucHV0LlRlbXBsYXRlSWQsIFwie1RlbXBsYXRlSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbGlhc05hbWVcIiwgKCkgPT4gaW5wdXQuQWxpYXNOYW1lLCBcIntBbGlhc05hbWV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfdm5dOiBbKCkgPT4gaW5wdXQuVmVyc2lvbk51bWJlciAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVk5dLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVGhlbWVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RoZW1lcy97VGhlbWVJZH0vYWxpYXNlcy97QWxpYXNOYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbGlhc05hbWVcIiwgKCkgPT4gaW5wdXQuQWxpYXNOYW1lLCBcIntBbGlhc05hbWV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRvcGljQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUb3BpY0lkXCIsICgpID0+IGlucHV0LlRvcGljSWQsIFwie1RvcGljSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRvcGljUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfS9zY2hlZHVsZXMve0RhdGFzZXRJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YXNldElkXCIsICgpID0+IGlucHV0LkRhdGFzZXRJZCwgXCJ7RGF0YXNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVVc2VyQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS91c2Vycy97VXNlck5hbWV9XCIpO1xuICAgIGIucChcIlVzZXJOYW1lXCIsICgpID0+IGlucHV0LlVzZXJOYW1lLCBcIntVc2VyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVXNlckJ5UHJpbmNpcGFsSWRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXItcHJpbmNpcGFscy97UHJpbmNpcGFsSWR9XCIpO1xuICAgIGIucChcIlByaW5jaXBhbElkXCIsICgpID0+IGlucHV0LlByaW5jaXBhbElkLCBcIntQcmluY2lwYWxJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVlBDQ29ubmVjdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3ZwYy1jb25uZWN0aW9ucy97VlBDQ29ubmVjdGlvbklkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJWUENDb25uZWN0aW9uSWRcIiwgKCkgPT4gaW5wdXQuVlBDQ29ubmVjdGlvbklkLCBcIntWUENDb25uZWN0aW9uSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQWNjb3VudEN1c3RvbWl6YXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9jdXN0b21pemF0aW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbl06IFssIGlucHV0W19OXV0sXG4gICAgICAgIFtfcl06IFsoKSA9PiBpbnB1dC5SZXNvbHZlZCAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUFjY291bnRTZXR0aW5nc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3NldHRpbmdzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBY2NvdW50U3Vic2NyaXB0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudC97QXdzQWNjb3VudElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQW5hbHlzaXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9hbmFseXNlcy97QW5hbHlzaXNJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQW5hbHlzaXNJZFwiLCAoKSA9PiBpbnB1dC5BbmFseXNpc0lkLCBcIntBbmFseXNpc0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUFuYWx5c2lzRGVmaW5pdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2FuYWx5c2VzL3tBbmFseXNpc0lkfS9kZWZpbml0aW9uXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFuYWx5c2lzSWRcIiwgKCkgPT4gaW5wdXQuQW5hbHlzaXNJZCwgXCJ7QW5hbHlzaXNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBbmFseXNpc1Blcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYW5hbHlzZXMve0FuYWx5c2lzSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFuYWx5c2lzSWRcIiwgKCkgPT4gaW5wdXQuQW5hbHlzaXNJZCwgXCJ7QW5hbHlzaXNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBc3NldEJ1bmRsZUV4cG9ydEpvYkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Fzc2V0LWJ1bmRsZS1leHBvcnQtam9icy97QXNzZXRCdW5kbGVFeHBvcnRKb2JJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXNzZXRCdW5kbGVFeHBvcnRKb2JJZFwiLCAoKSA9PiBpbnB1dC5Bc3NldEJ1bmRsZUV4cG9ydEpvYklkLCBcIntBc3NldEJ1bmRsZUV4cG9ydEpvYklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUFzc2V0QnVuZGxlSW1wb3J0Sm9iQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYXNzZXQtYnVuZGxlLWltcG9ydC1qb2JzL3tBc3NldEJ1bmRsZUltcG9ydEpvYklkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBc3NldEJ1bmRsZUltcG9ydEpvYklkXCIsICgpID0+IGlucHV0LkFzc2V0QnVuZGxlSW1wb3J0Sm9iSWQsIFwie0Fzc2V0QnVuZGxlSW1wb3J0Sm9iSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW192bl06IFsoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19WTl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfYW5dOiBbLCBpbnB1dFtfQU5dXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRGFzaGJvYXJkRGVmaW5pdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfS9kZWZpbml0aW9uXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW192bl06IFsoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19WTl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfYW5dOiBbLCBpbnB1dFtfQU5dXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRGFzaGJvYXJkUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhc2hib2FyZFNuYXBzaG90Sm9iQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9L3NuYXBzaG90LWpvYnMve1NuYXBzaG90Sm9iSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlNuYXBzaG90Sm9iSWRcIiwgKCkgPT4gaW5wdXQuU25hcHNob3RKb2JJZCwgXCJ7U25hcHNob3RKb2JJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVEYXNoYm9hcmRTbmFwc2hvdEpvYlJlc3VsdENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfS9zbmFwc2hvdC1qb2JzL3tTbmFwc2hvdEpvYklkfS9yZXN1bHRcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiU25hcHNob3RKb2JJZFwiLCAoKSA9PiBpbnB1dC5TbmFwc2hvdEpvYklkLCBcIntTbmFwc2hvdEpvYklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhdGFTZXRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNldHMve0RhdGFTZXRJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhdGFTZXRQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9wZXJtaXNzaW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRGF0YVNldFJlZnJlc2hQcm9wZXJ0aWVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3JlZnJlc2gtcHJvcGVydGllc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRGF0YVNvdXJjZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc291cmNlcy97RGF0YVNvdXJjZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU291cmNlSWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNvdXJjZUlkLCBcIntEYXRhU291cmNlSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRGF0YVNvdXJjZVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zb3VyY2VzL3tEYXRhU291cmNlSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFTb3VyY2VJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU291cmNlSWQsIFwie0RhdGFTb3VyY2VJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVGb2xkZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9mb2xkZXJzL3tGb2xkZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUZvbGRlclBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVycy97Rm9sZGVySWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkZvbGRlcklkXCIsICgpID0+IGlucHV0LkZvbGRlcklkLCBcIntGb2xkZXJJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19uXTogWywgaW5wdXRbX05dXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRm9sZGVyUmVzb2x2ZWRQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2ZvbGRlcnMve0ZvbGRlcklkfS9yZXNvbHZlZC1wZXJtaXNzaW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJGb2xkZXJJZFwiLCAoKSA9PiBpbnB1dC5Gb2xkZXJJZCwgXCJ7Rm9sZGVySWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbl06IFssIGlucHV0W19OXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUdyb3VwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9ncm91cHMve0dyb3VwTmFtZX1cIik7XG4gICAgYi5wKFwiR3JvdXBOYW1lXCIsICgpID0+IGlucHV0Lkdyb3VwTmFtZSwgXCJ7R3JvdXBOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUdyb3VwTWVtYmVyc2hpcENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzL3tHcm91cE5hbWV9L21lbWJlcnMve01lbWJlck5hbWV9XCIpO1xuICAgIGIucChcIk1lbWJlck5hbWVcIiwgKCkgPT4gaW5wdXQuTWVtYmVyTmFtZSwgXCJ7TWVtYmVyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkdyb3VwTmFtZVwiLCAoKSA9PiBpbnB1dC5Hcm91cE5hbWUsIFwie0dyb3VwTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9pYW0tcG9saWN5LWFzc2lnbm1lbnRzL3tBc3NpZ25tZW50TmFtZX1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXNzaWdubWVudE5hbWVcIiwgKCkgPT4gaW5wdXQuQXNzaWdubWVudE5hbWUsIFwie0Fzc2lnbm1lbnROYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUluZ2VzdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9pbmdlc3Rpb25zL3tJbmdlc3Rpb25JZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiSW5nZXN0aW9uSWRcIiwgKCkgPT4gaW5wdXQuSW5nZXN0aW9uSWQsIFwie0luZ2VzdGlvbklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUlwUmVzdHJpY3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9pcC1yZXN0cmljdGlvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlTmFtZXNwYWNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3JlZnJlc2gtc2NoZWR1bGVzL3tTY2hlZHVsZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJTY2hlZHVsZUlkXCIsICgpID0+IGlucHV0LlNjaGVkdWxlSWQsIFwie1NjaGVkdWxlSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlUm9sZUN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3JvbGVzL3tSb2xlfS9jdXN0b20tcGVybWlzc2lvblwiKTtcbiAgICBiLnAoXCJSb2xlXCIsICgpID0+IGlucHV0LlJvbGUsIFwie1JvbGV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW192bl06IFsoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19WTl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfYW5dOiBbLCBpbnB1dFtfQU5dXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlVGVtcGxhdGVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH0vYWxpYXNlcy97QWxpYXNOYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUZW1wbGF0ZUlkXCIsICgpID0+IGlucHV0LlRlbXBsYXRlSWQsIFwie1RlbXBsYXRlSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbGlhc05hbWVcIiwgKCkgPT4gaW5wdXQuQWxpYXNOYW1lLCBcIntBbGlhc05hbWV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlVGVtcGxhdGVEZWZpbml0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGVtcGxhdGVzL3tUZW1wbGF0ZUlkfS9kZWZpbml0aW9uXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW192bl06IFsoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19WTl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfYW5dOiBbLCBpbnB1dFtfQU5dXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlVGVtcGxhdGVQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGVtcGxhdGVJZFwiLCAoKSA9PiBpbnB1dC5UZW1wbGF0ZUlkLCBcIntUZW1wbGF0ZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfdm5dOiBbKCkgPT4gaW5wdXQuVmVyc2lvbk51bWJlciAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVk5dLnRvU3RyaW5nKCldLFxuICAgICAgICBbX2FuXTogWywgaW5wdXRbX0FOXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRoZW1lQWxpYXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9L2FsaWFzZXMve0FsaWFzTmFtZX1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGhlbWVJZFwiLCAoKSA9PiBpbnB1dC5UaGVtZUlkLCBcIntUaGVtZUlkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQWxpYXNOYW1lXCIsICgpID0+IGlucHV0LkFsaWFzTmFtZSwgXCJ7QWxpYXNOYW1lfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRoZW1lUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRoZW1lSWRcIiwgKCkgPT4gaW5wdXQuVGhlbWVJZCwgXCJ7VGhlbWVJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVUb3BpY0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RvcGljcy97VG9waWNJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRvcGljUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRvcGljSWRcIiwgKCkgPT4gaW5wdXQuVG9waWNJZCwgXCJ7VG9waWNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVUb3BpY1JlZnJlc2hDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L3JlZnJlc2gve1JlZnJlc2hJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiUmVmcmVzaElkXCIsICgpID0+IGlucHV0LlJlZnJlc2hJZCwgXCJ7UmVmcmVzaElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRvcGljUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfS9zY2hlZHVsZXMve0RhdGFzZXRJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YXNldElkXCIsICgpID0+IGlucHV0LkRhdGFzZXRJZCwgXCJ7RGF0YXNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVVzZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXJzL3tVc2VyTmFtZX1cIik7XG4gICAgYi5wKFwiVXNlck5hbWVcIiwgKCkgPT4gaW5wdXQuVXNlck5hbWUsIFwie1VzZXJOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVZQQ0Nvbm5lY3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS92cGMtY29ubmVjdGlvbnMve1ZQQ0Nvbm5lY3Rpb25JZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVlBDQ29ubmVjdGlvbklkXCIsICgpID0+IGlucHV0LlZQQ0Nvbm5lY3Rpb25JZCwgXCJ7VlBDQ29ubmVjdGlvbklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZW5lcmF0ZUVtYmVkVXJsRm9yQW5vbnltb3VzVXNlckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9lbWJlZC11cmwvYW5vbnltb3VzLXVzZXJcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWxsb3dlZERvbWFpbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgQXV0aG9yaXplZFJlc291cmNlQXJuczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBFeHBlcmllbmNlQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBOYW1lc3BhY2U6IFtdLFxuICAgICAgICBTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXM6IFtdLFxuICAgICAgICBTZXNzaW9uVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZW5lcmF0ZUVtYmVkVXJsRm9yUmVnaXN0ZXJlZFVzZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZW1iZWQtdXJsL3JlZ2lzdGVyZWQtdXNlclwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBbGxvd2VkRG9tYWluczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBFeHBlcmllbmNlQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXM6IFtdLFxuICAgICAgICBVc2VyQXJuOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0RGFzaGJvYXJkRW1iZWRVcmxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vZW1iZWQtdXJsXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19jdF06IFssIF9fZXhwZWN0Tm9uTnVsbChpbnB1dFtfSVRdLCBgSWRlbnRpdHlUeXBlYCldLFxuICAgICAgICBbX3NsXTogWygpID0+IGlucHV0LlNlc3Npb25MaWZldGltZUluTWludXRlcyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfU0xJTV0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfdXJkXTogWygpID0+IGlucHV0LlVuZG9SZWRvRGlzYWJsZWQgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX1VSRF0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfcmRdOiBbKCkgPT4gaW5wdXQuUmVzZXREaXNhYmxlZCAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfUkRdLnRvU3RyaW5nKCldLFxuICAgICAgICBbX3NwZV06IFsoKSA9PiBpbnB1dC5TdGF0ZVBlcnNpc3RlbmNlRW5hYmxlZCAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfU1BFXS50b1N0cmluZygpXSxcbiAgICAgICAgW191YV06IFssIGlucHV0W19VQV1dLFxuICAgICAgICBbX25dOiBbLCBpbnB1dFtfTl1dLFxuICAgICAgICBbX2FkaV06IFsoKSA9PiBpbnB1dC5BZGRpdGlvbmFsRGFzaGJvYXJkSWRzICE9PSB2b2lkIDAsICgpID0+IChpbnB1dFtfQURJXSB8fCBbXSkubWFwKChfZW50cnkpID0+IF9lbnRyeSldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0U2Vzc2lvbkVtYmVkVXJsQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vc2Vzc2lvbi1lbWJlZC11cmxcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX2VwXTogWywgaW5wdXRbX0VQXV0sXG4gICAgICAgIFtfc2xdOiBbKCkgPT4gaW5wdXQuU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19TTElNXS50b1N0cmluZygpXSxcbiAgICAgICAgW191YV06IFssIGlucHV0W19VQV1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEFuYWx5c2VzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYW5hbHlzZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEFzc2V0QnVuZGxlRXhwb3J0Sm9ic0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Fzc2V0LWJ1bmRsZS1leHBvcnQtam9ic1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0QXNzZXRCdW5kbGVJbXBvcnRKb2JzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYXNzZXQtYnVuZGxlLWltcG9ydC1qb2JzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3REYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0RGFzaGJvYXJkVmVyc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vdmVyc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdERhdGFTZXRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3REYXRhU291cmNlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc291cmNlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0Rm9sZGVyTWVtYmVyc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2ZvbGRlcnMve0ZvbGRlcklkfS9tZW1iZXJzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkZvbGRlcklkXCIsICgpID0+IGlucHV0LkZvbGRlcklkLCBcIntGb2xkZXJJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RGb2xkZXJzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVyc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0R3JvdXBNZW1iZXJzaGlwc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzL3tHcm91cE5hbWV9L21lbWJlcnNcIik7XG4gICAgYi5wKFwiR3JvdXBOYW1lXCIsICgpID0+IGlucHV0Lkdyb3VwTmFtZSwgXCJ7R3JvdXBOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEdyb3Vwc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RJQU1Qb2xpY3lBc3NpZ25tZW50c0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vdjIvaWFtLXBvbGljeS1hc3NpZ25tZW50c1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfYXNdOiBbLCBpbnB1dFtfQVNdXSxcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RJQU1Qb2xpY3lBc3NpZ25tZW50c0ZvclVzZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXJzL3tVc2VyTmFtZX0vaWFtLXBvbGljeS1hc3NpZ25tZW50c1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJVc2VyTmFtZVwiLCAoKSA9PiBpbnB1dC5Vc2VyTmFtZSwgXCJ7VXNlck5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0SWRlbnRpdHlQcm9wYWdhdGlvbkNvbmZpZ3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9pZGVudGl0eS1wcm9wYWdhdGlvbi1jb25maWdcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEluZ2VzdGlvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNldHMve0RhdGFTZXRJZH0vaW5nZXN0aW9uc1wiKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0TmFtZXNwYWNlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFJlZnJlc2hTY2hlZHVsZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNldHMve0RhdGFTZXRJZH0vcmVmcmVzaC1zY2hlZHVsZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0Um9sZU1lbWJlcnNoaXBzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9yb2xlcy97Um9sZX0vbWVtYmVyc1wiKTtcbiAgICBiLnAoXCJSb2xlXCIsICgpID0+IGlucHV0LlJvbGUsIFwie1JvbGV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VGFnc0ZvclJlc291cmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvcmVzb3VyY2VzL3tSZXNvdXJjZUFybn0vdGFnc1wiKTtcbiAgICBiLnAoXCJSZXNvdXJjZUFyblwiLCAoKSA9PiBpbnB1dC5SZXNvdXJjZUFybiwgXCJ7UmVzb3VyY2VBcm59XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUZW1wbGF0ZUFsaWFzZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9L2FsaWFzZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGVtcGxhdGVJZFwiLCAoKSA9PiBpbnB1dC5UZW1wbGF0ZUlkLCBcIntUZW1wbGF0ZUlkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJfXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUZW1wbGF0ZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJfXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUZW1wbGF0ZVZlcnNpb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGVtcGxhdGVzL3tUZW1wbGF0ZUlkfS92ZXJzaW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUZW1wbGF0ZUlkXCIsICgpID0+IGlucHV0LlRlbXBsYXRlSWQsIFwie1RlbXBsYXRlSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VGhlbWVBbGlhc2VzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfS9hbGlhc2VzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRoZW1lSWRcIiwgKCkgPT4gaW5wdXQuVGhlbWVJZCwgXCJ7VGhlbWVJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yX106IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VGhlbWVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICAgICAgW190XTogWywgaW5wdXRbX1RdXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUaGVtZVZlcnNpb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfS92ZXJzaW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VG9waWNSZWZyZXNoU2NoZWR1bGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfS9zY2hlZHVsZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VG9waWNzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RVc2VyR3JvdXBzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS91c2Vycy97VXNlck5hbWV9L2dyb3Vwc1wiKTtcbiAgICBiLnAoXCJVc2VyTmFtZVwiLCAoKSA9PiBpbnB1dC5Vc2VyTmFtZSwgXCJ7VXNlck5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VXNlcnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXJzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RWUENDb25uZWN0aW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3ZwYy1jb25uZWN0aW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXREYXRhU2V0UmVmcmVzaFByb3BlcnRpZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3JlZnJlc2gtcHJvcGVydGllc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEYXRhU2V0UmVmcmVzaFByb3BlcnRpZXM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9SZWdpc3RlclVzZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS91c2Vyc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDdXN0b21GZWRlcmF0aW9uUHJvdmlkZXJVcmw6IFtdLFxuICAgICAgICBDdXN0b21QZXJtaXNzaW9uc05hbWU6IFtdLFxuICAgICAgICBFbWFpbDogW10sXG4gICAgICAgIEV4dGVybmFsTG9naW5GZWRlcmF0aW9uUHJvdmlkZXJUeXBlOiBbXSxcbiAgICAgICAgRXh0ZXJuYWxMb2dpbklkOiBbXSxcbiAgICAgICAgSWFtQXJuOiBbXSxcbiAgICAgICAgSWRlbnRpdHlUeXBlOiBbXSxcbiAgICAgICAgU2Vzc2lvbk5hbWU6IFtdLFxuICAgICAgICBUYWdzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFVzZXJOYW1lOiBbXSxcbiAgICAgICAgVXNlclJvbGU6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9SZXN0b3JlQW5hbHlzaXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9yZXN0b3JlL2FuYWx5c2VzL3tBbmFseXNpc0lkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbmFseXNpc0lkXCIsICgpID0+IGlucHV0LkFuYWx5c2lzSWQsIFwie0FuYWx5c2lzSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZWFyY2hBbmFseXNlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9zZWFyY2gvYW5hbHlzZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmlsdGVyczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBNYXhSZXN1bHRzOiBbXSxcbiAgICAgICAgTmV4dFRva2VuOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2VhcmNoRGFzaGJvYXJkc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9zZWFyY2gvZGFzaGJvYXJkc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBGaWx0ZXJzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE1heFJlc3VsdHM6IFtdLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZWFyY2hEYXRhU2V0c0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9zZWFyY2gvZGF0YS1zZXRzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbHRlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTWF4UmVzdWx0czogW10sXG4gICAgICAgIE5leHRUb2tlbjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NlYXJjaERhdGFTb3VyY2VzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3NlYXJjaC9kYXRhLXNvdXJjZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmlsdGVyczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBNYXhSZXN1bHRzOiBbXSxcbiAgICAgICAgTmV4dFRva2VuOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2VhcmNoRm9sZGVyc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9zZWFyY2gvZm9sZGVyc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBGaWx0ZXJzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE1heFJlc3VsdHM6IFtdLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZWFyY2hHcm91cHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9ncm91cHMtc2VhcmNoXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBGaWx0ZXJzOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1N0YXJ0QXNzZXRCdW5kbGVFeHBvcnRKb2JDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYXNzZXQtYnVuZGxlLWV4cG9ydC1qb2JzL2V4cG9ydFwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBc3NldEJ1bmRsZUV4cG9ydEpvYklkOiBbXSxcbiAgICAgICAgQ2xvdWRGb3JtYXRpb25PdmVycmlkZVByb3BlcnR5Q29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBFeHBvcnRGb3JtYXQ6IFtdLFxuICAgICAgICBJbmNsdWRlQWxsRGVwZW5kZW5jaWVzOiBbXSxcbiAgICAgICAgSW5jbHVkZVBlcm1pc3Npb25zOiBbXSxcbiAgICAgICAgSW5jbHVkZVRhZ3M6IFtdLFxuICAgICAgICBSZXNvdXJjZUFybnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVmFsaWRhdGlvblN0cmF0ZWd5OiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1N0YXJ0QXNzZXRCdW5kbGVJbXBvcnRKb2JDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYXNzZXQtYnVuZGxlLWltcG9ydC1qb2JzL2ltcG9ydFwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBc3NldEJ1bmRsZUltcG9ydEpvYklkOiBbXSxcbiAgICAgICAgQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2U6IChfKSA9PiBzZV9Bc3NldEJ1bmRsZUltcG9ydFNvdXJjZShfLCBjb250ZXh0KSxcbiAgICAgICAgRmFpbHVyZUFjdGlvbjogW10sXG4gICAgICAgIE92ZXJyaWRlUGFyYW1ldGVyczogKF8pID0+IHNlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iT3ZlcnJpZGVQYXJhbWV0ZXJzKF8sIGNvbnRleHQpLFxuICAgICAgICBPdmVycmlkZVBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE92ZXJyaWRlVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBPdmVycmlkZVZhbGlkYXRpb25TdHJhdGVneTogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdGFydERhc2hib2FyZFNuYXBzaG90Sm9iQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfS9zbmFwc2hvdC1qb2JzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFNuYXBzaG90Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1NuYXBzaG90Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgU25hcHNob3RKb2JJZDogW10sXG4gICAgICAgIFVzZXJDb25maWd1cmF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1RhZ1Jlc291cmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL3Jlc291cmNlcy97UmVzb3VyY2VBcm59L3RhZ3NcIik7XG4gICAgYi5wKFwiUmVzb3VyY2VBcm5cIiwgKCkgPT4gaW5wdXQuUmVzb3VyY2VBcm4sIFwie1Jlc291cmNlQXJufVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VbnRhZ1Jlc291cmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvcmVzb3VyY2VzL3tSZXNvdXJjZUFybn0vdGFnc1wiKTtcbiAgICBiLnAoXCJSZXNvdXJjZUFyblwiLCAoKSA9PiBpbnB1dC5SZXNvdXJjZUFybiwgXCJ7UmVzb3VyY2VBcm59XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfa106IFtfX2V4cGVjdE5vbk51bGwoaW5wdXQuVGFnS2V5cywgYFRhZ0tleXNgKSAhPSBudWxsLCAoKSA9PiAoaW5wdXRbX1RLXSB8fCBbXSkubWFwKChfZW50cnkpID0+IF9lbnRyeSldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQWNjb3VudEN1c3RvbWl6YXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vY3VzdG9taXphdGlvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX25dOiBbLCBpbnB1dFtfTl1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjY291bnRDdXN0b21pemF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQWNjb3VudFNldHRpbmdzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3NldHRpbmdzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmF1bHROYW1lc3BhY2U6IFtdLFxuICAgICAgICBOb3RpZmljYXRpb25FbWFpbDogW10sXG4gICAgICAgIFRlcm1pbmF0aW9uUHJvdGVjdGlvbkVuYWJsZWQ6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUFuYWx5c2lzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2FuYWx5c2VzL3tBbmFseXNpc0lkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbmFseXNpc0lkXCIsICgpID0+IGlucHV0LkFuYWx5c2lzSWQsIFwie0FuYWx5c2lzSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEZWZpbml0aW9uOiAoXykgPT4gc2VfQW5hbHlzaXNEZWZpbml0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGFyYW1ldGVyczogKF8pID0+IHNlX19QYXJhbWV0ZXJzKF8sIGNvbnRleHQpLFxuICAgICAgICBTb3VyY2VFbnRpdHk6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVGhlbWVBcm46IFtdLFxuICAgICAgICBWYWxpZGF0aW9uU3RyYXRlZ3k6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVBbmFseXNpc1Blcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2FuYWx5c2VzL3tBbmFseXNpc0lkfS9wZXJtaXNzaW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbmFseXNpc0lkXCIsICgpID0+IGlucHV0LkFuYWx5c2lzSWQsIFwie0FuYWx5c2lzSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBHcmFudFBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFJldm9rZVBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEYXNoYm9hcmRQdWJsaXNoT3B0aW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBEZWZpbml0aW9uOiAoXykgPT4gc2VfRGFzaGJvYXJkVmVyc2lvbkRlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBQYXJhbWV0ZXJzOiAoXykgPT4gc2VfX1BhcmFtZXRlcnMoXywgY29udGV4dCksXG4gICAgICAgIFNvdXJjZUVudGl0eTogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBUaGVtZUFybjogW10sXG4gICAgICAgIFZhbGlkYXRpb25TdHJhdGVneTogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBWZXJzaW9uRGVzY3JpcHRpb246IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZURhc2hib2FyZExpbmtzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfS9saW5rZWQtZW50aXRpZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgTGlua0VudGl0aWVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRGFzaGJvYXJkUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYW50TGlua1Blcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIEdyYW50UGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUmV2b2tlTGlua1Blcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFJldm9rZVBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRGFzaGJvYXJkUHVibGlzaGVkVmVyc2lvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfS92ZXJzaW9ucy97VmVyc2lvbk51bWJlcn1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVmVyc2lvbk51bWJlclwiLCAoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyLnRvU3RyaW5nKCksIFwie1ZlcnNpb25OdW1iZXJ9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZURhdGFTZXRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbHVtbkdyb3VwczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBDb2x1bW5MZXZlbFBlcm1pc3Npb25SdWxlczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBEYXRhU2V0VXNhZ2VDb25maWd1cmF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIERhdGFzZXRQYXJhbWV0ZXJzOiAoXykgPT4gc2VfRGF0YXNldFBhcmFtZXRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEZpZWxkRm9sZGVyczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBJbXBvcnRNb2RlOiBbXSxcbiAgICAgICAgTG9naWNhbFRhYmxlTWFwOiAoXykgPT4gc2VfTG9naWNhbFRhYmxlTWFwKF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGh5c2ljYWxUYWJsZU1hcDogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25EYXRhU2V0OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFJvd0xldmVsUGVybWlzc2lvblRhZ0NvbmZpZ3VyYXRpb246IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVEYXRhU2V0UGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYW50UGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUmV2b2tlUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRGF0YVNvdXJjZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNvdXJjZXMve0RhdGFTb3VyY2VJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNvdXJjZUlkXCIsICgpID0+IGlucHV0LkRhdGFTb3VyY2VJZCwgXCJ7RGF0YVNvdXJjZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3JlZGVudGlhbHM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgRGF0YVNvdXJjZVBhcmFtZXRlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFNzbFByb3BlcnRpZXM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVnBjQ29ubmVjdGlvblByb3BlcnRpZXM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVEYXRhU291cmNlUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zb3VyY2VzL3tEYXRhU291cmNlSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFTb3VyY2VJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU291cmNlSWQsIFwie0RhdGFTb3VyY2VJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYW50UGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUmV2b2tlUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRm9sZGVyQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2ZvbGRlcnMve0ZvbGRlcklkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJGb2xkZXJJZFwiLCAoKSA9PiBpbnB1dC5Gb2xkZXJJZCwgXCJ7Rm9sZGVySWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBOYW1lOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVGb2xkZXJQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9mb2xkZXJzL3tGb2xkZXJJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgR3JhbnRQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSZXZva2VQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUdyb3VwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzL3tHcm91cE5hbWV9XCIpO1xuICAgIGIucChcIkdyb3VwTmFtZVwiLCAoKSA9PiBpbnB1dC5Hcm91cE5hbWUsIFwie0dyb3VwTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIERlc2NyaXB0aW9uOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vaWFtLXBvbGljeS1hc3NpZ25tZW50cy97QXNzaWdubWVudE5hbWV9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFzc2lnbm1lbnROYW1lXCIsICgpID0+IGlucHV0LkFzc2lnbm1lbnROYW1lLCBcIntBc3NpZ25tZW50TmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEFzc2lnbm1lbnRTdGF0dXM6IFtdLFxuICAgICAgICBJZGVudGl0aWVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFBvbGljeUFybjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlSWRlbnRpdHlQcm9wYWdhdGlvbkNvbmZpZ0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9pZGVudGl0eS1wcm9wYWdhdGlvbi1jb25maWcve1NlcnZpY2V9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlNlcnZpY2VcIiwgKCkgPT4gaW5wdXQuU2VydmljZSwgXCJ7U2VydmljZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEF1dGhvcml6ZWRUYXJnZXRzOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUlwUmVzdHJpY3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vaXAtcmVzdHJpY3Rpb25cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRW5hYmxlZDogW10sXG4gICAgICAgIElwUmVzdHJpY3Rpb25SdWxlTWFwOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVB1YmxpY1NoYXJpbmdTZXR0aW5nc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9wdWJsaWMtc2hhcmluZy1zZXR0aW5nc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBQdWJsaWNTaGFyaW5nRW5hYmxlZDogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9yZWZyZXNoLXNjaGVkdWxlc1wiKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBTY2hlZHVsZTogKF8pID0+IHNlX1JlZnJlc2hTY2hlZHVsZShfLCBjb250ZXh0KSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVSb2xlQ3VzdG9tUGVybWlzc2lvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3JvbGVzL3tSb2xlfS9jdXN0b20tcGVybWlzc2lvblwiKTtcbiAgICBiLnAoXCJSb2xlXCIsICgpID0+IGlucHV0LlJvbGUsIFwie1JvbGV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDdXN0b21QZXJtaXNzaW9uc05hbWU6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGVtcGxhdGVJZFwiLCAoKSA9PiBpbnB1dC5UZW1wbGF0ZUlkLCBcIntUZW1wbGF0ZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGVmaW5pdGlvbjogKF8pID0+IHNlX1RlbXBsYXRlVmVyc2lvbkRlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBTb3VyY2VFbnRpdHk6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVmFsaWRhdGlvblN0cmF0ZWd5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFZlcnNpb25EZXNjcmlwdGlvbjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlVGVtcGxhdGVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9L2FsaWFzZXMve0FsaWFzTmFtZX1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGVtcGxhdGVJZFwiLCAoKSA9PiBpbnB1dC5UZW1wbGF0ZUlkLCBcIntUZW1wbGF0ZUlkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQWxpYXNOYW1lXCIsICgpID0+IGlucHV0LkFsaWFzTmFtZSwgXCJ7QWxpYXNOYW1lfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgVGVtcGxhdGVWZXJzaW9uTnVtYmVyOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVUZW1wbGF0ZVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGVtcGxhdGVJZFwiLCAoKSA9PiBpbnB1dC5UZW1wbGF0ZUlkLCBcIntUZW1wbGF0ZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgR3JhbnRQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSZXZva2VQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RoZW1lcy97VGhlbWVJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGhlbWVJZFwiLCAoKSA9PiBpbnB1dC5UaGVtZUlkLCBcIntUaGVtZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmFzZVRoZW1lSWQ6IFtdLFxuICAgICAgICBDb25maWd1cmF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBWZXJzaW9uRGVzY3JpcHRpb246IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVRoZW1lQWxpYXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfS9hbGlhc2VzL3tBbGlhc05hbWV9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRoZW1lSWRcIiwgKCkgPT4gaW5wdXQuVGhlbWVJZCwgXCJ7VGhlbWVJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFsaWFzTmFtZVwiLCAoKSA9PiBpbnB1dC5BbGlhc05hbWUsIFwie0FsaWFzTmFtZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFRoZW1lVmVyc2lvbk51bWJlcjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlVGhlbWVQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRoZW1lSWRcIiwgKCkgPT4gaW5wdXQuVGhlbWVJZCwgXCJ7VGhlbWVJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYW50UGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUmV2b2tlUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVUb3BpY0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRvcGljSWRcIiwgKCkgPT4gaW5wdXQuVG9waWNJZCwgXCJ7VG9waWNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFRvcGljOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlVG9waWNQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRvcGljSWRcIiwgKCkgPT4gaW5wdXQuVG9waWNJZCwgXCJ7VG9waWNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYW50UGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUmV2b2tlUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVUb3BpY1JlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L3NjaGVkdWxlcy97RGF0YXNldElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUb3BpY0lkXCIsICgpID0+IGlucHV0LlRvcGljSWQsIFwie1RvcGljSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhc2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YXNldElkLCBcIntEYXRhc2V0SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBSZWZyZXNoU2NoZWR1bGU6IChfKSA9PiBzZV9Ub3BpY1JlZnJlc2hTY2hlZHVsZShfLCBjb250ZXh0KSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVVc2VyQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vdXNlcnMve1VzZXJOYW1lfVwiKTtcbiAgICBiLnAoXCJVc2VyTmFtZVwiLCAoKSA9PiBpbnB1dC5Vc2VyTmFtZSwgXCJ7VXNlck5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDdXN0b21GZWRlcmF0aW9uUHJvdmlkZXJVcmw6IFtdLFxuICAgICAgICBDdXN0b21QZXJtaXNzaW9uc05hbWU6IFtdLFxuICAgICAgICBFbWFpbDogW10sXG4gICAgICAgIEV4dGVybmFsTG9naW5GZWRlcmF0aW9uUHJvdmlkZXJUeXBlOiBbXSxcbiAgICAgICAgRXh0ZXJuYWxMb2dpbklkOiBbXSxcbiAgICAgICAgUm9sZTogW10sXG4gICAgICAgIFVuYXBwbHlDdXN0b21QZXJtaXNzaW9uczogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlVlBDQ29ubmVjdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS92cGMtY29ubmVjdGlvbnMve1ZQQ0Nvbm5lY3Rpb25JZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVlBDQ29ubmVjdGlvbklkXCIsICgpID0+IGlucHV0LlZQQ0Nvbm5lY3Rpb25JZCwgXCJ7VlBDQ29ubmVjdGlvbklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRG5zUmVzb2x2ZXJzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBSb2xlQXJuOiBbXSxcbiAgICAgICAgU2VjdXJpdHlHcm91cElkczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTdWJuZXRJZHM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DYW5jZWxJbmdlc3Rpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmdlc3Rpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVBY2NvdW50Q3VzdG9taXphdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFjY291bnRDdXN0b21pemF0aW9uOiBfanNvbixcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXdzQWNjb3VudElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZXNwYWNlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUFjY291bnRTdWJzY3JpcHRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTaWdudXBSZXNwb25zZTogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVBbmFseXNpc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGlvblN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVEYXNoYm9hcmRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGlvblN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhc2hib2FyZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbkFybjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVEYXRhU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNldElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlRGF0YVNvdXJjZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNvdXJjZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUZvbGRlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvbGRlcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUZvbGRlck1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBGb2xkZXJNZW1iZXI6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUdyb3VwQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgR3JvdXA6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlR3JvdXBNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgR3JvdXBNZW1iZXI6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlSUFNUG9saWN5QXNzaWdubWVudENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFzc2lnbm1lbnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFzc2lnbm1lbnROYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzaWdubWVudFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIElkZW50aXRpZXM6IF9qc29uLFxuICAgICAgICBQb2xpY3lBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlSW5nZXN0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmdlc3Rpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlTmFtZXNwYWNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ2FwYWNpdHlSZWdpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGlvblN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIElkZW50aXR5U3RvcmU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZVJlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNjaGVkdWxlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlUm9sZU1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGlvblN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZVRlbXBsYXRlQWxpYXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUFsaWFzOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbkFybjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVUaGVtZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBbGlhczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVUb3BpY0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlZnJlc2hBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZVRvcGljUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGF0YXNldEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVWUENDb25uZWN0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXZhaWxhYmlsaXR5U3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWUENDb25uZWN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlQWNjb3VudEN1c3RvbWl6YXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlQWNjb3VudFN1YnNjcmlwdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVBbmFseXNpc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEZWxldGlvblRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVEYXNoYm9hcmRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXNoYm9hcmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVEYXRhU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNldElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZURhdGFTZXRSZWZyZXNoUHJvcGVydGllc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVEYXRhU291cmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNvdXJjZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUZvbGRlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvbGRlcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUZvbGRlck1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUdyb3VwQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUdyb3VwTWVtYmVyc2hpcENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXNzaWdubWVudE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlSWRlbnRpdHlQcm9wYWdhdGlvbkNvbmZpZ0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVOYW1lc3BhY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2NoZWR1bGVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVSb2xlQ3VzdG9tUGVybWlzc2lvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RJbnQzMixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlUm9sZU1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVRlbXBsYXRlQWxpYXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbGlhc05hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVUaGVtZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQWxpYXNOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVUb3BpY0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVG9waWNSZWZyZXNoU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhc2V0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVVzZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVXNlckJ5UHJpbmNpcGFsSWRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVlBDQ29ubmVjdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF2YWlsYWJpbGl0eVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERlbGV0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVlBDQ29ubmVjdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQWNjb3VudEN1c3RvbWl6YXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBY2NvdW50Q3VzdG9taXphdGlvbjogX2pzb24sXG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF3c0FjY291bnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWVzcGFjZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFjY291bnRTZXR0aW5nc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFjY291bnRTZXR0aW5nczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFjY291bnRTdWJzY3JpcHRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBY2NvdW50SW5mbzogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFuYWx5c2lzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQW5hbHlzaXM6IChfKSA9PiBkZV9BbmFseXNpcyhfLCBjb250ZXh0KSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQW5hbHlzaXNEZWZpbml0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQW5hbHlzaXNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERlZmluaXRpb246IChfKSA9PiBkZV9BbmFseXNpc0RlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXNvdXJjZVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQW5hbHlzaXNQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQW5hbHlzaXNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQXNzZXRCdW5kbGVFeHBvcnRKb2JDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBc3NldEJ1bmRsZUV4cG9ydEpvYklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXdzQWNjb3VudElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ2xvdWRGb3JtYXRpb25PdmVycmlkZVByb3BlcnR5Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEb3dubG9hZFVybDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIEV4cG9ydEZvcm1hdDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEluY2x1ZGVBbGxEZXBlbmRlbmNpZXM6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgSW5jbHVkZVBlcm1pc3Npb25zOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIEluY2x1ZGVUYWdzOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIEpvYlN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlc291cmNlQXJuczogX2pzb24sXG4gICAgICAgIFZhbGlkYXRpb25TdHJhdGVneTogX2pzb24sXG4gICAgICAgIFdhcm5pbmdzOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQXNzZXRCdW5kbGVJbXBvcnRKb2JDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBc3NldEJ1bmRsZUltcG9ydEpvYklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2U6IF9qc29uLFxuICAgICAgICBBd3NBY2NvdW50SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRXJyb3JzOiBfanNvbixcbiAgICAgICAgRmFpbHVyZUFjdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEpvYlN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE92ZXJyaWRlUGFyYW1ldGVyczogKF8pID0+IGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iT3ZlcnJpZGVQYXJhbWV0ZXJzKF8sIGNvbnRleHQpLFxuICAgICAgICBPdmVycmlkZVBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgT3ZlcnJpZGVUYWdzOiBfanNvbixcbiAgICAgICAgT3ZlcnJpZGVWYWxpZGF0aW9uU3RyYXRlZ3k6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSb2xsYmFja0Vycm9yczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZURhc2hib2FyZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhc2hib2FyZDogKF8pID0+IGRlX0Rhc2hib2FyZChfLCBjb250ZXh0KSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRGFzaGJvYXJkRGVmaW5pdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhc2hib2FyZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGFzaGJvYXJkUHVibGlzaE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEZWZpbml0aW9uOiAoXykgPT4gZGVfRGFzaGJvYXJkVmVyc2lvbkRlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXNvdXJjZVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRGFzaGJvYXJkUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXNoYm9hcmRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXNoYm9hcmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExpbmtTaGFyaW5nQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRGFzaGJvYXJkU25hcHNob3RKb2JDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBd3NBY2NvdW50SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGFzaGJvYXJkSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBKb2JTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNuYXBzaG90Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1NuYXBzaG90Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgU25hcHNob3RKb2JJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RJbnQzMixcbiAgICAgICAgVXNlckNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZURhc2hib2FyZFNuYXBzaG90Sm9iUmVzdWx0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEVycm9ySW5mbzogX2pzb24sXG4gICAgICAgIEpvYlN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhc3RVcGRhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVzdWx0OiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRGF0YVNldENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhdGFTZXQ6IChfKSA9PiBkZV9EYXRhU2V0KF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXRhU2V0UGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNldElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXRhU2V0UmVmcmVzaFByb3BlcnRpZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0UmVmcmVzaFByb3BlcnRpZXM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXRhU291cmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGF0YVNvdXJjZTogKF8pID0+IGRlX0RhdGFTb3VyY2UoXywgY29udGV4dCksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZURhdGFTb3VyY2VQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhdGFTb3VyY2VBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU291cmNlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQZXJtaXNzaW9uczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUZvbGRlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEZvbGRlcjogKF8pID0+IGRlX0ZvbGRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRm9sZGVyUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGb2xkZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRm9sZGVyUmVzb2x2ZWRQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvbGRlcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVHcm91cENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEdyb3VwOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlR3JvdXBNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgR3JvdXBNZW1iZXI6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgSUFNUG9saWN5QXNzaWdubWVudDogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUluZ2VzdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEluZ2VzdGlvbjogKF8pID0+IGRlX0luZ2VzdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlSXBSZXN0cmljdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEF3c0FjY291bnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgSXBSZXN0cmljdGlvblJ1bGVNYXA6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVOYW1lc3BhY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOYW1lc3BhY2U6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVSZWZyZXNoU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZWZyZXNoU2NoZWR1bGU6IChfKSA9PiBkZV9SZWZyZXNoU2NoZWR1bGUoXywgY29udGV4dCksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVJvbGVDdXN0b21QZXJtaXNzaW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQ3VzdG9tUGVybWlzc2lvbnNOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGU6IChfKSA9PiBkZV9UZW1wbGF0ZShfLCBjb250ZXh0KSxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVGVtcGxhdGVBbGlhc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlQWxpYXM6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUZW1wbGF0ZURlZmluaXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEZWZpbml0aW9uOiAoXykgPT4gZGVfVGVtcGxhdGVWZXJzaW9uRGVmaW5pdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRXJyb3JzOiBfanNvbixcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlc291cmNlU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVGVtcGxhdGVQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVGhlbWVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZTogKF8pID0+IGRlX1RoZW1lKF8sIGNvbnRleHQpLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUaGVtZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBbGlhczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVRoZW1lUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBQZXJtaXNzaW9uczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVRvcGljQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWM6IF9qc29uLFxuICAgICAgICBUb3BpY0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVG9waWNQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVG9waWNSZWZyZXNoQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVmcmVzaERldGFpbHM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUb3BpY1JlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhdGFzZXRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZWZyZXNoU2NoZWR1bGU6IChfKSA9PiBkZV9Ub3BpY1JlZnJlc2hTY2hlZHVsZShfLCBjb250ZXh0KSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVXNlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFVzZXI6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVWUENDb25uZWN0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBWUENDb25uZWN0aW9uOiAoXykgPT4gZGVfVlBDQ29ubmVjdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfR2VuZXJhdGVFbWJlZFVybEZvckFub255bW91c1VzZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbm9ueW1vdXNVc2VyQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRW1iZWRVcmw6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfR2VuZXJhdGVFbWJlZFVybEZvclJlZ2lzdGVyZWRVc2VyQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRW1iZWRVcmw6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0RGFzaGJvYXJkRW1iZWRVcmxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBFbWJlZFVybDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRTZXNzaW9uRW1iZWRVcmxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBFbWJlZFVybDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0QW5hbHlzZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbmFseXNpc1N1bW1hcnlMaXN0OiAoXykgPT4gZGVfQW5hbHlzaXNTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RBc3NldEJ1bmRsZUV4cG9ydEpvYnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBc3NldEJ1bmRsZUV4cG9ydEpvYlN1bW1hcnlMaXN0OiAoXykgPT4gZGVfQXNzZXRCdW5kbGVFeHBvcnRKb2JTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RBc3NldEJ1bmRsZUltcG9ydEpvYnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBc3NldEJ1bmRsZUltcG9ydEpvYlN1bW1hcnlMaXN0OiAoXykgPT4gZGVfQXNzZXRCdW5kbGVJbXBvcnRKb2JTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3REYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGFzaGJvYXJkU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9EYXNoYm9hcmRTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3REYXNoYm9hcmRWZXJzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhc2hib2FyZFZlcnNpb25TdW1tYXJ5TGlzdDogKF8pID0+IGRlX0Rhc2hib2FyZFZlcnNpb25TdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3REYXRhU2V0c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhdGFTZXRTdW1tYXJpZXM6IChfKSA9PiBkZV9EYXRhU2V0U3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0RGF0YVNvdXJjZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU291cmNlczogKF8pID0+IGRlX0RhdGFTb3VyY2VMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdEZvbGRlck1lbWJlcnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBGb2xkZXJNZW1iZXJMaXN0OiBfanNvbixcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RGb2xkZXJzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRm9sZGVyU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9Gb2xkZXJTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RHcm91cE1lbWJlcnNoaXBzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgR3JvdXBNZW1iZXJMaXN0OiBfanNvbixcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RHcm91cHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBHcm91cExpc3Q6IF9qc29uLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdElBTVBvbGljeUFzc2lnbm1lbnRzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgSUFNUG9saWN5QXNzaWdubWVudHM6IF9qc29uLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdElBTVBvbGljeUFzc2lnbm1lbnRzRm9yVXNlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFjdGl2ZUFzc2lnbm1lbnRzOiBfanNvbixcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RJZGVudGl0eVByb3BhZ2F0aW9uQ29uZmlnc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNlcnZpY2VzOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RJbmdlc3Rpb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgSW5nZXN0aW9uczogKF8pID0+IGRlX0luZ2VzdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0TmFtZXNwYWNlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5hbWVzcGFjZXM6IF9qc29uLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFJlZnJlc2hTY2hlZHVsZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZWZyZXNoU2NoZWR1bGVzOiAoXykgPT4gZGVfUmVmcmVzaFNjaGVkdWxlcyhfLCBjb250ZXh0KSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RSb2xlTWVtYmVyc2hpcHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZW1iZXJzTGlzdDogX2pzb24sXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VGFnc0ZvclJlc291cmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGFnczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VGVtcGxhdGVBbGlhc2VzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVBbGlhc0xpc3Q6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRlbXBsYXRlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9UZW1wbGF0ZVN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRlbXBsYXRlVmVyc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZVZlcnNpb25TdW1tYXJ5TGlzdDogKF8pID0+IGRlX1RlbXBsYXRlVmVyc2lvblN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRoZW1lQWxpYXNlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQWxpYXNMaXN0OiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUaGVtZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZVN1bW1hcnlMaXN0OiAoXykgPT4gZGVfVGhlbWVTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUaGVtZVZlcnNpb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVWZXJzaW9uU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9UaGVtZVZlcnNpb25TdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUb3BpY1JlZnJlc2hTY2hlZHVsZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZWZyZXNoU2NoZWR1bGVzOiAoXykgPT4gZGVfVG9waWNSZWZyZXNoU2NoZWR1bGVTdW1tYXJpZXMoXywgY29udGV4dCksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VG9waWNzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNzU3VtbWFyaWVzOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RVc2VyR3JvdXBzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgR3JvdXBMaXN0OiBfanNvbixcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RVc2Vyc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFVzZXJMaXN0OiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RWUENDb25uZWN0aW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZQQ0Nvbm5lY3Rpb25TdW1tYXJpZXM6IChfKSA9PiBkZV9WUENDb25uZWN0aW9uU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXREYXRhU2V0UmVmcmVzaFByb3BlcnRpZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfUmVnaXN0ZXJVc2VyQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVXNlcjogX2pzb24sXG4gICAgICAgIFVzZXJJbnZpdGF0aW9uVXJsOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1Jlc3RvcmVBbmFseXNpc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoQW5hbHlzZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbmFseXNpc1N1bW1hcnlMaXN0OiAoXykgPT4gZGVfQW5hbHlzaXNTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1NlYXJjaERhc2hib2FyZHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXNoYm9hcmRTdW1tYXJ5TGlzdDogKF8pID0+IGRlX0Rhc2hib2FyZFN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoRGF0YVNldHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0U3VtbWFyaWVzOiAoXykgPT4gZGVfRGF0YVNldFN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoRGF0YVNvdXJjZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU291cmNlU3VtbWFyaWVzOiAoXykgPT4gZGVfRGF0YVNvdXJjZVN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoRm9sZGVyc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEZvbGRlclN1bW1hcnlMaXN0OiAoXykgPT4gZGVfRm9sZGVyU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZWFyY2hHcm91cHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBHcm91cExpc3Q6IF9qc29uLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU3RhcnRBc3NldEJ1bmRsZUV4cG9ydEpvYkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFzc2V0QnVuZGxlRXhwb3J0Sm9iSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU3RhcnRBc3NldEJ1bmRsZUltcG9ydEpvYkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFzc2V0QnVuZGxlSW1wb3J0Sm9iSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU3RhcnREYXNoYm9hcmRTbmFwc2hvdEpvYkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNuYXBzaG90Sm9iSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVGFnUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVW50YWdSZXNvdXJjZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVBY2NvdW50Q3VzdG9taXphdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFjY291bnRDdXN0b21pemF0aW9uOiBfanNvbixcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXdzQWNjb3VudElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZXNwYWNlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUFjY291bnRTZXR0aW5nc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVBbmFseXNpc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBVcGRhdGVTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQW5hbHlzaXNQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQW5hbHlzaXNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZURhc2hib2FyZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGFzaGJvYXJkSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFZlcnNpb25Bcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVEYXNoYm9hcmRMaW5rc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhc2hib2FyZEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExpbmtFbnRpdGllczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVEYXNoYm9hcmRQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhc2hib2FyZEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhc2hib2FyZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGlua1NoYXJpbmdDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlRGFzaGJvYXJkUHVibGlzaGVkVmVyc2lvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhc2hib2FyZEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhc2hib2FyZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZURhdGFTZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU2V0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmdlc3Rpb25Bcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmdlc3Rpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVEYXRhU2V0UGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNldElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZURhdGFTb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU291cmNlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBVcGRhdGVTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlRGF0YVNvdXJjZVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGF0YVNvdXJjZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFTb3VyY2VJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVGb2xkZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGb2xkZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVGb2xkZXJQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvbGRlcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUdyb3VwQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgR3JvdXA6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlSUFNUG9saWN5QXNzaWdubWVudENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFzc2lnbm1lbnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFzc2lnbm1lbnROYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzaWdubWVudFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIElkZW50aXRpZXM6IF9qc29uLFxuICAgICAgICBQb2xpY3lBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlSWRlbnRpdHlQcm9wYWdhdGlvbkNvbmZpZ0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVJcFJlc3RyaWN0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXdzQWNjb3VudElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVB1YmxpY1NoYXJpbmdTZXR0aW5nc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVSZWZyZXNoU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTY2hlZHVsZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVJvbGVDdXN0b21QZXJtaXNzaW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25Bcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlVGVtcGxhdGVBbGlhc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlQWxpYXM6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlVGVtcGxhdGVQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbkFybjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUaGVtZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBbGlhczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUaGVtZVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlVG9waWNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZWZyZXNoQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUb3BpY1Blcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlVG9waWNSZWZyZXNoU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhc2V0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVVzZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBVc2VyOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVZQQ0Nvbm5lY3Rpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBdmFpbGFiaWxpdHlTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBVcGRhdGVTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWUENDb25uZWN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Db21tYW5kRXJyb3IgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcGFyc2VkT3V0cHV0ID0ge1xuICAgICAgICAuLi5vdXRwdXQsXG4gICAgICAgIGJvZHk6IGF3YWl0IHBhcnNlRXJyb3JCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSxcbiAgICB9O1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IGxvYWRSZXN0SnNvbkVycm9yQ29kZShvdXRwdXQsIHBhcnNlZE91dHB1dC5ib2R5KTtcbiAgICBzd2l0Y2ggKGVycm9yQ29kZSkge1xuICAgICAgICBjYXNlIFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2Nlc3NEZW5pZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludGVybmFsRmFpbHVyZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I0ludGVybmFsRmFpbHVyZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUmVzb3VyY2VFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNSZXNvdXJjZUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUaHJvdHRsaW5nRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjVGhyb3R0bGluZ0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfVGhyb3R0bGluZ0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ29uZmxpY3RFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNDb25mbGljdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ29uZmxpY3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlJlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNSZXNvdXJjZVVuYXZhaWxhYmxlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9SZXNvdXJjZVVuYXZhaWxhYmxlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJQcmVjb25kaXRpb25Ob3RNZXRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNQcmVjb25kaXRpb25Ob3RNZXRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1ByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I0xpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlVuc3VwcG9ydGVkVXNlckVkaXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNVbnN1cHBvcnRlZFVzZXJFZGl0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9VbnN1cHBvcnRlZFVzZXJFZGl0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDb25jdXJyZW50VXBkYXRpbmdFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNDb25jdXJyZW50VXBkYXRpbmdFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0NvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I0ludmFsaWROZXh0VG9rZW5FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWROZXh0VG9rZW5FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlNlc3Npb25MaWZldGltZUluTWludXRlc0ludmFsaWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXNJbnZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9TZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXNJbnZhbGlkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJVbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjVW5zdXBwb3J0ZWRQcmljaW5nUGxhbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfVW5zdXBwb3J0ZWRQcmljaW5nUGxhbkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I1F1aWNrU2lnaHRVc2VyTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1F1aWNrU2lnaHRVc2VyTm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkRvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjRG9tYWluTm90V2hpdGVsaXN0ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0RvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJZGVudGl0eVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNJZGVudGl0eVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0lkZW50aXR5VHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFJlcXVlc3RFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFJlcXVlc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0RlZmF1bHRFcnJvcih7XG4gICAgICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgICAgIHBhcnNlZEJvZHksXG4gICAgICAgICAgICAgICAgZXJyb3JDb2RlLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcbmNvbnN0IHRocm93RGVmYXVsdEVycm9yID0gd2l0aEJhc2VFeGNlcHRpb24oX19CYXNlRXhjZXB0aW9uKTtcbmNvbnN0IGRlX0FjY2Vzc0RlbmllZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBBY2Nlc3NEZW5pZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX0NvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDb25jdXJyZW50VXBkYXRpbmdFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX0NvbmZsaWN0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENvbmZsaWN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9Eb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBEb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IElkZW50aXR5VHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludGVybmFsRmFpbHVyZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVzb3VyY2VUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9QcmVjb25kaXRpb25Ob3RNZXRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUHJlY29uZGl0aW9uTm90TWV0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9RdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFF1aWNrU2lnaHRVc2VyTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlRXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXNvdXJjZVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlRXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXNvdXJjZVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlc291cmNlVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVzb3VyY2VVbmF2YWlsYWJsZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXNJbnZhbGlkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9UaHJvdHRsaW5nRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRocm90dGxpbmdFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX1Vuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVW5zdXBwb3J0ZWRQcmljaW5nUGxhbkV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBVbnN1cHBvcnRlZFVzZXJFZGl0aW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBzZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQXR0cmlidXRlQWdncmVnYXRpb25GdW5jdGlvbjogX2pzb24sXG4gICAgICAgIENhdGVnb3JpY2FsQWdncmVnYXRpb25GdW5jdGlvbjogW10sXG4gICAgICAgIERhdGVBZ2dyZWdhdGlvbkZ1bmN0aW9uOiBbXSxcbiAgICAgICAgTnVtZXJpY2FsQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IHNlX051bWVyaWNhbEFnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQWdncmVnYXRpb25Tb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBzZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBTb3J0RGlyZWN0aW9uOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BbmFseXNpc0RlZmluaXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBbmFseXNpc0RlZmF1bHRzOiBfanNvbixcbiAgICAgICAgQ2FsY3VsYXRlZEZpZWxkczogX2pzb24sXG4gICAgICAgIENvbHVtbkNvbmZpZ3VyYXRpb25zOiBfanNvbixcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXJEZWNsYXJhdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWx0ZXJHcm91cHM6IChfKSA9PiBzZV9GaWx0ZXJHcm91cExpc3QoXywgY29udGV4dCksXG4gICAgICAgIE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBQYXJhbWV0ZXJEZWNsYXJhdGlvbnM6IChfKSA9PiBzZV9QYXJhbWV0ZXJEZWNsYXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNoZWV0czogKF8pID0+IHNlX1NoZWV0RGVmaW5pdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXJjQXhpc0NvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBSYW5nZTogKF8pID0+IHNlX0FyY0F4aXNEaXNwbGF5UmFuZ2UoXywgY29udGV4dCksXG4gICAgICAgIFJlc2VydmVSYW5nZTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXJjQXhpc0Rpc3BsYXlSYW5nZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIE1heDogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgTWluOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0FyY0NvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBcmNBbmdsZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgQXJjVGhpY2tuZXNzOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Bc3NldEJ1bmRsZUltcG9ydEpvYk92ZXJyaWRlUGFyYW1ldGVycyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFuYWx5c2VzOiBfanNvbixcbiAgICAgICAgRGFzaGJvYXJkczogX2pzb24sXG4gICAgICAgIERhdGFTZXRzOiBfanNvbixcbiAgICAgICAgRGF0YVNvdXJjZXM6IF9qc29uLFxuICAgICAgICBSZWZyZXNoU2NoZWR1bGVzOiAoXykgPT4gc2VfQXNzZXRCdW5kbGVJbXBvcnRKb2JSZWZyZXNoU2NoZWR1bGVPdmVycmlkZVBhcmFtZXRlcnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBSZXNvdXJjZUlkT3ZlcnJpZGVDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgVGhlbWVzOiBfanNvbixcbiAgICAgICAgVlBDQ29ubmVjdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iUmVmcmVzaFNjaGVkdWxlT3ZlcnJpZGVQYXJhbWV0ZXJzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0YVNldElkOiBbXSxcbiAgICAgICAgU2NoZWR1bGVJZDogW10sXG4gICAgICAgIFN0YXJ0QWZ0ZXJEYXRlVGltZTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Bc3NldEJ1bmRsZUltcG9ydEpvYlJlZnJlc2hTY2hlZHVsZU92ZXJyaWRlUGFyYW1ldGVyc0xpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfQXNzZXRCdW5kbGVJbXBvcnRKb2JSZWZyZXNoU2NoZWR1bGVPdmVycmlkZVBhcmFtZXRlcnMoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Fzc2V0QnVuZGxlSW1wb3J0U291cmNlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQm9keTogY29udGV4dC5iYXNlNjRFbmNvZGVyLFxuICAgICAgICBTM1VyaTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXhpc0RhdGFPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0ZUF4aXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgTnVtZXJpY0F4aXNPcHRpb25zOiAoXykgPT4gc2VfTnVtZXJpY0F4aXNPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0F4aXNEaXNwbGF5TWluTWF4UmFuZ2UgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBNYXhpbXVtOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBNaW5pbXVtOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEF4aXNMaW5lVmlzaWJpbGl0eTogW10sXG4gICAgICAgIEF4aXNPZmZzZXQ6IFtdLFxuICAgICAgICBEYXRhT3B0aW9uczogKF8pID0+IHNlX0F4aXNEYXRhT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgR3JpZExpbmVWaXNpYmlsaXR5OiBbXSxcbiAgICAgICAgU2Nyb2xsYmFyT3B0aW9uczogKF8pID0+IHNlX1Njcm9sbEJhck9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFRpY2tMYWJlbE9wdGlvbnM6IChfKSA9PiBzZV9BeGlzVGlja0xhYmVsT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BeGlzRGlzcGxheVJhbmdlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0YURyaXZlbjogX2pzb24sXG4gICAgICAgIE1pbk1heDogKF8pID0+IHNlX0F4aXNEaXNwbGF5TWluTWF4UmFuZ2UoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXhpc0xpbmVhclNjYWxlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgU3RlcENvdW50OiBbXSxcbiAgICAgICAgU3RlcFNpemU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXhpc0xvZ2FyaXRobWljU2NhbGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCYXNlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0F4aXNTY2FsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIExpbmVhcjogKF8pID0+IHNlX0F4aXNMaW5lYXJTY2FsZShfLCBjb250ZXh0KSxcbiAgICAgICAgTG9nYXJpdGhtaWM6IChfKSA9PiBzZV9BeGlzTG9nYXJpdGhtaWNTY2FsZShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BeGlzVGlja0xhYmVsT3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIExhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJvdGF0aW9uQW5nbGU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQmFyQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29sb3JzOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXM6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JhckNoYXJ0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJhcnNBcnJhbmdlbWVudDogW10sXG4gICAgICAgIENhdGVnb3J5QXhpczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgQ2F0ZWdvcnlMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBDb2xvckxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbnRyaWJ1dGlvbkFuYWx5c2lzRGVmYXVsdHM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0JhckNoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgT3JpZW50YXRpb246IFtdLFxuICAgICAgICBSZWZlcmVuY2VMaW5lczogKF8pID0+IHNlX1JlZmVyZW5jZUxpbmVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTbWFsbE11bHRpcGxlc09wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0JhckNoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmFsdWVBeGlzOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWYWx1ZUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JhckNoYXJ0RmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9CYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JhckNoYXJ0U29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sb3JJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ29sb3JTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQmFyQ2hhcnRWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfQmFyQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQmluV2lkdGhPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmluQ291bnRMaW1pdDogW10sXG4gICAgICAgIFZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JveFBsb3RBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyb3VwQnk6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9Cb3hQbG90TWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Cb3hQbG90Q2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQm94UGxvdE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeUF4aXM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5TGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0JveFBsb3RGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBQcmltYXJ5WUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJpbWFyeVlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgUmVmZXJlbmNlTGluZXM6IChfKSA9PiBzZV9SZWZlcmVuY2VMaW5lTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9Cb3hQbG90U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQm94UGxvdEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCb3hQbG90QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9Cb3hQbG90QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQm94UGxvdE1lYXN1cmVGaWVsZExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Cb3hQbG90U29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgUGFnaW5hdGlvbkNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JveFBsb3RWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfQm94UGxvdENoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbG9yU2NhbGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvckZpbGxUeXBlOiBbXSxcbiAgICAgICAgQ29sb3JzOiAoXykgPT4gc2VfQ29sb3JTY2FsZUNvbG9yTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTnVsbFZhbHVlQ29sb3I6IChfKSA9PiBzZV9EYXRhQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29sb3JTY2FsZUNvbG9yTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9EYXRhQ29sb3IoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbHVtbkhpZXJhcmNoeSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVUaW1lSGllcmFyY2h5OiAoXykgPT4gc2VfRGF0ZVRpbWVIaWVyYXJjaHkoXywgY29udGV4dCksXG4gICAgICAgIEV4cGxpY2l0SGllcmFyY2h5OiAoXykgPT4gc2VfRXhwbGljaXRIaWVyYXJjaHkoXywgY29udGV4dCksXG4gICAgICAgIFByZWRlZmluZWRIaWVyYXJjaHk6IChfKSA9PiBzZV9QcmVkZWZpbmVkSGllcmFyY2h5KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfQ29sdW1uSGllcmFyY2h5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Db2x1bW5Tb3J0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IHNlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIERpcmVjdGlvbjogW10sXG4gICAgICAgIFNvcnRCeTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29sdW1uVG9vbHRpcEl0ZW0gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvbjogKF8pID0+IHNlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIExhYmVsOiBbXSxcbiAgICAgICAgVmlzaWJpbGl0eTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29tYm9DaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmFyVmFsdWVzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBDb2xvcnM6IF9qc29uLFxuICAgICAgICBMaW5lVmFsdWVzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Db21ib0NoYXJ0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJhckRhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBCYXJzQXJyYW5nZW1lbnQ6IFtdLFxuICAgICAgICBDYXRlZ29yeUF4aXM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5TGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29sb3JMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfQ29tYm9DaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIExpbmVEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJlZmVyZW5jZUxpbmVzOiAoXykgPT4gc2VfUmVmZXJlbmNlTGluZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNlY29uZGFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFNlY29uZGFyeVlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgU2luZ2xlQXhpc09wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0NvbWJvQ2hhcnRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IHNlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Db21ib0NoYXJ0RmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbWJvQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX0NvbWJvQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Db21ib0NoYXJ0U29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sb3JJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ29sb3JTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29tYm9DaGFydFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9Db21ib0NoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRm9yZWNhc3Q6IChfKSA9PiBzZV9Gb3JlY2FzdENvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBHcm93dGhSYXRlOiAoXykgPT4gc2VfR3Jvd3RoUmF0ZUNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXhpbXVtTWluaW11bTogKF8pID0+IHNlX01heGltdW1NaW5pbXVtQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIE1ldHJpY0NvbXBhcmlzb246IChfKSA9PiBzZV9NZXRyaWNDb21wYXJpc29uQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFBlcmlvZE92ZXJQZXJpb2Q6IChfKSA9PiBzZV9QZXJpb2RPdmVyUGVyaW9kQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFBlcmlvZFRvRGF0ZTogKF8pID0+IHNlX1BlcmlvZFRvRGF0ZUNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb3BCb3R0b21Nb3ZlcnM6IChfKSA9PiBzZV9Ub3BCb3R0b21Nb3ZlcnNDb21wdXRhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9wQm90dG9tUmFua2VkOiAoXykgPT4gc2VfVG9wQm90dG9tUmFua2VkQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvdGFsQWdncmVnYXRpb246IChfKSA9PiBzZV9Ub3RhbEFnZ3JlZ2F0aW9uQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFVuaXF1ZVZhbHVlczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29tcHV0YXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0NvbXB1dGF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYWRpZW50OiAoXykgPT4gc2VfQ29uZGl0aW9uYWxGb3JtYXR0aW5nR3JhZGllbnRDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgU29saWQ6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0dyYWRpZW50Q29sb3IgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvcjogKF8pID0+IHNlX0dyYWRpZW50Q29sb3IoXywgY29udGV4dCksXG4gICAgICAgIEV4cHJlc3Npb246IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0N1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25zOiAoXykgPT4gc2VfU2V0UGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9DdXN0b21Db250ZW50VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIERhdGFTZXRJZGVudGlmaWVyOiBbXSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9DdXN0b21QYXJhbWV0ZXJWYWx1ZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEYXRlVGltZVZhbHVlczogKF8pID0+IHNlX0RhdGVUaW1lRGVmYXVsdFZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFZhbHVlczogKF8pID0+IHNlX0RlY2ltYWxEZWZhdWx0VmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyVmFsdWVzOiBfanNvbixcbiAgICAgICAgU3RyaW5nVmFsdWVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9DdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3VzdG9tVmFsdWVzOiAoXykgPT4gc2VfQ3VzdG9tUGFyYW1ldGVyVmFsdWVzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbmNsdWRlTnVsbFZhbHVlOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXNoYm9hcmRWZXJzaW9uRGVmaW5pdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFuYWx5c2lzRGVmYXVsdHM6IF9qc29uLFxuICAgICAgICBDYWxjdWxhdGVkRmllbGRzOiBfanNvbixcbiAgICAgICAgQ29sdW1uQ29uZmlndXJhdGlvbnM6IF9qc29uLFxuICAgICAgICBEYXRhU2V0SWRlbnRpZmllckRlY2xhcmF0aW9uczogX2pzb24sXG4gICAgICAgIEZpbHRlckdyb3VwczogKF8pID0+IHNlX0ZpbHRlckdyb3VwTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgT3B0aW9uczogX2pzb24sXG4gICAgICAgIFBhcmFtZXRlckRlY2xhcmF0aW9uczogKF8pID0+IHNlX1BhcmFtZXRlckRlY2xhcmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU2hlZXRzOiAoXykgPT4gc2VfU2hlZXREZWZpbml0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXRhQ29sb3IgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvcjogW10sXG4gICAgICAgIERhdGFWYWx1ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXRhc2V0UGFyYW1ldGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0ZVRpbWVEYXRhc2V0UGFyYW1ldGVyOiAoXykgPT4gc2VfRGF0ZVRpbWVEYXRhc2V0UGFyYW1ldGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBEZWNpbWFsRGF0YXNldFBhcmFtZXRlcjogKF8pID0+IHNlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyRGF0YXNldFBhcmFtZXRlcjogX2pzb24sXG4gICAgICAgIFN0cmluZ0RhdGFzZXRQYXJhbWV0ZXI6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RhdGFzZXRQYXJhbWV0ZXJMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0RhdGFzZXRQYXJhbWV0ZXIoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmF1bHRWYWx1ZXM6IChfKSA9PiBzZV9EYXRlVGltZURhdGFzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWVzKF8sIGNvbnRleHQpLFxuICAgICAgICBJZDogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBUaW1lR3JhbnVsYXJpdHk6IFtdLFxuICAgICAgICBWYWx1ZVR5cGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBTdGF0aWNWYWx1ZXM6IChfKSA9PiBzZV9EYXRlVGltZURhdGFzZXRQYXJhbWV0ZXJWYWx1ZUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZW50cnkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVEZWZhdWx0VmFsdWVMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZW50cnkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVEZWZhdWx0VmFsdWVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRHluYW1pY1ZhbHVlOiBfanNvbixcbiAgICAgICAgUm9sbGluZ0RhdGU6IF9qc29uLFxuICAgICAgICBTdGF0aWNWYWx1ZXM6IChfKSA9PiBzZV9EYXRlVGltZURlZmF1bHRWYWx1ZUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVIaWVyYXJjaHkgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEcmlsbERvd25GaWx0ZXJzOiAoXykgPT4gc2VfRHJpbGxEb3duRmlsdGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSGllcmFyY2h5SWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RhdGVUaW1lUGFyYW1ldGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFZhbHVlczogKF8pID0+IHNlX1NlbnNpdGl2ZVRpbWVzdGFtcExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmF1bHRWYWx1ZXM6IChfKSA9PiBzZV9EYXRlVGltZURlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIE1hcHBlZERhdGFTZXRQYXJhbWV0ZXJzOiBfanNvbixcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFRpbWVHcmFudWxhcml0eTogW10sXG4gICAgICAgIFZhbHVlV2hlblVuc2V0OiAoXykgPT4gc2VfRGF0ZVRpbWVWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVQYXJhbWV0ZXJMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0RhdGVUaW1lUGFyYW1ldGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXRlVGltZVZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEN1c3RvbVZhbHVlOiAoXykgPT4gTWF0aC5yb3VuZChfLmdldFRpbWUoKSAvIDEwMDApLFxuICAgICAgICBWYWx1ZVdoZW5VbnNldE9wdGlvbjogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGVjaW1hbERhdGFzZXRQYXJhbWV0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZWZhdWx0VmFsdWVzOiAoXykgPT4gc2VfRGVjaW1hbERhdGFzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWVzKF8sIGNvbnRleHQpLFxuICAgICAgICBJZDogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBWYWx1ZVR5cGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFN0YXRpY1ZhbHVlczogKF8pID0+IHNlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fc2VyaWFsaXplRmxvYXQoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxEZWZhdWx0VmFsdWVMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fc2VyaWFsaXplRmxvYXQoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxEZWZhdWx0VmFsdWVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRHluYW1pY1ZhbHVlOiBfanNvbixcbiAgICAgICAgU3RhdGljVmFsdWVzOiAoXykgPT4gc2VfRGVjaW1hbERlZmF1bHRWYWx1ZUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGVjaW1hbFBhcmFtZXRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9TZW5zaXRpdmVEb3VibGVMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxQYXJhbWV0ZXJEZWNsYXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmF1bHRWYWx1ZXM6IChfKSA9PiBzZV9EZWNpbWFsRGVmYXVsdFZhbHVlcyhfLCBjb250ZXh0KSxcbiAgICAgICAgTWFwcGVkRGF0YVNldFBhcmFtZXRlcnM6IF9qc29uLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGFyYW1ldGVyVmFsdWVUeXBlOiBbXSxcbiAgICAgICAgVmFsdWVXaGVuVW5zZXQ6IChfKSA9PiBzZV9EZWNpbWFsVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxQYXJhbWV0ZXJMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0RlY2ltYWxQYXJhbWV0ZXIoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDdXN0b21WYWx1ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgVmFsdWVXaGVuVW5zZXRPcHRpb246IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Rlc3RpbmF0aW9uUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3VzdG9tVmFsdWVzQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX0N1c3RvbVZhbHVlc0NvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFNlbGVjdEFsbFZhbHVlT3B0aW9uczogW10sXG4gICAgICAgIFNvdXJjZUNvbHVtbjogX2pzb24sXG4gICAgICAgIFNvdXJjZUZpZWxkOiBbXSxcbiAgICAgICAgU291cmNlUGFyYW1ldGVyTmFtZTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRHJpbGxEb3duRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlGaWx0ZXI6IF9qc29uLFxuICAgICAgICBOdW1lcmljRXF1YWxpdHlGaWx0ZXI6IChfKSA9PiBzZV9OdW1lcmljRXF1YWxpdHlEcmlsbERvd25GaWx0ZXIoXywgY29udGV4dCksXG4gICAgICAgIFRpbWVSYW5nZUZpbHRlcjogKF8pID0+IHNlX1RpbWVSYW5nZURyaWxsRG93bkZpbHRlcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EcmlsbERvd25GaWx0ZXJMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0RyaWxsRG93bkZpbHRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRW1wdHlWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXI6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRXhwbGljaXRIaWVyYXJjaHkgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW5zOiBfanNvbixcbiAgICAgICAgRHJpbGxEb3duRmlsdGVyczogKF8pID0+IHNlX0RyaWxsRG93bkZpbHRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEhpZXJhcmNoeUlkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWVsZEJhc2VkVG9vbHRpcCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uVmlzaWJpbGl0eTogW10sXG4gICAgICAgIFRvb2x0aXBGaWVsZHM6IChfKSA9PiBzZV9Ub29sdGlwSXRlbUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXBUaXRsZVR5cGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpZWxkU29ydE9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW5Tb3J0OiAoXykgPT4gc2VfQ29sdW1uU29ydChfLCBjb250ZXh0KSxcbiAgICAgICAgRmllbGRTb3J0OiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9GaWVsZFNvcnRPcHRpb25zKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWxsZWRNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEdlb3NwYXRpYWw6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9GaWxsZWRNYXBNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBzZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFNoYXBlOiAoXykgPT4gc2VfRmlsbGVkTWFwU2hhcGVDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsbGVkTWFwQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbGxlZE1hcENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfRmlsbGVkTWFwRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgTWFwU3R5bGVPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9GaWxsZWRNYXBTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IHNlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBXaW5kb3dPcHRpb25zOiAoXykgPT4gc2VfR2Vvc3BhdGlhbFdpbmRvd09wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsbGVkTWFwRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbGxlZE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfRmlsbGVkTWFwQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsbGVkTWFwTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbGxlZE1hcFNoYXBlQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmllbGRJZDogW10sXG4gICAgICAgIEZvcm1hdDogKF8pID0+IHNlX1NoYXBlQ29uZGl0aW9uYWxGb3JtYXQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsbGVkTWFwU29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWxsZWRNYXBWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfRmlsbGVkTWFwQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBzZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlGaWx0ZXI6IF9qc29uLFxuICAgICAgICBOdW1lcmljRXF1YWxpdHlGaWx0ZXI6IChfKSA9PiBzZV9OdW1lcmljRXF1YWxpdHlGaWx0ZXIoXywgY29udGV4dCksXG4gICAgICAgIE51bWVyaWNSYW5nZUZpbHRlcjogKF8pID0+IHNlX051bWVyaWNSYW5nZUZpbHRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgUmVsYXRpdmVEYXRlc0ZpbHRlcjogX2pzb24sXG4gICAgICAgIFRpbWVFcXVhbGl0eUZpbHRlcjogKF8pID0+IHNlX1RpbWVFcXVhbGl0eUZpbHRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZVJhbmdlRmlsdGVyOiAoXykgPT4gc2VfVGltZVJhbmdlRmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBUb3BCb3R0b21GaWx0ZXI6IChfKSA9PiBzZV9Ub3BCb3R0b21GaWx0ZXIoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsdGVyQ29udHJvbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVUaW1lUGlja2VyOiBfanNvbixcbiAgICAgICAgRHJvcGRvd246IF9qc29uLFxuICAgICAgICBMaXN0OiBfanNvbixcbiAgICAgICAgUmVsYXRpdmVEYXRlVGltZTogX2pzb24sXG4gICAgICAgIFNsaWRlcjogKF8pID0+IHNlX0ZpbHRlclNsaWRlckNvbnRyb2woXywgY29udGV4dCksXG4gICAgICAgIFRleHRBcmVhOiBfanNvbixcbiAgICAgICAgVGV4dEZpZWxkOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJDb250cm9sTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9GaWx0ZXJDb250cm9sKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJHcm91cCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENyb3NzRGF0YXNldDogW10sXG4gICAgICAgIEZpbHRlckdyb3VwSWQ6IFtdLFxuICAgICAgICBGaWx0ZXJzOiAoXykgPT4gc2VfRmlsdGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU2NvcGVDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJHcm91cExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfRmlsdGVyR3JvdXAoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbHRlckxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfRmlsdGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJTbGlkZXJDb250cm9sID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGlzcGxheU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWx0ZXJDb250cm9sSWQ6IFtdLFxuICAgICAgICBNYXhpbXVtVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIE1pbmltdW1WYWx1ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgU291cmNlRmlsdGVySWQ6IFtdLFxuICAgICAgICBTdGVwU2l6ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgVGl0bGU6IFtdLFxuICAgICAgICBUeXBlOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Gb3JlY2FzdENvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogW10sXG4gICAgICAgIEN1c3RvbVNlYXNvbmFsaXR5VmFsdWU6IFtdLFxuICAgICAgICBMb3dlckJvdW5kYXJ5OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGVyaW9kc0JhY2t3YXJkOiBbXSxcbiAgICAgICAgUGVyaW9kc0ZvcndhcmQ6IFtdLFxuICAgICAgICBQcmVkaWN0aW9uSW50ZXJ2YWw6IFtdLFxuICAgICAgICBTZWFzb25hbGl0eTogW10sXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBVcHBlckJvdW5kYXJ5OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Gb3JlY2FzdENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGb3JlY2FzdFByb3BlcnRpZXM6IChfKSA9PiBzZV9UaW1lQmFzZWRGb3JlY2FzdFByb3BlcnRpZXMoXywgY29udGV4dCksXG4gICAgICAgIFNjZW5hcmlvOiAoXykgPT4gc2VfRm9yZWNhc3RTY2VuYXJpbyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Gb3JlY2FzdENvbmZpZ3VyYXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0ZvcmVjYXN0Q29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRm9yZWNhc3RTY2VuYXJpbyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFdoYXRJZlBvaW50U2NlbmFyaW86IChfKSA9PiBzZV9XaGF0SWZQb2ludFNjZW5hcmlvKF8sIGNvbnRleHQpLFxuICAgICAgICBXaGF0SWZSYW5nZVNjZW5hcmlvOiAoXykgPT4gc2VfV2hhdElmUmFuZ2VTY2VuYXJpbyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GdW5uZWxDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9GdW5uZWxDaGFydE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRnVubmVsQ2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0Z1bm5lbENoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9GdW5uZWxDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gc2VfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRnVubmVsQ2hhcnRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRnVubmVsQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX0Z1bm5lbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRnVubmVsQ2hhcnRNZWFzdXJlRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRnVubmVsQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Z1bm5lbENoYXJ0VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0Z1bm5lbENoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dhdWdlQ2hhcnRBcmNDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGb3JlZ3JvdW5kQ29sb3I6IChfKSA9PiBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HYXVnZUNoYXJ0Q29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uczogKF8pID0+IHNlX0dhdWdlQ2hhcnRDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dhdWdlQ2hhcnRDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBcmM6IChfKSA9PiBzZV9HYXVnZUNoYXJ0QXJjQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBQcmltYXJ5VmFsdWU6IChfKSA9PiBzZV9HYXVnZUNoYXJ0UHJpbWFyeVZhbHVlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dhdWdlQ2hhcnRDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0dhdWdlQ2hhcnRDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dhdWdlQ2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9HYXVnZUNoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgR2F1Z2VDaGFydE9wdGlvbnM6IChfKSA9PiBzZV9HYXVnZUNoYXJ0T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgVG9vbHRpcE9wdGlvbnM6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2F1Z2VDaGFydEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBUYXJnZXRWYWx1ZXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dhdWdlQ2hhcnRPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQXJjOiAoXykgPT4gc2VfQXJjQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQXJjQXhpczogKF8pID0+IHNlX0FyY0F4aXNDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb21wYXJpc29uOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVZhbHVlRGlzcGxheVR5cGU6IFtdLFxuICAgICAgICBQcmltYXJ5VmFsdWVGb250Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2F1Z2VDaGFydFByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HYXVnZUNoYXJ0VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0dhdWdlQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBzZV9HYXVnZUNoYXJ0Q29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxDb29yZGluYXRlQm91bmRzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRWFzdDogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgTm9ydGg6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIFNvdXRoOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBXZXN0OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbG9yczogX2pzb24sXG4gICAgICAgIEdlb3NwYXRpYWw6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxNYXBDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0dlb3NwYXRpYWxNYXBGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBNYXBTdHlsZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBQb2ludFN0eWxlT3B0aW9uczogX2pzb24sXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFdpbmRvd09wdGlvbnM6IChfKSA9PiBzZV9HZW9zcGF0aWFsV2luZG93T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTWFwRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEdlb3NwYXRpYWxNYXBBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX0dlb3NwYXRpYWxNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTWFwVmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0dlb3NwYXRpYWxNYXBDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbFdpbmRvd09wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCb3VuZHM6IChfKSA9PiBzZV9HZW9zcGF0aWFsQ29vcmRpbmF0ZUJvdW5kcyhfLCBjb250ZXh0KSxcbiAgICAgICAgTWFwWm9vbU1vZGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dyYWRpZW50Q29sb3IgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBTdG9wczogKF8pID0+IHNlX0dyYWRpZW50U3RvcExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR3JhZGllbnRTdG9wID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sb3I6IFtdLFxuICAgICAgICBEYXRhVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIEdyYWRpZW50T2Zmc2V0OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dyYWRpZW50U3RvcExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfR3JhZGllbnRTdG9wKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Hcm93dGhSYXRlQ29tcHV0YXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb21wdXRhdGlvbklkOiBbXSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBlcmlvZFNpemU6IFtdLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVmFsdWU6IChfKSA9PiBzZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGVhdE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uczogX2pzb24sXG4gICAgICAgIFJvd3M6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9IZWF0TWFwTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9IZWF0TWFwQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbG9yU2NhbGU6IChfKSA9PiBzZV9Db2xvclNjYWxlKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5MYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0hlYXRNYXBGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBSb3dMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0hlYXRNYXBTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IHNlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hlYXRNYXBGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgSGVhdE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfSGVhdE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hlYXRNYXBNZWFzdXJlRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGVhdE1hcFNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgSGVhdE1hcENvbHVtbkl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgSGVhdE1hcENvbHVtblNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSGVhdE1hcFJvd0l0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgSGVhdE1hcFJvd1NvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9IZWF0TWFwVmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0hlYXRNYXBDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGlzdG9ncmFtQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9IaXN0b2dyYW1NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hpc3RvZ3JhbUJpbk9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCaW5Db3VudDogX2pzb24sXG4gICAgICAgIEJpbldpZHRoOiAoXykgPT4gc2VfQmluV2lkdGhPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RlZEJpblR5cGU6IFtdLFxuICAgICAgICBTdGFydFZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hpc3RvZ3JhbUNvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCaW5PcHRpb25zOiAoXykgPT4gc2VfSGlzdG9ncmFtQmluT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9IaXN0b2dyYW1GaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gc2VfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgICAgICBYQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBYQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGlzdG9ncmFtRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEhpc3RvZ3JhbUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfSGlzdG9ncmFtQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGlzdG9ncmFtTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hpc3RvZ3JhbVZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9IaXN0b2dyYW1Db25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0luc2lnaHRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25zOiAoXykgPT4gc2VfQ29tcHV0YXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDdXN0b21OYXJyYXRpdmU6IF9qc29uLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0luc2lnaHRWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXI6IFtdLFxuICAgICAgICBJbnNpZ2h0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0luc2lnaHRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0tQSUFjdHVhbFZhbHVlQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgSWNvbjogX2pzb24sXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0tQSUNvbXBhcmlzb25WYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25zOiAoXykgPT4gc2VfS1BJQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3R1YWxWYWx1ZTogKF8pID0+IHNlX0tQSUFjdHVhbFZhbHVlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBDb21wYXJpc29uVmFsdWU6IChfKSA9PiBzZV9LUElDb21wYXJpc29uVmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlWYWx1ZTogKF8pID0+IHNlX0tQSVByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJvZ3Jlc3NCYXI6IChfKSA9PiBzZV9LUElQcm9ncmVzc0JhckNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0tQSUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfS1BJQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9LUElGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBLUElPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9LUElTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgVGFyZ2V0VmFsdWVzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgVHJlbmRHcm91cHM6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0tQSVByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElQcm9ncmVzc0JhckNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZvcmVncm91bmRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0tQSVNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgVHJlbmRHcm91cFNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfS1BJQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBzZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGF5b3V0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX0xheW91dENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGF5b3V0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZyZWVGb3JtTGF5b3V0OiBfanNvbixcbiAgICAgICAgR3JpZExheW91dDogX2pzb24sXG4gICAgICAgIFNlY3Rpb25CYXNlZExheW91dDogKF8pID0+IHNlX1NlY3Rpb25CYXNlZExheW91dENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGF5b3V0TGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9MYXlvdXQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xpbmVDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBDb2xvcnM6IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlczogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGluZUNoYXJ0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbnRyaWJ1dGlvbkFuYWx5c2lzRGVmYXVsdHM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRGVmYXVsdFNlcmllc1NldHRpbmdzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0xpbmVDaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEZvcmVjYXN0Q29uZmlndXJhdGlvbnM6IChfKSA9PiBzZV9Gb3JlY2FzdENvbmZpZ3VyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBQcmltYXJ5WUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IHNlX0xpbmVTZXJpZXNBeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJlZmVyZW5jZUxpbmVzOiAoXykgPT4gc2VfUmVmZXJlbmNlTGluZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNlY29uZGFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9MaW5lU2VyaWVzQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWNvbmRhcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNlcmllczogX2pzb24sXG4gICAgICAgIFNpbmdsZUF4aXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9MaW5lQ2hhcnRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IHNlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBUeXBlOiBbXSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFhBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9MaW5lQ2hhcnRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTGluZUNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9MaW5lQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9MaW5lQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sb3JJdGVtc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGluZUNoYXJ0VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0xpbmVDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gc2VfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9MaW5lU2VyaWVzQXhpc0Rpc3BsYXlPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQXhpc09wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIE1pc3NpbmdEYXRhQ29uZmlndXJhdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xvZ2ljYWxUYWJsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFsaWFzOiBbXSxcbiAgICAgICAgRGF0YVRyYW5zZm9ybXM6IChfKSA9PiBzZV9UcmFuc2Zvcm1PcGVyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTb3VyY2U6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xvZ2ljYWxUYWJsZU1hcCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhpbnB1dCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgICAgYWNjW2tleV0gPSBzZV9Mb2dpY2FsVGFibGUodmFsdWUsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG5jb25zdCBzZV9NYXhpbXVtTWluaW11bUNvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVHlwZTogW10sXG4gICAgICAgIFZhbHVlOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX01lYXN1cmVGaWVsZCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhbGN1bGF0ZWRNZWFzdXJlRmllbGQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yaWNhbE1lYXN1cmVGaWVsZDogX2pzb24sXG4gICAgICAgIERhdGVNZWFzdXJlRmllbGQ6IF9qc29uLFxuICAgICAgICBOdW1lcmljYWxNZWFzdXJlRmllbGQ6IChfKSA9PiBzZV9OdW1lcmljYWxNZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX01ldHJpY0NvbXBhcmlzb25Db21wdXRhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IFtdLFxuICAgICAgICBGcm9tVmFsdWU6IChfKSA9PiBzZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBUYXJnZXRWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTmV3RGVmYXVsdFZhbHVlcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVUaW1lU3RhdGljVmFsdWVzOiAoXykgPT4gc2VfRGF0ZVRpbWVEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBEZWNpbWFsU3RhdGljVmFsdWVzOiAoXykgPT4gc2VfRGVjaW1hbERhdGFzZXRQYXJhbWV0ZXJWYWx1ZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEludGVnZXJTdGF0aWNWYWx1ZXM6IF9qc29uLFxuICAgICAgICBTdHJpbmdTdGF0aWNWYWx1ZXM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX051bWVyaWNhbEFnZ3JlZ2F0aW9uRnVuY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBQZXJjZW50aWxlQWdncmVnYXRpb246IChfKSA9PiBzZV9QZXJjZW50aWxlQWdncmVnYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFNpbXBsZU51bWVyaWNhbEFnZ3JlZ2F0aW9uOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9OdW1lcmljYWxNZWFzdXJlRmllbGQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvbkZ1bmN0aW9uOiAoXykgPT4gc2VfTnVtZXJpY2FsQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRmllbGRJZDogW10sXG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX051bWVyaWNBeGlzT3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFJhbmdlOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlSYW5nZShfLCBjb250ZXh0KSxcbiAgICAgICAgU2NhbGU6IChfKSA9PiBzZV9BeGlzU2NhbGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTnVtZXJpY0VxdWFsaXR5RHJpbGxEb3duRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTnVtZXJpY0VxdWFsaXR5RmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IHNlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIEZpbHRlcklkOiBbXSxcbiAgICAgICAgTWF0Y2hPcGVyYXRvcjogW10sXG4gICAgICAgIE51bGxPcHRpb246IFtdLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBbXSxcbiAgICAgICAgU2VsZWN0QWxsT3B0aW9uczogW10sXG4gICAgICAgIFZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX051bWVyaWNSYW5nZUZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBzZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBGaWx0ZXJJZDogW10sXG4gICAgICAgIEluY2x1ZGVNYXhpbXVtOiBbXSxcbiAgICAgICAgSW5jbHVkZU1pbmltdW06IFtdLFxuICAgICAgICBOdWxsT3B0aW9uOiBbXSxcbiAgICAgICAgUmFuZ2VNYXhpbXVtOiAoXykgPT4gc2VfTnVtZXJpY1JhbmdlRmlsdGVyVmFsdWUoXywgY29udGV4dCksXG4gICAgICAgIFJhbmdlTWluaW11bTogKF8pID0+IHNlX051bWVyaWNSYW5nZUZpbHRlclZhbHVlKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RBbGxPcHRpb25zOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9OdW1lcmljUmFuZ2VGaWx0ZXJWYWx1ZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFBhcmFtZXRlcjogW10sXG4gICAgICAgIFN0YXRpY1ZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX092ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIE5ld0RlZmF1bHRWYWx1ZXM6IChfKSA9PiBzZV9OZXdEZWZhdWx0VmFsdWVzKF8sIGNvbnRleHQpLFxuICAgICAgICBOZXdQYXJhbWV0ZXJOYW1lOiBbXSxcbiAgICAgICAgUGFyYW1ldGVyTmFtZTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGFyYW1ldGVyQ29udHJvbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVUaW1lUGlja2VyOiBfanNvbixcbiAgICAgICAgRHJvcGRvd246IF9qc29uLFxuICAgICAgICBMaXN0OiBfanNvbixcbiAgICAgICAgU2xpZGVyOiAoXykgPT4gc2VfUGFyYW1ldGVyU2xpZGVyQ29udHJvbChfLCBjb250ZXh0KSxcbiAgICAgICAgVGV4dEFyZWE6IF9qc29uLFxuICAgICAgICBUZXh0RmllbGQ6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BhcmFtZXRlckNvbnRyb2xMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX1BhcmFtZXRlckNvbnRyb2woZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BhcmFtZXRlckRlY2xhcmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbjogKF8pID0+IHNlX0RhdGVUaW1lUGFyYW1ldGVyRGVjbGFyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIERlY2ltYWxQYXJhbWV0ZXJEZWNsYXJhdGlvbjogKF8pID0+IHNlX0RlY2ltYWxQYXJhbWV0ZXJEZWNsYXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZWdlclBhcmFtZXRlckRlY2xhcmF0aW9uOiBfanNvbixcbiAgICAgICAgU3RyaW5nUGFyYW1ldGVyRGVjbGFyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BhcmFtZXRlckRlY2xhcmF0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9QYXJhbWV0ZXJEZWNsYXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfX1BhcmFtZXRlcnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEYXRlVGltZVBhcmFtZXRlcnM6IChfKSA9PiBzZV9EYXRlVGltZVBhcmFtZXRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIERlY2ltYWxQYXJhbWV0ZXJzOiAoXykgPT4gc2VfRGVjaW1hbFBhcmFtZXRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEludGVnZXJQYXJhbWV0ZXJzOiBfanNvbixcbiAgICAgICAgU3RyaW5nUGFyYW1ldGVyczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGFyYW1ldGVyU2xpZGVyQ29udHJvbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERpc3BsYXlPcHRpb25zOiBfanNvbixcbiAgICAgICAgTWF4aW11bVZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBNaW5pbXVtVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIFBhcmFtZXRlckNvbnRyb2xJZDogW10sXG4gICAgICAgIFNvdXJjZVBhcmFtZXRlck5hbWU6IFtdLFxuICAgICAgICBTdGVwU2l6ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgVGl0bGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BlcmNlbnRpbGVBZ2dyZWdhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFBlcmNlbnRpbGVWYWx1ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QZXJjZW50VmlzaWJsZVJhbmdlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRnJvbTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgVG86IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGVyaW9kT3ZlclBlcmlvZENvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVmFsdWU6IChfKSA9PiBzZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGVyaW9kVG9EYXRlQ29tcHV0YXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb21wdXRhdGlvbklkOiBbXSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBlcmlvZFRpbWVHcmFudWxhcml0eTogW10sXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaWVDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlczogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGllQ2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBDb250cmlidXRpb25BbmFseXNpc0RlZmF1bHRzOiBfanNvbixcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIERvbnV0T3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9QaWVDaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfUGllQ2hhcnRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IHNlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWYWx1ZUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BpZUNoYXJ0RmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFBpZUNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9QaWVDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BpZUNoYXJ0U29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU21hbGxNdWx0aXBsZXNMaW1pdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlc1NvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaWVDaGFydFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9QaWVDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gc2VfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdEZpZWxkU29ydE9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZElkOiBbXSxcbiAgICAgICAgU29ydEJ5OiAoXykgPT4gc2VfUGl2b3RUYWJsZVNvcnRCeShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdEZpZWxkU29ydE9wdGlvbnNMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX1Bpdm90RmllbGRTb3J0T3B0aW9ucyhlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RNZWFzdXJlRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RUYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uczogX2pzb24sXG4gICAgICAgIFJvd3M6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9QaXZvdE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RUYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZElkOiBbXSxcbiAgICAgICAgU2NvcGU6IF9qc29uLFxuICAgICAgICBTY29wZXM6IF9qc29uLFxuICAgICAgICBUZXh0Rm9ybWF0OiAoXykgPT4gc2VfVGV4dENvbmRpdGlvbmFsRm9ybWF0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Bpdm90VGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25zOiAoXykgPT4gc2VfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENlbGw6IChfKSA9PiBzZV9QaXZvdFRhYmxlQ2VsbENvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdFRhYmxlQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpZWxkT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9QaXZvdFRhYmxlRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgUGFnaW5hdGVkUmVwb3J0T3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfUGl2b3RUYWJsZVNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUYWJsZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBUb3RhbE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Bpdm90VGFibGVGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGl2b3RUYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfUGl2b3RUYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Bpdm90VGFibGVTb3J0QnkgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW46IChfKSA9PiBzZV9Db2x1bW5Tb3J0KF8sIGNvbnRleHQpLFxuICAgICAgICBEYXRhUGF0aDogX2pzb24sXG4gICAgICAgIEZpZWxkOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdFRhYmxlU29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZFNvcnRPcHRpb25zOiAoXykgPT4gc2VfUGl2b3RGaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdFRhYmxlVmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1Bpdm90VGFibGVDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBzZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1ByZWRlZmluZWRIaWVyYXJjaHkgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW5zOiBfanNvbixcbiAgICAgICAgRHJpbGxEb3duRmlsdGVyczogKF8pID0+IHNlX0RyaWxsRG93bkZpbHRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEhpZXJhcmNoeUlkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9SYWRhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIENvbG9yOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfUmFkYXJDaGFydFZhbHVlc0ZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9SYWRhckNoYXJ0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFsdGVybmF0ZUJhbmRDb2xvcnNWaXNpYmlsaXR5OiBbXSxcbiAgICAgICAgQWx0ZXJuYXRlQmFuZEV2ZW5Db2xvcjogW10sXG4gICAgICAgIEFsdGVybmF0ZUJhbmRPZGRDb2xvcjogW10sXG4gICAgICAgIEF4ZXNSYW5nZVNjYWxlOiBbXSxcbiAgICAgICAgQmFzZVNlcmllc1NldHRpbmdzOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlBeGlzOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yQXhpczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sb3JMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfUmFkYXJDaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIFNoYXBlOiBbXSxcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9SYWRhckNoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFN0YXJ0QW5nbGU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JhZGFyQ2hhcnRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUmFkYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfUmFkYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JhZGFyQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb2xvckl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDb2xvclNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9SYWRhckNoYXJ0VmFsdWVzRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUmFkYXJDaGFydFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9SYWRhckNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JlZmVyZW5jZUxpbmUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEYXRhQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX1JlZmVyZW5jZUxpbmVEYXRhQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgTGFiZWxDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBbXSxcbiAgICAgICAgU3R5bGVDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9SZWZlcmVuY2VMaW5lRGF0YUNvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBeGlzQmluZGluZzogW10sXG4gICAgICAgIER5bmFtaWNDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfUmVmZXJlbmNlTGluZUR5bmFtaWNEYXRhQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgU2VyaWVzVHlwZTogW10sXG4gICAgICAgIFN0YXRpY0NvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9SZWZlcmVuY2VMaW5lU3RhdGljRGF0YUNvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUmVmZXJlbmNlTGluZUR5bmFtaWNEYXRhQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhbGN1bGF0aW9uOiAoXykgPT4gc2VfTnVtZXJpY2FsQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgTWVhc3VyZUFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBzZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JlZmVyZW5jZUxpbmVMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX1JlZmVyZW5jZUxpbmUoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JlZmVyZW5jZUxpbmVTdGF0aWNEYXRhQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JlZnJlc2hTY2hlZHVsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFybjogW10sXG4gICAgICAgIFJlZnJlc2hUeXBlOiBbXSxcbiAgICAgICAgU2NoZWR1bGVGcmVxdWVuY3k6IF9qc29uLFxuICAgICAgICBTY2hlZHVsZUlkOiBbXSxcbiAgICAgICAgU3RhcnRBZnRlckRhdGVUaW1lOiAoXykgPT4gTWF0aC5yb3VuZChfLmdldFRpbWUoKSAvIDEwMDApLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Jvd1NvcnRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0ZpZWxkU29ydE9wdGlvbnMoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NhbmtleURpYWdyYW1BZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERlc3RpbmF0aW9uOiBfanNvbixcbiAgICAgICAgU291cmNlOiBfanNvbixcbiAgICAgICAgV2VpZ2h0OiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TYW5rZXlEaWFncmFtQ2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9TYW5rZXlEaWFncmFtRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9TYW5rZXlEaWFncmFtU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2Fua2V5RGlhZ3JhbUZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBTYW5rZXlEaWFncmFtQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9TYW5rZXlEaWFncmFtQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2Fua2V5RGlhZ3JhbVNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGVzdGluYXRpb25JdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgU291cmNlSXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIFdlaWdodFNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TYW5rZXlEaWFncmFtVmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1NhbmtleURpYWdyYW1DaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIExhYmVsOiBfanNvbixcbiAgICAgICAgU2l6ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgWUF4aXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NjYXR0ZXJQbG90Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfU2NhdHRlclBsb3RGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFhBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgWUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgWUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NjYXR0ZXJQbG90RmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFNjYXR0ZXJQbG90Q2F0ZWdvcmljYWxseUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIFNjYXR0ZXJQbG90VW5hZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX1NjYXR0ZXJQbG90VW5hZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TY2F0dGVyUGxvdFVuYWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIExhYmVsOiBfanNvbixcbiAgICAgICAgU2l6ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzOiBfanNvbixcbiAgICAgICAgWUF4aXM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NjYXR0ZXJQbG90VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1NjYXR0ZXJQbG90Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Njcm9sbEJhck9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBWaXNpYmlsaXR5OiBbXSxcbiAgICAgICAgVmlzaWJsZVJhbmdlOiAoXykgPT4gc2VfVmlzaWJsZVJhbmdlT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TZWN0aW9uQmFzZWRMYXlvdXRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQm9keVNlY3Rpb25zOiBfanNvbixcbiAgICAgICAgQ2FudmFzU2l6ZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGb290ZXJTZWN0aW9uczogX2pzb24sXG4gICAgICAgIEhlYWRlclNlY3Rpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TZW5zaXRpdmVEb3VibGVMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fc2VyaWFsaXplRmxvYXQoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NlbnNpdGl2ZVRpbWVzdGFtcExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChlbnRyeS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZXN0aW5hdGlvblBhcmFtZXRlck5hbWU6IFtdLFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX0Rlc3RpbmF0aW9uUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NldFBhcmFtZXRlclZhbHVlQ29uZmlndXJhdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfU2V0UGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TaGFwZUNvbmRpdGlvbmFsRm9ybWF0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmFja2dyb3VuZENvbG9yOiAoXykgPT4gc2VfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2hlZXREZWZpbml0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29udGVudFR5cGU6IFtdLFxuICAgICAgICBEZXNjcmlwdGlvbjogW10sXG4gICAgICAgIEZpbHRlckNvbnRyb2xzOiAoXykgPT4gc2VfRmlsdGVyQ29udHJvbExpc3QoXywgY29udGV4dCksXG4gICAgICAgIExheW91dHM6IChfKSA9PiBzZV9MYXlvdXRMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGFyYW1ldGVyQ29udHJvbHM6IChfKSA9PiBzZV9QYXJhbWV0ZXJDb250cm9sTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU2hlZXRDb250cm9sTGF5b3V0czogX2pzb24sXG4gICAgICAgIFNoZWV0SWQ6IFtdLFxuICAgICAgICBUZXh0Qm94ZXM6IF9qc29uLFxuICAgICAgICBUaXRsZTogW10sXG4gICAgICAgIFZpc3VhbHM6IChfKSA9PiBzZV9WaXN1YWxMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NoZWV0RGVmaW5pdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfU2hlZXREZWZpbml0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TbmFwc2hvdENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZXN0aW5hdGlvbkNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBGaWxlR3JvdXBzOiBfanNvbixcbiAgICAgICAgUGFyYW1ldGVyczogKF8pID0+IHNlX19QYXJhbWV0ZXJzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBHcm91cEJ5OiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZElkOiBbXSxcbiAgICAgICAgVGV4dEZvcm1hdDogKF8pID0+IHNlX1RleHRDb25kaXRpb25hbEZvcm1hdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBzZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDZWxsOiAoXykgPT4gc2VfVGFibGVDZWxsQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBSb3c6IChfKSA9PiBzZV9UYWJsZVJvd0NvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpZWxkT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9UYWJsZUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFBhZ2luYXRlZFJlcG9ydE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1RhYmxlU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRhYmxlSW5saW5lVmlzdWFsaXphdGlvbnM6IF9qc29uLFxuICAgICAgICBUYWJsZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBUb3RhbE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFRhYmxlQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9UYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBUYWJsZVVuYWdncmVnYXRlZEZpZWxkV2VsbHM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlUm93Q29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmFja2dyb3VuZENvbG9yOiAoXykgPT4gc2VfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlU29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBQYWdpbmF0aW9uQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFJvd1NvcnQ6IChfKSA9PiBzZV9Sb3dTb3J0TGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UYWJsZVZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9UYWJsZUNvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZzogKF8pID0+IHNlX1RhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RlbXBsYXRlVmVyc2lvbkRlZmluaXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBbmFseXNpc0RlZmF1bHRzOiBfanNvbixcbiAgICAgICAgQ2FsY3VsYXRlZEZpZWxkczogX2pzb24sXG4gICAgICAgIENvbHVtbkNvbmZpZ3VyYXRpb25zOiBfanNvbixcbiAgICAgICAgRGF0YVNldENvbmZpZ3VyYXRpb25zOiBfanNvbixcbiAgICAgICAgRmlsdGVyR3JvdXBzOiAoXykgPT4gc2VfRmlsdGVyR3JvdXBMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBPcHRpb25zOiBfanNvbixcbiAgICAgICAgUGFyYW1ldGVyRGVjbGFyYXRpb25zOiAoXykgPT4gc2VfUGFyYW1ldGVyRGVjbGFyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTaGVldHM6IChfKSA9PiBzZV9TaGVldERlZmluaXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RleHRDb25kaXRpb25hbEZvcm1hdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJhY2tncm91bmRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBJY29uOiBfanNvbixcbiAgICAgICAgVGV4dENvbG9yOiAoXykgPT4gc2VfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVGltZUJhc2VkRm9yZWNhc3RQcm9wZXJ0aWVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTG93ZXJCb3VuZGFyeTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgUGVyaW9kc0JhY2t3YXJkOiBbXSxcbiAgICAgICAgUGVyaW9kc0ZvcndhcmQ6IFtdLFxuICAgICAgICBQcmVkaWN0aW9uSW50ZXJ2YWw6IFtdLFxuICAgICAgICBTZWFzb25hbGl0eTogW10sXG4gICAgICAgIFVwcGVyQm91bmRhcnk6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVGltZUVxdWFsaXR5RmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IFtdLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBbXSxcbiAgICAgICAgUm9sbGluZ0RhdGU6IF9qc29uLFxuICAgICAgICBUaW1lR3JhbnVsYXJpdHk6IFtdLFxuICAgICAgICBWYWx1ZTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UaW1lUmFuZ2VEcmlsbERvd25GaWx0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBSYW5nZU1heGltdW06IChfKSA9PiBNYXRoLnJvdW5kKF8uZ2V0VGltZSgpIC8gMTAwMCksXG4gICAgICAgIFJhbmdlTWluaW11bTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UaW1lUmFuZ2VGaWx0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBFeGNsdWRlUGVyaW9kQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIEZpbHRlcklkOiBbXSxcbiAgICAgICAgSW5jbHVkZU1heGltdW06IFtdLFxuICAgICAgICBJbmNsdWRlTWluaW11bTogW10sXG4gICAgICAgIE51bGxPcHRpb246IFtdLFxuICAgICAgICBSYW5nZU1heGltdW1WYWx1ZTogKF8pID0+IHNlX1RpbWVSYW5nZUZpbHRlclZhbHVlKF8sIGNvbnRleHQpLFxuICAgICAgICBSYW5nZU1pbmltdW1WYWx1ZTogKF8pID0+IHNlX1RpbWVSYW5nZUZpbHRlclZhbHVlKF8sIGNvbnRleHQpLFxuICAgICAgICBUaW1lR3JhbnVsYXJpdHk6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RpbWVSYW5nZUZpbHRlclZhbHVlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGFyYW1ldGVyOiBbXSxcbiAgICAgICAgUm9sbGluZ0RhdGU6IF9qc29uLFxuICAgICAgICBTdGF0aWNWYWx1ZTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Ub29sdGlwSXRlbSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbHVtblRvb2x0aXBJdGVtOiAoXykgPT4gc2VfQ29sdW1uVG9vbHRpcEl0ZW0oXywgY29udGV4dCksXG4gICAgICAgIEZpZWxkVG9vbHRpcEl0ZW06IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Rvb2x0aXBJdGVtTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9Ub29sdGlwSXRlbShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVG9vbHRpcE9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZEJhc2VkVG9vbHRpcDogKF8pID0+IHNlX0ZpZWxkQmFzZWRUb29sdGlwKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RlZFRvb2x0aXBUeXBlOiBbXSxcbiAgICAgICAgVG9vbHRpcFZpc2liaWxpdHk6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RvcEJvdHRvbUZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uU29ydENvbmZpZ3VyYXRpb25zOiAoXykgPT4gc2VfQWdncmVnYXRpb25Tb3J0Q29uZmlndXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIEZpbHRlcklkOiBbXSxcbiAgICAgICAgTGltaXQ6IFtdLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBbXSxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Ub3BCb3R0b21Nb3ZlcnNDb21wdXRhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29tcHV0YXRpb25JZDogW10sXG4gICAgICAgIE1vdmVyU2l6ZTogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBTb3J0T3JkZXI6IFtdLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVHlwZTogW10sXG4gICAgICAgIFZhbHVlOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RvcEJvdHRvbVJhbmtlZENvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBDb21wdXRhdGlvbklkOiBbXSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFJlc3VsdFNpemU6IFtdLFxuICAgICAgICBUeXBlOiBbXSxcbiAgICAgICAgVmFsdWU6IChfKSA9PiBzZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVG9waWNSZWZyZXNoU2NoZWR1bGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCYXNlZE9uU3BpY2VTY2hlZHVsZTogW10sXG4gICAgICAgIElzRW5hYmxlZDogW10sXG4gICAgICAgIFJlcGVhdEF0OiBbXSxcbiAgICAgICAgU3RhcnRpbmdBdDogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICAgICAgVGltZXpvbmU6IFtdLFxuICAgICAgICBUb3BpY1NjaGVkdWxlVHlwZTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVG90YWxBZ2dyZWdhdGlvbkNvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UcmFuc2Zvcm1PcGVyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gVHJhbnNmb3JtT3BlcmF0aW9uLnZpc2l0KGlucHV0LCB7XG4gICAgICAgIENhc3RDb2x1bW5UeXBlT3BlcmF0aW9uOiAodmFsdWUpID0+ICh7IENhc3RDb2x1bW5UeXBlT3BlcmF0aW9uOiBfanNvbih2YWx1ZSkgfSksXG4gICAgICAgIENyZWF0ZUNvbHVtbnNPcGVyYXRpb246ICh2YWx1ZSkgPT4gKHsgQ3JlYXRlQ29sdW1uc09wZXJhdGlvbjogX2pzb24odmFsdWUpIH0pLFxuICAgICAgICBGaWx0ZXJPcGVyYXRpb246ICh2YWx1ZSkgPT4gKHsgRmlsdGVyT3BlcmF0aW9uOiBfanNvbih2YWx1ZSkgfSksXG4gICAgICAgIE92ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbjogKHZhbHVlKSA9PiAoe1xuICAgICAgICAgICAgT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uOiBzZV9PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24odmFsdWUsIGNvbnRleHQpLFxuICAgICAgICB9KSxcbiAgICAgICAgUHJvamVjdE9wZXJhdGlvbjogKHZhbHVlKSA9PiAoeyBQcm9qZWN0T3BlcmF0aW9uOiBfanNvbih2YWx1ZSkgfSksXG4gICAgICAgIFJlbmFtZUNvbHVtbk9wZXJhdGlvbjogKHZhbHVlKSA9PiAoeyBSZW5hbWVDb2x1bW5PcGVyYXRpb246IF9qc29uKHZhbHVlKSB9KSxcbiAgICAgICAgVGFnQ29sdW1uT3BlcmF0aW9uOiAodmFsdWUpID0+ICh7IFRhZ0NvbHVtbk9wZXJhdGlvbjogX2pzb24odmFsdWUpIH0pLFxuICAgICAgICBVbnRhZ0NvbHVtbk9wZXJhdGlvbjogKHZhbHVlKSA9PiAoeyBVbnRhZ0NvbHVtbk9wZXJhdGlvbjogX2pzb24odmFsdWUpIH0pLFxuICAgICAgICBfOiAobmFtZSwgdmFsdWUpID0+ICh7IG5hbWU6IHZhbHVlIH0pLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RyYW5zZm9ybU9wZXJhdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfVHJhbnNmb3JtT3BlcmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UcmVlTWFwQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvcnM6IChfKSA9PiBzZV9UcmVlTWFwTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgR3JvdXBzOiBfanNvbixcbiAgICAgICAgU2l6ZXM6IChfKSA9PiBzZV9UcmVlTWFwTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UcmVlTWFwQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbG9yTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29sb3JTY2FsZTogKF8pID0+IHNlX0NvbG9yU2NhbGUoXywgY29udGV4dCksXG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfVHJlZU1hcEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEdyb3VwTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgU2l6ZUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfVHJlZU1hcFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gc2VfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVHJlZU1hcEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBUcmVlTWFwQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9UcmVlTWFwQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVHJlZU1hcE1lYXN1cmVGaWVsZExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UcmVlTWFwU29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBUcmVlTWFwR3JvdXBJdGVtc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFRyZWVNYXBTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVHJlZU1hcFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9UcmVlTWFwQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Zpc2libGVSYW5nZU9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBQZXJjZW50UmFuZ2U6IChfKSA9PiBzZV9QZXJjZW50VmlzaWJsZVJhbmdlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Zpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJhckNoYXJ0VmlzdWFsOiAoXykgPT4gc2VfQmFyQ2hhcnRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEJveFBsb3RWaXN1YWw6IChfKSA9PiBzZV9Cb3hQbG90VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBDb21ib0NoYXJ0VmlzdWFsOiAoXykgPT4gc2VfQ29tYm9DaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgQ3VzdG9tQ29udGVudFZpc3VhbDogKF8pID0+IHNlX0N1c3RvbUNvbnRlbnRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEVtcHR5VmlzdWFsOiAoXykgPT4gc2VfRW1wdHlWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEZpbGxlZE1hcFZpc3VhbDogKF8pID0+IHNlX0ZpbGxlZE1hcFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgRnVubmVsQ2hhcnRWaXN1YWw6IChfKSA9PiBzZV9GdW5uZWxDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgR2F1Z2VDaGFydFZpc3VhbDogKF8pID0+IHNlX0dhdWdlQ2hhcnRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEdlb3NwYXRpYWxNYXBWaXN1YWw6IChfKSA9PiBzZV9HZW9zcGF0aWFsTWFwVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBIZWF0TWFwVmlzdWFsOiAoXykgPT4gc2VfSGVhdE1hcFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgSGlzdG9ncmFtVmlzdWFsOiAoXykgPT4gc2VfSGlzdG9ncmFtVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnNpZ2h0VmlzdWFsOiAoXykgPT4gc2VfSW5zaWdodFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgS1BJVmlzdWFsOiAoXykgPT4gc2VfS1BJVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBMaW5lQ2hhcnRWaXN1YWw6IChfKSA9PiBzZV9MaW5lQ2hhcnRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFBpZUNoYXJ0VmlzdWFsOiAoXykgPT4gc2VfUGllQ2hhcnRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFBpdm90VGFibGVWaXN1YWw6IChfKSA9PiBzZV9QaXZvdFRhYmxlVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBSYWRhckNoYXJ0VmlzdWFsOiAoXykgPT4gc2VfUmFkYXJDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgU2Fua2V5RGlhZ3JhbVZpc3VhbDogKF8pID0+IHNlX1NhbmtleURpYWdyYW1WaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFNjYXR0ZXJQbG90VmlzdWFsOiAoXykgPT4gc2VfU2NhdHRlclBsb3RWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFRhYmxlVmlzdWFsOiAoXykgPT4gc2VfVGFibGVWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFRyZWVNYXBWaXN1YWw6IChfKSA9PiBzZV9UcmVlTWFwVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBXYXRlcmZhbGxWaXN1YWw6IChfKSA9PiBzZV9XYXRlcmZhbGxWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFdvcmRDbG91ZFZpc3VhbDogKF8pID0+IHNlX1dvcmRDbG91ZFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9WaXN1YWxDdXN0b21BY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25PcGVyYXRpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uT3BlcmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ3VzdG9tQWN0aW9uSWQ6IFtdLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgU3RhdHVzOiBbXSxcbiAgICAgICAgVHJpZ2dlcjogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9WaXN1YWxDdXN0b21BY3Rpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbk9wZXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbHRlck9wZXJhdGlvbjogX2pzb24sXG4gICAgICAgIE5hdmlnYXRpb25PcGVyYXRpb246IF9qc29uLFxuICAgICAgICBTZXRQYXJhbWV0ZXJzT3BlcmF0aW9uOiAoXykgPT4gc2VfQ3VzdG9tQWN0aW9uU2V0UGFyYW1ldGVyc09wZXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVVJMT3BlcmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9WaXN1YWxDdXN0b21BY3Rpb25PcGVyYXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX1Zpc3VhbEN1c3RvbUFjdGlvbk9wZXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVmlzdWFsTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9WaXN1YWwoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1dhdGVyZmFsbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCcmVha2Rvd25zOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcmllczogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV2F0ZXJmYWxsQ2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5QXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfV2F0ZXJmYWxsQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBQcmltYXJ5WUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJpbWFyeVlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9XYXRlcmZhbGxDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICAgICAgV2F0ZXJmYWxsQ2hhcnRPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9XYXRlcmZhbGxDaGFydEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBXYXRlcmZhbGxDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfV2F0ZXJmYWxsQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9XYXRlcmZhbGxDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQnJlYWtkb3duSXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1dhdGVyZmFsbFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9XYXRlcmZhbGxDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gc2VfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9XaGF0SWZQb2ludFNjZW5hcmlvID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0ZTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICAgICAgVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV2hhdElmUmFuZ2VTY2VuYXJpbyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEVuZERhdGU6IChfKSA9PiBNYXRoLnJvdW5kKF8uZ2V0VGltZSgpIC8gMTAwMCksXG4gICAgICAgIFN0YXJ0RGF0ZTogKF8pID0+IE1hdGgucm91bmQoXy5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICAgICAgVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV29yZENsb3VkQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBHcm91cEJ5OiBfanNvbixcbiAgICAgICAgU2l6ZTogKF8pID0+IHNlX1dvcmRDbG91ZE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV29yZENsb3VkQ2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfV29yZENsb3VkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9Xb3JkQ2xvdWRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgV29yZENsb3VkT3B0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV29yZENsb3VkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFdvcmRDbG91ZEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfV29yZENsb3VkQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV29yZENsb3VkTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1dvcmRDbG91ZFNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV29yZENsb3VkVmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1dvcmRDbG91ZENoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEF0dHJpYnV0ZUFnZ3JlZ2F0aW9uRnVuY3Rpb246IF9qc29uLFxuICAgICAgICBDYXRlZ29yaWNhbEFnZ3JlZ2F0aW9uRnVuY3Rpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRlQWdncmVnYXRpb25GdW5jdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE51bWVyaWNhbEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBkZV9OdW1lcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0FnZ3JlZ2F0aW9uU29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBkZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBTb3J0RGlyZWN0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0FuYWx5c2lzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBbmFseXNpc0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhdGFTZXRBcm5zOiBfanNvbixcbiAgICAgICAgRXJyb3JzOiBfanNvbixcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2hlZXRzOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0FuYWx5c2lzRGVmaW5pdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5hbHlzaXNEZWZhdWx0czogX2pzb24sXG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IF9qc29uLFxuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIERhdGFTZXRJZGVudGlmaWVyRGVjbGFyYXRpb25zOiBfanNvbixcbiAgICAgICAgRmlsdGVyR3JvdXBzOiAoXykgPT4gZGVfRmlsdGVyR3JvdXBMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBPcHRpb25zOiBfanNvbixcbiAgICAgICAgUGFyYW1ldGVyRGVjbGFyYXRpb25zOiAoXykgPT4gZGVfUGFyYW1ldGVyRGVjbGFyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTaGVldHM6IChfKSA9PiBkZV9TaGVldERlZmluaXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0FuYWx5c2lzU3VtbWFyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5hbHlzaXNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0FuYWx5c2lzU3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQW5hbHlzaXNTdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0FyY0F4aXNDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBSYW5nZTogKF8pID0+IGRlX0FyY0F4aXNEaXNwbGF5UmFuZ2UoXywgY29udGV4dCksXG4gICAgICAgIFJlc2VydmVSYW5nZTogX19leHBlY3RJbnQzMixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BcmNBeGlzRGlzcGxheVJhbmdlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBNYXg6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBNaW46IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0FyY0NvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFyY0FuZ2xlOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgQXJjVGhpY2tuZXNzOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Bc3NldEJ1bmRsZUV4cG9ydEpvYlN1bW1hcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFzc2V0QnVuZGxlRXhwb3J0Sm9iSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRXhwb3J0Rm9ybWF0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5jbHVkZUFsbERlcGVuZGVuY2llczogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBJbmNsdWRlUGVybWlzc2lvbnM6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgSW5jbHVkZVRhZ3M6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgSm9iU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Bc3NldEJ1bmRsZUV4cG9ydEpvYlN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Fzc2V0QnVuZGxlRXhwb3J0Sm9iU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Bc3NldEJ1bmRsZUltcG9ydEpvYk92ZXJyaWRlUGFyYW1ldGVycyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5hbHlzZXM6IF9qc29uLFxuICAgICAgICBEYXNoYm9hcmRzOiBfanNvbixcbiAgICAgICAgRGF0YVNldHM6IF9qc29uLFxuICAgICAgICBEYXRhU291cmNlczogX2pzb24sXG4gICAgICAgIFJlZnJlc2hTY2hlZHVsZXM6IChfKSA9PiBkZV9Bc3NldEJ1bmRsZUltcG9ydEpvYlJlZnJlc2hTY2hlZHVsZU92ZXJyaWRlUGFyYW1ldGVyc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIFJlc291cmNlSWRPdmVycmlkZUNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBUaGVtZXM6IF9qc29uLFxuICAgICAgICBWUENDb25uZWN0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXNzZXRCdW5kbGVJbXBvcnRKb2JSZWZyZXNoU2NoZWR1bGVPdmVycmlkZVBhcmFtZXRlcnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGFTZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNjaGVkdWxlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGFydEFmdGVyRGF0ZVRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXNzZXRCdW5kbGVJbXBvcnRKb2JSZWZyZXNoU2NoZWR1bGVPdmVycmlkZVBhcmFtZXRlcnNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iUmVmcmVzaFNjaGVkdWxlT3ZlcnJpZGVQYXJhbWV0ZXJzKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iU3VtbWFyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzZXRCdW5kbGVJbXBvcnRKb2JJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBGYWlsdXJlQWN0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSm9iU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Bc3NldEJ1bmRsZUltcG9ydEpvYlN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9BeGlzRGF0YU9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGVBeGlzT3B0aW9uczogX2pzb24sXG4gICAgICAgIE51bWVyaWNBeGlzT3B0aW9uczogKF8pID0+IGRlX051bWVyaWNBeGlzT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BeGlzRGlzcGxheU1pbk1heFJhbmdlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBNYXhpbXVtOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgTWluaW11bTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc0Rpc3BsYXlPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBeGlzTGluZVZpc2liaWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBeGlzT2Zmc2V0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGF0YU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIEdyaWRMaW5lVmlzaWJpbGl0eTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNjcm9sbGJhck9wdGlvbnM6IChfKSA9PiBkZV9TY3JvbGxCYXJPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBUaWNrTGFiZWxPcHRpb25zOiAoXykgPT4gZGVfQXhpc1RpY2tMYWJlbE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc0Rpc3BsYXlSYW5nZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGF0YURyaXZlbjogX2pzb24sXG4gICAgICAgIE1pbk1heDogKF8pID0+IGRlX0F4aXNEaXNwbGF5TWluTWF4UmFuZ2UoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc0xpbmVhclNjYWxlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBTdGVwQ291bnQ6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFN0ZXBTaXplOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BeGlzTG9nYXJpdGhtaWNTY2FsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFzZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc1NjYWxlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBMaW5lYXI6IChfKSA9PiBkZV9BeGlzTGluZWFyU2NhbGUoXywgY29udGV4dCksXG4gICAgICAgIExvZ2FyaXRobWljOiAoXykgPT4gZGVfQXhpc0xvZ2FyaXRobWljU2NhbGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc1RpY2tMYWJlbE9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIExhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJvdGF0aW9uQW5nbGU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29sb3JzOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXM6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JhckNoYXJ0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFyc0FycmFuZ2VtZW50OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ2F0ZWdvcnlBeGlzOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29udHJpYnV0aW9uQW5hbHlzaXNEZWZhdWx0czogX2pzb24sXG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfQmFyQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBPcmllbnRhdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlZmVyZW5jZUxpbmVzOiAoXykgPT4gZGVfUmVmZXJlbmNlTGluZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfQmFyQ2hhcnRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWYWx1ZUF4aXM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQmFyQ2hhcnRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfQmFyQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9CYXJDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sb3JJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ29sb3JTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQmFyQ2hhcnRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9CYXJDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9CaW5XaWR0aE9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJpbkNvdW50TGltaXQ6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JveFBsb3RBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgR3JvdXBCeTogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IGRlX0JveFBsb3RNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JveFBsb3RDaGFydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJveFBsb3RPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlBeGlzOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9Cb3hQbG90RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJlZmVyZW5jZUxpbmVzOiAoXykgPT4gZGVfUmVmZXJlbmNlTGluZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfQm94UGxvdFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gZGVfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JveFBsb3RGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCb3hQbG90QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9Cb3hQbG90QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQm94UGxvdE1lYXN1cmVGaWVsZExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0JveFBsb3RTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIFBhZ2luYXRpb25Db25maWd1cmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Cb3hQbG90VmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfQm94UGxvdENoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbG9yU2NhbGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbG9yRmlsbFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDb2xvcnM6IChfKSA9PiBkZV9Db2xvclNjYWxlQ29sb3JMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOdWxsVmFsdWVDb2xvcjogKF8pID0+IGRlX0RhdGFDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db2xvclNjYWxlQ29sb3JMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0RhdGFDb2xvcihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Db2x1bW5IaWVyYXJjaHkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGVUaW1lSGllcmFyY2h5OiAoXykgPT4gZGVfRGF0ZVRpbWVIaWVyYXJjaHkoXywgY29udGV4dCksXG4gICAgICAgIEV4cGxpY2l0SGllcmFyY2h5OiAoXykgPT4gZGVfRXhwbGljaXRIaWVyYXJjaHkoXywgY29udGV4dCksXG4gICAgICAgIFByZWRlZmluZWRIaWVyYXJjaHk6IChfKSA9PiBkZV9QcmVkZWZpbmVkSGllcmFyY2h5KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbHVtbkhpZXJhcmNoeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQ29sdW1uSGllcmFyY2h5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0NvbHVtblNvcnQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBkZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBEaXJlY3Rpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3J0Qnk6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbHVtblRvb2x0aXBJdGVtID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvbjogKF8pID0+IGRlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIExhYmVsOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzaWJpbGl0eTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29tYm9DaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCYXJWYWx1ZXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIENvbG9yczogX2pzb24sXG4gICAgICAgIExpbmVWYWx1ZXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbWJvQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCYXJEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgQmFyc0FycmFuZ2VtZW50OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ2F0ZWdvcnlBeGlzOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0NvbWJvQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBMaW5lRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIFByaW1hcnlZQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBQcmltYXJ5WUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBSZWZlcmVuY2VMaW5lczogKF8pID0+IGRlX1JlZmVyZW5jZUxpbmVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTZWNvbmRhcnlZQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWNvbmRhcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNpbmdsZUF4aXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9Db21ib0NoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBkZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29tYm9DaGFydEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbWJvQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX0NvbWJvQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db21ib0NoYXJ0U29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb2xvckl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDb2xvclNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db21ib0NoYXJ0VmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfQ29tYm9DaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db21wdXRhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRm9yZWNhc3Q6IChfKSA9PiBkZV9Gb3JlY2FzdENvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBHcm93dGhSYXRlOiAoXykgPT4gZGVfR3Jvd3RoUmF0ZUNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXhpbXVtTWluaW11bTogKF8pID0+IGRlX01heGltdW1NaW5pbXVtQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIE1ldHJpY0NvbXBhcmlzb246IChfKSA9PiBkZV9NZXRyaWNDb21wYXJpc29uQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFBlcmlvZE92ZXJQZXJpb2Q6IChfKSA9PiBkZV9QZXJpb2RPdmVyUGVyaW9kQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFBlcmlvZFRvRGF0ZTogKF8pID0+IGRlX1BlcmlvZFRvRGF0ZUNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb3BCb3R0b21Nb3ZlcnM6IChfKSA9PiBkZV9Ub3BCb3R0b21Nb3ZlcnNDb21wdXRhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9wQm90dG9tUmFua2VkOiAoXykgPT4gZGVfVG9wQm90dG9tUmFua2VkQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvdGFsQWdncmVnYXRpb246IChfKSA9PiBkZV9Ub3RhbEFnZ3JlZ2F0aW9uQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFVuaXF1ZVZhbHVlczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29tcHV0YXRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbXB1dGF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBHcmFkaWVudDogKF8pID0+IGRlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0dyYWRpZW50Q29sb3IoXywgY29udGV4dCksXG4gICAgICAgIFNvbGlkOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdHcmFkaWVudENvbG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2xvcjogKF8pID0+IGRlX0dyYWRpZW50Q29sb3IoXywgY29udGV4dCksXG4gICAgICAgIEV4cHJlc3Npb246IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0N1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFBhcmFtZXRlclZhbHVlQ29uZmlndXJhdGlvbnM6IChfKSA9PiBkZV9TZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0N1c3RvbUNvbnRlbnRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBEYXRhU2V0SWRlbnRpZmllcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ3VzdG9tUGFyYW1ldGVyVmFsdWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVZhbHVlczogKF8pID0+IGRlX0RhdGVUaW1lRGVmYXVsdFZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFZhbHVlczogKF8pID0+IGRlX0RlY2ltYWxEZWZhdWx0VmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyVmFsdWVzOiBfanNvbixcbiAgICAgICAgU3RyaW5nVmFsdWVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9DdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDdXN0b21WYWx1ZXM6IChfKSA9PiBkZV9DdXN0b21QYXJhbWV0ZXJWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIEluY2x1ZGVOdWxsVmFsdWU6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXNoYm9hcmQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEYXNoYm9hcmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhc3RQdWJsaXNoZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExpbmtFbnRpdGllczogX2pzb24sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uOiAoXykgPT4gZGVfRGFzaGJvYXJkVmVyc2lvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXNoYm9hcmRTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGFzaGJvYXJkSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0UHVibGlzaGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUHVibGlzaGVkVmVyc2lvbk51bWJlcjogX19leHBlY3RMb25nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZFN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Rhc2hib2FyZFN1bW1hcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRGFzaGJvYXJkVmVyc2lvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhdGFTZXRBcm5zOiBfanNvbixcbiAgICAgICAgRGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFcnJvcnM6IF9qc29uLFxuICAgICAgICBTaGVldHM6IF9qc29uLFxuICAgICAgICBTb3VyY2VFbnRpdHlBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25OdW1iZXI6IF9fZXhwZWN0TG9uZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXNoYm9hcmRWZXJzaW9uRGVmaW5pdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5hbHlzaXNEZWZhdWx0czogX2pzb24sXG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IF9qc29uLFxuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIERhdGFTZXRJZGVudGlmaWVyRGVjbGFyYXRpb25zOiBfanNvbixcbiAgICAgICAgRmlsdGVyR3JvdXBzOiAoXykgPT4gZGVfRmlsdGVyR3JvdXBMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBPcHRpb25zOiBfanNvbixcbiAgICAgICAgUGFyYW1ldGVyRGVjbGFyYXRpb25zOiAoXykgPT4gZGVfUGFyYW1ldGVyRGVjbGFyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTaGVldHM6IChfKSA9PiBkZV9TaGVldERlZmluaXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZFZlcnNpb25TdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3VyY2VFbnRpdHlBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uTnVtYmVyOiBfX2V4cGVjdExvbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGFzaGJvYXJkVmVyc2lvblN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Rhc2hib2FyZFZlcnNpb25TdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RhdGFDb2xvciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGFTZXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENvbHVtbkdyb3VwczogX2pzb24sXG4gICAgICAgIENvbHVtbkxldmVsUGVybWlzc2lvblJ1bGVzOiBfanNvbixcbiAgICAgICAgQ29uc3VtZWRTcGljZUNhcGFjaXR5SW5CeXRlczogX19leHBlY3RMb25nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGF0YVNldElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNldFVzYWdlQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIERhdGFzZXRQYXJhbWV0ZXJzOiAoXykgPT4gZGVfRGF0YXNldFBhcmFtZXRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEZpZWxkRm9sZGVyczogX2pzb24sXG4gICAgICAgIEltcG9ydE1vZGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExvZ2ljYWxUYWJsZU1hcDogKF8pID0+IGRlX0xvZ2ljYWxUYWJsZU1hcChfLCBjb250ZXh0KSxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE91dHB1dENvbHVtbnM6IF9qc29uLFxuICAgICAgICBQaHlzaWNhbFRhYmxlTWFwOiBfanNvbixcbiAgICAgICAgUm93TGV2ZWxQZXJtaXNzaW9uRGF0YVNldDogX2pzb24sXG4gICAgICAgIFJvd0xldmVsUGVybWlzc2lvblRhZ0NvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGFzZXRQYXJhbWV0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGVUaW1lRGF0YXNldFBhcmFtZXRlcjogKF8pID0+IGRlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbERhdGFzZXRQYXJhbWV0ZXI6IChfKSA9PiBkZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZWdlckRhdGFzZXRQYXJhbWV0ZXI6IF9qc29uLFxuICAgICAgICBTdHJpbmdEYXRhc2V0UGFyYW1ldGVyOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRhc2V0UGFyYW1ldGVyTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXRhc2V0UGFyYW1ldGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RhdGFTZXRTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDb2x1bW5MZXZlbFBlcm1pc3Npb25SdWxlc0FwcGxpZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhdGFTZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEltcG9ydE1vZGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25EYXRhU2V0OiBfanNvbixcbiAgICAgICAgUm93TGV2ZWxQZXJtaXNzaW9uVGFnQ29uZmlndXJhdGlvbkFwcGxpZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRhU2V0U3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRGF0YVNldFN1bW1hcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRGF0YVNvdXJjZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWx0ZXJuYXRlRGF0YVNvdXJjZVBhcmFtZXRlcnM6IF9qc29uLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGF0YVNvdXJjZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNvdXJjZVBhcmFtZXRlcnM6IChfKSA9PiBfanNvbihfX2V4cGVjdFVuaW9uKF8pKSxcbiAgICAgICAgRXJyb3JJbmZvOiBfanNvbixcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2VjcmV0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3NsUHJvcGVydGllczogX2pzb24sXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWcGNDb25uZWN0aW9uUHJvcGVydGllczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGF0YVNvdXJjZUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRGF0YVNvdXJjZShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9EYXRhU291cmNlU3VtbWFyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhdGFTb3VyY2VJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhc3RVcGRhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGFTb3VyY2VTdW1tYXJ5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXRhU291cmNlU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9EYXRlVGltZURhdGFzZXRQYXJhbWV0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERlZmF1bHRWYWx1ZXM6IChfKSA9PiBkZV9EYXRlVGltZURhdGFzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWVzKF8sIGNvbnRleHQpLFxuICAgICAgICBJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaW1lR3JhbnVsYXJpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWYWx1ZVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFN0YXRpY1ZhbHVlczogKF8pID0+IGRlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRlVGltZURhdGFzZXRQYXJhbWV0ZXJWYWx1ZUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihlbnRyeSkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RhdGVUaW1lRGVmYXVsdFZhbHVlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKGVudHJ5KSkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRGF0ZVRpbWVEZWZhdWx0VmFsdWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEeW5hbWljVmFsdWU6IF9qc29uLFxuICAgICAgICBSb2xsaW5nRGF0ZTogX2pzb24sXG4gICAgICAgIFN0YXRpY1ZhbHVlczogKF8pID0+IGRlX0RhdGVUaW1lRGVmYXVsdFZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRlVGltZUhpZXJhcmNoeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRHJpbGxEb3duRmlsdGVyczogKF8pID0+IGRlX0RyaWxsRG93bkZpbHRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEhpZXJhcmNoeUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRlVGltZVBhcmFtZXRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlczogKF8pID0+IGRlX1NlbnNpdGl2ZVRpbWVzdGFtcExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGVmYXVsdFZhbHVlczogKF8pID0+IGRlX0RhdGVUaW1lRGVmYXVsdFZhbHVlcyhfLCBjb250ZXh0KSxcbiAgICAgICAgTWFwcGVkRGF0YVNldFBhcmFtZXRlcnM6IF9qc29uLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWVXaGVuVW5zZXQ6IChfKSA9PiBkZV9EYXRlVGltZVZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRlVGltZVBhcmFtZXRlckxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRGF0ZVRpbWVQYXJhbWV0ZXIoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRGF0ZVRpbWVWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEN1c3RvbVZhbHVlOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBWYWx1ZVdoZW5VbnNldE9wdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGVjaW1hbERhdGFzZXRQYXJhbWV0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERlZmF1bHRWYWx1ZXM6IChfKSA9PiBkZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGVjaW1hbERhdGFzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBTdGF0aWNWYWx1ZXM6IChfKSA9PiBkZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2xpbWl0ZWRQYXJzZURvdWJsZShlbnRyeSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9EZWNpbWFsRGVmYXVsdFZhbHVlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2xpbWl0ZWRQYXJzZURvdWJsZShlbnRyeSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9EZWNpbWFsRGVmYXVsdFZhbHVlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRHluYW1pY1ZhbHVlOiBfanNvbixcbiAgICAgICAgU3RhdGljVmFsdWVzOiAoXykgPT4gZGVfRGVjaW1hbERlZmF1bHRWYWx1ZUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGVjaW1hbFBhcmFtZXRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlczogKF8pID0+IGRlX1NlbnNpdGl2ZURvdWJsZUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEZWZhdWx0VmFsdWVzOiAoXykgPT4gZGVfRGVjaW1hbERlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIE1hcHBlZERhdGFTZXRQYXJhbWV0ZXJzOiBfanNvbixcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBhcmFtZXRlclZhbHVlVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlV2hlblVuc2V0OiAoXykgPT4gZGVfRGVjaW1hbFZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWNpbWFsUGFyYW1ldGVyTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EZWNpbWFsUGFyYW1ldGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RlY2ltYWxWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEN1c3RvbVZhbHVlOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgVmFsdWVXaGVuVW5zZXRPcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Rlc3RpbmF0aW9uUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfQ3VzdG9tVmFsdWVzQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgU2VsZWN0QWxsVmFsdWVPcHRpb25zOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU291cmNlQ29sdW1uOiBfanNvbixcbiAgICAgICAgU291cmNlRmllbGQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3VyY2VQYXJhbWV0ZXJOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EcmlsbERvd25GaWx0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5RmlsdGVyOiBfanNvbixcbiAgICAgICAgTnVtZXJpY0VxdWFsaXR5RmlsdGVyOiAoXykgPT4gZGVfTnVtZXJpY0VxdWFsaXR5RHJpbGxEb3duRmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBUaW1lUmFuZ2VGaWx0ZXI6IChfKSA9PiBkZV9UaW1lUmFuZ2VEcmlsbERvd25GaWx0ZXIoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRHJpbGxEb3duRmlsdGVyTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EcmlsbERvd25GaWx0ZXIoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRW1wdHlWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBEYXRhU2V0SWRlbnRpZmllcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9FeHBsaWNpdEhpZXJhcmNoeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uczogX2pzb24sXG4gICAgICAgIERyaWxsRG93bkZpbHRlcnM6IChfKSA9PiBkZV9EcmlsbERvd25GaWx0ZXJMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBIaWVyYXJjaHlJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRmllbGRCYXNlZFRvb2x0aXAgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uVmlzaWJpbGl0eTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvb2x0aXBGaWVsZHM6IChfKSA9PiBkZV9Ub29sdGlwSXRlbUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXBUaXRsZVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpZWxkU29ydE9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtblNvcnQ6IChfKSA9PiBkZV9Db2x1bW5Tb3J0KF8sIGNvbnRleHQpLFxuICAgICAgICBGaWVsZFNvcnQ6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0ZpZWxkU29ydE9wdGlvbnMoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRmlsbGVkTWFwQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEdlb3NwYXRpYWw6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9GaWxsZWRNYXBNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uczogKF8pID0+IGRlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRmlsbGVkTWFwQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBTaGFwZTogKF8pID0+IGRlX0ZpbGxlZE1hcFNoYXBlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRmlsbGVkTWFwQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0ZpbGxlZE1hcENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9GaWxsZWRNYXBGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBNYXBTdHlsZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0ZpbGxlZE1hcFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gZGVfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFdpbmRvd09wdGlvbnM6IChfKSA9PiBkZV9HZW9zcGF0aWFsV2luZG93T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWxsZWRNYXBGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWxsZWRNYXBBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX0ZpbGxlZE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpbGxlZE1hcE1lYXN1cmVGaWVsZExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0ZpbGxlZE1hcFNoYXBlQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRm9ybWF0OiAoXykgPT4gZGVfU2hhcGVDb25kaXRpb25hbEZvcm1hdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWxsZWRNYXBTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRmlsbGVkTWFwVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfRmlsbGVkTWFwQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBkZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUZpbHRlcjogX2pzb24sXG4gICAgICAgIE51bWVyaWNFcXVhbGl0eUZpbHRlcjogKF8pID0+IGRlX051bWVyaWNFcXVhbGl0eUZpbHRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgTnVtZXJpY1JhbmdlRmlsdGVyOiAoXykgPT4gZGVfTnVtZXJpY1JhbmdlRmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBSZWxhdGl2ZURhdGVzRmlsdGVyOiBfanNvbixcbiAgICAgICAgVGltZUVxdWFsaXR5RmlsdGVyOiAoXykgPT4gZGVfVGltZUVxdWFsaXR5RmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBUaW1lUmFuZ2VGaWx0ZXI6IChfKSA9PiBkZV9UaW1lUmFuZ2VGaWx0ZXIoXywgY29udGV4dCksXG4gICAgICAgIFRvcEJvdHRvbUZpbHRlcjogKF8pID0+IGRlX1RvcEJvdHRvbUZpbHRlcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWx0ZXJDb250cm9sID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVBpY2tlcjogX2pzb24sXG4gICAgICAgIERyb3Bkb3duOiBfanNvbixcbiAgICAgICAgTGlzdDogX2pzb24sXG4gICAgICAgIFJlbGF0aXZlRGF0ZVRpbWU6IF9qc29uLFxuICAgICAgICBTbGlkZXI6IChfKSA9PiBkZV9GaWx0ZXJTbGlkZXJDb250cm9sKF8sIGNvbnRleHQpLFxuICAgICAgICBUZXh0QXJlYTogX2pzb24sXG4gICAgICAgIFRleHRGaWVsZDogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRmlsdGVyQ29udHJvbExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRmlsdGVyQ29udHJvbChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9GaWx0ZXJHcm91cCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ3Jvc3NEYXRhc2V0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRmlsdGVyR3JvdXBJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZpbHRlcnM6IChfKSA9PiBkZV9GaWx0ZXJMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTY29wZUNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpbHRlckdyb3VwTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9GaWx0ZXJHcm91cChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9GaWx0ZXJMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0ZpbHRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9GaWx0ZXJTbGlkZXJDb250cm9sID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEaXNwbGF5T3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpbHRlckNvbnRyb2xJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE1heGltdW1WYWx1ZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIE1pbmltdW1WYWx1ZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIFNvdXJjZUZpbHRlcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RlcFNpemU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBUaXRsZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZvbGRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEZvbGRlcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRm9sZGVyUGF0aDogX2pzb24sXG4gICAgICAgIEZvbGRlclR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTaGFyaW5nTW9kZWw6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZvbGRlclN1bW1hcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBGb2xkZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvbGRlclR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTaGFyaW5nTW9kZWw6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZvbGRlclN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0ZvbGRlclN1bW1hcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRm9yZWNhc3RDb21wdXRhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEN1c3RvbVNlYXNvbmFsaXR5VmFsdWU6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIExvd2VyQm91bmRhcnk6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGVyaW9kc0JhY2t3YXJkOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBQZXJpb2RzRm9yd2FyZDogX19leHBlY3RJbnQzMixcbiAgICAgICAgUHJlZGljdGlvbkludGVydmFsOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBTZWFzb25hbGl0eTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBVcHBlckJvdW5kYXJ5OiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgVmFsdWU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRm9yZWNhc3RDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGb3JlY2FzdFByb3BlcnRpZXM6IChfKSA9PiBkZV9UaW1lQmFzZWRGb3JlY2FzdFByb3BlcnRpZXMoXywgY29udGV4dCksXG4gICAgICAgIFNjZW5hcmlvOiAoXykgPT4gZGVfRm9yZWNhc3RTY2VuYXJpbyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Gb3JlY2FzdENvbmZpZ3VyYXRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0ZvcmVjYXN0Q29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Gb3JlY2FzdFNjZW5hcmlvID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBXaGF0SWZQb2ludFNjZW5hcmlvOiAoXykgPT4gZGVfV2hhdElmUG9pbnRTY2VuYXJpbyhfLCBjb250ZXh0KSxcbiAgICAgICAgV2hhdElmUmFuZ2VTY2VuYXJpbzogKF8pID0+IGRlX1doYXRJZlJhbmdlU2NlbmFyaW8oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRnVubmVsQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9GdW5uZWxDaGFydE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRnVubmVsQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIERhdGFMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfRnVubmVsQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0Z1bm5lbENoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBkZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmFsdWVMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GdW5uZWxDaGFydEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZ1bm5lbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9GdW5uZWxDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Z1bm5lbENoYXJ0TWVhc3VyZUZpZWxkTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRnVubmVsQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRnVubmVsQ2hhcnRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9GdW5uZWxDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0QXJjQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGb3JlZ3JvdW5kQ29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0Q29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25zOiAoXykgPT4gZGVfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJjOiAoXykgPT4gZGVfR2F1Z2VDaGFydEFyY0NvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJpbWFyeVZhbHVlOiAoXykgPT4gZGVfR2F1Z2VDaGFydFByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0Q29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9HYXVnZUNoYXJ0Q29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0dhdWdlQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0dhdWdlQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBHYXVnZUNoYXJ0T3B0aW9uczogKF8pID0+IGRlX0dhdWdlQ2hhcnRPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBUb29sdGlwT3B0aW9uczogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0RmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgVGFyZ2V0VmFsdWVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0T3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJjOiAoXykgPT4gZGVfQXJjQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQXJjQXhpczogKF8pID0+IGRlX0FyY0F4aXNDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb21wYXJpc29uOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVZhbHVlRGlzcGxheVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQcmltYXJ5VmFsdWVGb250Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2F1Z2VDaGFydFByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgSWNvbjogX2pzb24sXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IGRlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dhdWdlQ2hhcnRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9HYXVnZUNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nOiAoXykgPT4gZGVfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsQ29vcmRpbmF0ZUJvdW5kcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRWFzdDogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIE5vcnRoOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgU291dGg6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBXZXN0OiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsTWFwQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbG9yczogX2pzb24sXG4gICAgICAgIEdlb3NwYXRpYWw6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxNYXBDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfR2Vvc3BhdGlhbE1hcEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIE1hcFN0eWxlT3B0aW9uczogX2pzb24sXG4gICAgICAgIFBvaW50U3R5bGVPcHRpb25zOiBfanNvbixcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICAgICAgV2luZG93T3B0aW9uczogKF8pID0+IGRlX0dlb3NwYXRpYWxXaW5kb3dPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxNYXBGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBHZW9zcGF0aWFsTWFwQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9HZW9zcGF0aWFsTWFwQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbE1hcFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0dlb3NwYXRpYWxNYXBDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IGRlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbFdpbmRvd09wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJvdW5kczogKF8pID0+IGRlX0dlb3NwYXRpYWxDb29yZGluYXRlQm91bmRzKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXBab29tTW9kZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR3JhZGllbnRDb2xvciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgU3RvcHM6IChfKSA9PiBkZV9HcmFkaWVudFN0b3BMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dyYWRpZW50U3RvcCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBHcmFkaWVudE9mZnNldDogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR3JhZGllbnRTdG9wTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9HcmFkaWVudFN0b3AoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfR3Jvd3RoUmF0ZUNvbXB1dGF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb21wdXRhdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBlcmlvZFNpemU6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBWYWx1ZTogKF8pID0+IGRlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IZWF0TWFwQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtbnM6IF9qc29uLFxuICAgICAgICBSb3dzOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfSGVhdE1hcE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSGVhdE1hcENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbG9yU2NhbGU6IChfKSA9PiBkZV9Db2xvclNjYWxlKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5MYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0hlYXRNYXBGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBSb3dMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0hlYXRNYXBTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0hlYXRNYXBGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBIZWF0TWFwQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9IZWF0TWFwQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSGVhdE1hcE1lYXN1cmVGaWVsZExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0hlYXRNYXBTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgSGVhdE1hcENvbHVtbkl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgSGVhdE1hcENvbHVtblNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSGVhdE1hcFJvd0l0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgSGVhdE1hcFJvd1NvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IZWF0TWFwVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfSGVhdE1hcENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IaXN0b2dyYW1BZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfSGlzdG9ncmFtTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IaXN0b2dyYW1CaW5PcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCaW5Db3VudDogX2pzb24sXG4gICAgICAgIEJpbldpZHRoOiAoXykgPT4gZGVfQmluV2lkdGhPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RlZEJpblR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGFydFZhbHVlOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IaXN0b2dyYW1Db25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCaW5PcHRpb25zOiAoXykgPT4gZGVfSGlzdG9ncmFtQmluT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9IaXN0b2dyYW1GaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gZGVfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgICAgICBYQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBYQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSGlzdG9ncmFtRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgSGlzdG9ncmFtQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9IaXN0b2dyYW1BZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IaXN0b2dyYW1NZWFzdXJlRmllbGRMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9IaXN0b2dyYW1WaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9IaXN0b2dyYW1Db25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luZ2VzdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEVycm9ySW5mbzogX2pzb24sXG4gICAgICAgIEluZ2VzdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uU2l6ZUluQnl0ZXM6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgSW5nZXN0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uVGltZUluU2Vjb25kczogX19leHBlY3RMb25nLFxuICAgICAgICBRdWV1ZUluZm86IF9qc29uLFxuICAgICAgICBSZXF1ZXN0U291cmNlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSb3dJbmZvOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Jbmdlc3Rpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0luZ2VzdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9JbnNpZ2h0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25zOiAoXykgPT4gZGVfQ29tcHV0YXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDdXN0b21OYXJyYXRpdmU6IF9qc29uLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luc2lnaHRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBEYXRhU2V0SWRlbnRpZmllcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEluc2lnaHRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfSW5zaWdodENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfS1BJQWN0dWFsVmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9LUElDb21wYXJpc29uVmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBkZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0tQSUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0dWFsVmFsdWU6IChfKSA9PiBkZV9LUElBY3R1YWxWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgQ29tcGFyaXNvblZhbHVlOiAoXykgPT4gZGVfS1BJQ29tcGFyaXNvblZhbHVlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBQcmltYXJ5VmFsdWU6IChfKSA9PiBkZV9LUElQcmltYXJ5VmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFByb2dyZXNzQmFyOiAoXykgPT4gZGVfS1BJUHJvZ3Jlc3NCYXJDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfS1BJQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfS1BJQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0tQSUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIEtQSU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0tQSVNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0tQSUZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFRhcmdldFZhbHVlczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFRyZW5kR3JvdXBzOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9LUElQcmltYXJ5VmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9LUElQcm9ncmVzc0JhckNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRm9yZWdyb3VuZENvbG9yOiAoXykgPT4gZGVfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfS1BJU29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFRyZW5kR3JvdXBTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfS1BJVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfS1BJQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBkZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGF5b3V0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfTGF5b3V0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MYXlvdXRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGcmVlRm9ybUxheW91dDogX2pzb24sXG4gICAgICAgIEdyaWRMYXlvdXQ6IF9qc29uLFxuICAgICAgICBTZWN0aW9uQmFzZWRMYXlvdXQ6IChfKSA9PiBkZV9TZWN0aW9uQmFzZWRMYXlvdXRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xheW91dExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTGF5b3V0KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0xpbmVDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIENvbG9yczogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MaW5lQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb250cmlidXRpb25BbmFseXNpc0RlZmF1bHRzOiBfanNvbixcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIERlZmF1bHRTZXJpZXNTZXR0aW5nczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9MaW5lQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBGb3JlY2FzdENvbmZpZ3VyYXRpb25zOiAoXykgPT4gZGVfRm9yZWNhc3RDb25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9MaW5lU2VyaWVzQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBQcmltYXJ5WUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBSZWZlcmVuY2VMaW5lczogKF8pID0+IGRlX1JlZmVyZW5jZUxpbmVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTZWNvbmRhcnlZQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gZGVfTGluZVNlcmllc0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgU2Vjb25kYXJ5WUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTZXJpZXM6IF9qc29uLFxuICAgICAgICBTaW5nbGVBeGlzT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfTGluZUNoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBkZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgICAgICBYQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBYQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGluZUNoYXJ0RmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTGluZUNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9MaW5lQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MaW5lQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlJdGVtc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb2xvckl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNMaW1pdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlc1NvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MaW5lQ2hhcnRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9MaW5lQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IGRlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGluZVNlcmllc0F4aXNEaXNwbGF5T3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXhpc09wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIE1pc3NpbmdEYXRhQ29uZmlndXJhdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xvZ2ljYWxUYWJsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWxpYXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhVHJhbnNmb3JtczogKF8pID0+IGRlX1RyYW5zZm9ybU9wZXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNvdXJjZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTG9naWNhbFRhYmxlTWFwID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhvdXRwdXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGFjY1trZXldID0gZGVfTG9naWNhbFRhYmxlKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59O1xuY29uc3QgZGVfTWF4aW11bU1pbmltdW1Db21wdXRhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX01lYXN1cmVGaWVsZCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2FsY3VsYXRlZE1lYXN1cmVGaWVsZDogX2pzb24sXG4gICAgICAgIENhdGVnb3JpY2FsTWVhc3VyZUZpZWxkOiBfanNvbixcbiAgICAgICAgRGF0ZU1lYXN1cmVGaWVsZDogX2pzb24sXG4gICAgICAgIE51bWVyaWNhbE1lYXN1cmVGaWVsZDogKF8pID0+IGRlX051bWVyaWNhbE1lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZWFzdXJlRmllbGRMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9NZXRyaWNDb21wYXJpc29uQ29tcHV0YXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGcm9tVmFsdWU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUYXJnZXRWYWx1ZTogKF8pID0+IGRlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTmV3RGVmYXVsdFZhbHVlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGF0ZVRpbWVTdGF0aWNWYWx1ZXM6IChfKSA9PiBkZV9EYXRlVGltZURhdGFzZXRQYXJhbWV0ZXJWYWx1ZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIERlY2ltYWxTdGF0aWNWYWx1ZXM6IChfKSA9PiBkZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZWdlclN0YXRpY1ZhbHVlczogX2pzb24sXG4gICAgICAgIFN0cmluZ1N0YXRpY1ZhbHVlczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTnVtZXJpY2FsQWdncmVnYXRpb25GdW5jdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgUGVyY2VudGlsZUFnZ3JlZ2F0aW9uOiAoXykgPT4gZGVfUGVyY2VudGlsZUFnZ3JlZ2F0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTaW1wbGVOdW1lcmljYWxBZ2dyZWdhdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTnVtZXJpY2FsTWVhc3VyZUZpZWxkID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvbkZ1bmN0aW9uOiAoXykgPT4gZGVfTnVtZXJpY2FsQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRmllbGRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX051bWVyaWNBeGlzT3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgUmFuZ2U6IChfKSA9PiBkZV9BeGlzRGlzcGxheVJhbmdlKF8sIGNvbnRleHQpLFxuICAgICAgICBTY2FsZTogKF8pID0+IGRlX0F4aXNTY2FsZShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9OdW1lcmljRXF1YWxpdHlEcmlsbERvd25GaWx0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIFZhbHVlOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9OdW1lcmljRXF1YWxpdHlGaWx0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBkZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBGaWx0ZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE1hdGNoT3BlcmF0b3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOdWxsT3B0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGFyYW1ldGVyTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNlbGVjdEFsbE9wdGlvbnM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWYWx1ZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTnVtZXJpY1JhbmdlRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvbkZ1bmN0aW9uOiAoXykgPT4gZGVfQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmNsdWRlTWF4aW11bTogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBJbmNsdWRlTWluaW11bTogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBOdWxsT3B0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmFuZ2VNYXhpbXVtOiAoXykgPT4gZGVfTnVtZXJpY1JhbmdlRmlsdGVyVmFsdWUoXywgY29udGV4dCksXG4gICAgICAgIFJhbmdlTWluaW11bTogKF8pID0+IGRlX051bWVyaWNSYW5nZUZpbHRlclZhbHVlKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RBbGxPcHRpb25zOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9OdW1lcmljUmFuZ2VGaWx0ZXJWYWx1ZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgUGFyYW1ldGVyOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdGljVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX092ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTmV3RGVmYXVsdFZhbHVlczogKF8pID0+IGRlX05ld0RlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIE5ld1BhcmFtZXRlck5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QYXJhbWV0ZXJDb250cm9sID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVBpY2tlcjogX2pzb24sXG4gICAgICAgIERyb3Bkb3duOiBfanNvbixcbiAgICAgICAgTGlzdDogX2pzb24sXG4gICAgICAgIFNsaWRlcjogKF8pID0+IGRlX1BhcmFtZXRlclNsaWRlckNvbnRyb2woXywgY29udGV4dCksXG4gICAgICAgIFRleHRBcmVhOiBfanNvbixcbiAgICAgICAgVGV4dEZpZWxkOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QYXJhbWV0ZXJDb250cm9sTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9QYXJhbWV0ZXJDb250cm9sKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1BhcmFtZXRlckRlY2xhcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVBhcmFtZXRlckRlY2xhcmF0aW9uOiAoXykgPT4gZGVfRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uOiAoXykgPT4gZGVfRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyUGFyYW1ldGVyRGVjbGFyYXRpb246IF9qc29uLFxuICAgICAgICBTdHJpbmdQYXJhbWV0ZXJEZWNsYXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGFyYW1ldGVyRGVjbGFyYXRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1BhcmFtZXRlckRlY2xhcmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX19QYXJhbWV0ZXJzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVBhcmFtZXRlcnM6IChfKSA9PiBkZV9EYXRlVGltZVBhcmFtZXRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIERlY2ltYWxQYXJhbWV0ZXJzOiAoXykgPT4gZGVfRGVjaW1hbFBhcmFtZXRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEludGVnZXJQYXJhbWV0ZXJzOiBfanNvbixcbiAgICAgICAgU3RyaW5nUGFyYW1ldGVyczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGFyYW1ldGVyU2xpZGVyQ29udHJvbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGlzcGxheU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBNYXhpbXVtVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBNaW5pbXVtVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBQYXJhbWV0ZXJDb250cm9sSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3VyY2VQYXJhbWV0ZXJOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RlcFNpemU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBUaXRsZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGVyY2VudGlsZUFnZ3JlZ2F0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQZXJjZW50aWxlVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1BlcmNlbnRWaXNpYmxlUmFuZ2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZyb206IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBUbzogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGVyaW9kT3ZlclBlcmlvZENvbXB1dGF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb21wdXRhdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBWYWx1ZTogKF8pID0+IGRlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QZXJpb2RUb0RhdGVDb21wdXRhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQZXJpb2RUaW1lR3JhbnVsYXJpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVmFsdWU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGllQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlczogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGllQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbnRyaWJ1dGlvbkFuYWx5c2lzRGVmYXVsdHM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRG9udXRPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX1BpZUNoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9QaWVDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gZGVfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGllQ2hhcnRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQaWVDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfUGllQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaWVDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU21hbGxNdWx0aXBsZXNMaW1pdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlc1NvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaWVDaGFydFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1BpZUNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Bpdm90RmllbGRTb3J0T3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNvcnRCeTogKF8pID0+IGRlX1Bpdm90VGFibGVTb3J0QnkoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGl2b3RGaWVsZFNvcnRPcHRpb25zTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9QaXZvdEZpZWxkU29ydE9wdGlvbnMoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfUGl2b3RNZWFzdXJlRmllbGRMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9QaXZvdFRhYmxlQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtbnM6IF9qc29uLFxuICAgICAgICBSb3dzOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfUGl2b3RNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Bpdm90VGFibGVDZWxsQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2NvcGU6IF9qc29uLFxuICAgICAgICBTY29wZXM6IF9qc29uLFxuICAgICAgICBUZXh0Rm9ybWF0OiAoXykgPT4gZGVfVGV4dENvbmRpdGlvbmFsRm9ybWF0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Bpdm90VGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBkZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDZWxsOiAoXykgPT4gZGVfUGl2b3RUYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9QaXZvdFRhYmxlQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX1Bpdm90VGFibGVGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBQYWdpbmF0ZWRSZXBvcnRPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9QaXZvdFRhYmxlU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRhYmxlT3B0aW9uczogX2pzb24sXG4gICAgICAgIFRvdGFsT3B0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGl2b3RUYWJsZUZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFBpdm90VGFibGVBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX1Bpdm90VGFibGVBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaXZvdFRhYmxlU29ydEJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2x1bW46IChfKSA9PiBkZV9Db2x1bW5Tb3J0KF8sIGNvbnRleHQpLFxuICAgICAgICBEYXRhUGF0aDogX2pzb24sXG4gICAgICAgIEZpZWxkOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaXZvdFRhYmxlU29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZpZWxkU29ydE9wdGlvbnM6IChfKSA9PiBkZV9QaXZvdEZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Bpdm90VGFibGVWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9QaXZvdFRhYmxlQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nOiAoXykgPT4gZGVfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QcmVkZWZpbmVkSGllcmFyY2h5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2x1bW5zOiBfanNvbixcbiAgICAgICAgRHJpbGxEb3duRmlsdGVyczogKF8pID0+IGRlX0RyaWxsRG93bkZpbHRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEhpZXJhcmNoeUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SYWRhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29sb3I6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9SYWRhckNoYXJ0VmFsdWVzRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1JhZGFyQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBbHRlcm5hdGVCYW5kQ29sb3JzVmlzaWJpbGl0eTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFsdGVybmF0ZUJhbmRFdmVuQ29sb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBbHRlcm5hdGVCYW5kT2RkQ29sb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBeGVzUmFuZ2VTY2FsZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEJhc2VTZXJpZXNTZXR0aW5nczogX2pzb24sXG4gICAgICAgIENhdGVnb3J5QXhpczogKF8pID0+IGRlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgQ2F0ZWdvcnlMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBDb2xvckF4aXM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENvbG9yTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX1JhZGFyQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBTaGFwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfUmFkYXJDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTdGFydEFuZ2xlOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmFkYXJDaGFydEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFJhZGFyQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX1JhZGFyQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SYWRhckNoYXJ0U29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb2xvckl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDb2xvclNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SYWRhckNoYXJ0VmFsdWVzRmllbGRMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9SYWRhckNoYXJ0VmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfUmFkYXJDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWZlcmVuY2VMaW5lID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRhQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX1JlZmVyZW5jZUxpbmVEYXRhQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgTGFiZWxDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3R5bGVDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWZlcmVuY2VMaW5lRGF0YUNvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEF4aXNCaW5kaW5nOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRHluYW1pY0NvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9SZWZlcmVuY2VMaW5lRHluYW1pY0RhdGFDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTZXJpZXNUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdGljQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX1JlZmVyZW5jZUxpbmVTdGF0aWNEYXRhQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWZlcmVuY2VMaW5lRHluYW1pY0RhdGFDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYWxjdWxhdGlvbjogKF8pID0+IGRlX051bWVyaWNhbEFnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIE1lYXN1cmVBZ2dyZWdhdGlvbkZ1bmN0aW9uOiAoXykgPT4gZGVfQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWZlcmVuY2VMaW5lTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9SZWZlcmVuY2VMaW5lKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1JlZmVyZW5jZUxpbmVTdGF0aWNEYXRhQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1JlZnJlc2hTY2hlZHVsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVmcmVzaFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTY2hlZHVsZUZyZXF1ZW5jeTogX2pzb24sXG4gICAgICAgIFNjaGVkdWxlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGFydEFmdGVyRGF0ZVRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmVmcmVzaFNjaGVkdWxlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9SZWZyZXNoU2NoZWR1bGUoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfUm93U29ydExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRmllbGRTb3J0T3B0aW9ucyhlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9TYW5rZXlEaWFncmFtQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERlc3RpbmF0aW9uOiBfanNvbixcbiAgICAgICAgU291cmNlOiBfanNvbixcbiAgICAgICAgV2VpZ2h0OiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TYW5rZXlEaWFncmFtQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX1NhbmtleURpYWdyYW1GaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1NhbmtleURpYWdyYW1Tb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TYW5rZXlEaWFncmFtRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgU2Fua2V5RGlhZ3JhbUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfU2Fua2V5RGlhZ3JhbUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1NhbmtleURpYWdyYW1Tb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGVzdGluYXRpb25JdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgU291cmNlSXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIFdlaWdodFNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TYW5rZXlEaWFncmFtVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfU2Fua2V5RGlhZ3JhbUNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TY2F0dGVyUGxvdENhdGVnb3JpY2FsbHlBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBMYWJlbDogX2pzb24sXG4gICAgICAgIFNpemU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBYQXhpczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFlBeGlzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TY2F0dGVyUGxvdENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfU2NhdHRlclBsb3RGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBkZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFhBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgWUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IGRlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgWUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1NjYXR0ZXJQbG90RmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9TY2F0dGVyUGxvdENhdGVnb3JpY2FsbHlBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgU2NhdHRlclBsb3RVbmFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfU2NhdHRlclBsb3RVbmFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1NjYXR0ZXJQbG90VW5hZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBMYWJlbDogX2pzb24sXG4gICAgICAgIFNpemU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBYQXhpczogX2pzb24sXG4gICAgICAgIFlBeGlzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TY2F0dGVyUGxvdFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1NjYXR0ZXJQbG90Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Njcm9sbEJhck9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFZpc2liaWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXNpYmxlUmFuZ2U6IChfKSA9PiBkZV9WaXNpYmxlUmFuZ2VPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1NlY3Rpb25CYXNlZExheW91dENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJvZHlTZWN0aW9uczogX2pzb24sXG4gICAgICAgIENhbnZhc1NpemVPcHRpb25zOiBfanNvbixcbiAgICAgICAgRm9vdGVyU2VjdGlvbnM6IF9qc29uLFxuICAgICAgICBIZWFkZXJTZWN0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2Vuc2l0aXZlRG91YmxlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2xpbWl0ZWRQYXJzZURvdWJsZShlbnRyeSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9TZW5zaXRpdmVUaW1lc3RhbXBMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoZW50cnkpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9TZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERlc3RpbmF0aW9uUGFyYW1ldGVyTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlOiAoXykgPT4gZGVfRGVzdGluYXRpb25QYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2V0UGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9TZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfU2hhcGVDb25kaXRpb25hbEZvcm1hdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFja2dyb3VuZENvbG9yOiAoXykgPT4gZGVfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2hlZXREZWZpbml0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb250ZW50VHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERlc2NyaXB0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRmlsdGVyQ29udHJvbHM6IChfKSA9PiBkZV9GaWx0ZXJDb250cm9sTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTGF5b3V0czogKF8pID0+IGRlX0xheW91dExpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQYXJhbWV0ZXJDb250cm9sczogKF8pID0+IGRlX1BhcmFtZXRlckNvbnRyb2xMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTaGVldENvbnRyb2xMYXlvdXRzOiBfanNvbixcbiAgICAgICAgU2hlZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRleHRCb3hlczogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsczogKF8pID0+IGRlX1Zpc3VhbExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2hlZXREZWZpbml0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9TaGVldERlZmluaXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfU25hcHNob3RDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEZXN0aW5hdGlvbkNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBGaWxlR3JvdXBzOiBfanNvbixcbiAgICAgICAgUGFyYW1ldGVyczogKF8pID0+IGRlX19QYXJhbWV0ZXJzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RhYmxlQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEdyb3VwQnk6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RhYmxlQ2VsbENvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRleHRGb3JtYXQ6IChfKSA9PiBkZV9UZXh0Q29uZGl0aW9uYWxGb3JtYXQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBkZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENlbGw6IChfKSA9PiBkZV9UYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFJvdzogKF8pID0+IGRlX1RhYmxlUm93Q29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9UYWJsZUNvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZpZWxkT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9UYWJsZUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFBhZ2luYXRlZFJlcG9ydE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1RhYmxlU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRhYmxlSW5saW5lVmlzdWFsaXphdGlvbnM6IF9qc29uLFxuICAgICAgICBUYWJsZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBUb3RhbE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RhYmxlRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgVGFibGVBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX1RhYmxlQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIFRhYmxlVW5hZ2dyZWdhdGVkRmllbGRXZWxsczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGFibGVSb3dDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJhY2tncm91bmRDb2xvcjogKF8pID0+IGRlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UYWJsZVNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQYWdpbmF0aW9uQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFJvd1NvcnQ6IChfKSA9PiBkZV9Sb3dTb3J0TGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UYWJsZVZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1RhYmxlQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nOiAoXykgPT4gZGVfVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGVtcGxhdGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbjogKF8pID0+IGRlX1RlbXBsYXRlVmVyc2lvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UZW1wbGF0ZVN1bW1hcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExhdGVzdFZlcnNpb25OdW1iZXI6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlU3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVGVtcGxhdGVTdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlVmVyc2lvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhdGFTZXRDb25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIERlc2NyaXB0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRXJyb3JzOiBfanNvbixcbiAgICAgICAgU2hlZXRzOiBfanNvbixcbiAgICAgICAgU291cmNlRW50aXR5QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uTnVtYmVyOiBfX2V4cGVjdExvbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGVtcGxhdGVWZXJzaW9uRGVmaW5pdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5hbHlzaXNEZWZhdWx0czogX2pzb24sXG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IF9qc29uLFxuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIERhdGFTZXRDb25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIEZpbHRlckdyb3VwczogKF8pID0+IGRlX0ZpbHRlckdyb3VwTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgT3B0aW9uczogX2pzb24sXG4gICAgICAgIFBhcmFtZXRlckRlY2xhcmF0aW9uczogKF8pID0+IGRlX1BhcmFtZXRlckRlY2xhcmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU2hlZXRzOiAoXykgPT4gZGVfU2hlZXREZWZpbml0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UZW1wbGF0ZVZlcnNpb25TdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uTnVtYmVyOiBfX2V4cGVjdExvbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGVtcGxhdGVWZXJzaW9uU3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVGVtcGxhdGVWZXJzaW9uU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9UZXh0Q29uZGl0aW9uYWxGb3JtYXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJhY2tncm91bmRDb2xvcjogKF8pID0+IGRlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBJY29uOiBfanNvbixcbiAgICAgICAgVGV4dENvbG9yOiAoXykgPT4gZGVfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGhlbWUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb246IChfKSA9PiBkZV9UaGVtZVZlcnNpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGhlbWVTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXRlc3RWZXJzaW9uTnVtYmVyOiBfX2V4cGVjdExvbmcsXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaGVtZVN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1RoZW1lU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9UaGVtZVZlcnNpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEJhc2VUaGVtZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25OdW1iZXI6IF9fZXhwZWN0TG9uZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaGVtZVZlcnNpb25TdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uTnVtYmVyOiBfX2V4cGVjdExvbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGhlbWVWZXJzaW9uU3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVGhlbWVWZXJzaW9uU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9UaW1lQmFzZWRGb3JlY2FzdFByb3BlcnRpZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIExvd2VyQm91bmRhcnk6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBQZXJpb2RzQmFja3dhcmQ6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFBlcmlvZHNGb3J3YXJkOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBQcmVkaWN0aW9uSW50ZXJ2YWw6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFNlYXNvbmFsaXR5OiBfX2V4cGVjdEludDMyLFxuICAgICAgICBVcHBlckJvdW5kYXJ5OiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaW1lRXF1YWxpdHlGaWx0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIEZpbHRlcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGFyYW1ldGVyTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJvbGxpbmdEYXRlOiBfanNvbixcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGltZVJhbmdlRHJpbGxEb3duRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBSYW5nZU1heGltdW06IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFJhbmdlTWluaW11bTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaW1lUmFuZ2VGaWx0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIEV4Y2x1ZGVQZXJpb2RDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmNsdWRlTWF4aW11bTogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBJbmNsdWRlTWluaW11bTogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBOdWxsT3B0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmFuZ2VNYXhpbXVtVmFsdWU6IChfKSA9PiBkZV9UaW1lUmFuZ2VGaWx0ZXJWYWx1ZShfLCBjb250ZXh0KSxcbiAgICAgICAgUmFuZ2VNaW5pbXVtVmFsdWU6IChfKSA9PiBkZV9UaW1lUmFuZ2VGaWx0ZXJWYWx1ZShfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaW1lUmFuZ2VGaWx0ZXJWYWx1ZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgUGFyYW1ldGVyOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUm9sbGluZ0RhdGU6IF9qc29uLFxuICAgICAgICBTdGF0aWNWYWx1ZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Ub29sdGlwSXRlbSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uVG9vbHRpcEl0ZW06IChfKSA9PiBkZV9Db2x1bW5Ub29sdGlwSXRlbShfLCBjb250ZXh0KSxcbiAgICAgICAgRmllbGRUb29sdGlwSXRlbTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVG9vbHRpcEl0ZW1MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1Rvb2x0aXBJdGVtKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1Rvb2x0aXBPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZEJhc2VkVG9vbHRpcDogKF8pID0+IGRlX0ZpZWxkQmFzZWRUb29sdGlwKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RlZFRvb2x0aXBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9vbHRpcFZpc2liaWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RvcEJvdHRvbUZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb25Tb3J0Q29uZmlndXJhdGlvbnM6IChfKSA9PiBkZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMaW1pdDogX19leHBlY3RJbnQzMixcbiAgICAgICAgUGFyYW1ldGVyTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRpbWVHcmFudWxhcml0eTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVG9wQm90dG9tTW92ZXJzQ29tcHV0YXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29tcHV0YXRpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE1vdmVyU2l6ZTogX19leHBlY3RJbnQzMixcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNvcnRPcmRlcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVG9wQm90dG9tUmFua2VkQ29tcHV0YXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29tcHV0YXRpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXN1bHRTaXplOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVG9waWNSZWZyZXNoU2NoZWR1bGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJhc2VkT25TcGljZVNjaGVkdWxlOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIElzRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBSZXBlYXRBdDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXJ0aW5nQXQ6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFRpbWV6b25lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNTY2hlZHVsZVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RvcGljUmVmcmVzaFNjaGVkdWxlU3VtbWFyaWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1RvcGljUmVmcmVzaFNjaGVkdWxlU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Ub3BpY1JlZnJlc2hTY2hlZHVsZVN1bW1hcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGFzZXRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhc2V0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhc2V0TmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlZnJlc2hTY2hlZHVsZTogKF8pID0+IGRlX1RvcGljUmVmcmVzaFNjaGVkdWxlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RvdGFsQWdncmVnYXRpb25Db21wdXRhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWYWx1ZTogKF8pID0+IGRlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UcmFuc2Zvcm1PcGVyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5DYXN0Q29sdW1uVHlwZU9wZXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBDYXN0Q29sdW1uVHlwZU9wZXJhdGlvbjogX2pzb24ob3V0cHV0LkNhc3RDb2x1bW5UeXBlT3BlcmF0aW9uKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5DcmVhdGVDb2x1bW5zT3BlcmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIENyZWF0ZUNvbHVtbnNPcGVyYXRpb246IF9qc29uKG91dHB1dC5DcmVhdGVDb2x1bW5zT3BlcmF0aW9uKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5GaWx0ZXJPcGVyYXRpb24gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgRmlsdGVyT3BlcmF0aW9uOiBfanNvbihvdXRwdXQuRmlsdGVyT3BlcmF0aW9uKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uOiBkZV9PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24ob3V0cHV0Lk92ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbiwgY29udGV4dCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChvdXRwdXQuUHJvamVjdE9wZXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBQcm9qZWN0T3BlcmF0aW9uOiBfanNvbihvdXRwdXQuUHJvamVjdE9wZXJhdGlvbiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChvdXRwdXQuUmVuYW1lQ29sdW1uT3BlcmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFJlbmFtZUNvbHVtbk9wZXJhdGlvbjogX2pzb24ob3V0cHV0LlJlbmFtZUNvbHVtbk9wZXJhdGlvbiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChvdXRwdXQuVGFnQ29sdW1uT3BlcmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFRhZ0NvbHVtbk9wZXJhdGlvbjogX2pzb24ob3V0cHV0LlRhZ0NvbHVtbk9wZXJhdGlvbiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChvdXRwdXQuVW50YWdDb2x1bW5PcGVyYXRpb24gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgVW50YWdDb2x1bW5PcGVyYXRpb246IF9qc29uKG91dHB1dC5VbnRhZ0NvbHVtbk9wZXJhdGlvbiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7ICR1bmtub3duOiBPYmplY3QuZW50cmllcyhvdXRwdXQpWzBdIH07XG59O1xuY29uc3QgZGVfVHJhbnNmb3JtT3BlcmF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9UcmFuc2Zvcm1PcGVyYXRpb24oX19leHBlY3RVbmlvbihlbnRyeSksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfVHJlZU1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2xvcnM6IChfKSA9PiBkZV9UcmVlTWFwTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgR3JvdXBzOiBfanNvbixcbiAgICAgICAgU2l6ZXM6IChfKSA9PiBkZV9UcmVlTWFwTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UcmVlTWFwQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sb3JMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBDb2xvclNjYWxlOiAoXykgPT4gZGVfQ29sb3JTY2FsZShfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9UcmVlTWFwRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgR3JvdXBMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBTaXplTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9UcmVlTWFwU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBkZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UcmVlTWFwRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgVHJlZU1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfVHJlZU1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RyZWVNYXBNZWFzdXJlRmllbGRMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9UcmVlTWFwU29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFRyZWVNYXBHcm91cEl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgVHJlZU1hcFNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UcmVlTWFwVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfVHJlZU1hcENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9WaXNpYmxlUmFuZ2VPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQZXJjZW50UmFuZ2U6IChfKSA9PiBkZV9QZXJjZW50VmlzaWJsZVJhbmdlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Zpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFyQ2hhcnRWaXN1YWw6IChfKSA9PiBkZV9CYXJDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgQm94UGxvdFZpc3VhbDogKF8pID0+IGRlX0JveFBsb3RWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIENvbWJvQ2hhcnRWaXN1YWw6IChfKSA9PiBkZV9Db21ib0NoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBDdXN0b21Db250ZW50VmlzdWFsOiAoXykgPT4gZGVfQ3VzdG9tQ29udGVudFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgRW1wdHlWaXN1YWw6IChfKSA9PiBkZV9FbXB0eVZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgRmlsbGVkTWFwVmlzdWFsOiAoXykgPT4gZGVfRmlsbGVkTWFwVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBGdW5uZWxDaGFydFZpc3VhbDogKF8pID0+IGRlX0Z1bm5lbENoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBHYXVnZUNoYXJ0VmlzdWFsOiAoXykgPT4gZGVfR2F1Z2VDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgR2Vvc3BhdGlhbE1hcFZpc3VhbDogKF8pID0+IGRlX0dlb3NwYXRpYWxNYXBWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEhlYXRNYXBWaXN1YWw6IChfKSA9PiBkZV9IZWF0TWFwVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBIaXN0b2dyYW1WaXN1YWw6IChfKSA9PiBkZV9IaXN0b2dyYW1WaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEluc2lnaHRWaXN1YWw6IChfKSA9PiBkZV9JbnNpZ2h0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBLUElWaXN1YWw6IChfKSA9PiBkZV9LUElWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIExpbmVDaGFydFZpc3VhbDogKF8pID0+IGRlX0xpbmVDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgUGllQ2hhcnRWaXN1YWw6IChfKSA9PiBkZV9QaWVDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgUGl2b3RUYWJsZVZpc3VhbDogKF8pID0+IGRlX1Bpdm90VGFibGVWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFJhZGFyQ2hhcnRWaXN1YWw6IChfKSA9PiBkZV9SYWRhckNoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBTYW5rZXlEaWFncmFtVmlzdWFsOiAoXykgPT4gZGVfU2Fua2V5RGlhZ3JhbVZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgU2NhdHRlclBsb3RWaXN1YWw6IChfKSA9PiBkZV9TY2F0dGVyUGxvdFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgVGFibGVWaXN1YWw6IChfKSA9PiBkZV9UYWJsZVZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgVHJlZU1hcFZpc3VhbDogKF8pID0+IGRlX1RyZWVNYXBWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFdhdGVyZmFsbFZpc3VhbDogKF8pID0+IGRlX1dhdGVyZmFsbFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgV29yZENsb3VkVmlzdWFsOiAoXykgPT4gZGVfV29yZENsb3VkVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uT3BlcmF0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbk9wZXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEN1c3RvbUFjdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRyaWdnZXI6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbk9wZXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmlsdGVyT3BlcmF0aW9uOiBfanNvbixcbiAgICAgICAgTmF2aWdhdGlvbk9wZXJhdGlvbjogX2pzb24sXG4gICAgICAgIFNldFBhcmFtZXRlcnNPcGVyYXRpb246IChfKSA9PiBkZV9DdXN0b21BY3Rpb25TZXRQYXJhbWV0ZXJzT3BlcmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBVUkxPcGVyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbk9wZXJhdGlvbkxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uT3BlcmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1Zpc3VhbExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVmlzdWFsKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1ZQQ0Nvbm5lY3Rpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF2YWlsYWJpbGl0eVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEbnNSZXNvbHZlcnM6IF9qc29uLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOZXR3b3JrSW50ZXJmYWNlczogX2pzb24sXG4gICAgICAgIFJvbGVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTZWN1cml0eUdyb3VwSWRzOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVlBDQ29ubmVjdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVlBDSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1ZQQ0Nvbm5lY3Rpb25TdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBdmFpbGFiaWxpdHlTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRG5zUmVzb2x2ZXJzOiBfanNvbixcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmV0d29ya0ludGVyZmFjZXM6IF9qc29uLFxuICAgICAgICBSb2xlQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2VjdXJpdHlHcm91cElkczogX2pzb24sXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZQQ0Nvbm5lY3Rpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZQQ0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9WUENDb25uZWN0aW9uU3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVlBDQ29ubmVjdGlvblN1bW1hcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfV2F0ZXJmYWxsQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQnJlYWtkb3duczogX2pzb24sXG4gICAgICAgIENhdGVnb3JpZXM6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1dhdGVyZmFsbENoYXJ0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5QXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfV2F0ZXJmYWxsQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBQcmltYXJ5WUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IGRlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJpbWFyeVlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9XYXRlcmZhbGxDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICAgICAgV2F0ZXJmYWxsQ2hhcnRPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9XYXRlcmZhbGxDaGFydEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFdhdGVyZmFsbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9XYXRlcmZhbGxDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1dhdGVyZmFsbENoYXJ0U29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJyZWFrZG93bkl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9XYXRlcmZhbGxWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9XYXRlcmZhbGxDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9XaGF0SWZQb2ludFNjZW5hcmlvID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBWYWx1ZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfV2hhdElmUmFuZ2VTY2VuYXJpbyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRW5kRGF0ZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgU3RhcnREYXRlOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBWYWx1ZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfV29yZENsb3VkQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEdyb3VwQnk6IF9qc29uLFxuICAgICAgICBTaXplOiAoXykgPT4gZGVfV29yZENsb3VkTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Xb3JkQ2xvdWRDaGFydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5TGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX1dvcmRDbG91ZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfV29yZENsb3VkU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFdvcmRDbG91ZE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1dvcmRDbG91ZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFdvcmRDbG91ZEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfV29yZENsb3VkQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfV29yZENsb3VkTWVhc3VyZUZpZWxkTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfV29yZENsb3VkU29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1dvcmRDbG91ZFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1dvcmRDbG91ZENoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlc2VyaWFsaXplTWV0YWRhdGEgPSAob3V0cHV0KSA9PiAoe1xuICAgIGh0dHBTdGF0dXNDb2RlOiBvdXRwdXQuc3RhdHVzQ29kZSxcbiAgICByZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0LWlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXotcmVxdWVzdC1pZFwiXSxcbiAgICBleHRlbmRlZFJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1pZC0yXCJdLFxuICAgIGNmSWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotY2YtaWRcIl0sXG59KTtcbmNvbnN0IGNvbGxlY3RCb2R5U3RyaW5nID0gKHN0cmVhbUJvZHksIGNvbnRleHQpID0+IGNvbGxlY3RCb2R5KHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGJvZHkpID0+IGNvbnRleHQudXRmOEVuY29kZXIoYm9keSkpO1xuY29uc3QgaXNTZXJpYWxpemFibGVIZWFkZXJWYWx1ZSA9ICh2YWx1ZSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgIHZhbHVlICE9PSBudWxsICYmXG4gICAgdmFsdWUgIT09IFwiXCIgJiZcbiAgICAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKS5pbmNsdWRlcyhcImxlbmd0aFwiKSB8fCB2YWx1ZS5sZW5ndGggIT0gMCkgJiZcbiAgICAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKS5pbmNsdWRlcyhcInNpemVcIikgfHwgdmFsdWUuc2l6ZSAhPSAwKTtcbmNvbnN0IF9BREkgPSBcIkFkZGl0aW9uYWxEYXNoYm9hcmRJZHNcIjtcbmNvbnN0IF9BTiA9IFwiQWxpYXNOYW1lXCI7XG5jb25zdCBfQVMgPSBcIkFzc2lnbm1lbnRTdGF0dXNcIjtcbmNvbnN0IF9FUCA9IFwiRW50cnlQb2ludFwiO1xuY29uc3QgX0ZEV1IgPSBcIkZvcmNlRGVsZXRlV2l0aG91dFJlY292ZXJ5XCI7XG5jb25zdCBfSVQgPSBcIklkZW50aXR5VHlwZVwiO1xuY29uc3QgX01SID0gXCJNYXhSZXN1bHRzXCI7XG5jb25zdCBfTiA9IFwiTmFtZXNwYWNlXCI7XG5jb25zdCBfTlQgPSBcIk5leHRUb2tlblwiO1xuY29uc3QgX1IgPSBcIlJlc29sdmVkXCI7XG5jb25zdCBfUkQgPSBcIlJlc2V0RGlzYWJsZWRcIjtcbmNvbnN0IF9SV0lEID0gXCJSZWNvdmVyeVdpbmRvd0luRGF5c1wiO1xuY29uc3QgX1NMSU0gPSBcIlNlc3Npb25MaWZldGltZUluTWludXRlc1wiO1xuY29uc3QgX1NQRSA9IFwiU3RhdGVQZXJzaXN0ZW5jZUVuYWJsZWRcIjtcbmNvbnN0IF9UID0gXCJUeXBlXCI7XG5jb25zdCBfVEsgPSBcIlRhZ0tleXNcIjtcbmNvbnN0IF9VQSA9IFwiVXNlckFyblwiO1xuY29uc3QgX1VSRCA9IFwiVW5kb1JlZG9EaXNhYmxlZFwiO1xuY29uc3QgX1ZOID0gXCJWZXJzaW9uTnVtYmVyXCI7XG5jb25zdCBfYWRpID0gXCJhZGRpdGlvbmFsLWRhc2hib2FyZC1pZHNcIjtcbmNvbnN0IF9hbiA9IFwiYWxpYXMtbmFtZVwiO1xuY29uc3QgX2FzID0gXCJhc3NpZ25tZW50LXN0YXR1c1wiO1xuY29uc3QgX2N0ID0gXCJjcmVkcy10eXBlXCI7XG5jb25zdCBfZXAgPSBcImVudHJ5LXBvaW50XCI7XG5jb25zdCBfZmR3ciA9IFwiZm9yY2UtZGVsZXRlLXdpdGhvdXQtcmVjb3ZlcnlcIjtcbmNvbnN0IF9rID0gXCJrZXlzXCI7XG5jb25zdCBfbXIgPSBcIm1heC1yZXN1bHRzXCI7XG5jb25zdCBfbXJfID0gXCJtYXgtcmVzdWx0XCI7XG5jb25zdCBfbiA9IFwibmFtZXNwYWNlXCI7XG5jb25zdCBfbnQgPSBcIm5leHQtdG9rZW5cIjtcbmNvbnN0IF9yID0gXCJyZXNvbHZlZFwiO1xuY29uc3QgX3JkID0gXCJyZXNldC1kaXNhYmxlZFwiO1xuY29uc3QgX3J3aWQgPSBcInJlY292ZXJ5LXdpbmRvdy1pbi1kYXlzXCI7XG5jb25zdCBfc2wgPSBcInNlc3Npb24tbGlmZXRpbWVcIjtcbmNvbnN0IF9zcGUgPSBcInN0YXRlLXBlcnNpc3RlbmNlLWVuYWJsZWRcIjtcbmNvbnN0IF90ID0gXCJ0eXBlXCI7XG5jb25zdCBfdWEgPSBcInVzZXItYXJuXCI7XG5jb25zdCBfdXJkID0gXCJ1bmRvLXJlZG8tZGlzYWJsZWRcIjtcbmNvbnN0IF92biA9IFwidmVyc2lvbi1udW1iZXJcIjtcbmNvbnN0IHBhcnNlQm9keSA9IChzdHJlYW1Cb2R5LCBjb250ZXh0KSA9PiBjb2xsZWN0Qm9keVN0cmluZyhzdHJlYW1Cb2R5LCBjb250ZXh0KS50aGVuKChlbmNvZGVkKSA9PiB7XG4gICAgaWYgKGVuY29kZWQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGVuY29kZWQpO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59KTtcbmNvbnN0IHBhcnNlRXJyb3JCb2R5ID0gYXN5bmMgKGVycm9yQm9keSwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFyc2VCb2R5KGVycm9yQm9keSwgY29udGV4dCk7XG4gICAgdmFsdWUubWVzc2FnZSA9IHZhbHVlLm1lc3NhZ2UgPz8gdmFsdWUuTWVzc2FnZTtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuY29uc3QgbG9hZFJlc3RKc29uRXJyb3JDb2RlID0gKG91dHB1dCwgZGF0YSkgPT4ge1xuICAgIGNvbnN0IGZpbmRLZXkgPSAob2JqZWN0LCBrZXkpID0+IE9iamVjdC5rZXlzKG9iamVjdCkuZmluZCgoaykgPT4gay50b0xvd2VyQ2FzZSgpID09PSBrZXkudG9Mb3dlckNhc2UoKSk7XG4gICAgY29uc3Qgc2FuaXRpemVFcnJvckNvZGUgPSAocmF3VmFsdWUpID0+IHtcbiAgICAgICAgbGV0IGNsZWFuVmFsdWUgPSByYXdWYWx1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhblZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBjbGVhblZhbHVlID0gY2xlYW5WYWx1ZS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGVhblZhbHVlLmluZGV4T2YoXCIsXCIpID49IDApIHtcbiAgICAgICAgICAgIGNsZWFuVmFsdWUgPSBjbGVhblZhbHVlLnNwbGl0KFwiLFwiKVswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xlYW5WYWx1ZS5pbmRleE9mKFwiOlwiKSA+PSAwKSB7XG4gICAgICAgICAgICBjbGVhblZhbHVlID0gY2xlYW5WYWx1ZS5zcGxpdChcIjpcIilbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsZWFuVmFsdWUuaW5kZXhPZihcIiNcIikgPj0gMCkge1xuICAgICAgICAgICAgY2xlYW5WYWx1ZSA9IGNsZWFuVmFsdWUuc3BsaXQoXCIjXCIpWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGVhblZhbHVlO1xuICAgIH07XG4gICAgY29uc3QgaGVhZGVyS2V5ID0gZmluZEtleShvdXRwdXQuaGVhZGVycywgXCJ4LWFtem4tZXJyb3J0eXBlXCIpO1xuICAgIGlmIChoZWFkZXJLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc2FuaXRpemVFcnJvckNvZGUob3V0cHV0LmhlYWRlcnNbaGVhZGVyS2V5XSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmNvZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc2FuaXRpemVFcnJvckNvZGUoZGF0YS5jb2RlKTtcbiAgICB9XG4gICAgaWYgKGRhdGFbXCJfX3R5cGVcIl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc2FuaXRpemVFcnJvckNvZGUoZGF0YVtcIl9fdHlwZVwiXSk7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IGdldEVuZHBvaW50UGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0U2VyZGVQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlXCI7XG5pbXBvcnQgeyBDb21tYW5kIGFzICRDb21tYW5kIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgY29tbW9uUGFyYW1zIH0gZnJvbSBcIi4uL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgZGVfTGlzdFVzZXJzQ29tbWFuZCwgc2VfTGlzdFVzZXJzQ29tbWFuZCB9IGZyb20gXCIuLi9wcm90b2NvbHMvQXdzX3Jlc3RKc29uMVwiO1xuZXhwb3J0IHsgJENvbW1hbmQgfTtcbmV4cG9ydCBjbGFzcyBMaXN0VXNlcnNDb21tYW5kIGV4dGVuZHMgJENvbW1hbmRcbiAgICAuY2xhc3NCdWlsZGVyKClcbiAgICAuZXAoe1xuICAgIC4uLmNvbW1vblBhcmFtcyxcbn0pXG4gICAgLm0oZnVuY3Rpb24gKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBnZXRTZXJkZVBsdWdpbihjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAgICAgZ2V0RW5kcG9pbnRQbHVnaW4oY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpLFxuICAgIF07XG59KVxuICAgIC5zKFwiUXVpY2tTaWdodF8yMDE4MDQwMVwiLCBcIkxpc3RVc2Vyc1wiLCB7fSlcbiAgICAubihcIlF1aWNrU2lnaHRDbGllbnRcIiwgXCJMaXN0VXNlcnNDb21tYW5kXCIpXG4gICAgLmYodm9pZCAwLCB2b2lkIDApXG4gICAgLnNlcihzZV9MaXN0VXNlcnNDb21tYW5kKVxuICAgIC5kZShkZV9MaXN0VXNlcnNDb21tYW5kKVxuICAgIC5idWlsZCgpIHtcbn1cbiIsImltcG9ydCB7IGdldEVuZHBvaW50UGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0U2VyZGVQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlXCI7XG5pbXBvcnQgeyBDb21tYW5kIGFzICRDb21tYW5kIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgY29tbW9uUGFyYW1zIH0gZnJvbSBcIi4uL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgZGVfRGVsZXRlVXNlckNvbW1hbmQsIHNlX0RlbGV0ZVVzZXJDb21tYW5kIH0gZnJvbSBcIi4uL3Byb3RvY29scy9Bd3NfcmVzdEpzb24xXCI7XG5leHBvcnQgeyAkQ29tbWFuZCB9O1xuZXhwb3J0IGNsYXNzIERlbGV0ZVVzZXJDb21tYW5kIGV4dGVuZHMgJENvbW1hbmRcbiAgICAuY2xhc3NCdWlsZGVyKClcbiAgICAuZXAoe1xuICAgIC4uLmNvbW1vblBhcmFtcyxcbn0pXG4gICAgLm0oZnVuY3Rpb24gKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBnZXRTZXJkZVBsdWdpbihjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAgICAgZ2V0RW5kcG9pbnRQbHVnaW4oY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpLFxuICAgIF07XG59KVxuICAgIC5zKFwiUXVpY2tTaWdodF8yMDE4MDQwMVwiLCBcIkRlbGV0ZVVzZXJcIiwge30pXG4gICAgLm4oXCJRdWlja1NpZ2h0Q2xpZW50XCIsIFwiRGVsZXRlVXNlckNvbW1hbmRcIilcbiAgICAuZih2b2lkIDAsIHZvaWQgMClcbiAgICAuc2VyKHNlX0RlbGV0ZVVzZXJDb21tYW5kKVxuICAgIC5kZShkZV9EZWxldGVVc2VyQ29tbWFuZClcbiAgICAuYnVpbGQoKSB7XG59XG4iLCJpbXBvcnQgeyBEZWxldGVVc2VyQ29tbWFuZCwgTGlzdFVzZXJzQ29tbWFuZCwgUXVpY2tTaWdodENsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0J1xuaW1wb3J0IHsgUXVpY2tTaWdodFVzZXIgfSBmcm9tICcuL1F1aWNrU2lnaHRVc2VyJ1xuXG5leHBvcnQgY2xhc3MgUXVpY2tTaWdodFVzZXJNYW5hZ2VyIHtcblx0cHJpdmF0ZSBhd3NBY2NvdW50SWQgPSBwcm9jZXNzLmVudi5hd3NBY2NvdW50SWRcblx0cHJpdmF0ZSBzdGF0aWMgbmFtZXNwYWNlID0gJ2RlZmF1bHQnXG5cdHByaXZhdGUgcXVpY2tTaWdodENsaWVudCA9IG5ldyBRdWlja1NpZ2h0Q2xpZW50KHt9KVxuICBcblx0cHVibGljIGFzeW5jIHJldHJpZXZlVXNlcnMoKTogUHJvbWlzZTxRdWlja1NpZ2h0VXNlcltdPiB7XG5cdFx0Y29uc3QgcXVpY2tTaWdodFVzZXJzOiBRdWlja1NpZ2h0VXNlcltdID0gW11cblxuXHRcdGxldCBuZXh0VG9rZW4gPSAnJyAvLyBvcmlnaW5hbGx5IEkgdHJpZWQgbnVsbCwgYnV0IGl0IGNhdXNlcyBBUEkgc2lnbmF0dXJlIGlzc3Vlcy5cblx0XHRkbyB7XG5cdFx0XHRjb25zdCBsaXN0VXNlcnNDb21tYW5kID0gbmV3IExpc3RVc2Vyc0NvbW1hbmQoeyBBd3NBY2NvdW50SWQ6IHRoaXMuYXdzQWNjb3VudElkLCBOYW1lc3BhY2U6IFF1aWNrU2lnaHRVc2VyTWFuYWdlci5uYW1lc3BhY2UsIE5leHRUb2tlbjogbmV4dFRva2VuIH0pXG5cdFx0XHRjb25zdCBxdWlja1NpZ2h0VXNlckxpc3RSZXNwb25zZSA9IGF3YWl0IHRoaXMucXVpY2tTaWdodENsaWVudC5zZW5kKGxpc3RVc2Vyc0NvbW1hbmQpXG5cblx0XHRcdG5leHRUb2tlbiA9IHF1aWNrU2lnaHRVc2VyTGlzdFJlc3BvbnNlLk5leHRUb2tlblxuXG5cdFx0XHRxdWlja1NpZ2h0VXNlckxpc3RSZXNwb25zZS5Vc2VyTGlzdC5mb3JFYWNoKCh1c2VyKSA9PiBxdWlja1NpZ2h0VXNlcnMucHVzaChuZXcgUXVpY2tTaWdodFVzZXIodXNlcikpKVxuXHRcdH0gd2hpbGUgKG5leHRUb2tlbilcblxuXHRcdHJldHVybiBxdWlja1NpZ2h0VXNlcnNcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBkZWxldGVVc2VyKHVzZXI6IFF1aWNrU2lnaHRVc2VyKSB7XG5cdFx0Ly8gU3RyeWtlciBkaXNhYmxlIG5leHQtbGluZSBhbGwgXCJJIGRvIG5vdCBjYXJlIGFib3V0IG11dGF0aW5nIGNvbnNvbGUgc3RhdGVtZW50c1wiXG5cdFx0Y29uc29sZS5kZWJ1ZyhgRGVsZXRpbmcgJHtKU09OLnN0cmluZ2lmeSh1c2VyLCBudWxsLCAxKX1gKVxuXHRcdFxuXHRcdGNvbnN0IGRlbGV0ZVVzZXJDb21tYW5kID0gbmV3IERlbGV0ZVVzZXJDb21tYW5kKHtcblx0XHRcdEF3c0FjY291bnRJZDogdGhpcy5hd3NBY2NvdW50SWQsXG5cdFx0XHROYW1lc3BhY2U6IFF1aWNrU2lnaHRVc2VyTWFuYWdlci5uYW1lc3BhY2UsXG5cdFx0XHRVc2VyTmFtZTogdXNlci51c2VybmFtZSxcblx0XHR9KVxuXG5cdFx0YXdhaXQgdGhpcy5xdWlja1NpZ2h0Q2xpZW50LnNlbmQoZGVsZXRlVXNlckNvbW1hbmQpXG5cdH1cbn0iLCJpbXBvcnQgeyBDbG91ZFRyYWlsVXNlckV2ZW50TWFuYWdlciB9IGZyb20gJy4vQ2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXInXG5pbXBvcnQgeyBDbG91ZFdhdGNoTWV0cmljQ2xpZW50IH0gZnJvbSAnLi9DbG91ZFdhdGNoTWV0cmljQ2xpZW50J1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uTWFuYWdlciB9IGZyb20gJy4vTm90aWZpY2F0aW9uTWFuYWdlcidcbmltcG9ydCB7IFF1aWNrU2lnaHRSb2xlIH0gZnJvbSAnLi9RdWlja1NpZ2h0VXNlcidcbmltcG9ydCB7IFF1aWNrU2lnaHRVc2VyTWFuYWdlciB9IGZyb20gJy4vUXVpY2tTaWdodFVzZXJNYW5hZ2VyJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IHsgZGVsZXRlRGF5cywgbm90aWZ5RGF5cyB9ID0gcHJvY2Vzcy5lbnZcblx0Y29uc3QgZW5hYmxlTm90aWZpY2F0aW9uID0gcHJvY2Vzcy5lbnYuZW5hYmxlTm90aWZpY2F0aW9uID09PSAndHJ1ZSdcblx0Y29uc3QgZGVsZXRlRGF0ZSA9IG5ldyBEYXRlKClcblx0Y29uc3Qgbm90aWZ5RGF0ZSA9IG5ldyBEYXRlKClcblx0ZGVsZXRlRGF0ZS5zZXREYXRlKGRlbGV0ZURhdGUuZ2V0RGF0ZSgpIC0gcGFyc2VJbnQoZGVsZXRlRGF5cykpXG5cdG5vdGlmeURhdGUuc2V0RGF0ZShub3RpZnlEYXRlLmdldERhdGUoKSAtIHBhcnNlSW50KG5vdGlmeURheXMpKVxuXG5cdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRjb25zb2xlLmluZm8oYE5vdGlmeWluZyB1c2VycyB3aXRoIGxhc3QgYWNjZXNzIGRhdGUgb246ICR7bm90aWZ5RGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0gKCR7bm90aWZ5RGF5c30gZGF5cyBhZ28pLmApXG5cdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRjb25zb2xlLmluZm8oYERlbGV0aW5nIHVzZXJzIHdpdGggbGFzdCBhY2Nlc3MgZGF0ZSBvbiBvciBiZWZvcmU6ICR7ZGVsZXRlRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0gKCR7ZGVsZXRlRGF5c30gZGF5cyBhZ28pLmApXG5cdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRjb25zb2xlLmluZm8oYE5vdGlmaWNhdGlvbiBlbmFibGVkPyAke2VuYWJsZU5vdGlmaWNhdGlvbn0uYClcblxuXHRjb25zdCBxdWlja1NpZ2h0VXNlck1hbmFnZXIgPSBuZXcgUXVpY2tTaWdodFVzZXJNYW5hZ2VyKClcblx0Y29uc3QgY2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIgPSBuZXcgQ2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIoKVxuXHRjb25zdCBub3RpZmljYXRpb25NYW5hZ2VyID0gbmV3IE5vdGlmaWNhdGlvbk1hbmFnZXIoKVxuXHRjb25zdCBjbG91ZFdhdGNoTWV0cmljQ2xpZW50ID0gbmV3IENsb3VkV2F0Y2hNZXRyaWNDbGllbnQoKVxuXG5cdGNvbnN0IHF1aWNrU2lnaHRVc2VycyA9IGF3YWl0IHF1aWNrU2lnaHRVc2VyTWFuYWdlci5yZXRyaWV2ZVVzZXJzKClcblx0Y29uc3QgY2xvdWRUcmFpbFVzZXJFdmVudHMgPSBhd2FpdCBjbG91ZFRyYWlsVXNlckV2ZW50TWFuYWdlci5yZXRyaWV2ZVF1aWNrU2lnaHRVc2VyRXZlbnRzKGRlbGV0ZURhdGUpXG5cblx0Zm9yIChjb25zdCBxdWlja1NpZ2h0VXNlciBvZiBxdWlja1NpZ2h0VXNlcnMpIHtcblx0XHRxdWlja1NpZ2h0VXNlci5sYXN0QWNjZXNzID0gY2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIuZ2V0TGFzdEFjY2Vzc0RhdGUocXVpY2tTaWdodFVzZXIsIGNsb3VkVHJhaWxVc2VyRXZlbnRzKVxuXHR9XG5cblx0Ly8gU3RyeWtlciBkaXNhYmxlIG5leHQtbGluZSBhbGwgXCJJIGRvIG5vdCBjYXJlIGFib3V0IG11dGF0aW5nIGNvbnNvbGUgc3RhdGVtZW50c1wiXG5cdGNvbnNvbGUuZGVidWcoYFF1aWNrU2lnaHQgVXNlcnM6XFxuJHtKU09OLnN0cmluZ2lmeShxdWlja1NpZ2h0VXNlcnMsIG51bGwsIDIpfWApXG5cdGNsb3VkV2F0Y2hNZXRyaWNDbGllbnQucXVldWVNZXRyaWMoeyBNZXRyaWNOYW1lOiAnUHJpb3JRdWlja1NpZ2h0VXNlcnNDb3VudCcsIFZhbHVlOiBxdWlja1NpZ2h0VXNlcnMubGVuZ3RoIH0pXG5cblx0bGV0IGludmFsaWRVc2VycyA9IDBcblx0bGV0IHVzZXJzRGVsZXRlZCA9IDBcblx0bGV0IG5vdGlmaWNhdGlvbnNTZW50ID0gMFxuXG5cdGZvciAoY29uc3QgcXVpY2tTaWdodFVzZXIgb2YgcXVpY2tTaWdodFVzZXJzKSB7XG5cdFx0aWYgKHF1aWNrU2lnaHRVc2VyLmludmFsaWQpIHsgLy8gU29tZSBRUyB1c2VycyBjYW5ub3QgYmUgZGVsZXRlZCBWSUEgdGhlIEFQSS9TREsuIFNlZSBSRUFETUUgZm9yIGRldGFpbHNcblx0XHRcdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRcdFx0Y29uc29sZS53YXJuKGBJbnZhbGlkIHVzZXI6ICR7SlNPTi5zdHJpbmdpZnkocXVpY2tTaWdodFVzZXIpfWApXG5cdFx0XHRpbnZhbGlkVXNlcnMrK1xuXHRcdH0gZWxzZSBpZiAocXVpY2tTaWdodFVzZXIubGFzdEFjY2VzcyA8IGRlbGV0ZURhdGUpIHtcblx0XHRcdHVzZXJzRGVsZXRlZCsrXG5cdFx0XHRhd2FpdCBxdWlja1NpZ2h0VXNlck1hbmFnZXIuZGVsZXRlVXNlcihxdWlja1NpZ2h0VXNlcilcblx0XHR9IGVsc2UgaWYgKGVuYWJsZU5vdGlmaWNhdGlvblxuICAgICAgJiYgcXVpY2tTaWdodFVzZXIucm9sZSAhPT0gUXVpY2tTaWdodFJvbGUuUkVBREVSIC8vIFJlYWRlcnMgZ2V0IGludG8gUXVpY2tTaWdodCB0aHJvdWdoIGEgcHVibGljIHBhZ2UgYW5kIHByb2JhYmx5IGhhdmUgbm8gaWRlYSB3aGF0IFF1aWNrU2lnaHQgaXMuIFRoZXJlZm9yZSB3ZSBzaG91bGRuJ3QgZW1haWwgdGhlbS5cbiAgICAgICYmIHF1aWNrU2lnaHRVc2VyLmxhc3RBY2Nlc3MudG9Mb2NhbGVEYXRlU3RyaW5nKCkgPT09IG5vdGlmeURhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkpIHsgLy8gdG9Mb2NhbGVEYXRlU3RyaW5nIHN0cmlwcyBvZmYgdGhlIHRpbWUuIElmIHRoZSBkYXkgbWF0Y2hlcyB0aGUgbm90aWZ5IFwiZGF5XCIgdGhlbiB3ZSBub3RpZnkgdGhlIHVzZXJcblx0XHRcdG5vdGlmaWNhdGlvbnNTZW50Kytcblx0XHRcdGF3YWl0IG5vdGlmaWNhdGlvbk1hbmFnZXIubm90aWZ5VXNlcihxdWlja1NpZ2h0VXNlcilcblx0XHR9XG5cdH1cblxuXHRjbG91ZFdhdGNoTWV0cmljQ2xpZW50LnF1ZXVlTWV0cmljKHsgTWV0cmljTmFtZTogJ0ludmFsaWRVc2Vyc0NvdW50JywgVmFsdWU6IGludmFsaWRVc2VycyB9KVxuXHRjbG91ZFdhdGNoTWV0cmljQ2xpZW50LnF1ZXVlTWV0cmljKHsgTWV0cmljTmFtZTogJ1VzZXJzRGVsZXRlZENvdW50JywgVmFsdWU6IHVzZXJzRGVsZXRlZCB9KVxuXHRjbG91ZFdhdGNoTWV0cmljQ2xpZW50LnF1ZXVlTWV0cmljKHsgTWV0cmljTmFtZTogJ05vdGlmaWNhdGlvbnNTZW50Q291bnQnLCBWYWx1ZTogbm90aWZpY2F0aW9uc1NlbnQgfSlcblx0Y2xvdWRXYXRjaE1ldHJpY0NsaWVudC5xdWV1ZU1ldHJpYyh7IE1ldHJpY05hbWU6ICdSZW1haW5pbmdRdWlja1NpZ2h0VXNlcnNDb3VudCcsIFZhbHVlOiBxdWlja1NpZ2h0VXNlcnMubGVuZ3RoIC0gdXNlcnNEZWxldGVkIH0pXG5cdGF3YWl0IGNsb3VkV2F0Y2hNZXRyaWNDbGllbnQuZW1pdFF1ZXVlZE1ldHJpY3MoKVxufVxuIl0sIm5hbWVzIjpbImluc3RhbGxlZENodW5rcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXdzQ3JjMzIiLCJ0c2xpYl8xIiwidXRpbF8xIiwiaW5kZXhfMSIsInRoaXMiLCJjcmMzMiIsIkNyYzMyIiwicHJvdG90eXBlIiwidXBkYXRlIiwidG9IYXNoIiwiaXNFbXB0eURhdGEiLCJjb252ZXJ0VG9CdWZmZXIiLCJkaWdlc3QiLCJfX2F3YWl0ZXIiLCJfX2dlbmVyYXRvciIsIl9hIiwibnVtVG9VaW50OCIsInJlc2V0IiwiZGF0YSIsImNoZWNrc3VtIiwiZV8xIiwiZGF0YV8xIiwiX192YWx1ZXMiLCJkYXRhXzFfMSIsIm5leHQiLCJkb25lIiwiYnl0ZSIsImxvb2t1cFRhYmxlIiwiZV8xXzEiLCJlcnJvciIsInJldHVybiIsImNhbGwiLCJ1aW50MzJBcnJheUZyb20iLCJhd3NfY3JjMzJfMSIsImVudW1lcmFibGUiLCJnZXQiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsImhhc093blByb3BlcnR5IiwiX19leHRlbmRzIiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFwcGx5IiwiX19yZXN0IiwiZSIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImMiLCJyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsInJlc3VsdCIsInRoZW4iLCJib2R5IiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJwdXNoIiwiX19jcmVhdGVCaW5kaW5nIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJfX2V4cG9ydFN0YXIiLCJfX3JlYWQiLCJhciIsIl9fc3ByZWFkIiwiY29uY2F0IiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImEiLCJqIiwiamwiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJxIiwicmVzdW1lIiwiZnVsZmlsbCIsInNldHRsZSIsInNoaWZ0IiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsImNvb2tlZCIsInJhdyIsIl9faW1wb3J0U3RhciIsIm1vZCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX19pbXBvcnREZWZhdWx0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwicHJpdmF0ZU1hcCIsImhhcyIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJzZXQiLCJ1dGlsX3V0ZjhfYnJvd3Nlcl8xIiwiZnJvbVV0ZjgiLCJCdWZmZXIiLCJmcm9tIiwiaW5wdXQiLCJVaW50OEFycmF5IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiY29udmVydFRvQnVmZmVyXzEiLCJpc0VtcHR5RGF0YV8xIiwibnVtVG9VaW50OF8xIiwidWludDMyQXJyYXlGcm9tXzEiLCJudW0iLCJhX2xvb2tVcFRhYmxlIiwiVWludDMyQXJyYXkiLCJyZXR1cm5fYXJyYXkiLCJhX2luZGV4Iiwid2FybmluZ0VtaXR0ZWQiLCJlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uIiwidmVyc2lvbiIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwicHJvY2VzcyIsImVtaXRXYXJuaW5nIiwiZ2V0U2tld0NvcnJlY3RlZERhdGUiLCJzeXN0ZW1DbG9ja09mZnNldCIsIkRhdGUiLCJub3ciLCJnZXREYXRlSGVhZGVyIiwicmVzcG9uc2UiLCJpc0luc3RhbmNlIiwiaGVhZGVycyIsImRhdGUiLCJnZXRVcGRhdGVkU3lzdGVtQ2xvY2tPZmZzZXQiLCJjbG9ja1RpbWUiLCJjdXJyZW50U3lzdGVtQ2xvY2tPZmZzZXQiLCJjbG9ja1RpbWVJbk1zIiwicGFyc2UiLCJNYXRoIiwiYWJzIiwiZ2V0VGltZSIsImlzQ2xvY2tTa2V3ZWQiLCJ0aHJvd1NpZ25pbmdQcm9wZXJ0eUVycm9yIiwibmFtZSIsInByb3BlcnR5IiwiRXJyb3IiLCJBd3NTZGtTaWdWNFNpZ25lciIsInNpZ24iLCJodHRwUmVxdWVzdCIsImlkZW50aXR5Iiwic2lnbmluZ1Byb3BlcnRpZXMiLCJjb25maWciLCJzaWduZXIiLCJzaWduaW5nUmVnaW9uIiwic2lnbmluZ05hbWUiLCJhc3luYyIsImNvbnRleHQiLCJhdXRoU2NoZW1lIiwiZW5kcG9pbnRWMiIsInByb3BlcnRpZXMiLCJhdXRoU2NoZW1lcyIsInNpZ25lckZ1bmN0aW9uIiwidmFsaWRhdGVTaWduaW5nUHJvcGVydGllcyIsInNpZ25pbmdEYXRlIiwic2lnbmluZ1NlcnZpY2UiLCJlcnJvckhhbmRsZXIiLCJzZXJ2ZXJUaW1lIiwiU2VydmVyVGltZSIsIiRyZXNwb25zZSIsInN1Y2Nlc3NIYW5kbGVyIiwiaHR0cFJlc3BvbnNlIiwiZGF0ZUhlYWRlciIsIlNIT1JUX1RPX0hFWCIsIkhFWF9UT19TSE9SVCIsImVuY29kZWRCeXRlIiwidG9TdHJpbmciLCJ0b0xvd2VyQ2FzZSIsInRvSGV4IiwiYnl0ZXMiLCJvdXQiLCJJbnQ2NCIsImZyb21OdW1iZXIiLCJudW1iZXIiLCJyZW1haW5pbmciLCJyb3VuZCIsIm5lZ2F0ZSIsInZhbHVlT2YiLCJzbGljZSIsIm5lZ2F0aXZlIiwiU3RyaW5nIiwidG9VdGY4IiwiZm9ybWF0IiwiY2h1bmtzIiwiaGVhZGVyTmFtZSIsImtleXMiLCJmb3JtYXRIZWFkZXJWYWx1ZSIsInJlZHVjZSIsImNhcnJ5IiwicG9zaXRpb24iLCJjaHVuayIsImhlYWRlciIsInR5cGUiLCJzaG9ydFZpZXciLCJEYXRhVmlldyIsInNldFVpbnQ4Iiwic2V0SW50MTYiLCJpbnRWaWV3Iiwic2V0SW50MzIiLCJsb25nQnl0ZXMiLCJiaW5WaWV3Iiwic2V0VWludDE2IiwiYmluQnl0ZXMiLCJ1dGY4Qnl0ZXMiLCJzdHJWaWV3Iiwic3RyQnl0ZXMiLCJ0c0J5dGVzIiwiVVVJRF9QQVRURVJOIiwidGVzdCIsInV1aWRCeXRlcyIsImVuY29kZWQiLCJmcm9tSGV4IiwicmVwbGFjZSIsIm5hbWVMZW5ndGgiLCJnZXRVaW50OCIsIkJPT0xFQU5fVEFHIiwiQllURV9UQUciLCJnZXRJbnQ4IiwiU0hPUlRfVEFHIiwiZ2V0SW50MTYiLCJJTlRfVEFHIiwiZ2V0SW50MzIiLCJMT05HX1RBRyIsImJpbmFyeUxlbmd0aCIsImdldFVpbnQxNiIsIkJJTkFSWV9UQUciLCJzdHJpbmdMZW5ndGgiLCJTVFJJTkdfVEFHIiwiVElNRVNUQU1QX1RBRyIsIlVVSURfVEFHIiwic3ViYXJyYXkiLCJIRUFERVJfVkFMVUVfVFlQRSIsIkFNWl9EQVRFX1FVRVJZX1BBUkFNIiwiU0lHTkFUVVJFX1FVRVJZX1BBUkFNIiwiVE9LRU5fUVVFUllfUEFSQU0iLCJBVVRIX0hFQURFUiIsIkFNWl9EQVRFX0hFQURFUiIsIkdFTkVSQVRFRF9IRUFERVJTIiwiU0lHTkFUVVJFX0hFQURFUiIsIlNIQTI1Nl9IRUFERVIiLCJUT0tFTl9IRUFERVIiLCJBTFdBWVNfVU5TSUdOQUJMRV9IRUFERVJTIiwiYXV0aG9yaXphdGlvbiIsImNvbm5lY3Rpb24iLCJleHBlY3QiLCJwcmFnbWEiLCJyZWZlcmVyIiwidGUiLCJ0cmFpbGVyIiwidXBncmFkZSIsIlBST1hZX0hFQURFUl9QQVRURVJOIiwiU0VDX0hFQURFUl9QQVRURVJOIiwiQUxHT1JJVEhNX0lERU5USUZJRVIiLCJFVkVOVF9BTEdPUklUSE1fSURFTlRJRklFUiIsIktFWV9UWVBFX0lERU5USUZJRVIiLCJzaWduaW5nS2V5Q2FjaGUiLCJjYWNoZVF1ZXVlIiwiY3JlYXRlU2NvcGUiLCJzaG9ydERhdGUiLCJyZWdpb24iLCJzZXJ2aWNlIiwiaG1hYyIsImN0b3IiLCJzZWNyZXQiLCJoYXNoIiwiZ2V0Q2Fub25pY2FsSGVhZGVycyIsInVuc2lnbmFibGVIZWFkZXJzIiwic2lnbmFibGVIZWFkZXJzIiwiY2Fub25pY2FsIiwic29ydCIsImNhbm9uaWNhbEhlYWRlck5hbWUiLCJ0cmltIiwiZ2V0UGF5bG9hZEhhc2giLCJoYXNoQ29uc3RydWN0b3IiLCJoYXNoQ3RvciIsImNsb25lUmVxdWVzdCIsInF1ZXJ5IiwicmVzdCIsImNsb25lUXVlcnkiLCJwYXJhbU5hbWUiLCJwYXJhbSIsImlzQXJyYXkiLCJwcmVwYXJlUmVxdWVzdCIsInJlcXVlc3QiLCJjbG9uZSIsIlNpZ25hdHVyZVY0IiwiYXBwbHlDaGVja3N1bSIsImNyZWRlbnRpYWxzIiwic2hhMjU2IiwidXJpRXNjYXBlUGF0aCIsImhlYWRlck1hcnNoYWxsZXIiLCJyZWdpb25Qcm92aWRlciIsImNyZWRlbnRpYWxQcm92aWRlciIsInByZXNpZ24iLCJvcmlnaW5hbFJlcXVlc3QiLCJvcHRpb25zIiwiZXhwaXJlc0luIiwidW5ob2lzdGFibGVIZWFkZXJzIiwidmFsaWRhdGVSZXNvbHZlZENyZWRlbnRpYWxzIiwibG9uZ0RhdGUiLCJmb3JtYXREYXRlIiwic2NvcGUiLCJsbmFtZSIsIm1vdmVIZWFkZXJzVG9RdWVyeSIsInNlc3Npb25Ub2tlbiIsImFjY2Vzc0tleUlkIiwiY2Fub25pY2FsSGVhZGVycyIsImdldENhbm9uaWNhbEhlYWRlckxpc3QiLCJnZXRTaWduYXR1cmUiLCJnZXRTaWduaW5nS2V5IiwiY3JlYXRlQ2Fub25pY2FsUmVxdWVzdCIsInRvU2lnbiIsInNpZ25TdHJpbmciLCJwYXlsb2FkIiwic2lnbkV2ZW50IiwibWVzc2FnZSIsInNpZ25NZXNzYWdlIiwic2lnblJlcXVlc3QiLCJwcmlvclNpZ25hdHVyZSIsImhhc2hlZFBheWxvYWQiLCJoYXNoZWRIZWFkZXJzIiwic3RyaW5nVG9TaWduIiwiam9pbiIsInNpZ25hYmxlTWVzc2FnZSIsInNpZ25hdHVyZSIsInJlcXVlc3RUb1NpZ24iLCJwYXlsb2FkSGFzaCIsInNvdWdodEhlYWRlciIsImhhc0hlYWRlciIsInNvcnRlZEhlYWRlcnMiLCJtZXRob2QiLCJnZXRDYW5vbmljYWxQYXRoIiwic2VyaWFsaXplZCIsIm1hcCIsImZpbHRlciIsImdldENhbm9uaWNhbFF1ZXJ5IiwiY3JlYXRlU3RyaW5nVG9TaWduIiwiY3JlZGVudGlhbFNjb3BlIiwiY2Fub25pY2FsUmVxdWVzdCIsImhhc2hlZFJlcXVlc3QiLCJwYXRoIiwibm9ybWFsaXplZFBhdGhTZWdtZW50cyIsInBhdGhTZWdtZW50Iiwic3BsaXQiLCJub3JtYWxpemVkUGF0aCIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImtleVByb21pc2UiLCJzaGEyNTZDb25zdHJ1Y3RvciIsImNhY2hlS2V5Iiwic2VjcmV0QWNjZXNzS2V5Iiwic2lnbmFibGUiLCJ0aW1lIiwiTnVtYmVyIiwidG9EYXRlIiwidG9JU09TdHJpbmciLCJyZXNvbHZlQXdzU2RrU2lnVjRDb25maWciLCJub3JtYWxpemVkQ3JlZHMiLCJjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyIiwicGFyZW50Q2xpZW50Q29uZmlnIiwic2lnbmluZ0VzY2FwZVBhdGgiLCJyZWdpb25JbmZvUHJvdmlkZXIiLCJ1c2VGaXBzRW5kcG9pbnQiLCJ1c2VEdWFsc3RhY2tFbmRwb2ludCIsInJlZ2lvbkluZm8iLCJzZXJ2aWNlSWQiLCJwYXJhbXMiLCJzaWduZXJDb25zdHJ1Y3RvciIsImRlZmF1bHRTaWduaW5nTmFtZSIsImRlZmF1bHRQcm92aWRlciIsImluaXQiLCJwcm9maWxlIiwiZW52IiwibG9nZ2VyIiwiZGVidWciLCJmcm9tRW52Iiwic3NvU3RhcnRVcmwiLCJzc29BY2NvdW50SWQiLCJzc29SZWdpb24iLCJzc29Sb2xlTmFtZSIsInNzb1Nlc3Npb24iLCJmcm9tU1NPIiwiZnJvbUluaSIsImZyb21Qcm9jZXNzIiwiZnJvbVRva2VuRmlsZSIsIkVOVl9DTURTX0ZVTExfVVJJIiwiRU5WX0NNRFNfUkVMQVRJVkVfVVJJIiwiZnJvbUNvbnRhaW5lck1ldGFkYXRhIiwiZnJvbUluc3RhbmNlTWV0YWRhdGEiLCJmcm9tSHR0cCIsInJlbW90ZVByb3ZpZGVyIiwiY3JlZGVudGlhbHNUcmVhdGVkQXNFeHBpcmVkIiwiY3JlZGVudGlhbHNXaWxsTmVlZFJlZnJlc2giLCJleHBpcmF0aW9uIiwicmVzb2x2ZUhvc3RIZWFkZXJDb25maWciLCJob3N0SGVhZGVyTWlkZGxld2FyZU9wdGlvbnMiLCJwcmlvcml0eSIsInRhZ3MiLCJvdmVycmlkZSIsImdldEhvc3RIZWFkZXJQbHVnaW4iLCJhcHBseVRvU3RhY2siLCJjbGllbnRTdGFjayIsImFkZCIsImFyZ3MiLCJoYW5kbGVyUHJvdG9jb2wiLCJyZXF1ZXN0SGFuZGxlciIsImhvc3RuYW1lIiwicG9ydCIsImhvc3QiLCJob3N0SGVhZGVyTWlkZGxld2FyZSIsImxvZ2dlck1pZGRsZXdhcmVPcHRpb25zIiwiZ2V0TG9nZ2VyUGx1Z2luIiwiY2xpZW50TmFtZSIsImNvbW1hbmROYW1lIiwiZHluYW1vRGJEb2N1bWVudENsaWVudE9wdGlvbnMiLCJvdmVycmlkZUlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nIiwib3ZlcnJpZGVPdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2ciLCJpbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyIsIm91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyIsIiRtZXRhZGF0YSIsIm91dHB1dFdpdGhvdXRNZXRhZGF0YSIsIm91dHB1dCIsImluZm8iLCJUUkFDRV9JRF9IRUFERVJfTkFNRSIsImFkZFJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmVPcHRpb25zIiwiZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luIiwicnVudGltZSIsImZ1bmN0aW9uTmFtZSIsInRyYWNlSWQiLCJub25FbXB0eVN0cmluZyIsInN0ciIsInJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmUiLCJyZXNvbHZlVXNlckFnZW50Q29uZmlnIiwiY3VzdG9tVXNlckFnZW50IiwiaXNWaXJ0dWFsSG9zdGFibGVTM0J1Y2tldCIsImFsbG93U3ViRG9tYWlucyIsInNlbGVjdGVkUGFydGl0aW9uc0luZm8iLCJhd3NFbmRwb2ludEZ1bmN0aW9ucyIsInBhcnNlQXJuIiwic2VnbWVudHMiLCJhcm4iLCJwYXJ0aXRpb24iLCJhY2NvdW50SWQiLCJyZXNvdXJjZUlkIiwiaW5jbHVkZXMiLCJwYXJ0aXRpb25zIiwicmVnaW9ucyIsIm91dHB1dHMiLCJyZWdpb25EYXRhIiwiZW50cmllcyIsInJlZ2lvblJlZ2V4IiwiUmVnRXhwIiwiREVGQVVMVF9QQVJUSVRJT04iLCJmaW5kIiwiaWQiLCJhd3MiLCJVU0VSX0FHRU5UIiwiWF9BTVpfVVNFUl9BR0VOVCIsIlVBX05BTUVfRVNDQVBFX1JFR0VYIiwiVUFfVkFMVUVfRVNDQVBFX1JFR0VYIiwiZXNjYXBlVXNlckFnZW50IiwidXNlckFnZW50UGFpciIsInBhcnQiLCJwcmVmaXhTZXBhcmF0b3JJbmRleCIsInByZWZpeCIsInVhTmFtZSIsIml0ZW0iLCJhY2MiLCJpbmRleCIsImdldFVzZXJBZ2VudE1pZGRsZXdhcmVPcHRpb25zIiwiZ2V0VXNlckFnZW50UGx1Z2luIiwidXNlckFnZW50IiwiZGVmYXVsdFVzZXJBZ2VudCIsImRlZmF1bHRVc2VyQWdlbnRQcm92aWRlciIsInNka1VzZXJBZ2VudFZhbHVlIiwibm9ybWFsVUFWYWx1ZSIsInNlY3Rpb24iLCJnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uIiwicnVudGltZUNvbmZpZyIsInJ1bnRpbWVDb25maWdSZWdpb24iLCJzZXRSZWdpb24iLCJyZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsImF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCJyZXF1aXJlIiwiY2xpZW50VmVyc2lvbiIsInNlY3Rpb25zIiwicGxhdGZvcm0iLCJyZWxlYXNlIiwidmVyc2lvbnMiLCJub2RlIiwiQVdTX0VYRUNVVElPTl9FTlYiLCJhcHBJZFByb21pc2UiLCJlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3IiLCJjb25maWdGaWxlU2VsZWN0b3IiLCJyZXNvbHZlZFVzZXJBZ2VudCIsImFwcElkIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJsZW4iLCJjaGFyQ29kZUF0Iiwic3Vycm9nYXRlUGFpciIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwiZGVjb2RlZCIsImZyb21DaGFyQ29kZSIsIm5leHRCeXRlIiwiYnl0ZVZhbHVlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TIiwiRU5WIiwiQ09ORklHIiwiTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUyIsIk5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TIiwiTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUyIsInByZWZlcnJlZEZpbGUiLCJpc0ZpcHNSZWdpb24iLCJnZXRSZWFsUmVnaW9uIiwicmVzb2x2ZVJlZ2lvbkNvbmZpZyIsInByb3ZpZGVkUmVnaW9uIiwiaHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRNaWRkbGV3YXJlT3B0aW9ucyIsInJlbGF0aW9uIiwidG9NaWRkbGV3YXJlIiwiZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4iLCJodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciIsImlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlciIsImFkZFJlbGF0aXZlVG8iLCJtd09wdGlvbnMiLCJodHRwQXV0aFNjaGVtZVByb3ZpZGVyIiwiaHR0cEF1dGhTY2hlbWVzIiwiTWFwIiwic2NoZW1lIiwic2NoZW1lSWQiLCJjb252ZXJ0SHR0cEF1dGhTY2hlbWVzVG9NYXAiLCJzbWl0aHlDb250ZXh0IiwiZmFpbHVyZVJlYXNvbnMiLCJvcHRpb24iLCJpZGVudGl0eVByb3ZpZGVyIiwiaWRlbnRpdHlQcm9wZXJ0aWVzIiwicHJvcGVydGllc0V4dHJhY3RvciIsInNlbGVjdGVkSHR0cEF1dGhTY2hlbWUiLCJodHRwQXV0aE9wdGlvbiIsImRlZmF1bHRFcnJvckhhbmRsZXIiLCJkZWZhdWx0U3VjY2Vzc0hhbmRsZXIiLCJodHRwU2lnbmluZ01pZGRsZXdhcmVPcHRpb25zIiwiYWxpYXNlcyIsImdldEh0dHBTaWduaW5nUGx1Z2luIiwiY2F0Y2giLCJEZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZyIsImdldElkZW50aXR5UHJvdmlkZXIiLCJOb0F1dGhTaWduZXIiLCJpc0lkZW50aXR5RXhwaXJlZCIsImRvZXNJZGVudGl0eVJlcXVpcmVSZWZyZXNoIiwibWVtb2l6ZUlkZW50aXR5UHJvdmlkZXIiLCJwcm92aWRlciIsImlzRXhwaXJlZCIsInJlcXVpcmVzUmVmcmVzaCIsIm5vcm1hbGl6ZWRQcm92aWRlciIsInJlc29sdmVkIiwicGVuZGluZyIsImhhc1Jlc3VsdCIsImlzQ29uc3RhbnQiLCJjb2FsZXNjZVByb3ZpZGVyIiwiZm9yY2VSZWZyZXNoIiwibm9ybWFsaXplUHJvdmlkZXIiLCJwcm9taXNpZmllZCIsInJlcXVlc3RCdWlsZGVyIiwiUmVxdWVzdEJ1aWxkZXIiLCJyZXNvbHZlUGF0aFN0YWNrIiwiYnVpbGQiLCJwcm90b2NvbCIsImJhc2VQYXRoIiwiZW5kcG9pbnQiLCJyZXNvbHZlUGF0aCIsImhuIiwiYnAiLCJ1cmlMYWJlbCIsIm1lbWJlck5hbWUiLCJsYWJlbFZhbHVlUHJvdmlkZXIiLCJpc0dyZWVkeUxhYmVsIiwiaCIsIkhhc2giLCJhbGdvcml0aG1JZGVudGlmaWVyIiwiZW5jb2RpbmciLCJjYXN0U291cmNlRGF0YSIsImNyZWF0ZUhtYWMiLCJjcmVhdGVIYXNoIiwidG9DYXN0IiwiaXNCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwiYXJnIiwiQ09OVEVOVF9MRU5HVEhfSEVBREVSIiwiY29udGVudExlbmd0aE1pZGRsZXdhcmVPcHRpb25zIiwiZ2V0Q29udGVudExlbmd0aFBsdWdpbiIsImJvZHlMZW5ndGhDaGVja2VyIiwiRE9NQUlOX1BBVFRFUk4iLCJJUF9BRERSRVNTX1BBVFRFUk4iLCJET1RTX1BBVFRFUk4iLCJjcmVhdGVDb25maWdWYWx1ZVByb3ZpZGVyIiwiY29uZmlnS2V5IiwiY2Fub25pY2FsRW5kcG9pbnRQYXJhbUtleSIsImNvbmZpZ1Byb3ZpZGVyIiwiY29uZmlnVmFsdWUiLCJDcmVkZW50aWFsU2NvcGUiLCJ1cmwiLCJocmVmIiwiRU5WX0VORFBPSU5UX1VSTCIsIkNPTkZJR19FTkRQT0lOVF9VUkwiLCJ0b0VuZHBvaW50VjEiLCJyZXNvbHZlUGFyYW1zIiwiY29tbWFuZElucHV0IiwiaW5zdHJ1Y3Rpb25zU3VwcGxpZXIiLCJjbGllbnRDb25maWciLCJlbmRwb2ludFBhcmFtcyIsImluc3RydWN0aW9ucyIsImdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zIiwiaW5zdHJ1Y3Rpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiYnVja2V0IiwiQnVja2V0IiwiYnVja2V0TmFtZSIsImFjY291bnQiLCJ0eXBlT3JJZCIsImlzQXJuIiwiaXNWYWxpZEFybiIsIkJvb2xlYW4iLCJpc0FybkJ1Y2tldE5hbWUiLCJGb3JjZVBhdGhTdHlsZSIsIkVuZHBvaW50IiwiRGlzYWJsZU11bHRpUmVnaW9uQWNjZXNzUG9pbnRzIiwiZGlzYWJsZU11bHRpUmVnaW9uQWNjZXNzUG9pbnRzIiwiRGlzYWJsZU1SQVAiLCJyZXNvbHZlUGFyYW1zRm9yUzMiLCJlbmRwb2ludE1pZGRsZXdhcmUiLCJlbmRwb2ludEZyb21Db25maWciLCJzZXJ2aWNlU3VmZml4UGFydHMiLCJ3IiwidG9VcHBlckNhc2UiLCJzZXJ2aWNlcyIsInNlcnZpY2VzU2VjdGlvbiIsImVuZHBvaW50VXJsIiwiZ2V0RW5kcG9pbnRVcmxDb25maWciLCJnZXRFbmRwb2ludEZyb21Db25maWciLCJlbmRwb2ludFByb3ZpZGVyIiwiZ2V0RW5kcG9pbnRGcm9tSW5zdHJ1Y3Rpb25zIiwic2lnbmluZ19yZWdpb24iLCJzaWduaW5nX3NlcnZpY2UiLCJzaWduaW5nUmVnaW9uU2V0IiwiZW5kcG9pbnRNaWRkbGV3YXJlT3B0aW9ucyIsImdldEVuZHBvaW50UGx1Z2luIiwicmVzb2x2ZUVuZHBvaW50Q29uZmlnIiwidGxzIiwiY3VzdG9tRW5kcG9pbnRQcm92aWRlciIsImlzQ3VzdG9tRW5kcG9pbnQiLCJybmRzOFBvb2wiLCJwb29sUHRyIiwicm5nIiwiYnl0ZVRvSGV4Iiwic3Vic3RyIiwiYXJyIiwib2Zmc2V0IiwidXVpZCIsImJ1ZiIsInJuZHMiLCJyYW5kb20iLCJFTlZfTUFYX0FUVEVNUFRTIiwiQ09ORklHX01BWF9BVFRFTVBUUyIsIk5PREVfTUFYX0FUVEVNUFRfQ09ORklHX09QVElPTlMiLCJtYXhBdHRlbXB0IiwiaXNOYU4iLCJyZXNvbHZlUmV0cnlDb25maWciLCJyZXRyeVN0cmF0ZWd5IiwibWF4QXR0ZW1wdHMiLCJyZXRyeU1vZGUiLCJBREFQVElWRSIsIk5PREVfUkVUUllfTU9ERV9DT05GSUdfT1BUSU9OUyIsImlzU3RyZWFtaW5nUGF5bG9hZCIsIlJlYWRhYmxlIiwiUmVhZGFibGVTdHJlYW0iLCJnZXRSZXRyeUVycm9ySW5mbyIsImVycm9ySW5mbyIsImVycm9yVHlwZSIsImdldFJldHJ5RXJyb3JUeXBlIiwicmV0cnlBZnRlckhpbnQiLCJnZXRSZXRyeUFmdGVySGludCIsInJldHJ5TWlkZGxld2FyZU9wdGlvbnMiLCJnZXRSZXRyeVBsdWdpbiIsImFjcXVpcmVJbml0aWFsUmV0cnlUb2tlbiIsInJlZnJlc2hSZXRyeVRva2VuRm9yUmV0cnkiLCJyZWNvcmRTdWNjZXNzIiwiaXNSZXRyeVN0cmF0ZWd5VjIiLCJtb2RlIiwicmV0cnkiLCJyZXRyeVRva2VuIiwibGFzdEVycm9yIiwiYXR0ZW1wdHMiLCJ0b3RhbFJldHJ5RGVsYXkiLCJpc1JlcXVlc3QiLCJyZXRyeUVycm9ySW5mbyIsImNvbnNvbGUiLCJ3YXJuIiwicmVmcmVzaEVycm9yIiwiZ2V0UmV0cnlDb3VudCIsImRlbGF5IiwiZ2V0UmV0cnlEZWxheSIsInNldFRpbWVvdXQiLCJyZXRyeU1pZGRsZXdhcmUiLCJyZXRyeUFmdGVySGVhZGVyTmFtZSIsInJldHJ5QWZ0ZXIiLCJyZXRyeUFmdGVyU2Vjb25kcyIsImRlc2VyaWFsaXplck1pZGRsZXdhcmUiLCJkZXNlcmlhbGl6ZXIiLCJoaW50Iiwic2VyaWFsaXplck1pZGRsZXdhcmUiLCJzZXJpYWxpemVyIiwidXJsUGFyc2VyIiwiZGVzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiIsInNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uIiwiZ2V0U2VyZGVQbHVnaW4iLCJjb21tYW5kU3RhY2siLCJsb2FkQ29uZmlnIiwiZGVmYXVsdFZhbHVlIiwiY29uZmlndXJhdGlvbiIsImVudlZhclNlbGVjdG9yIiwiY29uZmlnU2VsZWN0b3IiLCJjb25maWdGaWxlIiwiY3JlZGVudGlhbHNGaWxlIiwicHJvZmlsZUZyb21DcmVkZW50aWFscyIsInByb2ZpbGVGcm9tQ29uZmlnIiwibWVyZ2VkUHJvZmlsZSIsImZyb21TaGFyZWRDb25maWdGaWxlcyIsImZyb21TdGF0aWMiLCJOT0RFSlNfVElNRU9VVF9FUlJPUl9DT0RFUyIsInRyYW5zZm9ybWVkSGVhZGVycyIsImhlYWRlclZhbHVlcyIsIk5vZGVIdHRwSGFuZGxlciIsImluc3RhbmNlT3JPcHRpb25zIiwiaGFuZGxlIiwiX29wdGlvbnMiLCJyZXNvbHZlRGVmYXVsdENvbmZpZyIsInJlcXVlc3RUaW1lb3V0IiwiY29ubmVjdGlvblRpbWVvdXQiLCJzb2NrZXRUaW1lb3V0IiwiaHR0cEFnZW50IiwiaHR0cHNBZ2VudCIsImtlZXBBbGl2ZSIsIm1heFNvY2tldHMiLCJkZXN0cm95IiwiYWJvcnRTaWduYWwiLCJfcmVzb2x2ZSIsIl9yZWplY3QiLCJ3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZSIsImFib3J0ZWQiLCJhYm9ydEVycm9yIiwiaXNTU0wiLCJxdWVyeVN0cmluZyIsInBhcnRzIiwiaUxlbiIsInFzRW50cnkiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImZyYWdtZW50Iiwibm9kZUh0dHBzT3B0aW9ucyIsImFnZW50IiwicmVxIiwicmVzIiwic3RhdHVzQ29kZSIsInJlYXNvbiIsInN0YXR1c01lc3NhZ2UiLCJvbiIsImVyciIsImNvZGUiLCJ0aW1lb3V0SW5NcyIsInRpbWVvdXRJZCIsInNvY2tldCIsImNvbm5lY3RpbmciLCJjbGVhclRpbWVvdXQiLCJzZXRDb25uZWN0aW9uVGltZW91dCIsInNldFNvY2tldFRpbWVvdXQiLCJvbmFib3J0IiwiYWJvcnQiLCJrZWVwQWxpdmVNc2VjcyIsInNldEtlZXBBbGl2ZSIsInNldFNvY2tldEtlZXBBbGl2ZSIsIm1heENvbnRpbnVlVGltZW91dE1zIiwiaGFzRXJyb3IiLCJyYWNlIiwibWF4IiwicGlwZSIsImVuZCIsIndyaXRlQm9keSIsInVwZGF0ZUh0dHBDbGllbnRDb25maWciLCJodHRwSGFuZGxlckNvbmZpZ3MiLCJDb2xsZWN0b3IiLCJXcml0YWJsZSIsInN1cGVyIiwiYnVmZmVyZWRCeXRlcyIsIl93cml0ZSIsImNhbGxiYWNrIiwic3RyZWFtQ29sbGVjdG9yIiwic3RyZWFtIiwiY29sbGVjdG9yIiwiUHJvdmlkZXJFcnJvciIsInRyeU5leHRMaW5rIiwiQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIiwiVG9rZW5Qcm92aWRlckVycm9yIiwiY2hhaW4iLCJwcm92aWRlcnMiLCJsYXN0UHJvdmlkZXJFcnJvciIsInN0YXRpY1ZhbHVlIiwibWVtb2l6ZSIsImdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsImh0dHBIYW5kbGVyIiwic2V0SHR0cEhhbmRsZXIiLCJoYW5kbGVyIiwicmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZyIsImh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsIkh0dHBSZXF1ZXN0IiwiY2hhckF0IiwiY2xvbmVkIiwiSHR0cFJlc3BvbnNlIiwicmVzcCIsIkNMT0NLX1NLRVdfRVJST1JfQ09ERVMiLCJUSFJPVFRMSU5HX0VSUk9SX0NPREVTIiwiVFJBTlNJRU5UX0VSUk9SX0NPREVTIiwiVFJBTlNJRU5UX0VSUk9SX1NUQVRVU19DT0RFUyIsImlzUmV0cnlhYmxlQnlUcmFpdCIsIiRyZXRyeWFibGUiLCJpc0Nsb2NrU2tld0Vycm9yIiwiaXNUaHJvdHRsaW5nRXJyb3IiLCJodHRwU3RhdHVzQ29kZSIsInRocm90dGxpbmciLCJpc1RyYW5zaWVudEVycm9yIiwiaXNTZXJ2ZXJFcnJvciIsImhvbWVEaXJDYWNoZSIsImdldEhvbWVEaXIiLCJIT01FIiwiVVNFUlBST0ZJTEUiLCJIT01FUEFUSCIsIkhPTUVEUklWRSIsInNlcCIsImhvbWVEaXJDYWNoZUtleSIsImdldGV1aWQiLCJob21lZGlyIiwiRU5WX1BST0ZJTEUiLCJnZXRQcm9maWxlTmFtZSIsImdldFNTT1Rva2VuRmlsZXBhdGgiLCJjYWNoZU5hbWUiLCJyZWFkRmlsZSIsImdldFNTT1Rva2VuRnJvbUZpbGUiLCJzc29Ub2tlbkZpbGVwYXRoIiwic3NvVG9rZW5UZXh0IiwiZ2V0Q29uZmlnRGF0YSIsImluZGV4T2ZTZXBhcmF0b3IiLCJDT05GSUdfUFJFRklYX1NFUEFSQVRPUiIsInZhbHVlcyIsIlBST0ZJTEUiLCJnZXRDb25maWdGaWxlcGF0aCIsImdldENyZWRlbnRpYWxzRmlsZXBhdGgiLCJwcmVmaXhLZXlSZWdleCIsInByb2ZpbGVOYW1lQmxvY2tMaXN0IiwicGFyc2VJbmkiLCJpbmlEYXRhIiwiY3VycmVudFNlY3Rpb24iLCJjdXJyZW50U3ViU2VjdGlvbiIsImluaUxpbmUiLCJ0cmltbWVkTGluZSIsInNlY3Rpb25OYW1lIiwibWF0Y2hlcyIsImV4ZWMiLCJpbmRleE9mRXF1YWxzU2lnbiIsInRyaW1TdGFydCIsImZpbGVQcm9taXNlc0hhc2giLCJzbHVycEZpbGUiLCJpZ25vcmVDYWNoZSIsInN3YWxsb3dFcnJvciIsImxvYWRTaGFyZWRDb25maWdGaWxlcyIsImZpbGVwYXRoIiwiY29uZmlnRmlsZXBhdGgiLCJwYXJzZWRGaWxlcyIsImFsbCIsImdldFNzb1Nlc3Npb25EYXRhIiwiU1NPX1NFU1NJT04iLCJsb2FkU3NvU2Vzc2lvbkRhdGEiLCJwYXJzZUtub3duRmlsZXMiLCJmaWxlcyIsIm1lcmdlZCIsImZpbGUiLCJtZXJnZUNvbmZpZ0ZpbGVzIiwiTm9PcExvZ2dlciIsInRyYWNlIiwiZ2V0QWxsQWxpYXNlcyIsIl9hbGlhc2VzIiwiYWxpYXMiLCJnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzIiwiY29uc3RydWN0U3RhY2siLCJhYnNvbHV0ZUVudHJpZXMiLCJyZWxhdGl2ZUVudHJpZXMiLCJpZGVudGlmeU9uUmVzb2x2ZSIsImVudHJpZXNOYW1lU2V0IiwiU2V0IiwiY2xvbmVUbyIsInRvU3RhY2siLCJmb3JFYWNoIiwiZW50cnkiLCJtaWRkbGV3YXJlIiwic3RhY2siLCJleHBhbmRSZWxhdGl2ZU1pZGRsZXdhcmVMaXN0IiwiZXhwYW5kZWRNaWRkbGV3YXJlTGlzdCIsImJlZm9yZSIsImFmdGVyIiwicmV2ZXJzZSIsImdldE1pZGRsZXdhcmVMaXN0Iiwibm9ybWFsaXplZEFic29sdXRlRW50cmllcyIsIm5vcm1hbGl6ZWRSZWxhdGl2ZUVudHJpZXMiLCJub3JtYWxpemVkRW50cmllc05hbWVNYXAiLCJub3JtYWxpemVkRW50cnkiLCJzdGVwV2VpZ2h0cyIsInByaW9yaXR5V2VpZ2h0cyIsIndob2xlTGlzdCIsInNvbWUiLCJ0b092ZXJyaWRlSW5kZXgiLCJmaW5kSW5kZXgiLCJ0b092ZXJyaWRlIiwic3BsaWNlIiwidXNlIiwicGx1Z2luIiwicmVtb3ZlIiwidG9SZW1vdmUiLCJpc1JlbW92ZWQiLCJmaWx0ZXJDYiIsImRlbGV0ZSIsInJlbW92ZUJ5TmFtZSIsInJlbW92ZUJ5UmVmZXJlbmNlIiwicmVtb3ZlQnlUYWciLCJpZGVudGlmeSIsIm13IiwidG9nZ2xlIiwibG9nIiwiaW5pdGlhbGl6ZSIsInNlcmlhbGl6ZSIsImZpbmFsaXplUmVxdWVzdCIsImRlc2VyaWFsaXplIiwiaGlnaCIsIm5vcm1hbCIsImxvdyIsIkNsaWVudCIsIm1pZGRsZXdhcmVTdGFjayIsInNlbmQiLCJjb21tYW5kIiwib3B0aW9uc09yQ2IiLCJjYiIsInJlc29sdmVNaWRkbGV3YXJlIiwiY29sbGVjdEJvZHkiLCJzdHJlYW1Cb2R5IiwibXV0YXRlIiwiZnJvbUNvbnRleHQiLCJDb21tYW5kIiwiY2xhc3NCdWlsZGVyIiwiQ2xhc3NCdWlsZGVyIiwicmVzb2x2ZU1pZGRsZXdhcmVXaXRoQ29udGV4dCIsIm1pZGRsZXdhcmVGbiIsImFkZGl0aW9uYWxDb250ZXh0IiwiQ29tbWFuZEN0b3IiLCJiaW5kIiwiaGFuZGxlckV4ZWN1dGlvbkNvbnRleHQiLCJfaW5pdCIsIl9lcCIsIl9taWRkbGV3YXJlRm4iLCJfY29tbWFuZE5hbWUiLCJfY2xpZW50TmFtZSIsIl9hZGRpdGlvbmFsQ29udGV4dCIsIl9zbWl0aHlDb250ZXh0IiwiX2lucHV0RmlsdGVyU2Vuc2l0aXZlTG9nIiwiX291dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyIsIl9zZXJpYWxpemVyIiwiX2Rlc2VyaWFsaXplciIsImVwIiwiZW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMiLCJtaWRkbGV3YXJlU3VwcGxpZXIiLCJvcGVyYXRpb24iLCJpbnB1dEZpbHRlciIsIm91dHB1dEZpbHRlciIsInNlciIsImRlIiwiY2xvc3VyZSIsIkNvbW1hbmRSZWYiLCJTRU5TSVRJVkVfU1RSSU5HIiwiZXhwZWN0TnVtYmVyIiwicGFyc2VkIiwicGFyc2VGbG9hdCIsInN0YWNrVHJhY2VXYXJuaW5nIiwiTUFYX0ZMT0FUIiwiY2VpbCIsImV4cGVjdEludDMyIiwiZXhwZWN0U2l6ZWRJbnQiLCJzaXplIiwiZXhwZWN0ZWQiLCJpc0ludGVnZXIiLCJleHBlY3RMb25nIiwiY2FzdEludCIsIkludDMyQXJyYXkiLCJvZiIsIkludDE2QXJyYXkiLCJJbnQ4QXJyYXkiLCJleHBlY3ROb25OdWxsIiwibG9jYXRpb24iLCJleHBlY3RPYmplY3QiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RTdHJpbmciLCJOVU1CRVJfUkVHRVgiLCJwYXJzZU51bWJlciIsIm1hdGNoIiwic3RyaWN0UGFyc2VJbnQzMiIsImV4cGVjdFNob3J0IiwiTU9OVEhTIiwiUkZDMzMzOSIsInBhcnNlUmZjMzMzOURhdGVUaW1lIiwieWVhclN0ciIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsImZyYWN0aW9uYWxNaWxsaXNlY29uZHMiLCJ5ZWFyIiwic3RyaXBMZWFkaW5nWmVyb2VzIiwibW9udGgiLCJwYXJzZURhdGVWYWx1ZSIsImRheSIsImJ1aWxkRGF0ZSIsIlJGQzMzMzlfV0lUSF9PRkZTRVQiLCJwYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQiLCJvZmZzZXRTdHIiLCJzZXRUaW1lIiwicGFyc2VPZmZzZXRUb01pbGxpc2Vjb25kcyIsInBhcnNlRXBvY2hUaW1lc3RhbXAiLCJ2YWx1ZUFzRG91YmxlIiwic3RyaWN0UGFyc2VEb3VibGUiLCJJbmZpbml0eSIsImFkanVzdGVkTW9udGgiLCJ2YWxpZGF0ZURheU9mTW9udGgiLCJVVEMiLCJwYXJzZU1pbGxpc2Vjb25kcyIsIkRBWVNfSU5fTU9OVEgiLCJtYXhEYXlzIiwiaXNMZWFwWWVhciIsImxvd2VyIiwidXBwZXIiLCJkYXRlVmFsIiwiZXhwZWN0Qnl0ZSIsInN0cmljdFBhcnNlQnl0ZSIsImV4cGVjdEZsb2F0MzIiLCJzdHJpY3RQYXJzZUZsb2F0MzIiLCJkaXJlY3Rpb25TdHIiLCJkaXJlY3Rpb24iLCJpZHgiLCJTZXJ2aWNlRXhjZXB0aW9uIiwiJGZhdWx0IiwiZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiYWRkaXRpb25zIiwiTWVzc2FnZSIsIndpdGhCYXNlRXhjZXB0aW9uIiwiRXhjZXB0aW9uQ3RvciIsInBhcnNlZEJvZHkiLCJlcnJvckNvZGUiLCJleGNlcHRpb25DdG9yIiwiZGVzZXJpYWxpemVNZXRhZGF0YSIsIkNvZGUiLCJ0aHJvd0RlZmF1bHRFcnJvciIsInJlcXVlc3RJZCIsImV4dGVuZGVkUmVxdWVzdElkIiwiY2ZJZCIsImxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUiLCJnZXRDaGVja3N1bUNvbmZpZ3VyYXRpb24iLCJjaGVja3N1bUFsZ29yaXRobXMiLCJhbGdvcml0aG1JZCIsImNoZWNrc3VtQ29uc3RydWN0b3IiLCJfY2hlY2tzdW1BbGdvcml0aG1zIiwiYWRkQ2hlY2tzdW1BbGdvcml0aG0iLCJhbGdvIiwicmVzb2x2ZUNoZWNrc3VtUnVudGltZUNvbmZpZyIsImNoZWNrc3VtQWxnb3JpdGhtIiwiZ2V0UmV0cnlDb25maWd1cmF0aW9uIiwiX3JldHJ5U3RyYXRlZ3kiLCJzZXRSZXRyeVN0cmF0ZWd5IiwicmVzb2x2ZVJldHJ5UnVudGltZUNvbmZpZyIsInJldHJ5U3RyYXRlZ3lDb25maWd1cmF0aW9uIiwiZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCJyZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWciLCJleHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCIsImdldEFycmF5SWZTaW5nbGVJdGVtIiwibWF5QmVBcnJheSIsImdldFZhbHVlRnJvbVRleHROb2RlIiwib2JqIiwidGV4dE5vZGVOYW1lIiwiU3RyaW5nV3JhcHBlciIsIkNsYXNzIiwiZ2V0UHJvdG90eXBlT2YiLCJpbnN0YW5jZSIsIkZ1bmN0aW9uIiwiYXJnMCIsImFyZzEiLCJhcmcyIiwibWFwV2l0aEZpbHRlciIsImFwcGx5SW5zdHJ1Y3Rpb24iLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInRha2UiLCJzb3VyY2UiLCJfaW5zdHJ1Y3Rpb25zIiwidGFyZ2V0S2V5Iiwibm9uTnVsbGlzaCIsInZhbHVlRm4iLCJwYXNzIiwic291cmNlS2V5IiwiX3ZhbHVlIiwiZGVmYXVsdEZpbHRlclBhc3NlZCIsImN1c3RvbUZpbHRlclBhc3NlZCIsInJlc29sdmVkUGF0aCIsImxhYmVsVmFsdWUiLCJzZWdtZW50Iiwic2VyaWFsaXplRmxvYXQiLCJfanNvbiIsIkh0dHBBdXRoTG9jYXRpb24iLCJIdHRwQXBpS2V5QXV0aExvY2F0aW9uIiwiRW5kcG9pbnRVUkxTY2hlbWUiLCJBbGdvcml0aG1JZCIsIkZpZWxkUG9zaXRpb24iLCJTTUlUSFlfQ09OVEVYVF9LRVkiLCJJbmlTZWN0aW9uVHlwZSIsIlJlcXVlc3RIYW5kbGVyUHJvdG9jb2wiLCJwYXJzZVVybCIsIlVSTCIsInBhdGhuYW1lIiwic2VhcmNoIiwicXVlcnlzdHJpbmciLCJwYWlyIiwicGFyc2VRdWVyeVN0cmluZyIsIkJBU0U2NF9SRUdFWCIsImZyb21CYXNlNjQiLCJ0b0Jhc2U2NCIsImNhbGN1bGF0ZUJvZHlMZW5ndGgiLCJzdGFydCIsImxzdGF0U3luYyIsImZkIiwiZnN0YXRTeW5jIiwiZnJvbUFycmF5QnVmZmVyIiwiZnJvbVN0cmluZyIsImJvb2xlYW5TZWxlY3RvciIsIm51bWJlclNlbGVjdG9yIiwibnVtYmVyVmFsdWUiLCJTZWxlY3RvclR5cGUiLCJBV1NfUkVHSU9OX0VOViIsIkFXU19ERUZBVUxUX1JFR0lPTl9FTlYiLCJERUZBVUxUU19NT0RFX09QVElPTlMiLCJOT0RFX0RFRkFVTFRTX01PREVfQ09ORklHX09QVElPTlMiLCJyZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnIiwiZGVmYXVsdHNNb2RlIiwicmVzb2x2ZU5vZGVEZWZhdWx0c01vZGVBdXRvIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJjbGllbnRSZWdpb24iLCJyZXNvbHZlZFJlZ2lvbiIsImluZmVycmVkUmVnaW9uIiwiaW5mZXJQaHlzaWNhbFJlZ2lvbiIsImdldEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludCIsIklQX1Y0X1JFR0VYIiwiaXNJcEFkZHJlc3MiLCJWQUxJRF9IT1NUX0xBQkVMX1JFR0VYIiwiaXNWYWxpZEhvc3RMYWJlbCIsImxhYmVscyIsImN1c3RvbUVuZHBvaW50RnVuY3Rpb25zIiwiZGVidWdJZCIsInRvRGVidWdTdHJpbmciLCJyZWYiLCJmbiIsImFyZ3YiLCJFbmRwb2ludEVycm9yIiwiZ2V0QXR0ciIsInBhdGhMaXN0Iiwic3F1YXJlQnJhY2tldEluZGV4IiwiYXJyYXlJbmRleCIsImdldEF0dHJQYXRoTGlzdCIsIkRFRkFVTFRfUE9SVFMiLCJIVFRQIiwiSFRUUFMiLCJlbmRwb2ludEZ1bmN0aW9ucyIsImJvb2xlYW5FcXVhbHMiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJpc1NldCIsIm5vdCIsInBhcnNlVVJMIiwid2hhdHdnVVJMIiwidXJsU3RyaW5nIiwiaXNJcCIsImF1dGhvcml0eSIsInN0cmluZ0VxdWFscyIsInN0b3AiLCJ1cmlFbmNvZGUiLCJldmFsdWF0ZVRlbXBsYXRlIiwidGVtcGxhdGUiLCJldmFsdWF0ZWRUZW1wbGF0ZUFyciIsInRlbXBsYXRlQ29udGV4dCIsInJlZmVyZW5jZVJlY29yZCIsImN1cnJlbnRJbmRleCIsIm9wZW5pbmdCcmFjZUluZGV4IiwiY2xvc2luZ0JyYWNlSW5kZXgiLCJwYXJhbWV0ZXJOYW1lIiwicmVmTmFtZSIsImF0dHJOYW1lIiwiZXZhbHVhdGVFeHByZXNzaW9uIiwia2V5TmFtZSIsImNhbGxGdW5jdGlvbiIsImdldFJlZmVyZW5jZVZhbHVlIiwiZXZhbHVhdGVkQXJncyIsImZuU2VnbWVudHMiLCJldmFsdWF0ZUNvbmRpdGlvbiIsImZuQXJncyIsInRvQXNzaWduIiwiZXZhbHVhdGVDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImNvbmRpdGlvbnNSZWZlcmVuY2VSZWNvcmQiLCJjb25kaXRpb24iLCJnZXRFbmRwb2ludEhlYWRlcnMiLCJoZWFkZXJLZXkiLCJoZWFkZXJWYWwiLCJoZWFkZXJWYWxFbnRyeSIsInByb2Nlc3NlZEV4cHIiLCJnZXRFbmRwb2ludFByb3BlcnR5IiwicHJvcGVydHlFbnRyeSIsImdldEVuZHBvaW50UHJvcGVydGllcyIsInByb3BlcnR5S2V5IiwicHJvcGVydHlWYWwiLCJnZXRFbmRwb2ludFVybCIsImV4cHJlc3Npb24iLCJldmFsdWF0ZUVuZHBvaW50UnVsZSIsImVuZHBvaW50UnVsZSIsImVuZHBvaW50UnVsZU9wdGlvbnMiLCJldmFsdWF0ZUVycm9yUnVsZSIsImVycm9yUnVsZSIsImV2YWx1YXRlVHJlZVJ1bGUiLCJ0cmVlUnVsZSIsInJ1bGVzIiwiZXZhbHVhdGVSdWxlcyIsInJ1bGUiLCJlbmRwb2ludE9yVW5kZWZpbmVkIiwicmVzb2x2ZUVuZHBvaW50IiwicnVsZVNldE9iamVjdCIsInBhcmFtZXRlcnMiLCJwYXJhbXNXaXRoRGVmYXVsdCIsInBhcmFtS2V5IiwicGFyYW1EZWZhdWx0VmFsdWUiLCJyZXF1aXJlZFBhcmFtcyIsInJlcXVpcmVkIiwicmVxdWlyZWRQYXJhbSIsImdpdmVuRW5kcG9pbnQiLCJnZXRTbWl0aHlDb250ZXh0IiwiUkVUUllfTU9ERVMiLCJERUZBVUxUX01BWF9BVFRFTVBUUyIsIkRFRkFVTFRfUkVUUllfTU9ERSIsIlNUQU5EQVJEIiwiRGVmYXVsdFJhdGVMaW1pdGVyIiwiY3VycmVudENhcGFjaXR5IiwiZW5hYmxlZCIsImxhc3RNYXhSYXRlIiwibWVhc3VyZWRUeFJhdGUiLCJyZXF1ZXN0Q291bnQiLCJsYXN0VGltZXN0YW1wIiwidGltZVdpbmRvdyIsImJldGEiLCJtaW5DYXBhY2l0eSIsIm1pbkZpbGxSYXRlIiwic2NhbGVDb25zdGFudCIsInNtb290aCIsImN1cnJlbnRUaW1lSW5TZWNvbmRzIiwiZ2V0Q3VycmVudFRpbWVJblNlY29uZHMiLCJsYXN0VGhyb3R0bGVUaW1lIiwibGFzdFR4UmF0ZUJ1Y2tldCIsImZsb29yIiwiZmlsbFJhdGUiLCJtYXhDYXBhY2l0eSIsImdldFNlbmRUb2tlbiIsImFjcXVpcmVUb2tlbkJ1Y2tldCIsImFtb3VudCIsInJlZmlsbFRva2VuQnVja2V0IiwidGltZXN0YW1wIiwiZmlsbEFtb3VudCIsIm1pbiIsInVwZGF0ZUNsaWVudFNlbmRpbmdSYXRlIiwiY2FsY3VsYXRlZFJhdGUiLCJ1cGRhdGVNZWFzdXJlZFJhdGUiLCJyYXRlVG9Vc2UiLCJjYWxjdWxhdGVUaW1lV2luZG93IiwiY3ViaWNUaHJvdHRsZSIsImVuYWJsZVRva2VuQnVja2V0IiwiY3ViaWNTdWNjZXNzIiwibmV3UmF0ZSIsInVwZGF0ZVRva2VuQnVja2V0UmF0ZSIsImdldFByZWNpc2UiLCJwb3ciLCJ0aW1lQnVja2V0IiwiY3VycmVudFJhdGUiLCJ0b0ZpeGVkIiwiREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFIiwiTUFYSU1VTV9SRVRSWV9ERUxBWSIsIlRIUk9UVExJTkdfUkVUUllfREVMQVlfQkFTRSIsIklOSVRJQUxfUkVUUllfVE9LRU5TIiwiUkVUUllfQ09TVCIsIlRJTUVPVVRfUkVUUllfQ09TVCIsIk5PX1JFVFJZX0lOQ1JFTUVOVCIsIklOVk9DQVRJT05fSURfSEVBREVSIiwiUkVRVUVTVF9IRUFERVIiLCJjcmVhdGVEZWZhdWx0UmV0cnlUb2tlbiIsInJldHJ5RGVsYXkiLCJyZXRyeUNvdW50IiwicmV0cnlDb3N0IiwiZ2V0UmV0cnlDb3N0IiwiU3RhbmRhcmRSZXRyeVN0cmF0ZWd5IiwiY2FwYWNpdHkiLCJyZXRyeUJhY2tvZmZTdHJhdGVneSIsImRlbGF5QmFzZSIsImNvbXB1dGVOZXh0QmFja29mZkRlbGF5Iiwic2V0RGVsYXlCYXNlIiwiZ2V0RGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5IiwibWF4QXR0ZW1wdHNQcm92aWRlciIsInJldHJ5VG9rZW5TY29wZSIsInRva2VuIiwiZ2V0TWF4QXR0ZW1wdHMiLCJzaG91bGRSZXRyeSIsImRlbGF5RnJvbUVycm9yVHlwZSIsImNhcGFjaXR5Q29zdCIsImdldENhcGFjaXR5Q29zdCIsImdldENhcGFjaXR5IiwidG9rZW5Ub1JlbmV3IiwiaXNSZXRyeWFibGVFcnJvciIsIkFkYXB0aXZlUmV0cnlTdHJhdGVneSIsInJhdGVMaW1pdGVyIiwic3RhbmRhcmRSZXRyeVN0cmF0ZWd5IiwiVWludDhBcnJheUJsb2JBZGFwdGVyIiwidHJhbnNmb3JtRnJvbVN0cmluZyIsInRyYW5zZm9ybVRvU3RyaW5nIiwiRVJSX01TR19TVFJFQU1fSEFTX0JFRU5fVFJBTlNGT1JNRUQiLCJzZGtTdHJlYW1NaXhpbiIsInRyYW5zZm9ybWVkIiwidHJhbnNmb3JtVG9CeXRlQXJyYXkiLCJpc0VuY29kaW5nIiwidHJhbnNmb3JtVG9XZWJTdHJlYW0iLCJyZWFkYWJsZUZsb3dpbmciLCJ0b1dlYiIsImVzY2FwZVVyaSIsInVyaSIsImhleEVuY29kZSIsInRvVWludDhBcnJheSIsInZhbGlkYXRvciIsIlhNTFBhcnNlciIsIlhNTEJ1aWxkZXIiLCJtb2R1bGUiLCJYTUxWYWxpZGF0b3IiLCJuYW1lU3RhcnRDaGFyIiwibmFtZVJlZ2V4cCIsInJlZ2V4TmFtZSIsImlzRXhpc3QiLCJpc0VtcHR5T2JqZWN0IiwibWVyZ2UiLCJhcnJheU1vZGUiLCJnZXRWYWx1ZSIsImlzTmFtZSIsInN0cmluZyIsImdldEFsbE1hdGNoZXMiLCJyZWdleCIsImFsbG1hdGNoZXMiLCJzdGFydEluZGV4IiwibGFzdEluZGV4IiwidXRpbCIsImRlZmF1bHRPcHRpb25zIiwiYWxsb3dCb29sZWFuQXR0cmlidXRlcyIsInVucGFpcmVkVGFncyIsImlzV2hpdGVTcGFjZSIsImNoYXIiLCJyZWFkUEkiLCJ4bWxEYXRhIiwidGFnbmFtZSIsImdldEVycm9yT2JqZWN0IiwiZ2V0TGluZU51bWJlckZvclBvc2l0aW9uIiwicmVhZENvbW1lbnRBbmRDREFUQSIsImFuZ2xlQnJhY2tldHNDb3VudCIsInZhbGlkYXRlIiwidGFnRm91bmQiLCJyZWFjaGVkUm9vdCIsInRhZ1N0YXJ0UG9zIiwiY2xvc2luZ1RhZyIsInRhZ05hbWUiLCJtc2ciLCJyZWFkQXR0cmlidXRlU3RyIiwiYXR0clN0ciIsImF0dHJTdHJTdGFydCIsImlzVmFsaWQiLCJ2YWxpZGF0ZUF0dHJpYnV0ZVN0cmluZyIsImxpbmUiLCJ0YWdDbG9zZWQiLCJvdGciLCJvcGVuUG9zIiwiY29sIiwiYWZ0ZXJBbXAiLCJ2YWxpZGF0ZUFtcGVyc2FuZCIsImRvdWJsZVF1b3RlIiwic2luZ2xlUXVvdGUiLCJzdGFydENoYXIiLCJ2YWxpZEF0dHJTdHJSZWd4cCIsImF0dHJOYW1lcyIsImdldFBvc2l0aW9uRnJvbU1hdGNoIiwidmFsaWRhdGVBdHRyTmFtZSIsInJlIiwidmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQiLCJjb3VudCIsImxpbmVOdW1iZXIiLCJsaW5lcyIsImJ1aWxkRnJvbU9yZGVyZWRKcyIsImF0dHJpYnV0ZU5hbWVQcmVmaXgiLCJhdHRyaWJ1dGVzR3JvdXBOYW1lIiwiaWdub3JlQXR0cmlidXRlcyIsImNkYXRhUHJvcE5hbWUiLCJpbmRlbnRCeSIsInN1cHByZXNzRW1wdHlOb2RlIiwic3VwcHJlc3NVbnBhaXJlZE5vZGUiLCJzdXBwcmVzc0Jvb2xlYW5BdHRyaWJ1dGVzIiwidGFnVmFsdWVQcm9jZXNzb3IiLCJhdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvciIsInByZXNlcnZlT3JkZXIiLCJjb21tZW50UHJvcE5hbWUiLCJlbnRpdGllcyIsInZhbCIsInByb2Nlc3NFbnRpdGllcyIsInN0b3BOb2RlcyIsIm9uZUxpc3RHcm91cCIsIkJ1aWxkZXIiLCJpc0F0dHJpYnV0ZSIsImF0dHJQcmVmaXhMZW4iLCJwcm9jZXNzVGV4dE9yT2JqTm9kZSIsImluZGVudGF0ZSIsInRhZ0VuZENoYXIiLCJuZXdMaW5lIiwib2JqZWN0IiwibGV2ZWwiLCJqMngiLCJidWlsZFRleHRWYWxOb2RlIiwiYnVpbGRPYmplY3ROb2RlIiwicmVwZWF0Iiwiak9iaiIsImFycmF5Tm9kZU5hbWUiLCJhdHRyIiwiYnVpbGRBdHRyUGFpclN0ciIsIm5ld3ZhbCIsInJlcGxhY2VFbnRpdGllc1ZhbHVlIiwiYXJyTGVuIiwibGlzdFRhZ1ZhbCIsIktzIiwiTCIsImNsb3NlVGFnIiwidGFnRW5kRXhwIiwicGlDbG9zaW5nQ2hhciIsInRleHRWYWx1ZSIsImVudGl0eSIsImFyclRvU3RyIiwialBhdGgiLCJpbmRlbnRhdGlvbiIsInhtbFN0ciIsImlzUHJldmlvdXNFbGVtZW50VGFnIiwidGFnT2JqIiwicHJvcE5hbWUiLCJuZXdKUGF0aCIsInRhZ1RleHQiLCJpc1N0b3BOb2RlIiwiYXR0U3RyIiwiYXR0cl90b19zdHIiLCJ0ZW1wSW5kIiwicGlUZXh0Tm9kZU5hbWUiLCJuZXdJZGVudGF0aW9uIiwidGFnU3RhcnQiLCJ0YWdWYWx1ZSIsImF0dHJNYXAiLCJhdHRyVmFsIiwibGFzdEluZGV4T2YiLCJqQXJyYXkiLCJyZWFkRW50aXR5RXhwIiwiZW50aXR5TmFtZSIsImlzQ29tbWVudCIsImlzRW50aXR5IiwiaXNFbGVtZW50IiwiaXNBdHRsaXN0IiwiaXNOb3RhdGlvbiIsInZhbGlkYXRlRW50aXR5TmFtZSIsImhhc0JvZHkiLCJjb21tZW50IiwiZXhwIiwicmVneCIsInJlbW92ZU5TUHJlZml4IiwicGFyc2VUYWdWYWx1ZSIsInBhcnNlQXR0cmlidXRlVmFsdWUiLCJ0cmltVmFsdWVzIiwibnVtYmVyUGFyc2VPcHRpb25zIiwiaGV4IiwibGVhZGluZ1plcm9zIiwiZU5vdGF0aW9uIiwiYWx3YXlzQ3JlYXRlVGV4dE5vZGUiLCJodG1sRW50aXRpZXMiLCJpZ25vcmVEZWNsYXJhdGlvbiIsImlnbm9yZVBpVGFncyIsInRyYW5zZm9ybVRhZ05hbWUiLCJ0cmFuc2Zvcm1BdHRyaWJ1dGVOYW1lIiwidXBkYXRlVGFnIiwiYXR0cnMiLCJidWlsZE9wdGlvbnMiLCJ4bWxOb2RlIiwicmVhZERvY1R5cGUiLCJ0b051bWJlciIsImFkZEV4dGVybmFsRW50aXRpZXMiLCJleHRlcm5hbEVudGl0aWVzIiwiZW50S2V5cyIsImVudCIsImxhc3RFbnRpdGllcyIsInBhcnNlVGV4dERhdGEiLCJkb250VHJpbSIsImhhc0F0dHJpYnV0ZXMiLCJpc0xlYWZOb2RlIiwiZXNjYXBlRW50aXRpZXMiLCJwYXJzZVZhbHVlIiwicmVzb2x2ZU5hbWVTcGFjZSIsImF0dHJzUmVneCIsImJ1aWxkQXR0cmlidXRlc01hcCIsIm9sZFZhbCIsImFOYW1lIiwibmV3VmFsIiwiYXR0ckNvbGxlY3Rpb24iLCJwYXJzZVhtbCIsInhtbE9iaiIsImN1cnJlbnROb2RlIiwidGV4dERhdGEiLCJjbG9zZUluZGV4IiwiZmluZENsb3NpbmdJbmRleCIsImNvbG9uSW5kZXgiLCJzYXZlVGV4dFRvUGFyZW50VGFnIiwibGFzdFRhZ05hbWUiLCJwcm9wSW5kZXgiLCJ0YWdzTm9kZVN0YWNrIiwidGFnRGF0YSIsInJlYWRUYWdFeHAiLCJjaGlsZE5vZGUiLCJ0YWdFeHAiLCJhdHRyRXhwUHJlc2VudCIsImFkZENoaWxkIiwiZW5kSW5kZXgiLCJkb2NUeXBlRW50aXRpZXMiLCJsYXN0VGFnIiwiaXNJdFN0b3BOb2RlIiwidGFnQ29udGVudCIsInJlYWRTdG9wTm9kZURhdGEiLCJjaGlsZCIsImFtcEVudGl0eSIsImN1cnJlbnRUYWdOYW1lIiwiYWxsTm9kZXNFeHAiLCJzdG9wTm9kZVBhdGgiLCJzdG9wTm9kZUV4cCIsImVyck1zZyIsImNsb3NpbmdJbmRleCIsImNsb3NpbmdDaGFyIiwiYXR0ckJvdW5kYXJ5IiwiY2giLCJ0YWdFeHBXaXRoQ2xvc2luZ0luZGV4Iiwic2VwYXJhdG9ySW5kZXgiLCJvcGVuVGFnQ291bnQiLCJzaG91bGRQYXJzZSIsIk9yZGVyZWRPYmpQYXJzZXIiLCJwcmV0dGlmeSIsInZhbGlkYXRpb25PcHRpb24iLCJvcmRlcmVkT2JqUGFyc2VyIiwib3JkZXJlZFJlc3VsdCIsImFkZEVudGl0eSIsImNvbXByZXNzIiwidGV4dCIsImNvbXByZXNzZWRPYmoiLCJuZXdKcGF0aCIsImlzTGVhZiIsImlzTGVhZlRhZyIsImFzc2lnbkF0dHJpYnV0ZXMiLCJqcGF0aCIsImF0cnJOYW1lIiwicHJvcENvdW50IiwiaGV4UmVnZXgiLCJudW1SZWdleCIsIndpbmRvdyIsImNvbnNpZGVyIiwiZGVjaW1hbFBvaW50IiwidHJpbW1lZFN0ciIsInNraXBMaWtlIiwibnVtVHJpbW1lZEJ5WmVyb3MiLCJudW1TdHIiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsImNodW5rSWQiLCJwcm9taXNlcyIsInUiLCJwcm9wIiwidG9TdHJpbmdUYWciLCJtb3JlTW9kdWxlcyIsIm1vZHVsZXMiLCJjaHVua0lkcyIsImlkcyIsImluc3RhbGxDaHVuayIsImRlZmF1bHRDbG91ZFRyYWlsSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIiLCJkZWZhdWx0Q2xvdWRUcmFpbEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIiLCJhdXRoUGFyYW1ldGVycyIsImNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uIiwiY29tbW9uUGFyYW1zIiwiVXNlRklQUyIsIlJlZ2lvbiIsIlVzZUR1YWxTdGFjayIsIngiLCJsIiwicnVsZVNldCIsImRlZmF1bHRFbmRwb2ludFJlc29sdmVyIiwiZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uIiwiX2h0dHBBdXRoU2NoZW1lcyIsIl9odHRwQXV0aFNjaGVtZVByb3ZpZGVyIiwiX2NyZWRlbnRpYWxzIiwic2V0SHR0cEF1dGhTY2hlbWUiLCJodHRwQXV0aFNjaGVtZSIsInNldEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIiLCJzZXRDcmVkZW50aWFscyIsIkNsb3VkVHJhaWxDbGllbnQiLCJfY29uZmlnXzAiLCJkZWZhdWx0Q29uZmlnUHJvdmlkZXIiLCJjbGllbnRTaGFyZWRWYWx1ZXMiLCJhcGlWZXJzaW9uIiwiYmFzZTY0RGVjb2RlciIsImJhc2U2NEVuY29kZXIiLCJkaXNhYmxlSG9zdFByZWZpeCIsImV4dGVuc2lvbnMiLCJpcGMiLCJ1dGY4RGVjb2RlciIsInV0ZjhFbmNvZGVyIiwiX2NvbmZpZ18xIiwiX2NvbmZpZ18yIiwiX2NvbmZpZ18zIiwiX2NvbmZpZ180IiwiX2NvbmZpZ181IiwiX2NvbmZpZ184IiwiZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsImV4dGVuc2lvbiIsImNvbmZpZ3VyZSIsInJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyIsImdldERlZmF1bHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciIsImdldElkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlciIsIkNsb3VkVHJhaWxTZXJ2aWNlRXhjZXB0aW9uIiwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uIiwib3B0cyIsIkFjY291bnRIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uIiwiQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uIiwiQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb24iLCJBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvbiIsIkNoYW5uZWxBUk5JbnZhbGlkRXhjZXB0aW9uIiwiQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uIiwiQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb24iLCJDb25mbGljdEV4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb24iLCJJbmFjdGl2ZUV2ZW50RGF0YVN0b3JlRXhjZXB0aW9uIiwiSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvbiIsIkludmFsaWRUcmFpbE5hbWVFeGNlcHRpb24iLCJOb01hbmFnZW1lbnRBY2NvdW50U0xSRXhpc3RzRXhjZXB0aW9uIiwiTm90T3JnYW5pemF0aW9uTWFzdGVyQWNjb3VudEV4Y2VwdGlvbiIsIk9wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvbiIsIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb24iLCJSZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb24iLCJUYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiIsIlVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uIiwiSW5hY3RpdmVRdWVyeUV4Y2VwdGlvbiIsIkludmFsaWRQYXJhbWV0ZXJFeGNlcHRpb24iLCJRdWVyeUlkTm90Rm91bmRFeGNlcHRpb24iLCJDYW5ub3REZWxlZ2F0ZU1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uIiwiQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJDaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uIiwiQ2hhbm5lbE1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24iLCJJbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvbiIsIkludmFsaWRTb3VyY2VFeGNlcHRpb24iLCJDbG91ZFRyYWlsQWNjZXNzTm90RW5hYmxlZEV4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvbiIsIkluc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvbiIsIkluc3VmZmljaWVudEVuY3J5cHRpb25Qb2xpY3lFeGNlcHRpb24iLCJJbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb24iLCJJbnZhbGlkS21zS2V5SWRFeGNlcHRpb24iLCJLbXNFeGNlcHRpb24iLCJLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvbiIsIk9yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uIiwiT3JnYW5pemF0aW9uc05vdEluVXNlRXhjZXB0aW9uIiwiQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uIiwiQ2xvdWRXYXRjaExvZ3NEZWxpdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uIiwiSW5zdWZmaWNpZW50UzNCdWNrZXRQb2xpY3lFeGNlcHRpb24iLCJJbnN1ZmZpY2llbnRTbnNUb3BpY1BvbGljeUV4Y2VwdGlvbiIsIkludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uIiwiSW52YWxpZENsb3VkV2F0Y2hMb2dzUm9sZUFybkV4Y2VwdGlvbiIsIkludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvbiIsIkludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb24iLCJJbnZhbGlkUzNQcmVmaXhFeGNlcHRpb24iLCJJbnZhbGlkU25zVG9waWNOYW1lRXhjZXB0aW9uIiwiS21zS2V5RGlzYWJsZWRFeGNlcHRpb24iLCJNYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvbiIsIlMzQnVja2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiVGhyb3R0bGluZ0V4Y2VwdGlvbiIsIlRyYWlsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsIlRyYWlsTm90UHJvdmlkZWRFeGNlcHRpb24iLCJFdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uIiwiRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uIiwiRXZlbnREYXRhU3RvcmVUZXJtaW5hdGlvblByb3RlY3RlZEV4Y2VwdGlvbiIsIlJlc291cmNlQVJOTm90VmFsaWRFeGNlcHRpb24iLCJSZXNvdXJjZVBvbGljeU5vdEZvdW5kRXhjZXB0aW9uIiwiSW52YWxpZEhvbWVSZWdpb25FeGNlcHRpb24iLCJUcmFpbE5vdEZvdW5kRXhjZXB0aW9uIiwiTm90T3JnYW5pemF0aW9uTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb24iLCJDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uIiwiSW1wb3J0Tm90Rm91bmRFeGNlcHRpb24iLCJJbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvbiIsIkludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uIiwiSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvbiIsIkludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb24iLCJJbnZhbGlkVG9rZW5FeGNlcHRpb24iLCJJbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uIiwiSW52YWxpZFF1ZXJ5U3RhdHVzRXhjZXB0aW9uIiwiSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb24iLCJJbnZhbGlkTG9va3VwQXR0cmlidXRlc0V4Y2VwdGlvbiIsIkludmFsaWRJbnNpZ2h0U2VsZWN0b3JzRXhjZXB0aW9uIiwiUmVzb3VyY2VQb2xpY3lOb3RWYWxpZEV4Y2VwdGlvbiIsIkRlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb24iLCJJbnZhbGlkRXZlbnREYXRhU3RvcmVTdGF0dXNFeGNlcHRpb24iLCJJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uIiwiSW52YWxpZFF1ZXJ5U3RhdGVtZW50RXhjZXB0aW9uIiwiTWF4Q29uY3VycmVudFF1ZXJpZXNFeGNlcHRpb24iLCJzZV9Mb29rdXBFdmVudHNDb21tYW5kIiwic2VfTG9va3VwRXZlbnRzUmVxdWVzdCIsImJ1aWxkSHR0cFJwY1JlcXVlc3QiLCJkZV9Mb29rdXBFdmVudHNDb21tYW5kIiwiZGVfQ29tbWFuZEVycm9yIiwicGFyc2VCb2R5IiwiY29udGVudHMiLCJkZV9Mb29rdXBFdmVudHNSZXNwb25zZSIsInBhcnNlZE91dHB1dCIsInBhcnNlRXJyb3JCb2R5IiwibG9hZFJlc3RKc29uRXJyb3JDb2RlIiwiZGVfQ2hhbm5lbEFSTkludmFsaWRFeGNlcHRpb25SZXMiLCJkZV9DaGFubmVsTm90Rm91bmRFeGNlcHRpb25SZXMiLCJkZV9DbG91ZFRyYWlsQVJOSW52YWxpZEV4Y2VwdGlvblJlcyIsImRlX0NvbmZsaWN0RXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREYXRhU3RvcmVOb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX0luYWN0aXZlRXZlbnREYXRhU3RvcmVFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkVGFnUGFyYW1ldGVyRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFRyYWlsTmFtZUV4Y2VwdGlvblJlcyIsImRlX05vTWFuYWdlbWVudEFjY291bnRTTFJFeGlzdHNFeGNlcHRpb25SZXMiLCJkZV9Ob3RPcmdhbml6YXRpb25NYXN0ZXJBY2NvdW50RXhjZXB0aW9uUmVzIiwiZGVfT3BlcmF0aW9uTm90UGVybWl0dGVkRXhjZXB0aW9uUmVzIiwiZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX1Jlc291cmNlVHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblJlcyIsImRlX1RhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzIiwiZGVfVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb25SZXMiLCJkZV9JbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFBhcmFtZXRlckV4Y2VwdGlvblJlcyIsImRlX1F1ZXJ5SWROb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX0NoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzIiwiZGVfQ2hhbm5lbE1heExpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRTb3VyY2VFeGNlcHRpb25SZXMiLCJkZV9DbG91ZFRyYWlsQWNjZXNzTm90RW5hYmxlZEV4Y2VwdGlvblJlcyIsImRlX0V2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyIsImRlX0V2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyIsImRlX0luc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblJlcyIsImRlX0luc3VmZmljaWVudEVuY3J5cHRpb25Qb2xpY3lFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkS21zS2V5SWRFeGNlcHRpb25SZXMiLCJkZV9LbXNFeGNlcHRpb25SZXMiLCJkZV9LbXNLZXlOb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX09yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uUmVzIiwiZGVfT3JnYW5pemF0aW9uc05vdEluVXNlRXhjZXB0aW9uUmVzIiwiZGVfQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uUmVzIiwiZGVfQ2xvdWRXYXRjaExvZ3NEZWxpdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uUmVzIiwiZGVfSW5zdWZmaWNpZW50UzNCdWNrZXRQb2xpY3lFeGNlcHRpb25SZXMiLCJkZV9JbnN1ZmZpY2llbnRTbnNUb3BpY1BvbGljeUV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZENsb3VkV2F0Y2hMb2dzUm9sZUFybkV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUzNQcmVmaXhFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkU25zVG9waWNOYW1lRXhjZXB0aW9uUmVzIiwiZGVfS21zS2V5RGlzYWJsZWRFeGNlcHRpb25SZXMiLCJkZV9NYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvblJlcyIsImRlX1MzQnVja2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzIiwiZGVfVGhyb3R0bGluZ0V4Y2VwdGlvblJlcyIsImRlX1RyYWlsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyIsImRlX1RyYWlsTm90UHJvdmlkZWRFeGNlcHRpb25SZXMiLCJkZV9DaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvblJlcyIsImRlX0V2ZW50RGF0YVN0b3JlSGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblJlcyIsImRlX0V2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb25SZXMiLCJkZV9SZXNvdXJjZUFSTk5vdFZhbGlkRXhjZXB0aW9uUmVzIiwiZGVfUmVzb3VyY2VQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uUmVzIiwiZGVfVHJhaWxOb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX0FjY291bnROb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX0FjY291bnROb3RSZWdpc3RlcmVkRXhjZXB0aW9uUmVzIiwiZGVfTm90T3JnYW5pemF0aW9uTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25SZXMiLCJkZV9BY2Nlc3NEZW5pZWRFeGNlcHRpb25SZXMiLCJkZV9Db25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uUmVzIiwiZGVfSW1wb3J0Tm90Rm91bmRFeGNlcHRpb25SZXMiLCJkZV9JbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkVG9rZW5FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFF1ZXJ5U3RhdHVzRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkTG9va3VwQXR0cmlidXRlc0V4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRJbnNpZ2h0U2VsZWN0b3JzRXhjZXB0aW9uUmVzIiwiZGVfUmVzb3VyY2VQb2xpY3lOb3RWYWxpZEV4Y2VwdGlvblJlcyIsImRlX0FjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uUmVzIiwiZGVfQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblJlcyIsImRlX0RlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkRXZlbnREYXRhU3RvcmVTdGF0dXNFeGNlcHRpb25SZXMiLCJkZV9BY2NvdW50SGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25SZXMiLCJkZV9NYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvblJlcyIsImRlc2VyaWFsaXplZCIsIkVuZFRpbWUiLCJFdmVudENhdGVnb3J5IiwiTG9va3VwQXR0cmlidXRlcyIsIk1heFJlc3VsdHMiLCJOZXh0VG9rZW4iLCJTdGFydFRpbWUiLCJFdmVudHMiLCJyZXRWYWwiLCJBY2Nlc3NLZXlJZCIsIkNsb3VkVHJhaWxFdmVudCIsIkV2ZW50SWQiLCJFdmVudE5hbWUiLCJFdmVudFNvdXJjZSIsIkV2ZW50VGltZSIsIlJlYWRPbmx5IiwiUmVzb3VyY2VzIiwiVXNlcm5hbWUiLCJkZV9FdmVudCIsImRlX0V2ZW50c0xpc3QiLCJyZXNvbHZlZEhvc3RuYW1lIiwiY29sbGVjdEJvZHlTdHJpbmciLCJlcnJvckJvZHkiLCJzYW5pdGl6ZUVycm9yQ29kZSIsInJhd1ZhbHVlIiwiY2xlYW5WYWx1ZSIsIkxvb2t1cEV2ZW50c0NvbW1hbmQiLCJjcyIsImV2ZW50IiwidXNlcklkZW50aXR5Iiwicm9sZSIsInNlc3Npb24iLCJpYW1Sb2xlIiwic3RzU2Vzc2lvbiIsImV2ZW50VGltZSIsImNsb3VkVHJhaWxDbGllbnQiLCJyZXRyaWV2ZVF1aWNrU2lnaHRVc2VyRXZlbnRzIiwic3RhcnREYXRlIiwiZXZlbnRzIiwibmV4dFRva2VuIiwibG9va3VwRXZlbnRzQ29tbWFuZCIsIkF0dHJpYnV0ZUtleSIsIkF0dHJpYnV0ZVZhbHVlIiwibG9va3VwRXZlbnRzUmVzdWx0IiwiQ2xvdWRUcmFpbFVzZXJFdmVudCIsImdldExhc3RBY2Nlc3NEYXRlIiwidXNlciIsInRoaXNQYXJ0aWN1bGFyVXNlckV2ZW50cyIsIm5ld2VzdEV2ZW50IiwiTk9ERV9ESVNBQkxFX1JFUVVFU1RfQ09NUFJFU1NJT05fQ09ORklHX09QVElPTlMiLCJOT0RFX1JFUVVFU1RfTUlOX0NPTVBSRVNTSU9OX1NJWkVfQllURVNfQ09ORklHX09QVElPTlMiLCJjb21wcmVzc1N0cmVhbSIsImNyZWF0ZUd6aXAiLCJnemlwQXN5bmMiLCJwcm9taXNpZnkiLCJnemlwIiwiY29tcHJlc3NTdHJpbmciLCJjb21wcmVzc2VkQnVmZmVyIiwiQ29tcHJlc3Npb25BbGdvcml0aG0iLCJDTElFTlRfU1VQUE9SVEVEX0FMR09SSVRITVMiLCJHWklQIiwiaXNTdHJlYW1pbmciLCJjb21wcmVzc2lvbk1pZGRsZXdhcmVPcHRpb25zIiwiZ2V0Q29tcHJlc3Npb25QbHVnaW4iLCJtaWRkbGV3YXJlQ29uZmlnIiwiZGlzYWJsZVJlcXVlc3RDb21wcmVzc2lvbiIsImVuY29kaW5ncyIsInN0cmVhbVJlcXVpcmVzTGVuZ3RoIiwidXBkYXRlZEJvZHkiLCJ1cGRhdGVkSGVhZGVycyIsImFsZ29yaXRobSIsImlzUmVxdWVzdENvbXByZXNzZWQiLCJib2R5TGVuZ3RoIiwicmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzIiwiY29tcHJlc3Npb25NaWRkbGV3YXJlIiwiZGVmYXVsdENsb3VkV2F0Y2hIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciIsImRlZmF1bHRDbG91ZFdhdGNoSHR0cEF1dGhTY2hlbWVQcm92aWRlciIsIkNsb3VkV2F0Y2hDbGllbnQiLCJfY29uZmlnXzciLCJfY29uZmlnXzkiLCJSYW5nZUVycm9yIiwiQ2xvdWRXYXRjaFNlcnZpY2VFeGNlcHRpb24iLCJEYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvciIsImRhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlcyIsIlJlc291cmNlTm90Rm91bmQiLCJJbnRlcm5hbFNlcnZpY2VGYXVsdCIsIkludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvbiIsIk1pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvbiIsIlJlc291cmNlVHlwZSIsIlJlc291cmNlSWQiLCJJbnZhbGlkTmV4dFRva2VuIiwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiIsIkxpbWl0RXhjZWVkZWRGYXVsdCIsIkludmFsaWRGb3JtYXRGYXVsdCIsInNlX1B1dE1ldHJpY0RhdGFDb21tYW5kIiwiU0hBUkVEX0hFQURFUlMiLCJidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nIiwic2VfUHV0TWV0cmljRGF0YUlucHV0IiwiX0EiLCJfUE1EIiwiX1YiLCJkZV9QdXRNZXRyaWNEYXRhQ29tbWFuZCIsImxvYWRRdWVyeUVycm9yQ29kZSIsImRlX1Jlc291cmNlTm90Rm91bmRSZXMiLCJkZV9JbnRlcm5hbFNlcnZpY2VGYXVsdFJlcyIsImRlX0ludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblJlcyIsImRlX01pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWROZXh0VG9rZW5SZXMiLCJkZV9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzIiwiZGVfTGltaXRFeGNlZWRlZEZhdWx0UmVzIiwiZGVfRGFzaGJvYXJkSW52YWxpZElucHV0RXJyb3JSZXMiLCJkZV9JbnZhbGlkRm9ybWF0RmF1bHRSZXMiLCJkZV9Db25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uIiwiZGVfRGFzaGJvYXJkSW52YWxpZElucHV0RXJyb3IiLCJkZV9JbnRlcm5hbFNlcnZpY2VGYXVsdCIsImRlX0ludmFsaWRGb3JtYXRGYXVsdCIsImRlX0ludmFsaWROZXh0VG9rZW4iLCJkZV9JbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24iLCJkZV9JbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24iLCJkZV9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIiwiZGVfTGltaXRFeGNlZWRlZEZhdWx0IiwiZGVfTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uIiwiZGVfUmVzb3VyY2VOb3RGb3VuZCIsImRlX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb24iLCJzZV9EaW1lbnNpb24iLCJfTmEiLCJfVmEiLCJzZV9NZXRyaWNEYXR1bSIsIl9NTiIsIl9EIiwibWVtYmVyRW50cmllcyIsImNvdW50ZXIiLCJzZV9EaW1lbnNpb25zIiwiRGltZW5zaW9ucyIsIl9UaSIsIl9TVnQiLCJzZV9TdGF0aXN0aWNTZXQiLCJfVmFsIiwic2VfVmFsdWVzIiwiVmFsdWVzIiwiX0MiLCJzZV9Db3VudHMiLCJDb3VudHMiLCJfVSIsIl9TUiIsIl9OIiwiX01EZSIsInNlX01ldHJpY0RhdGEiLCJNZXRyaWNEYXRhIiwiX1NDYSIsIl9TdSIsIl9NaSIsIl9NYSIsIl9NZXMiLCJfbWUiLCJfZFZNIiwiX20iLCJkZV9EYXNoYm9hcmRWYWxpZGF0aW9uTWVzc2FnZXMiLCJfRFAiLCJkZV9EYXNoYm9hcmRWYWxpZGF0aW9uTWVzc2FnZSIsIl9SVCIsIl9SSSIsInBhcnNlciIsInBhcnNlZE9iaiIsInBhcnNlZE9ialRvUmV0dXJuIiwiZm9ybUVudHJpZXMiLCJQdXRNZXRyaWNEYXRhQ29tbWFuZCIsIm1ldHJpY0RhdGEiLCJjbG91ZFdhdGNoQ2xpZW50IiwicXVldWVNZXRyaWMiLCJtZXRyaWNEYXR1bSIsImVtaXRRdWV1ZWRNZXRyaWNzIiwicHV0TWV0cmljRGF0YUNvbW1hbmQiLCJOYW1lc3BhY2UiLCJBV1NfTEFNQkRBX0ZVTkNUSU9OX05BTUUiLCJkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIiLCJkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQcm92aWRlciIsIlNFU0NsaWVudCIsIlNFU1NlcnZpY2VFeGNlcHRpb24iLCJBY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbiIsIkFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJOYW1lIiwiQ2Fubm90RGVsZXRlRXhjZXB0aW9uIiwiUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiIsIkNvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIiwiQ29uZmlndXJhdGlvblNldE5hbWUiLCJDb25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24iLCJJbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvbiIsIkV2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzRXhjZXB0aW9uIiwiRXZlbnREZXN0aW5hdGlvbk5hbWUiLCJJbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uIiwiSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb24iLCJJbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb24iLCJJbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uIiwiVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb24iLCJDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVOYW1lIiwiRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uIiwiRnJvbUVtYWlsQWRkcmVzcyIsIkludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvbiIsIkZ1bmN0aW9uQXJuIiwiSW52YWxpZFMzQ29uZmlndXJhdGlvbkV4Y2VwdGlvbiIsIkludmFsaWRTbnNUb3BpY0V4Y2VwdGlvbiIsIlRvcGljIiwiUnVsZURvZXNOb3RFeGlzdEV4Y2VwdGlvbiIsIkludmFsaWRUZW1wbGF0ZUV4Y2VwdGlvbiIsIlRlbXBsYXRlTmFtZSIsIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24iLCJFdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiVHJhY2tpbmdPcHRpb25zRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24iLCJJbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uIiwiSW52YWxpZFBvbGljeUV4Y2VwdGlvbiIsIkludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24iLCJNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uIiwiTWVzc2FnZVJlamVjdGVkIiwiTWlzc2luZ1JlbmRlcmluZ0F0dHJpYnV0ZUV4Y2VwdGlvbiIsIlByb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uIiwic2VfU2VuZEVtYWlsQ29tbWFuZCIsInNlX1NlbmRFbWFpbFJlcXVlc3QiLCJfU0UiLCJkZV9TZW5kRW1haWxDb21tYW5kIiwiZGVfU2VuZEVtYWlsUmVzcG9uc2UiLCJTZW5kRW1haWxSZXN1bHQiLCJkZV9BbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzIiwiZGVfUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX0NvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb25SZXMiLCJkZV9Db25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uUmVzIiwiZGVfVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyIsImRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb25SZXMiLCJkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyIsImRlX0Zyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkU25zVG9waWNFeGNlcHRpb25SZXMiLCJkZV9SdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREZXN0aW5hdGlvbkRvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX1RyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX0Nhbm5vdERlbGV0ZUV4Y2VwdGlvblJlcyIsImRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMiLCJkZV9UZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUG9saWN5RXhjZXB0aW9uUmVzIiwiZGVfTWVzc2FnZVJlamVjdGVkUmVzIiwiZGVfQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb25SZXMiLCJkZV9Db25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblJlcyIsImRlX01haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb25SZXMiLCJkZV9Qcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb25SZXMiLCJkZV9NaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uUmVzIiwiZGVfQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb24iLCJkZV9BbHJlYWR5RXhpc3RzRXhjZXB0aW9uIiwiZGVfQ2Fubm90RGVsZXRlRXhjZXB0aW9uIiwiZGVfQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJkZV9Db25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24iLCJkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uIiwiZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJkZV9FdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uIiwiZGVfSW52YWxpZENsb3VkV2F0Y2hEZXN0aW5hdGlvbkV4Y2VwdGlvbiIsImRlX0ludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uIiwiZGVfSW52YWxpZERlbGl2ZXJ5T3B0aW9uc0V4Y2VwdGlvbiIsImRlX0ludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZExhbWJkYUZ1bmN0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZFBvbGljeUV4Y2VwdGlvbiIsImRlX0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24iLCJkZV9JbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uIiwiZGVfSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uIiwiZGVfSW52YWxpZFRyYWNraW5nT3B0aW9uc0V4Y2VwdGlvbiIsImRlX01haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24iLCJkZV9NZXNzYWdlUmVqZWN0ZWQiLCJkZV9NaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uIiwiZGVfUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb24iLCJkZV9SdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiIsImRlX1RlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsImRlX1RyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvbiIsInNlX0FkZHJlc3NMaXN0Iiwic2VfQ29udGVudCIsInNlX01lc3NhZ2VUYWciLCJfU28iLCJfVEFvIiwiVG9BZGRyZXNzZXMiLCJDY0FkZHJlc3NlcyIsIl9CQSIsIkJjY0FkZHJlc3NlcyIsInNlX0Rlc3RpbmF0aW9uIiwiX0IiLCJfSCIsInNlX0JvZHkiLCJzZV9NZXNzYWdlIiwiX1JUQSIsIlJlcGx5VG9BZGRyZXNzZXMiLCJfUlAiLCJfU0FvIiwiX1JQQSIsInNlX01lc3NhZ2VUYWdMaXN0IiwiVGFncyIsIl9DU04iLCJfQ1ZFVE4iLCJfRUROIiwiX0ZFQSIsIl9CdSIsIl9UbyIsIl9NSWUiLCJTZW5kRW1haWxDb21tYW5kIiwiUXVpY2tTaWdodFJvbGUiLCJzZXNDbGllbnQiLCJub0xhc3RBY2Nlc3NEYXRlIiwidG9Mb2NhbGVTdHJpbmciLCJub3RpZnlVc2VyIiwibGFzdEFjY2VzcyIsImRlbGV0ZURheXMiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJzdWJqZWN0IiwiYWNjb3VudEFsaWFzIiwiYXdzQWNjb3VudElkIiwiZW1haWwiLCJjb250YWN0Iiwic2VuZEVtYWlsQ29tbWFuZCIsIlNvdXJjZSIsIkRlc3RpbmF0aW9uIiwiY2MiLCJyZXBseVRvIiwiU291cmNlQXJuIiwic2VzQXJuIiwiU3ViamVjdCIsIkRhdGEiLCJCb2R5IiwiSHRtbCIsInF1aWNrU2lnaHRVc2VyIiwiQXJuIiwiRW1haWwiLCJSb2xlIiwiVXNlck5hbWUiLCJpbnZhbGlkIiwiZGVmYXVsdFF1aWNrU2lnaHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciIsImRlZmF1bHRRdWlja1NpZ2h0SHR0cEF1dGhTY2hlbWVQcm92aWRlciIsIlF1aWNrU2lnaHRDbGllbnQiLCJRdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvbiIsIlJlcXVlc3RJZCIsIkRhdGFTb3VyY2VQYXJhbWV0ZXJzIiwiUGh5c2ljYWxUYWJsZSIsInZpc2l0IiwidmlzaXRvciIsIkFtYXpvbkVsYXN0aWNzZWFyY2hQYXJhbWV0ZXJzIiwiQXRoZW5hUGFyYW1ldGVycyIsIkF1cm9yYVBhcmFtZXRlcnMiLCJBdXJvcmFQb3N0Z3JlU3FsUGFyYW1ldGVycyIsIkF3c0lvdEFuYWx5dGljc1BhcmFtZXRlcnMiLCJKaXJhUGFyYW1ldGVycyIsIk1hcmlhRGJQYXJhbWV0ZXJzIiwiTXlTcWxQYXJhbWV0ZXJzIiwiT3JhY2xlUGFyYW1ldGVycyIsIlBvc3RncmVTcWxQYXJhbWV0ZXJzIiwiUHJlc3RvUGFyYW1ldGVycyIsIlJkc1BhcmFtZXRlcnMiLCJSZWRzaGlmdFBhcmFtZXRlcnMiLCJTM1BhcmFtZXRlcnMiLCJTZXJ2aWNlTm93UGFyYW1ldGVycyIsIlNub3dmbGFrZVBhcmFtZXRlcnMiLCJTcGFya1BhcmFtZXRlcnMiLCJTcWxTZXJ2ZXJQYXJhbWV0ZXJzIiwiVGVyYWRhdGFQYXJhbWV0ZXJzIiwiVHdpdHRlclBhcmFtZXRlcnMiLCJBbWF6b25PcGVuU2VhcmNoUGFyYW1ldGVycyIsIkV4YXNvbFBhcmFtZXRlcnMiLCJEYXRhYnJpY2tzUGFyYW1ldGVycyIsIlN0YXJidXJzdFBhcmFtZXRlcnMiLCJUcmlub1BhcmFtZXRlcnMiLCJCaWdRdWVyeVBhcmFtZXRlcnMiLCIkdW5rbm93biIsIkludGVybmFsRmFpbHVyZUV4Y2VwdGlvbiIsIlJlc291cmNlRXhpc3RzRXhjZXB0aW9uIiwiQ29uY3VycmVudFVwZGF0aW5nRXhjZXB0aW9uIiwiUmVzb3VyY2VVbmF2YWlsYWJsZUV4Y2VwdGlvbiIsIlByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvbiIsIlVuc3VwcG9ydGVkVXNlckVkaXRpb25FeGNlcHRpb24iLCJQcm9qZWN0T3BlcmF0aW9uIiwiRmlsdGVyT3BlcmF0aW9uIiwiQ3JlYXRlQ29sdW1uc09wZXJhdGlvbiIsIlJlbmFtZUNvbHVtbk9wZXJhdGlvbiIsIkNhc3RDb2x1bW5UeXBlT3BlcmF0aW9uIiwiVGFnQ29sdW1uT3BlcmF0aW9uIiwiVW50YWdDb2x1bW5PcGVyYXRpb24iLCJPdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24iLCJSZWxhdGlvbmFsVGFibGUiLCJDdXN0b21TcWwiLCJTM1NvdXJjZSIsIkRvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uIiwiU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvbiIsIlVuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb24iLCJRdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uIiwiSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uIiwiSW52YWxpZFJlcXVlc3RFeGNlcHRpb24iLCJzZV9EZWxldGVVc2VyQ29tbWFuZCIsIkF3c0FjY291bnRJZCIsInNlX0xpc3RVc2Vyc0NvbW1hbmQiLCJfbnQiLCJfbXIiLCJkZV9EZWxldGVVc2VyQ29tbWFuZCIsImRvYyIsIlN0YXR1cyIsImRlX0xpc3RVc2Vyc0NvbW1hbmQiLCJVc2VyTGlzdCIsImRlX0ludGVybmFsRmFpbHVyZUV4Y2VwdGlvblJlcyIsImRlX1Jlc291cmNlRXhpc3RzRXhjZXB0aW9uUmVzIiwiZGVfUmVzb3VyY2VVbmF2YWlsYWJsZUV4Y2VwdGlvblJlcyIsImRlX1ByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvblJlcyIsImRlX1Vuc3VwcG9ydGVkVXNlckVkaXRpb25FeGNlcHRpb25SZXMiLCJkZV9Db25jdXJyZW50VXBkYXRpbmdFeGNlcHRpb25SZXMiLCJkZV9TZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXNJbnZhbGlkRXhjZXB0aW9uUmVzIiwiZGVfVW5zdXBwb3J0ZWRQcmljaW5nUGxhbkV4Y2VwdGlvblJlcyIsImRlX1F1aWNrU2lnaHRVc2VyTm90Rm91bmRFeGNlcHRpb25SZXMiLCJkZV9Eb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvblJlcyIsImRlX0lkZW50aXR5VHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRSZXF1ZXN0RXhjZXB0aW9uUmVzIiwiTGlzdFVzZXJzQ29tbWFuZCIsIkRlbGV0ZVVzZXJDb21tYW5kIiwicXVpY2tTaWdodENsaWVudCIsInJldHJpZXZlVXNlcnMiLCJxdWlja1NpZ2h0VXNlcnMiLCJsaXN0VXNlcnNDb21tYW5kIiwiUXVpY2tTaWdodFVzZXJNYW5hZ2VyIiwibmFtZXNwYWNlIiwicXVpY2tTaWdodFVzZXJMaXN0UmVzcG9uc2UiLCJRdWlja1NpZ2h0VXNlciIsImRlbGV0ZVVzZXIiLCJkZWxldGVVc2VyQ29tbWFuZCIsIm5vdGlmeURheXMiLCJlbmFibGVOb3RpZmljYXRpb24iLCJkZWxldGVEYXRlIiwibm90aWZ5RGF0ZSIsInNldERhdGUiLCJnZXREYXRlIiwicXVpY2tTaWdodFVzZXJNYW5hZ2VyIiwiY2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIiLCJDbG91ZFRyYWlsVXNlckV2ZW50TWFuYWdlciIsIm5vdGlmaWNhdGlvbk1hbmFnZXIiLCJOb3RpZmljYXRpb25NYW5hZ2VyIiwiY2xvdWRXYXRjaE1ldHJpY0NsaWVudCIsIkNsb3VkV2F0Y2hNZXRyaWNDbGllbnQiLCJjbG91ZFRyYWlsVXNlckV2ZW50cyIsIk1ldHJpY05hbWUiLCJWYWx1ZSIsImludmFsaWRVc2VycyIsInVzZXJzRGVsZXRlZCIsIm5vdGlmaWNhdGlvbnNTZW50IiwiUkVBREVSIl0sInNvdXJjZVJvb3QiOiIifQ==