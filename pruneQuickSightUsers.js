// This file is committed because Terraform needs it to be there. Source code is in src folder
/*! For license information please see pruneQuickSightUsers.js.LICENSE.txt */
(()=>{var e={1446:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AwsCrc32=void 0;var r=n(2717),s=n(7658),o=n(4079),i=function(){function e(){this.crc32=new o.Crc32}return e.prototype.update=function(e){(0,s.isEmptyData)(e)||this.crc32.update((0,s.convertToBuffer)(e))},e.prototype.digest=function(){return r.__awaiter(this,void 0,void 0,(function(){return r.__generator(this,(function(e){return[2,(0,s.numToUint8)(this.crc32.digest())]}))}))},e.prototype.reset=function(){this.crc32=new o.Crc32},e}();t.AwsCrc32=i},4079:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AwsCrc32=t.Crc32=t.crc32=void 0;var r=n(2717),s=n(7658);t.crc32=function(e){return(new o).update(e).digest()};var o=function(){function e(){this.checksum=4294967295}return e.prototype.update=function(e){var t,n;try{for(var s=r.__values(e),o=s.next();!o.done;o=s.next()){var a=o.value;this.checksum=this.checksum>>>8^i[255&(this.checksum^a)]}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}return this},e.prototype.digest=function(){return(4294967295^this.checksum)>>>0},e}();t.Crc32=o;var i=(0,s.uint32ArrayFrom)([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117]),a=n(1446);Object.defineProperty(t,"AwsCrc32",{enumerable:!0,get:function(){return a.AwsCrc32}})},2717:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>o,__asyncDelegator:()=>v,__asyncGenerator:()=>_,__asyncValues:()=>b,__await:()=>w,__awaiter:()=>l,__classPrivateFieldGet:()=>P,__classPrivateFieldSet:()=>C,__createBinding:()=>p,__decorate:()=>a,__exportStar:()=>h,__extends:()=>s,__generator:()=>d,__importDefault:()=>x,__importStar:()=>S,__makeTemplateObject:()=>E,__metadata:()=>u,__param:()=>c,__read:()=>m,__rest:()=>i,__spread:()=>g,__spreadArrays:()=>y,__values:()=>f});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},r(e,t)};function s(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},o.apply(this,arguments)};function i(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n}function a(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}function c(e,t){return function(n,r){t(n,r,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))}function d(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&o[0]?r.return:o[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,o[1])).done)return s;switch(r=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){i.label=o[1];break}if(6===o[0]&&i.label<s[1]){i.label=s[1],s=o;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(o);break}s[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function p(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}function h(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||(t[n]=e[n])}function f(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,s,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(s)throw s.error}}return i}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),s=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,a=o.length;i<a;i++,s++)r[s]=o[i];return r}function w(e){return this instanceof w?(this.v=e,this):new w(e)}function _(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,s=n.apply(e,t||[]),o=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){s[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=s[e](t)).value instanceof w?Promise.resolve(n.value.v).then(c,u):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function c(e){a("next",e)}function u(e){a("throw",e)}function l(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}function v(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,s){t[r]=e[r]?function(t){return(n=!n)?{value:w(e[r](t)),done:"return"===r}:s?s(t):t}:s}}function b(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=f(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,s){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,s,(t=e[n](t)).done,t.value)}))}}}function E(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function S(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function x(e){return e&&e.__esModule?e:{default:e}}function P(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function C(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},1106:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToBuffer=void 0;var r=n(2084),s="undefined"!=typeof Buffer&&Buffer.from?function(e){return Buffer.from(e,"utf8")}:r.fromUtf8;t.convertToBuffer=function(e){return e instanceof Uint8Array?e:"string"==typeof e?s(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}},7658:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=t.numToUint8=t.isEmptyData=t.convertToBuffer=void 0;var r=n(1106);Object.defineProperty(t,"convertToBuffer",{enumerable:!0,get:function(){return r.convertToBuffer}});var s=n(4304);Object.defineProperty(t,"isEmptyData",{enumerable:!0,get:function(){return s.isEmptyData}});var o=n(2174);Object.defineProperty(t,"numToUint8",{enumerable:!0,get:function(){return o.numToUint8}});var i=n(1558);Object.defineProperty(t,"uint32ArrayFrom",{enumerable:!0,get:function(){return i.uint32ArrayFrom}})},4304:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmptyData=void 0,t.isEmptyData=function(e){return"string"==typeof e?0===e.length:0===e.byteLength}},2174:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numToUint8=void 0,t.numToUint8=function(e){return new Uint8Array([(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e])}},1558:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=void 0,t.uint32ArrayFrom=function(e){if(!Uint32Array.from){for(var t=new Uint32Array(e.length),n=0;n<e.length;)t[n]=e[n],n+=1;return t}return Uint32Array.from(e)}},2084:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fromUtf8:()=>r,toUtf8:()=>s});const r=e=>"function"==typeof TextEncoder?function(e){return(new TextEncoder).encode(e)}(e):(e=>{const t=[];for(let n=0,r=e.length;n<r;n++){const r=e.charCodeAt(n);if(r<128)t.push(r);else if(r<2048)t.push(r>>6|192,63&r|128);else if(n+1<e.length&&55296==(64512&r)&&56320==(64512&e.charCodeAt(n+1))){const s=65536+((1023&r)<<10)+(1023&e.charCodeAt(++n));t.push(s>>18|240,s>>12&63|128,s>>6&63|128,63&s|128)}else t.push(r>>12|224,r>>6&63|128,63&r|128)}return Uint8Array.from(t)})(e),s=e=>"function"==typeof TextDecoder?function(e){return new TextDecoder("utf-8").decode(e)}(e):(e=>{let t="";for(let n=0,r=e.length;n<r;n++){const r=e[n];if(r<128)t+=String.fromCharCode(r);else if(192<=r&&r<224){const s=e[++n];t+=String.fromCharCode((31&r)<<6|63&s)}else if(240<=r&&r<365){const s="%"+[r,e[++n],e[++n],e[++n]].map((e=>e.toString(16))).join("%");t+=decodeURIComponent(s)}else t+=String.fromCharCode((15&r)<<12|(63&e[++n])<<6|63&e[++n])}return t})(e)},4378:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.extractRegionFromEndpoint=t.buildMqtt5FinalUsername=t.populate_username_string_with_custom_authorizer=t.is_string_and_not_empty=t.add_to_username_parameter=void 0;const i=o(n(6843));function a(e,t,n){let r=e;return-1!=r.indexOf("?")?r+="&":r+="?",-1!=t.indexOf(n)?r+t:r+n+t}function c(e){return null!=e&&"string"==typeof e&&""!=e}function u(e,t,n){t&&n.push([e,t])}t.add_to_username_parameter=a,t.is_string_and_not_empty=c,t.populate_username_string_with_custom_authorizer=function(e,t,n,r,s,o,i){let u="";if(e&&(u+=e),0==c(t)?c(s)&&s&&(u+=s):u+=t,c(n)&&n&&(u=a(u,n,"x-amz-customauthorizer-name=")),c(r)&&r&&(u=a(u,r,"x-amz-customauthorizer-signature="),(c(o)&&o||c(i)&&i)&&console.log("Warning: Signed custom authorizers with signature will not work without a token key name and token value. Your connection may be rejected/stalled on the IoT Core side due to this. Please set the token key name and token value to connect to a signed custom authorizer.")),c(r)||c(i)||c(o)){if(!i||!o)throw new Error("Token-based custom authentication requires all token-related properties to be set");u=a(u,i,o+"=")}return u},t.buildMqtt5FinalUsername=function(e){let t="",n=[];if(e){let r=!1;if((e.tokenValue||e.tokenKeyName||e.tokenSignature)&&(r=!0,!e.tokenValue||!e.tokenKeyName||!e.tokenSignature))throw new Error("Token-based custom authentication requires all token-related properties to be set");let s=e.username,o=(null!=s?s:"").split("?"),i=o.slice(1);if(t=o[0],i.length>1)throw new Error("Custom auth username property value is invalid");1==i.length&&i[0].split("&").forEach(((e,t,r)=>{var s;let o=e.split("=");n.push([o[0],null!==(s=o[1])&&void 0!==s?s:""])})),u("x-amz-customauthorizer-name",e.authorizerName,n),r&&(u(e.tokenKeyName,e.tokenValue,n),u("x-amz-customauthorizer-signature",e.tokenSignature,n))}return n.push(["SDK","NodeJSv2"]),n.push(["Version",i.crt_version()]),(null!=t?t:"")+"?"+n.map((e=>`${e[0]}=${e[1]}`)).join("&")},t.extractRegionFromEndpoint=function(e){const t=e.match(/^[\w\-]+\.[\w\-]+\.([\w+\-]+)\./);if(t)return t[1];throw new Error("AWS region could not be extracted from endpoint.  Use 'region' property on WebsocketConfig to set manually.")}},7482:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.newCancellablePromiseFromNextEvent=t.CancelController=t.EVENT_NAME=void 0;const i=n(2361),a=o(n(7113));t.EVENT_NAME="cancelled",t.CancelController=class{constructor(e){this.cancelled=!1,e&&e.emitterFactory?this.emitter=e.emitterFactory():this.emitter=new i.EventEmitter}cancel(){this.cancelled||(this.cancelled=!0,this.emitter.emit(t.EVENT_NAME),this.emitter.removeAllListeners(t.EVENT_NAME))}hasBeenCancelled(){return this.cancelled}addListener(e){if(!this.cancelled)return this.emitter.on(t.EVENT_NAME,e),()=>{this.emitter.removeListener(t.EVENT_NAME,e)};e()}},t.newCancellablePromiseFromNextEvent=function(e){let t,n,r=a.newLiftedPromise();return t=t=>{try{e.eventDataTransformer?r.resolve(e.eventDataTransformer(t)):r.resolve(t)}catch(e){r.reject(e)}},e.emitter.addListener(e.eventName,t),e.cancelController&&(n=e.cancelController.addListener((()=>{r.reject(e.cancelMessage)}))),a.makeSelfCleaningPromise(r.promise,(()=>{t&&e.emitter.removeListener(e.eventName,t),n&&n()}))}},9651:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BufferedEventEmitter=void 0;const r=n(2361);class s{constructor(e,t){this.event=e,this.args=t}}class o extends r.EventEmitter{constructor(){super(),this.corked=!1}cork(){this.corked=!0}uncork(){for(this.corked=!1;this.eventQueue;){const e=this.eventQueue;super.emit(e.event,...e.args),this.eventQueue=this.eventQueue.next}}emit(e,...t){if(this.corked){let n=this.lastQueuedEvent;return this.lastQueuedEvent=new s(e,t),n?n.next=this.lastQueuedEvent:this.eventQueue=this.lastQueuedEvent,this.listeners(e).length>0}return super.emit(e,...t)}}t.BufferedEventEmitter=o},3804:(e,t)=>{"use strict";var n,r;Object.defineProperty(t,"__esModule",{value:!0}),t.CommonHttpProxyOptions=t.HttpProxyAuthenticationType=t.HttpVersion=void 0,(r=t.HttpVersion||(t.HttpVersion={}))[r.Unknown=0]="Unknown",r[r.Http1_0=1]="Http1_0",r[r.Http1_1=2]="Http1_1",r[r.Http2=3]="Http2",function(e){e[e.None=0]="None",e[e.Basic=1]="Basic"}(n=t.HttpProxyAuthenticationType||(t.HttpProxyAuthenticationType={})),t.CommonHttpProxyOptions=class{constructor(e,t,r=n.None,s,o){this.host_name=e,this.port=t,this.auth_method=r,this.auth_username=s,this.auth_password=o}}},9712:(e,t)=>{"use strict";var n,r,s;Object.defineProperty(t,"__esModule",{value:!0}),t.SocketDomain=t.SocketType=t.TlsVersion=void 0,(s=t.TlsVersion||(t.TlsVersion={}))[s.SSLv3=0]="SSLv3",s[s.TLSv1=1]="TLSv1",s[s.TLSv1_1=2]="TLSv1_1",s[s.TLSv1_2=3]="TLSv1_2",s[s.TLSv1_3=4]="TLSv1_3",s[s.Default=128]="Default",(r=t.SocketType||(t.SocketType={}))[r.STREAM=0]="STREAM",r[r.DGRAM=1]="DGRAM",(n=t.SocketDomain||(t.SocketDomain={}))[n.IPV4=0]="IPV4",n[n.IPV6=1]="IPV6",n[n.LOCAL=2]="LOCAL"},5641:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_RECONNECT_MIN_SEC=t.DEFAULT_RECONNECT_MAX_SEC=t.MqttWill=t.QoS=void 0,(n=t.QoS||(t.QoS={}))[n.AtMostOnce=0]="AtMostOnce",n[n.AtLeastOnce=1]="AtLeastOnce",n[n.ExactlyOnce=2]="ExactlyOnce",t.MqttWill=class{constructor(e,t,n,r=!1){this.topic=e,this.qos=t,this.payload=n,this.retain=r}},t.DEFAULT_RECONNECT_MAX_SEC=128,t.DEFAULT_RECONNECT_MIN_SEC=1},5018:(e,t)=>{"use strict";var n,r;Object.defineProperty(t,"__esModule",{value:!0}),t.RetryJitterType=t.ClientSessionBehavior=void 0,(r=t.ClientSessionBehavior||(t.ClientSessionBehavior={}))[r.Default=0]="Default",r[r.Clean=1]="Clean",r[r.RejoinPostSuccess=2]="RejoinPostSuccess",r[r.RejoinAlways=3]="RejoinAlways",(n=t.RetryJitterType||(t.RetryJitterType={}))[n.Default=0]="Default",n[n.None=1]="None",n[n.Full=2]="Full",n[n.Decorrelated=3]="Decorrelated"},202:(e,t)=>{"use strict";var n,r,s,o,i,a,c,u,l;Object.defineProperty(t,"__esModule",{value:!0}),t.PacketType=t.RetainHandlingType=t.QoS=t.PayloadFormatIndicator=t.isSuccessfulPubackReasonCode=t.PubackReasonCode=t.isSuccessfulUnsubackReasonCode=t.UnsubackReasonCode=t.isSuccessfulSubackReasonCode=t.SubackReasonCode=t.isSuccessfulDisconnectReasonCode=t.DisconnectReasonCode=t.isSuccessfulConnectReasonCode=t.ConnectReasonCode=void 0,(l=t.ConnectReasonCode||(t.ConnectReasonCode={}))[l.Success=0]="Success",l[l.UnspecifiedError=128]="UnspecifiedError",l[l.MalformedPacket=129]="MalformedPacket",l[l.ProtocolError=130]="ProtocolError",l[l.ImplementationSpecificError=131]="ImplementationSpecificError",l[l.UnsupportedProtocolVersion=132]="UnsupportedProtocolVersion",l[l.ClientIdentifierNotValid=133]="ClientIdentifierNotValid",l[l.BadUsernameOrPassword=134]="BadUsernameOrPassword",l[l.NotAuthorized=135]="NotAuthorized",l[l.ServerUnavailable=136]="ServerUnavailable",l[l.ServerBusy=137]="ServerBusy",l[l.Banned=138]="Banned",l[l.BadAuthenticationMethod=140]="BadAuthenticationMethod",l[l.TopicNameInvalid=144]="TopicNameInvalid",l[l.PacketTooLarge=149]="PacketTooLarge",l[l.QuotaExceeded=151]="QuotaExceeded",l[l.PayloadFormatInvalid=153]="PayloadFormatInvalid",l[l.RetainNotSupported=154]="RetainNotSupported",l[l.QosNotSupported=155]="QosNotSupported",l[l.UseAnotherServer=156]="UseAnotherServer",l[l.ServerMoved=157]="ServerMoved",l[l.ConnectionRateExceeded=159]="ConnectionRateExceeded",t.isSuccessfulConnectReasonCode=function(e){return e<128},(u=t.DisconnectReasonCode||(t.DisconnectReasonCode={}))[u.NormalDisconnection=0]="NormalDisconnection",u[u.DisconnectWithWillMessage=4]="DisconnectWithWillMessage",u[u.UnspecifiedError=128]="UnspecifiedError",u[u.MalformedPacket=129]="MalformedPacket",u[u.ProtocolError=130]="ProtocolError",u[u.ImplementationSpecificError=131]="ImplementationSpecificError",u[u.NotAuthorized=135]="NotAuthorized",u[u.ServerBusy=137]="ServerBusy",u[u.ServerShuttingDown=139]="ServerShuttingDown",u[u.KeepAliveTimeout=141]="KeepAliveTimeout",u[u.SessionTakenOver=142]="SessionTakenOver",u[u.TopicFilterInvalid=143]="TopicFilterInvalid",u[u.TopicNameInvalid=144]="TopicNameInvalid",u[u.ReceiveMaximumExceeded=147]="ReceiveMaximumExceeded",u[u.TopicAliasInvalid=148]="TopicAliasInvalid",u[u.PacketTooLarge=149]="PacketTooLarge",u[u.MessageRateTooHigh=150]="MessageRateTooHigh",u[u.QuotaExceeded=151]="QuotaExceeded",u[u.AdministrativeAction=152]="AdministrativeAction",u[u.PayloadFormatInvalid=153]="PayloadFormatInvalid",u[u.RetainNotSupported=154]="RetainNotSupported",u[u.QosNotSupported=155]="QosNotSupported",u[u.UseAnotherServer=156]="UseAnotherServer",u[u.ServerMoved=157]="ServerMoved",u[u.SharedSubscriptionsNotSupported=158]="SharedSubscriptionsNotSupported",u[u.ConnectionRateExceeded=159]="ConnectionRateExceeded",u[u.MaximumConnectTime=160]="MaximumConnectTime",u[u.SubscriptionIdentifiersNotSupported=161]="SubscriptionIdentifiersNotSupported",u[u.WildcardSubscriptionsNotSupported=162]="WildcardSubscriptionsNotSupported",t.isSuccessfulDisconnectReasonCode=function(e){return e<128},(c=t.SubackReasonCode||(t.SubackReasonCode={}))[c.GrantedQoS0=0]="GrantedQoS0",c[c.GrantedQoS1=1]="GrantedQoS1",c[c.GrantedQoS2=2]="GrantedQoS2",c[c.UnspecifiedError=128]="UnspecifiedError",c[c.ImplementationSpecificError=131]="ImplementationSpecificError",c[c.NotAuthorized=135]="NotAuthorized",c[c.TopicFilterInvalid=143]="TopicFilterInvalid",c[c.PacketIdentifierInUse=145]="PacketIdentifierInUse",c[c.QuotaExceeded=151]="QuotaExceeded",c[c.SharedSubscriptionsNotSupported=158]="SharedSubscriptionsNotSupported",c[c.SubscriptionIdentifiersNotSupported=161]="SubscriptionIdentifiersNotSupported",c[c.WildcardSubscriptionsNotSupported=162]="WildcardSubscriptionsNotSupported",t.isSuccessfulSubackReasonCode=function(e){return e<128},(a=t.UnsubackReasonCode||(t.UnsubackReasonCode={}))[a.Success=0]="Success",a[a.NoSubscriptionExisted=17]="NoSubscriptionExisted",a[a.UnspecifiedError=128]="UnspecifiedError",a[a.ImplementationSpecificError=131]="ImplementationSpecificError",a[a.NotAuthorized=135]="NotAuthorized",a[a.TopicFilterInvalid=143]="TopicFilterInvalid",a[a.PacketIdentifierInUse=145]="PacketIdentifierInUse",t.isSuccessfulUnsubackReasonCode=function(e){return e<128},(i=t.PubackReasonCode||(t.PubackReasonCode={}))[i.Success=0]="Success",i[i.NoMatchingSubscribers=16]="NoMatchingSubscribers",i[i.UnspecifiedError=128]="UnspecifiedError",i[i.ImplementationSpecificError=131]="ImplementationSpecificError",i[i.NotAuthorized=135]="NotAuthorized",i[i.TopicNameInvalid=144]="TopicNameInvalid",i[i.PacketIdentifierInUse=145]="PacketIdentifierInUse",i[i.QuotaExceeded=151]="QuotaExceeded",i[i.PayloadFormatInvalid=153]="PayloadFormatInvalid",t.isSuccessfulPubackReasonCode=function(e){return e<128},(o=t.PayloadFormatIndicator||(t.PayloadFormatIndicator={}))[o.Bytes=0]="Bytes",o[o.Utf8=1]="Utf8",(s=t.QoS||(t.QoS={}))[s.AtMostOnce=0]="AtMostOnce",s[s.AtLeastOnce=1]="AtLeastOnce",s[s.ExactlyOnce=2]="ExactlyOnce",(r=t.RetainHandlingType||(t.RetainHandlingType={}))[r.SendOnSubscribe=0]="SendOnSubscribe",r[r.SendOnSubscribeIfNew=1]="SendOnSubscribeIfNew",r[r.DontSend=2]="DontSend",(n=t.PacketType||(t.PacketType={}))[n.Connect=1]="Connect",n[n.Connack=2]="Connack",n[n.Publish=3]="Publish",n[n.Puback=4]="Puback",n[n.Pubrec=5]="Pubrec",n[n.Pubrel=6]="Pubrel",n[n.Pubcomp=7]="Pubcomp",n[n.Subscribe=8]="Subscribe",n[n.Suback=9]="Suback",n[n.Unsubscribe=10]="Unsubscribe",n[n.Unsuback=11]="Unsuback",n[n.Pingreq=12]="Pingreq",n[n.Pingresp=13]="Pingresp",n[n.Disconnect=14]="Disconnect",n[n.Auth=15]="Auth"},4231:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_KEEP_ALIVE=t.normalize_payload=void 0,t.normalize_payload=function(e){if(e instanceof Buffer)return e;if("string"==typeof e)return e;if(ArrayBuffer.isView(e)){const t=e;return Buffer.from(t.buffer,t.byteOffset,t.byteLength)}if(e instanceof ArrayBuffer)return Buffer.from(e);if("object"==typeof e)return JSON.stringify(e);if(!e)return"";throw new TypeError("payload parameter must be a string, object, or DataView.")},t.DEFAULT_KEEP_ALIVE=1200},6843:(e,t,n)=>{"use strict";function r(){return"object"==typeof process&&"object"==typeof process.versions&&void 0!==process.versions.node}function s(){try{return n(5062)}catch(e){return{name:"aws-crt-nodejs",version:"UNKNOWN"}}}Object.defineProperty(t,"__esModule",{value:!0}),t.crt_version=t.package_info=t.is_browser=t.is_nodejs=void 0,t.is_nodejs=r,t.is_browser=function(){return!r()},t.package_info=s,t.crt_version=function(){return s().version}},7113:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.newLiftedPromise=t.makeSelfCleaningPromise=void 0,t.makeSelfCleaningPromise=function(e,t){return t?e.finally((()=>{t()})):e},t.newLiftedPromise=function(e){let t,n,r=new Promise(((e,r)=>{t=e,n=r}));if(!t||!n)throw new Error("Failed to bind resolve and reject when making lifted promise");return e&&e(t,n),{promise:r,resolve:t,reject:n}}},4103:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.using=void 0,t.using=function(e,t){return n(this,void 0,void 0,(function*(){try{yield t(e)}finally{e.close()}}))}},8687:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CrtError=t.resource_safety=t.promise=t.platform=t.mqtt5=t.mqtt=t.iot=t.io=t.http=t.eventstream=t.crt=t.crypto=t.checksums=t.cancel=t.auth=void 0;const i=o(n(7482));t.cancel=i;const a=o(n(6843));t.platform=a;const c=o(n(7113));t.promise=c;const u=o(n(4103));t.resource_safety=u;const l=o(n(7822));t.auth=l;const d=o(n(5988));t.checksums=d;const p=o(n(7227));t.crt=p;const h=o(n(5145));t.crypto=h;const f=o(n(7259));t.eventstream=f;const m=o(n(8415));t.http=m;const g=o(n(3787));t.io=g;const y=o(n(9793));t.iot=y;const w=o(n(799));t.mqtt=w;const _=o(n(2385));t.mqtt5=_;const v=n(2875);Object.defineProperty(t,"CrtError",{enumerable:!0,get:function(){return v.CrtError}})},7822:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.aws_verify_sigv4a_signing=t.aws_sign_request=t.AwsSignedBodyHeaderType=t.AwsSignedBodyValue=t.AwsSignatureType=t.AwsSigningAlgorithm=t.AwsCredentialsProvider=void 0;const o=s(n(1221)),i=n(2875),a=n(3787);class c extends o.default.AwsCredentialsProvider{static newDefault(e=void 0){return super.newDefault(null!=e?e.native_handle():null)}static newStatic(e,t,n){return super.newStatic(e,t,n)}static newCognito(e){if(null==e||null==e)throw new i.CrtError("AwsCredentialsProvider newCognito: Cognito config not defined");return super.newCognito(e,null!=e.tlsContext?e.tlsContext.native_handle():(new a.ClientTlsContext).native_handle(),null!=e.bootstrap?e.bootstrap.native_handle():null,e.httpProxyOptions?e.httpProxyOptions.create_native_handle():null)}static newX509(e){if(null==e||null==e)throw new i.CrtError("AwsCredentialsProvider newX509: X509 config not defined");return super.newX509(e,e.tlsContext.native_handle(),e.httpProxyOptions?e.httpProxyOptions.create_native_handle():null)}}var u,l,d,p;t.AwsCredentialsProvider=c,(p=t.AwsSigningAlgorithm||(t.AwsSigningAlgorithm={}))[p.SigV4=0]="SigV4",p[p.SigV4Asymmetric=1]="SigV4Asymmetric",(d=t.AwsSignatureType||(t.AwsSignatureType={}))[d.HttpRequestViaHeaders=0]="HttpRequestViaHeaders",d[d.HttpRequestViaQueryParams=1]="HttpRequestViaQueryParams",d[d.HttpRequestChunk=2]="HttpRequestChunk",d[d.HttpRequestEvent=3]="HttpRequestEvent",(l=t.AwsSignedBodyValue||(t.AwsSignedBodyValue={})).EmptySha256="e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",l.UnsignedPayload="UNSIGNED-PAYLOAD",l.StreamingAws4HmacSha256Payload="STREAMING-AWS4-HMAC-SHA256-PAYLOAD",l.StreamingAws4HmacSha256Events="STREAMING-AWS4-HMAC-SHA256-EVENTS",(u=t.AwsSignedBodyHeaderType||(t.AwsSignedBodyHeaderType={}))[u.None=0]="None",u[u.XAmzContentSha256=1]="XAmzContentSha256",t.aws_sign_request=function(e,t){return r(this,void 0,void 0,(function*(){return new Promise(((n,r)=>{try{o.default.aws_sign_request(e,t,(t=>{0==t?n(e):r(new i.CrtError(t))}))}catch(e){r(e)}}))}))},t.aws_verify_sigv4a_signing=function(e,t,n,r,s,i){return o.default.aws_verify_sigv4a_signing(e,t,n,r,s,i)}},8583:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AwsIotMqttConnectionConfigBuilder=void 0;const a=n(5641),c=o(n(3787)),u=n(3787),l=o(n(6843)),d=n(2875),p=n(7822),h=o(n(4378));class f{constructor(e){this.tls_ctx_options=e,this.params={client_id:"",host_name:"",socket_options:new c.SocketOptions,port:8883,use_websocket:!1,clean_session:!1,keep_alive:void 0,will:void 0,username:"",password:void 0,tls_ctx:void 0,reconnect_min_sec:a.DEFAULT_RECONNECT_MIN_SEC,reconnect_max_sec:a.DEFAULT_RECONNECT_MAX_SEC},this.is_using_custom_authorizer=!1}static new_mtls_builder_from_path(e,t){let n=new f(u.TlsContextOptions.create_client_with_mtls_from_path(e,t));return n.params.port=8883,c.is_alpn_available()&&n.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca"),n}static new_mtls_builder(e,t){let n=new f(u.TlsContextOptions.create_client_with_mtls(e,t));return n.params.port=8883,c.is_alpn_available()&&n.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca"),n}static new_mtls_pkcs11_builder(e){let t=new f(u.TlsContextOptions.create_client_with_mtls_pkcs11(e));return t.params.port=8883,c.is_alpn_available()&&t.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca"),t}static new_mtls_pkcs12_builder(e){let t=new f(u.TlsContextOptions.create_client_with_mtls_pkcs12_from_path(e.pkcs12_file,e.pkcs12_password));return t.params.port=8883,c.is_alpn_available()&&t.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca"),t}static new_mtls_windows_cert_store_path_builder(e){let t=new f(u.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(e));return t.params.port=8883,c.is_alpn_available()&&t.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca"),t}static new_default_builder(){let e=new c.TlsContextOptions;return new f(e)}static new_websocket_builder(...e){return this.new_with_websockets(...e)}static configure_websocket_handshake(e,t){if(t){if(null==e||null==e)throw new d.CrtError("AwsIotMqttConnectionConfigBuilder configure_websocket_handshake: builder not defined");e.params.websocket_handshake_transform=(e,n)=>i(this,void 0,void 0,(function*(){var r,s,o;const i=null!==(s=null===(r=t.create_signing_config)||void 0===r?void 0:r.call(t))&&void 0!==s?s:{algorithm:p.AwsSigningAlgorithm.SigV4,signature_type:p.AwsSignatureType.HttpRequestViaQueryParams,provider:t.credentials_provider,region:t.region,service:null!==(o=t.service)&&void 0!==o?o:"iotdevicegateway",signed_body_value:p.AwsSignedBodyValue.EmptySha256,omit_session_token:!0};try{yield(0,p.aws_sign_request)(e,i),n()}catch(e){e instanceof d.CrtError?n(e.error_code):n(3)}}))}return e}static new_with_websockets(e){let t=null==e?void 0:e.tls_ctx_options;t||(t=new u.TlsContextOptions,t.alpn_list=[]);let n=new f(t);return n.params.use_websocket=!0,n.params.proxy_options=null==e?void 0:e.proxy_options,n.tls_ctx_options&&(n.params.port=443),this.configure_websocket_handshake(n,e),n}static new_builder_for_websocket(){return this.new_with_websockets()}with_certificate_authority_from_path(e,t){return this.tls_ctx_options.override_default_trust_store_from_path(e,t),this}with_certificate_authority(e){return this.tls_ctx_options.override_default_trust_store(e),this}with_endpoint(e){return this.params.host_name=e,this}with_port(e){return this.params.port=e,this}with_client_id(e){return this.params.client_id=e,this}with_clean_session(e){return this.params.clean_session=e,this}with_keep_alive_seconds(e){return this.params.keep_alive=e,this}with_timeout_ms(e){return this.with_ping_timeout_ms(e),this}with_ping_timeout_ms(e){return this.params.ping_timeout=e,this}with_protocol_operation_timeout_ms(e){return this.params.protocol_operation_timeout=e,this}with_will(e){return this.params.will=e,this}with_socket_options(e){return this.params.socket_options=e,this}with_credentials(e,t,n,r){return f.configure_websocket_handshake(this,{credentials_provider:p.AwsCredentialsProvider.newStatic(t,n,r),region:e,service:"iotdevicegateway"})}with_http_proxy_options(e){return this.params.proxy_options=e,this}with_custom_authorizer(e,t,n,r,s,o){this.is_using_custom_authorizer=!0;let i=h.populate_username_string_with_custom_authorizer("",e,t,n,this.params.username,s,o);return this.params.username=i,this.params.password=r,this.params.use_websocket||(this.tls_ctx_options.alpn_list=["mqtt"]),this.params.port=443,this}with_username(e){return this.params.username=e,this}with_password(e){return this.params.password=e,this}with_reconnect_max_sec(e){return this.params.reconnect_max_sec=e,this}with_reconnect_min_sec(e){return this.params.reconnect_min_sec=e,this}build(){var e,t,n;if(void 0===this.params.client_id||void 0===this.params.host_name)throw"client_id and endpoint are required";return 0==this.is_using_custom_authorizer&&h.is_string_and_not_empty(this.params.username)&&(-1==(null===(e=this.params.username)||void 0===e?void 0:e.indexOf("x-amz-customauthorizer-name="))&&-1==(null===(t=this.params.username)||void 0===t?void 0:t.indexOf("x-amz-customauthorizer-signature="))||(this.is_using_custom_authorizer=!0)),1==this.is_using_custom_authorizer&&443!=this.params.port&&console.log("Warning: Attempting to connect to authorizer with unsupported port. Port is not 443..."),void 0===this.params.tls_ctx&&(this.params.tls_ctx=new c.ClientTlsContext(this.tls_ctx_options)),0==h.is_string_and_not_empty(this.params.username)?this.params.username="?SDK=NodeJSv2&Version=":-1!=(null===(n=this.params.username)||void 0===n?void 0:n.indexOf("?"))?this.params.username+="&SDK=NodeJSv2&Version=":this.params.username+="?SDK=NodeJSv2&Version=",this.params.username+=l.crt_version(),this.params}}t.AwsIotMqttConnectionConfigBuilder=f},1838:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AwsIotMqtt5ClientConfigBuilder=void 0;const a=o(n(2385)),c=o(n(3787)),u=o(n(7822)),l=n(2875),d=o(n(4378)),p=o(n(4231));class h{constructor(e,t,n){this.tlsContextOptions=n,this.config={hostName:e,port:t,connectProperties:{keepAliveIntervalSeconds:p.DEFAULT_KEEP_ALIVE},extendedValidationAndFlowControlOptions:a.ClientExtendedValidationAndFlowControl.AwsIotCoreDefaults}}static newDirectMqttBuilderWithMtlsFromPath(e,t,n){let r=new h(e,h.DEFAULT_DIRECT_MQTT_PORT,c.TlsContextOptions.create_client_with_mtls_from_path(t,n));return c.is_alpn_available()&&r.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca"),r}static newDirectMqttBuilderWithMtlsFromMemory(e,t,n){let r=new h(e,h.DEFAULT_DIRECT_MQTT_PORT,c.TlsContextOptions.create_client_with_mtls(t,n));return c.is_alpn_available()&&r.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca"),r}static newDirectMqttBuilderWithMtlsFromPkcs11(e,t){let n=new h(e,h.DEFAULT_DIRECT_MQTT_PORT,c.TlsContextOptions.create_client_with_mtls_pkcs11(t));return c.is_alpn_available()&&n.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca"),n}static newDirectMqttBuilderWithMtlsFromPkcs12(e,t){let n=new h(e,h.DEFAULT_DIRECT_MQTT_PORT,c.TlsContextOptions.create_client_with_mtls_pkcs12_from_path(t.pkcs12_file,t.pkcs12_password));return c.is_alpn_available()&&n.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca"),n}static newDirectMqttBuilderWithMtlsFromWindowsCertStorePath(e,t){let n=new h(e,h.DEFAULT_DIRECT_MQTT_PORT,c.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(t));return c.is_alpn_available()&&n.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca"),n}static newDirectMqttBuilderWithCustomAuth(e,t){let n=new h(e,h.DEFAULT_WEBSOCKET_MQTT_PORT,new c.TlsContextOptions);return n.customAuthConfig=t,n.tlsContextOptions.alpn_list=["mqtt"],n}static newWebsocketMqttBuilderWithSigv4Auth(e,t){let n=new c.TlsContextOptions;n.alpn_list=[];let r=new h(e,h.DEFAULT_WEBSOCKET_MQTT_PORT,n),s=null==t?void 0:t.credentialsProvider;return s||(s=u.AwsCredentialsProvider.newDefault()),r.config.websocketHandshakeTransform=(n,r)=>i(this,void 0,void 0,(function*(){var o;try{const i={algorithm:u.AwsSigningAlgorithm.SigV4,signature_type:u.AwsSignatureType.HttpRequestViaQueryParams,provider:s,region:null!==(o=null==t?void 0:t.region)&&void 0!==o?o:d.extractRegionFromEndpoint(e),service:"iotdevicegateway",signed_body_value:u.AwsSignedBodyValue.EmptySha256,omit_session_token:!0};yield u.aws_sign_request(n,i),r()}catch(e){e instanceof l.CrtError?r(e.error_code):r(3)}})),r}static newWebsocketMqttBuilderWithCustomAuth(e,t){let n=new h(e,h.DEFAULT_WEBSOCKET_MQTT_PORT,new c.TlsContextOptions);return n.customAuthConfig=t,n.config.websocketHandshakeTransform=(e,t)=>i(this,void 0,void 0,(function*(){t(0)})),n}withCertificateAuthorityFromPath(e,t){return this.tlsContextOptions.override_default_trust_store_from_path(e,t),this}withCertificateAuthority(e){return this.tlsContextOptions.override_default_trust_store(e),this}withPort(e){return this.config.port=e,this}withConnectProperties(e){return this.config.connectProperties=e,this}withSessionBehavior(e){return this.config.sessionBehavior=e,this}withRetryJitterMode(e){return this.config.retryJitterMode=e,this}withMinReconnectDelayMs(e){return this.config.minReconnectDelayMs=e,this}withMaxReconnectDelayMs(e){return this.config.maxReconnectDelayMs=e,this}withMinConnectedTimeToResetReconnectDelayMs(e){return this.config.minConnectedTimeToResetReconnectDelayMs=e,this}withConnackTimeoutMs(e){return this.config.connackTimeoutMs=e,this}withOfflineQueueBehavior(e){return this.config.offlineQueueBehavior=e,this}withPingTimeoutMs(e){return this.config.pingTimeoutMs=e,this}withAckTimeoutSeconds(e){return this.config.ackTimeoutSeconds=e,this}withSocketOptions(e){return this.config.socketOptions=e,this}withHttpProxyOptions(e){return this.config.httpProxyOptions=e,this}withExtendedValidationAndFlowControlOptions(e){return this.config.extendedValidationAndFlowControlOptions=e,this}build(){var e,t;return void 0===this.config.tlsCtx&&(this.config.tlsCtx=new c.ClientTlsContext(this.tlsContextOptions)),this.config.connectProperties&&(this.config.connectProperties.username=d.buildMqtt5FinalUsername(this.customAuthConfig),(null===(e=this.customAuthConfig)||void 0===e?void 0:e.password)&&(this.config.connectProperties.password=null===(t=this.customAuthConfig)||void 0===t?void 0:t.password)),this.config}}t.AwsIotMqtt5ClientConfigBuilder=h,h.DEFAULT_WEBSOCKET_MQTT_PORT=443,h.DEFAULT_DIRECT_MQTT_PORT=8883},1221:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const i=o(n(1017)),a=n(2037),c=n(7147),u=n(7282),l="Please upgrade to node >=10.16.0, or use the provided browser implementation.";if(!("napi"in u.versions))throw new Error("The current runtime is not reporting an NAPI version. "+l);if(parseInt(u.versions.napi)<4)throw new Error("The AWS CRT native implementation requires that NAPI version 4 be present. "+l);const d=`${a.platform}-${a.arch}`;let p=i.resolve(__dirname,"..","..");const h=i.join(p,"dist");(0,c.existsSync)(h)&&(p=h);const f=i.resolve(p,"bin"),m=[i.join(f,d,"aws-crt-nodejs")];let g;for(const e of m)if((0,c.existsSync)(e+".node")){g=n(1309)(e);break}if(null==g)throw new Error("AWS CRT binary not present in any of the following locations:\n\t"+m.join("\n\t"));t.default=g},5988:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.crc32c=t.crc32=void 0;const s=r(n(1221));t.crc32=function(e,t){return s.default.checksums_crc32(e,t)},t.crc32c=function(e,t){return s.default.checksums_crc32c(e,t)}},7227:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.native_memory_dump=t.native_memory=void 0;const s=r(n(1221));t.native_memory=function(){return s.default.native_memory()},t.native_memory_dump=function(){return s.default.native_memory_dump()}},5145:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.hmac_sha256=t.Sha256Hmac=t.hash_sha1=t.Sha1Hash=t.hash_sha256=t.Sha256Hash=t.hash_md5=t.Md5Hash=void 0;const s=r(n(1221)),o=n(8763);class i extends o.NativeResource{update(e){s.default.hash_update(this.native_handle(),e)}finalize(e){return s.default.hash_digest(this.native_handle(),e)}constructor(e){super(e)}}t.Md5Hash=class extends i{constructor(){super(s.default.hash_md5_new())}},t.hash_md5=function(e,t){return s.default.hash_md5_compute(e,t)},t.Sha256Hash=class extends i{constructor(){super(s.default.hash_sha256_new())}},t.hash_sha256=function(e,t){return s.default.hash_sha256_compute(e,t)},t.Sha1Hash=class extends i{constructor(){super(s.default.hash_sha1_new())}},t.hash_sha1=function(e,t){return s.default.hash_sha1_compute(e,t)};class a extends o.NativeResource{update(e){s.default.hmac_update(this.native_handle(),e)}finalize(e){return s.default.hmac_digest(this.native_handle(),e)}constructor(e){super(e)}}t.Sha256Hmac=class extends a{constructor(e){super(s.default.hmac_sha256_new(e))}},t.hmac_sha256=function(e,t,n){return s.default.hmac_sha256_compute(e,t,n)}},2875:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CrtError=void 0;const s=r(n(1221));class o extends Error{constructor(e){super(function(e){return"number"==typeof e?s.default.error_code_to_string(e):e instanceof o?e.message:e.toString()}(e)),this.error=e,this.error_code=function(e){return"number"==typeof e?e:e instanceof o?e.error_code:void 0}(e),this.error_name=function(e){return"number"==typeof e?s.default.error_code_to_name(e):e instanceof o?e.error_name:void 0}(e)}}t.CrtError=o},7259:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ClientStream=t.ClientConnection=t.MessageType=t.MessageFlags=t.Header=t.HeaderType=void 0;const c=n(8763),u=n(9651),l=n(2875),d=o(n(3787)),p=o(n(6731)),h=o(n(7113)),f=a(n(1221));var m,g,y,w,_;!function(e){e[e.BooleanTrue=0]="BooleanTrue",e[e.BooleanFalse=1]="BooleanFalse",e[e.Byte=2]="Byte",e[e.Int16=3]="Int16",e[e.Int32=4]="Int32",e[e.Int64=5]="Int64",e[e.ByteBuffer=6]="ByteBuffer",e[e.String=7]="String",e[e.Timestamp=8]="Timestamp",e[e.UUID=9]="UUID"}(m=t.HeaderType||(t.HeaderType={}));class v{constructor(e,t,n){this.name=e,this.type=t,this.value=n}static validateHeaderName(e){if(0==e.length||e.length>127)throw new l.CrtError(`Event stream header name (${e}) is not valid`)}static newBoolean(e,t){return v.validateHeaderName(e),new v(e,t?m.BooleanTrue:m.BooleanFalse)}static newByte(e,t){if(v.validateHeaderName(e),t>=p.MIN_INT8&&t<=p.MAX_INT8&&Number.isSafeInteger(t))return new v(e,m.Byte,t);throw new l.CrtError(`Illegal value for eventstream byte-valued header: ${t}`)}static newInt16(e,t){if(v.validateHeaderName(e),t>=p.MIN_INT16&&t<=p.MAX_INT16&&Number.isSafeInteger(t))return new v(e,m.Int16,t);throw new l.CrtError(`Illegal value for eventstream int16-valued header: ${t}`)}static newInt32(e,t){if(v.validateHeaderName(e),t>=p.MIN_INT32&&t<=p.MAX_INT32&&Number.isSafeInteger(t))return new v(e,m.Int32,t);throw new l.CrtError(`Illegal value for eventstream int32-valued header: ${t}`)}static newInt64FromNumber(e,t){if(v.validateHeaderName(e),Number.isSafeInteger(t))return new v(e,m.Int64,p.marshalInt64BigintAsBuffer(BigInt(t)));throw new l.CrtError(`Illegal value for eventstream int64-valued header: ${t}`)}static newInt64FromBigint(e,t){if(v.validateHeaderName(e),t>=p.MIN_INT64&&t<=p.MAX_INT64)return new v(e,m.Int64,p.marshalInt64BigintAsBuffer(t));throw new l.CrtError(`Illegal value for eventstream int64-valued header: ${t}`)}static newByteBuffer(e,t){return v.validateHeaderName(e),new v(e,m.ByteBuffer,t)}static newString(e,t){return v.validateHeaderName(e),new v(e,m.String,t)}static newTimeStampFromSecondsSinceEpoch(e,t){if(v.validateHeaderName(e),Number.isSafeInteger(t)&&t>=0)return new v(e,m.Timestamp,t);throw new l.CrtError(`Illegal value for eventstream timestamp-valued header: ${t}`)}static newTimeStampFromDate(e,t){v.validateHeaderName(e);const n=t.getTime();if(Number.isSafeInteger(n))return new v(e,m.Timestamp,n);throw new l.CrtError(`Illegal value for eventstream timestamp-valued header: ${t}`)}static newUUID(e,t){if(v.validateHeaderName(e),16==t.byteLength)return new v(e,m.UUID,t);throw new l.CrtError(`Illegal value for eventstream uuid-valued header: ${t}`)}toValue(e){if(e!=this.type)throw new l.CrtError(`Header of type (${this.type}) cannot be converted to type (${e})`);return this.value}asBoolean(){switch(this.type){case m.BooleanFalse:return!1;case m.BooleanTrue:return!0;default:throw new l.CrtError(`Header of type (${this.type}) cannot be converted to type (boolean)`)}}asByte(){return this.toValue(m.Byte)}asInt16(){return this.toValue(m.Int16)}asInt32(){return this.toValue(m.Int32)}asInt64(){return p.unmarshalInt64BigintFromBuffer(this.toValue(m.Int64))}asByteBuffer(){return this.toValue(m.ByteBuffer)}asString(){return this.toValue(m.String)}asTimestamp(){return this.toValue(m.Timestamp)}asUUID(){return this.toValue(m.UUID)}}function b(e){let t={type:e.type,flags:e.flags,payload:e.payload};var n;return e.headers&&(t.headers=(n=e.headers,Array.from(n,(e=>new v(e.name,e.type,e.value))))),t}t.Header=v,(_=t.MessageFlags||(t.MessageFlags={}))[_.None=0]="None",_[_.ConnectionAccepted=1]="ConnectionAccepted",_[_.TerminateStream=2]="TerminateStream",(w=t.MessageType||(t.MessageType={}))[w.ApplicationMessage=0]="ApplicationMessage",w[w.ApplicationError=1]="ApplicationError",w[w.Ping=2]="Ping",w[w.PingResponse=3]="PingResponse",w[w.Connect=4]="Connect",w[w.ConnectAck=5]="ConnectAck",w[w.ProtocolError=6]="ProtocolError",w[w.InternalError=7]="InternalError",function(e){e[e.None=0]="None",e[e.Connecting=1]="Connecting",e[e.Connected=2]="Connected",e[e.Disconnected=3]="Disconnected",e[e.Closed=4]="Closed"}(g||(g={}));class E extends((0,c.NativeResourceMixin)(u.BufferedEventEmitter)){constructor(e){if(void 0===e)throw new l.CrtError("Invalid configuration passed to eventstream ClientConnection constructor");super(),this.state=g.None,this._super(f.default.event_stream_client_connection_new(this,e,((e,t)=>{E._s_on_disconnect(e,t)}),((e,t)=>{E._s_on_protocol_message(e,t)}),e.socketOptions?e.socketOptions.native_handle():null,e.tlsCtx?e.tlsCtx.native_handle():null))}close(){this.state!=g.Closed&&(this.state=g.Closed,f.default.event_stream_client_connection_close(this.native_handle()))}connect(e){return i(this,void 0,void 0,(function*(){let t,n=new Promise(((n,r)=>{if(e)if(this.state==g.None){if(this.state=g.Connecting,e.cancelController){let n=()=>{r(new l.CrtError("Event stream connection connect() cancelled by external request.")),setImmediate((()=>{this.close()}))};if(t=e.cancelController.addListener(n),!t)return}try{f.default.event_stream_client_connection_connect(this.native_handle(),(function(e,t){return E._s_on_connection_setup(n,r,e,t)}))}catch(e){this.state=g.Disconnected,r(e)}}else r(new l.CrtError(`Event stream connection in a state (${this.state}) where connect() is not allowed.`));else r(new l.CrtError("Invalid options passed to event stream ClientConnection.connect"))}));return h.makeSelfCleaningPromise(n,t)}))}sendProtocolMessage(e){return i(this,void 0,void 0,(function*(){let t,n=new Promise(((n,r)=>{try{if(!e)return void r(new l.CrtError("Invalid options passed to event stream ClientConnection.sendProtocolMessage"));if(!this.isConnected())return void r(new l.CrtError(`Event stream connection in a state (${this.state}) where sending protocol messages is not allowed.`));if(e.cancelController){let o=()=>{r(new l.CrtError("Event stream connection sendProtocolMessage() cancelled by external request.")),setImmediate((()=>{this.close()}))};if(t=e.cancelController.addListener(o),!t)return}function s(e){return E._s_on_connection_send_protocol_message_completion(n,r,e)}f.default.event_stream_client_connection_send_protocol_message(this.native_handle(),e,s)}catch(i){r(i)}}));return h.makeSelfCleaningPromise(n,t)}))}isConnected(){return this.state==g.Connected}newStream(){if(!this.isConnected())throw new l.CrtError(`Event stream connection in a state (${this.state}) where creating new streams is forbidden.`);return new S(this)}on(e,t){return super.on(e,t),this}static _s_on_connection_setup(e,t,n,r){0==r&&n.state==g.Connecting?(n.state=g.Connected,e()):(n.state!=g.Closed&&(n.state=g.Disconnected),t(d.error_code_to_string(r)))}static _s_on_disconnect(e,t){e.state!=g.Closed&&(e.state=g.Disconnected),process.nextTick((()=>{e.emit("disconnection",{errorCode:t})}))}static _s_on_protocol_message(e,t){process.nextTick((()=>{e.emit("protocolMessage",{message:b(t)})}))}static _s_on_connection_send_protocol_message_completion(e,t,n){0==n?e():t(d.error_code_to_string(n))}}t.ClientConnection=E,E.DISCONNECTION="disconnection",E.PROTOCOL_MESSAGE="protocolMessage",function(e){e[e.None=0]="None",e[e.Activating=1]="Activating",e[e.Activated=2]="Activated",e[e.Ended=3]="Ended",e[e.Closed=4]="Closed"}(y||(y={}));class S extends((0,c.NativeResourceMixin)(u.BufferedEventEmitter)){constructor(e){super(),this._super(f.default.event_stream_client_stream_new(this,e.native_handle(),(e=>{S._s_on_stream_ended(e)}),((e,t)=>{S._s_on_stream_message(e,t)}))),this.state=y.None}close(){this.state!=y.Closed&&(this.state=y.Closed,f.default.event_stream_client_stream_close(this.native_handle()))}activate(e){return i(this,void 0,void 0,(function*(){let t,n=new Promise(((n,r)=>{try{if(this.state!=y.None)return void r(new l.CrtError(`Event stream in a state (${this.state}) where activation is not allowed.`));if(void 0===e)return this.state=y.Ended,void r(new l.CrtError("Invalid options passed to ClientStream.activate"));if(this.state=y.Activating,e.cancelController){let o=()=>{r(new l.CrtError("Event stream activate() cancelled by external request.")),setImmediate((()=>{this.close()}))};if(t=e.cancelController.addListener(o),!t)return}function s(e,t){return S._s_on_stream_activated(n,r,e,t)}f.default.event_stream_client_stream_activate(this.native_handle(),e,s)}catch(i){this.state=y.Ended,r(i)}}));return h.makeSelfCleaningPromise(n,t)}))}sendMessage(e){return i(this,void 0,void 0,(function*(){let t,n=new Promise(((n,r)=>{try{if(!e)return void r(new l.CrtError("Invalid options passed to ClientStream.sendMessage"));if(this.state!=y.Activated)return void r(new l.CrtError(`Event stream in a state (${this.state}) where sending messages is not allowed.`));if(e.cancelController){let o=()=>{r(new l.CrtError("Event stream sendMessage() cancelled by external request.")),setImmediate((()=>{this.close()}))};if(t=e.cancelController.addListener(o),!t)return}function s(e){return S._s_on_stream_send_message_completion(n,r,e)}f.default.event_stream_client_stream_send_message(this.native_handle(),e,s)}catch(i){r(i)}}));return h.makeSelfCleaningPromise(n,t)}))}isActive(){return this.state==y.Activated}on(e,t){return super.on(e,t),this}static _s_on_stream_activated(e,t,n,r){0==r&&n.state==y.Activating?(n.state=y.Activated,e()):(n.state!=y.Closed&&(n.state=y.Ended),t(d.error_code_to_string(r)))}static _s_on_stream_send_message_completion(e,t,n){0==n?e():t(d.error_code_to_string(n))}static _s_on_stream_ended(e){process.nextTick((()=>{e.emit(S.ENDED,{})}))}static _s_on_stream_message(e,t){process.nextTick((()=>{e.emit(S.MESSAGE,{message:b(t)})}))}}t.ClientStream=S,S.ENDED="ended",S.MESSAGE="message"},6731:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unmarshalInt64BigintFromBuffer=t.marshalInt64BigintAsBuffer=t.MIN_INT64=t.MAX_INT64=t.MIN_INT32=t.MAX_INT32=t.MIN_INT16=t.MAX_INT16=t.MIN_INT8=t.MAX_INT8=void 0;const r=n(2875);t.MAX_INT8=127,t.MIN_INT8=-128,t.MAX_INT16=32767,t.MIN_INT16=-32768,t.MAX_INT32=2147483647,t.MIN_INT32=-2147483648,t.MAX_INT64=BigInt("9223372036854775807"),t.MIN_INT64=BigInt("-9223372036854775808");const s=BigInt("256");t.marshalInt64BigintAsBuffer=function(e){if(e<t.MIN_INT64||e>t.MAX_INT64)throw new r.CrtError("marshalInt64BigintAsBuffer expects a value that can fit in 8 bytes");let n=new Uint8Array(8);if(e<0){e=-e-BigInt(1);for(let t=0;t<8;++t)n[t]=255-Number(e%s),e/=s}else for(let t=0;t<8;++t)n[t]=Number(e%s),e/=s;return n},t.unmarshalInt64BigintFromBuffer=function(e){let t=BigInt(0),n=new Uint8Array(e);if(8!=n.length)throw new r.CrtError("unmarshalInt64BigintFromBuffer expects a byte buffer of length 8");let o=BigInt(1);if(0!=(128&n[7])){for(let e=0;e<n.length;++e)t+=BigInt(255-n[e])*o,o*=s;t+=BigInt(1),t=-t}else for(let e=0;e<n.length;++e)t+=BigInt(n[e])*o,o*=s;return t}},8415:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HttpClientConnectionManager=t.HttpClientStream=t.HttpStream=t.HttpClientConnection=t.HttpProxyOptions=t.HttpProxyConnectionType=t.HttpConnection=t.HttpRequest=t.HttpHeaders=t.HttpProxyAuthenticationType=void 0;const s=r(n(1221)),o=n(8763),i=n(2875),a=n(3804);var c=n(3804);Object.defineProperty(t,"HttpProxyAuthenticationType",{enumerable:!0,get:function(){return c.HttpProxyAuthenticationType}});const u=n(9651);t.HttpHeaders=s.default.HttpHeaders;const l=s.default.HttpRequest;t.HttpRequest=class extends l{constructor(e,t,n,r){super(e,t,n,null==r?void 0:r.native_handle())}};class d extends((0,o.NativeResourceMixin)(u.BufferedEventEmitter)){constructor(e){super(),this._super(e)}close(){s.default.http_connection_close(this.native_handle())}on(e,t){return super.on(e,t),"connect"==e&&process.nextTick((()=>{this.uncork()})),this}}var p;t.HttpConnection=d,d.CONNECT="connect",d.ERROR="error",d.CLOSE="close",function(e){e[e.Legacy=0]="Legacy",e[e.Forwarding=1]="Forwarding",e[e.Tunneling=2]="Tunneling"}(p=t.HttpProxyConnectionType||(t.HttpProxyConnectionType={}));class h extends a.CommonHttpProxyOptions{constructor(e,t,n=a.HttpProxyAuthenticationType.None,r,s,o,i){super(e,t,n,r,s),this.tls_opts=o,this.connection_type=i}create_native_handle(){return s.default.http_proxy_options_new(this.host_name,this.port,this.auth_method,this.auth_username,this.auth_password,this.tls_opts?this.tls_opts.native_handle():void 0,this.connection_type?this.connection_type:p.Legacy)}}t.HttpProxyOptions=h;class f extends d{constructor(e,t,n,r,o,a,c){if(null==r||null==r)throw new i.CrtError("HttpClientConnection constructor: socket_options not defined");super(c||s.default.http_connection_new(null!=e?e.native_handle():null,((e,t)=>{this._on_setup(e,t)}),((e,t)=>{this._on_shutdown(e,t)}),t,n,r.native_handle(),o?o.native_handle():void 0,a?a.create_native_handle():void 0)),this.bootstrap=e,this.socket_options=r,this.tls_opts=o}_on_setup(e,t){t?this.emit("error",new i.CrtError(t)):this.emit("connect")}_on_shutdown(e,t){t?this.emit("error",new i.CrtError(t)):this.emit("close")}request(e){let t;const n=s.default.http_stream_new(this.native_handle(),e,(e=>{t._on_complete(e)}),((e,n)=>{t._on_response(e,n)}),(e=>{t._on_body(e)}));return t=new g(n,this,e)}}t.HttpClientConnection=f;class m extends((0,o.NativeResourceMixin)(u.BufferedEventEmitter)){constructor(e,t){super(),this.connection=t,this._super(e),this.cork()}activate(){s.default.http_stream_activate(this.native_handle())}close(){s.default.http_stream_close(this.native_handle())}_on_body(e){this.emit("data",e)}_on_complete(e){if(e)return this.emit("error",new i.CrtError(e)),void this.close();this.on("end",(()=>{this.close()})),this.emit("end")}}t.HttpStream=m;class g extends m{constructor(e,t,n){super(e,t),this.request=n}status_code(){return this.response_status_code}on(e,t){return super.on(e,t),"response"==e&&process.nextTick((()=>{this.uncork()})),this}_on_response(e,n){this.response_status_code=e;let r=new t.HttpHeaders(n);this.emit("response",e,r)}}t.HttpClientStream=g,g.RESPONSE="response",g.DATA="data",g.ERROR="error",g.END="end",g.HEADERS="headers";class y extends o.NativeResource{constructor(e,t,n,r,o,a,c,u){if(null==a||null==a)throw new i.CrtError("HttpClientConnectionManager constructor: socket_options not defined");super(s.default.http_connection_manager_new(null!=e?e.native_handle():null,t,n,r,o,a.native_handle(),c?c.native_handle():void 0,u?u.create_native_handle():void 0,void 0)),this.bootstrap=e,this.host=t,this.port=n,this.max_connections=r,this.initial_window_size=o,this.socket_options=a,this.tls_opts=c,this.proxy_options=u,this.connections=new Map}acquire(){return new Promise(((e,t)=>{s.default.http_connection_manager_acquire(this.native_handle(),((n,r)=>{if(r)return void t(new i.CrtError(r));let s=this.connections.get(n);s||(s=new f(this.bootstrap,this.host,this.port,this.socket_options,this.tls_opts,this.proxy_options,n),this.connections.set(n,s),s.on("close",(()=>{this.connections.delete(n)}))),e(s)}))}))}release(e){if(null==e||null==e)throw new i.CrtError("HttpClientConnectionManager release: connection not defined");s.default.http_connection_manager_release(this.native_handle(),e.native_handle())}close(){s.default.http_connection_manager_close(this.native_handle())}}t.HttpClientConnectionManager=y},3787:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Pkcs11Lib=t.TlsConnectionOptions=t.ServerTlsContext=t.ClientTlsContext=t.TlsContext=t.TlsContextOptions=t.SocketOptions=t.ClientBootstrap=t.InputStream=t.is_alpn_available=t.enable_logging=t.LogLevel=t.error_code_to_name=t.error_code_to_string=t.SocketDomain=t.SocketType=t.TlsVersion=void 0;const s=r(n(1221)),o=n(8763),i=n(9712);var a=n(9712);Object.defineProperty(t,"TlsVersion",{enumerable:!0,get:function(){return a.TlsVersion}}),Object.defineProperty(t,"SocketType",{enumerable:!0,get:function(){return a.SocketType}}),Object.defineProperty(t,"SocketDomain",{enumerable:!0,get:function(){return a.SocketDomain}});const c=n(2875);var u;t.error_code_to_string=function(e){return s.default.error_code_to_string(e)},t.error_code_to_name=function(e){return s.default.error_code_to_name(e)},(u=t.LogLevel||(t.LogLevel={}))[u.NONE=0]="NONE",u[u.FATAL=1]="FATAL",u[u.ERROR=2]="ERROR",u[u.WARN=3]="WARN",u[u.INFO=4]="INFO",u[u.DEBUG=5]="DEBUG",u[u.TRACE=6]="TRACE",t.enable_logging=function(e){s.default.io_logging_enable(e)},t.is_alpn_available=function(){return s.default.is_alpn_available()};class l extends o.NativeResource{constructor(e){super(s.default.io_input_stream_new(16384)),this.source=e,this.source.on("data",(e=>{e=Buffer.isBuffer(e)?e:Buffer.from(e.toString()),s.default.io_input_stream_append(this.native_handle(),e)})),this.source.on("end",(()=>{s.default.io_input_stream_append(this.native_handle(),void 0)}))}}t.InputStream=l;class d extends o.NativeResource{constructor(){super(s.default.io_client_bootstrap_new())}}t.ClientBootstrap=d;class p extends o.NativeResource{constructor(e=i.SocketType.STREAM,t=i.SocketDomain.IPV6,n=5e3,r=!1,o=0,a=0,c=0){super(s.default.io_socket_options_new(e,t,n,o,a,c,r))}}t.SocketOptions=p;class h{constructor(){this.min_tls_version=i.TlsVersion.Default,this.alpn_list=[],this.verify_peer=!0}override_default_trust_store_from_path(e,t){this.ca_dirpath=e,this.ca_filepath=t}override_default_trust_store(e){this.certificate_authority=e}static create_client_with_mtls(e,t){let n=new h;return n.certificate=e,n.private_key=t,n.verify_peer=!0,n}static create_client_with_mtls_from_path(e,t){let n=new h;return n.certificate_filepath=e,n.private_key_filepath=t,n.verify_peer=!0,n}static create_client_with_mtls_pkcs12_from_path(e,t){let n=new h;return n.pkcs12_filepath=e,n.pkcs12_password=t,n.verify_peer=!0,n}static create_client_with_mtls_pkcs_from_path(e,t){return this.create_client_with_mtls_pkcs12_from_path(e,t)}static create_client_with_mtls_pkcs11(e){let t=new h;return t.pkcs11_options=e,t.verify_peer=!0,t}static create_client_with_mtls_windows_cert_store_path(e){let t=new h;return t.windows_cert_store_path=e,t.verify_peer=!0,t}static create_server_with_mtls_from_path(e,t){let n=new h;return n.certificate_filepath=e,n.private_key_filepath=t,n.verify_peer=!1,n}static create_server_with_mtls_pkcs_from_path(e,t){let n=new h;return n.pkcs12_filepath=e,n.pkcs12_password=t,n.verify_peer=!1,n}}t.TlsContextOptions=h;class f extends o.NativeResource{constructor(e){if(null==e||null==e)throw new c.CrtError("TlsContext constructor: ctx_opt not defined");super(s.default.io_tls_ctx_new(e.min_tls_version,e.ca_filepath,e.ca_dirpath,e.certificate_authority,e.alpn_list&&e.alpn_list.length>0?e.alpn_list.join(";"):void 0,e.certificate_filepath,e.certificate,e.private_key_filepath,e.private_key,e.pkcs12_filepath,e.pkcs12_password,e.pkcs11_options,e.windows_cert_store_path,e.verify_peer))}}t.TlsContext=f,t.ClientTlsContext=class extends f{constructor(e){e||((e=new h).verify_peer=!0),super(e)}},t.ServerTlsContext=class extends f{constructor(e){e||((e=new h).verify_peer=!1),super(e)}};class m extends o.NativeResource{constructor(e,t,n=[]){if(null==e||null==e)throw new c.CrtError("TlsConnectionOptions constructor: tls_ctx not defined");super(s.default.io_tls_connection_options_new(e.native_handle(),t,n&&n.length>0?n.join(";"):void 0)),this.tls_ctx=e,this.server_name=t,this.alpn_list=n}}t.TlsConnectionOptions=m;class g extends o.NativeResource{constructor(e,t=g.InitializeFinalizeBehavior.DEFAULT){super(s.default.io_pkcs11_lib_new(e,t))}close(){s.default.io_pkcs11_lib_close(this.native_handle())}}t.Pkcs11Lib=g,function(e){let t;!function(e){e[e.DEFAULT=0]="DEFAULT",e[e.OMIT=1]="OMIT",e[e.STRICT=2]="STRICT"}(t=e.InitializeFinalizeBehavior||(e.InitializeFinalizeBehavior={}))}(g=t.Pkcs11Lib||(t.Pkcs11Lib={}))},9793:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),s(n(8583),t),s(n(1838),t)},799:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MqttClientConnection=t.MqttClient=t.MqttWill=t.QoS=t.HttpProxyOptions=void 0;const c=a(n(1221)),u=n(8763),l=n(9651),d=o(n(4231)),p=n(2875),h=o(n(3787));var f=n(8415);Object.defineProperty(t,"HttpProxyOptions",{enumerable:!0,get:function(){return f.HttpProxyOptions}});const m=n(5641);var g=n(5641);Object.defineProperty(t,"QoS",{enumerable:!0,get:function(){return g.QoS}}),Object.defineProperty(t,"MqttWill",{enumerable:!0,get:function(){return g.MqttWill}});class y extends u.NativeResource{constructor(e=void 0){super(c.default.mqtt_client_new(null!=e?e.native_handle():null)),this.bootstrap=e}new_connection(e){return new w(this,e)}}t.MqttClient=y;class w extends((0,u.NativeResourceMixin)(l.BufferedEventEmitter)){constructor(e,t){if(super(),this.client=e,this.config=t,null==t||null==t)throw new p.CrtError("MqttClientConnection constructor: config not defined");const n=t.will?{topic:t.will.topic,qos:t.will.qos,payload:d.normalize_payload(t.will.payload),retain:t.will.retain}:void 0;var r=m.DEFAULT_RECONNECT_MIN_SEC,s=m.DEFAULT_RECONNECT_MAX_SEC;if(t.reconnect_min_sec&&(r=t.reconnect_min_sec,s=Math.max(r,s)),t.reconnect_max_sec&&(s=t.reconnect_max_sec,r=Math.min(r,s)),null==e||null==e)throw new p.CrtError("MqttClientConnection constructor: client not defined");if(null==t.socket_options||null==t.socket_options)throw new p.CrtError("MqttClientConnection constructor: socket_options in configuration not defined");this._super(c.default.mqtt_client_connection_new(e.native_handle(),(e=>{this._on_connection_interrupted(e)}),((e,t)=>{this._on_connection_resumed(e,t)}),t.tls_ctx?t.tls_ctx.native_handle():null,n,t.username,t.password,t.use_websocket,t.proxy_options?t.proxy_options.create_native_handle():void 0,t.websocket_handshake_transform,r,s)),this.tls_ctx=t.tls_ctx,c.default.mqtt_client_connection_on_message(this.native_handle(),this._on_any_publish.bind(this)),c.default.mqtt_client_connection_on_closed(this.native_handle(),this._on_connection_closed.bind(this)),this.on("error",(e=>{}))}close(){c.default.mqtt_client_connection_close(this.native_handle())}on(e,t){return super.on(e,t),"connect"==e&&process.nextTick((()=>{this.uncork()})),this}connect(){return i(this,void 0,void 0,(function*(){return new Promise(((e,t)=>{if(t=this._reject(t),null==this.config.socket_options||null==this.config.socket_options)throw new p.CrtError("MqttClientConnection connect: socket_options in configuration not defined");try{c.default.mqtt_client_connection_connect(this.native_handle(),this.config.client_id,this.config.host_name,this.config.port,this.config.socket_options.native_handle(),this.config.keep_alive,this.config.ping_timeout,this.config.protocol_operation_timeout,this.config.clean_session,this._on_connect_callback.bind(this,e,t))}catch(e){t(e)}}))}))}reconnect(){return i(this,void 0,void 0,(function*(){return new Promise(((e,t)=>{t=this._reject(t);try{c.default.mqtt_client_connection_reconnect(this.native_handle(),this._on_connect_callback.bind(this,e,t))}catch(e){t(e)}}))}))}publish(e,t,n,r=!1){return i(this,void 0,void 0,(function*(){return"string"!=typeof e?Promise.reject("topic is not a string"):"number"!=typeof n?Promise.reject("qos is not a number"):"boolean"!=typeof r?Promise.reject("retain is not a boolean"):new Promise(((s,o)=>{o=this._reject(o);try{c.default.mqtt_client_connection_publish(this.native_handle(),e,d.normalize_payload(t),n,r,this._on_puback_callback.bind(this,s,o))}catch(e){o(e)}}))}))}subscribe(e,t,n){return i(this,void 0,void 0,(function*(){return"string"!=typeof e?Promise.reject("topic is not a string"):"number"!=typeof t?Promise.reject("qos is not a number"):new Promise(((r,s)=>{s=this._reject(s);try{c.default.mqtt_client_connection_subscribe(this.native_handle(),e,t,n,this._on_suback_callback.bind(this,r,s))}catch(e){s(e)}}))}))}unsubscribe(e){return i(this,void 0,void 0,(function*(){return"string"!=typeof e?Promise.reject("topic is not a string"):new Promise(((t,n)=>{n=this._reject(n);try{c.default.mqtt_client_connection_unsubscribe(this.native_handle(),e,this._on_unsuback_callback.bind(this,t,n))}catch(e){n(e)}}))}))}disconnect(){return i(this,void 0,void 0,(function*(){return new Promise(((e,t)=>{t=this._reject(t);try{c.default.mqtt_client_connection_disconnect(this.native_handle(),this._on_disconnect_callback.bind(this,e))}catch(e){t(e)}}))}))}getQueueStatistics(){return c.default.mqtt_client_connection_get_queue_statistics(this.native_handle())}_reject(e){return t=>{e(t),process.nextTick((()=>{this.emit("error",new p.CrtError(t))}))}}_on_connection_interrupted(e){this.emit("interrupt",new p.CrtError(e))}_on_connection_resumed(e,t){this.emit("resume",e,t);let n={session_present:t,reason_code:e};this.emit("connection_success",n)}_on_any_publish(e,t,n,r,s){this.emit("message",e,t,n,r,s)}_on_connection_closed(){this.emit("closed",{}),this.close()}_on_connect_callback(e,t,n,r,s){if(0==n&&0==r){e(s),this.emit("connect",s);let t={session_present:s,reason_code:r};this.emit("connection_success",t)}else if(0!=n){t("Failed to connect: "+h.error_code_to_string(n));let e={error:new p.CrtError(n)};this.emit("connection_failure",e)}else{t("Server rejected connection.");let e={error:new p.CrtError(5134)};this.emit("connection_failure",e)}}_on_puback_callback(e,t,n,r){0==r?e({packet_id:n}):t("Failed to publish: "+h.error_code_to_string(r))}_on_suback_callback(e,t,n,r,s,o){0==o?e({packet_id:n,topic:r,qos:s,error_code:o}):t("Failed to subscribe: "+h.error_code_to_string(o))}_on_unsuback_callback(e,t,n,r){0==r?e({packet_id:n}):t("Failed to unsubscribe: "+h.error_code_to_string(r))}_on_disconnect_callback(e){e(),this.emit("disconnect")}}t.MqttClientConnection=w,w.CONNECT="connect",w.DISCONNECT="disconnect",w.ERROR="error",w.INTERRUPT="interrupt",w.RESUME="resume",w.MESSAGE="message",w.CONNECTION_SUCCESS="connection_success",w.CONNECTION_FAILURE="connection_failure",w.CLOSED="closed"},2385:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Mqtt5Client=t.ClientExtendedValidationAndFlowControl=t.ClientOperationQueueBehavior=t.HttpProxyOptions=void 0;const u=c(n(1221)),l=n(8763),d=n(9651),p=o(n(3787)),h=o(n(4231)),f=n(2875);var m,g,y=n(8415);Object.defineProperty(t,"HttpProxyOptions",{enumerable:!0,get:function(){return y.HttpProxyOptions}}),i(n(5018),t),i(n(202),t),(g=t.ClientOperationQueueBehavior||(t.ClientOperationQueueBehavior={}))[g.Default=0]="Default",g[g.FailNonQos1PublishOnDisconnect=1]="FailNonQos1PublishOnDisconnect",g[g.FailQos0PublishOnDisconnect=2]="FailQos0PublishOnDisconnect",g[g.FailAllOnDisconnect=3]="FailAllOnDisconnect",(m=t.ClientExtendedValidationAndFlowControl||(t.ClientExtendedValidationAndFlowControl={}))[m.None=0]="None",m[m.AwsIotCoreDefaults=1]="AwsIotCoreDefaults";class w extends((0,l.NativeResourceMixin)(d.BufferedEventEmitter)){constructor(e){super(),this._super(u.default.mqtt5_client_new(this,e,(e=>{w._s_on_stopped(e)}),(e=>{w._s_on_attempting_connect(e)}),((e,t,n)=>{w._s_on_connection_success(e,t,n)}),((e,t,n)=>{w._s_on_connection_failure(e,new f.CrtError(t),n)}),((e,t,n)=>{w._s_on_disconnection(e,new f.CrtError(t),n)}),((e,t)=>{w._s_on_message_received(e,t)}),e.clientBootstrap?e.clientBootstrap.native_handle():null,e.socketOptions?e.socketOptions.native_handle():null,e.tlsCtx?e.tlsCtx.native_handle():null,e.httpProxyOptions?e.httpProxyOptions.create_native_handle():null))}close(){u.default.mqtt5_client_close(this.native_handle())}start(){u.default.mqtt5_client_start(this.native_handle())}stop(e){u.default.mqtt5_client_stop(this.native_handle(),e)}subscribe(e){return a(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{try{u.default.mqtt5_client_subscribe(this.native_handle(),e,(function(e,r,s){return w._s_on_suback_callback(t,n,e,r,s)}))}catch(e){n(e)}}))}))}unsubscribe(e){return a(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{try{u.default.mqtt5_client_unsubscribe(this.native_handle(),e,(function(e,r,s){return w._s_on_unsuback_callback(t,n,e,r,s)}))}catch(e){n(e)}}))}))}publish(e){return a(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{e&&e.payload&&(e.payload=h.normalize_payload(e.payload));try{u.default.mqtt5_client_publish(this.native_handle(),e,(function(e,r,s){return w._s_on_puback_callback(t,n,e,r,s)}))}catch(e){n(e)}}))}))}getQueueStatistics(){return u.default.mqtt5_client_get_queue_statistics(this.native_handle())}on(e,t){return super.on(e,t),this}static _s_on_stopped(e){process.nextTick((()=>{e.emit(w.STOPPED,{})}))}static _s_on_attempting_connect(e){process.nextTick((()=>{e.emit(w.ATTEMPTING_CONNECT,{})}))}static _s_on_connection_success(e,t,n){let r={connack:t,settings:n};process.nextTick((()=>{e.emit(w.CONNECTION_SUCCESS,r)}))}static _s_on_connection_failure(e,t,n){let r={error:t};null!=n&&(r.connack=n),process.nextTick((()=>{e.emit(w.CONNECTION_FAILURE,r)}))}static _s_on_disconnection(e,t,n){let r={error:t};null!=n&&(r.disconnect=n),process.nextTick((()=>{e.emit(w.DISCONNECTION,r)}))}static _s_on_suback_callback(e,t,n,r,s){0==r&&void 0!==s?e(s):t(p.error_code_to_string(r))}static _s_on_unsuback_callback(e,t,n,r,s){0==r&&void 0!==s?e(s):t(p.error_code_to_string(r))}static _s_on_puback_callback(e,t,n,r,s){0==r?e(s):t(p.error_code_to_string(r))}static _s_on_message_received(e,t){let n={message:t};process.nextTick((()=>{e.emit(w.MESSAGE_RECEIVED,n)}))}}t.Mqtt5Client=w,w.ERROR="error",w.MESSAGE_RECEIVED="messageReceived",w.ATTEMPTING_CONNECT="attemptingConnect",w.CONNECTION_SUCCESS="connectionSuccess",w.CONNECTION_FAILURE="connectionFailure",w.DISCONNECTION="disconnection",w.STOPPED="stopped"},8763:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NativeResourceMixin=t.NativeResource=void 0,t.NativeResource=class{constructor(e){this.handle=e}native_handle(){return this.handle}},t.NativeResourceMixin=function(e){return class extends e{constructor(...e){const t=e.shift();super(...e),this._handle=t}_super(e){this._handle=e}native_handle(){return this._handle}}}},1309:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=1309,e.exports=t},6932:(e,t,n)=>{"use strict";const r=n(8501),s=n(8844),o=n(1192);e.exports={XMLParser:s,XMLValidator:r,XMLBuilder:o}},7849:(e,t)=>{"use strict";const n=":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",r="["+n+"]["+n+"\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*",s=new RegExp("^"+r+"$");t.isExist=function(e){return void 0!==e},t.isEmptyObject=function(e){return 0===Object.keys(e).length},t.merge=function(e,t,n){if(t){const r=Object.keys(t),s=r.length;for(let o=0;o<s;o++)e[r[o]]="strict"===n?[t[r[o]]]:t[r[o]]}},t.getValue=function(e){return t.isExist(e)?e:""},t.isName=function(e){return!(null==s.exec(e))},t.getAllMatches=function(e,t){const n=[];let r=t.exec(e);for(;r;){const s=[];s.startIndex=t.lastIndex-r[0].length;const o=r.length;for(let e=0;e<o;e++)s.push(r[e]);n.push(s),r=t.exec(e)}return n},t.nameRegexp=r},8501:(e,t,n)=>{"use strict";const r=n(7849),s={allowBooleanAttributes:!1,unpairedTags:[]};function o(e){return" "===e||"\t"===e||"\n"===e||"\r"===e}function i(e,t){const n=t;for(;t<e.length;t++)if("?"!=e[t]&&" "!=e[t]);else{const r=e.substr(n,t-n);if(t>5&&"xml"===r)return f("InvalidXml","XML declaration allowed only at the start of the document.",g(e,t));if("?"==e[t]&&">"==e[t+1]){t++;break}}return t}function a(e,t){if(e.length>t+5&&"-"===e[t+1]&&"-"===e[t+2]){for(t+=3;t<e.length;t++)if("-"===e[t]&&"-"===e[t+1]&&">"===e[t+2]){t+=2;break}}else if(e.length>t+8&&"D"===e[t+1]&&"O"===e[t+2]&&"C"===e[t+3]&&"T"===e[t+4]&&"Y"===e[t+5]&&"P"===e[t+6]&&"E"===e[t+7]){let n=1;for(t+=8;t<e.length;t++)if("<"===e[t])n++;else if(">"===e[t]&&(n--,0===n))break}else if(e.length>t+9&&"["===e[t+1]&&"C"===e[t+2]&&"D"===e[t+3]&&"A"===e[t+4]&&"T"===e[t+5]&&"A"===e[t+6]&&"["===e[t+7])for(t+=8;t<e.length;t++)if("]"===e[t]&&"]"===e[t+1]&&">"===e[t+2]){t+=2;break}return t}t.validate=function(e,t){t=Object.assign({},s,t);const n=[];let c=!1,u=!1;"\ufeff"===e[0]&&(e=e.substr(1));for(let s=0;s<e.length;s++)if("<"===e[s]&&"?"===e[s+1]){if(s+=2,s=i(e,s),s.err)return s}else{if("<"!==e[s]){if(o(e[s]))continue;return f("InvalidChar","char '"+e[s]+"' is not expected.",g(e,s))}{let m=s;if(s++,"!"===e[s]){s=a(e,s);continue}{let y=!1;"/"===e[s]&&(y=!0,s++);let w="";for(;s<e.length&&">"!==e[s]&&" "!==e[s]&&"\t"!==e[s]&&"\n"!==e[s]&&"\r"!==e[s];s++)w+=e[s];if(w=w.trim(),"/"===w[w.length-1]&&(w=w.substring(0,w.length-1),s--),d=w,!r.isName(d)){let t;return t=0===w.trim().length?"Invalid space after '<'.":"Tag '"+w+"' is an invalid name.",f("InvalidTag",t,g(e,s))}const _=l(e,s);if(!1===_)return f("InvalidAttr","Attributes for '"+w+"' have open quote.",g(e,s));let v=_.value;if(s=_.index,"/"===v[v.length-1]){const n=s-v.length;v=v.substring(0,v.length-1);const r=p(v,t);if(!0!==r)return f(r.err.code,r.err.msg,g(e,n+r.err.line));c=!0}else if(y){if(!_.tagClosed)return f("InvalidTag","Closing tag '"+w+"' doesn't have proper closing.",g(e,s));if(v.trim().length>0)return f("InvalidTag","Closing tag '"+w+"' can't have attributes or invalid starting.",g(e,m));{const t=n.pop();if(w!==t.tagName){let n=g(e,t.tagStartPos);return f("InvalidTag","Expected closing tag '"+t.tagName+"' (opened in line "+n.line+", col "+n.col+") instead of closing tag '"+w+"'.",g(e,m))}0==n.length&&(u=!0)}}else{const r=p(v,t);if(!0!==r)return f(r.err.code,r.err.msg,g(e,s-v.length+r.err.line));if(!0===u)return f("InvalidXml","Multiple possible root nodes found.",g(e,s));-1!==t.unpairedTags.indexOf(w)||n.push({tagName:w,tagStartPos:m}),c=!0}for(s++;s<e.length;s++)if("<"===e[s]){if("!"===e[s+1]){s++,s=a(e,s);continue}if("?"!==e[s+1])break;if(s=i(e,++s),s.err)return s}else if("&"===e[s]){const t=h(e,s);if(-1==t)return f("InvalidChar","char '&' is not expected.",g(e,s));s=t}else if(!0===u&&!o(e[s]))return f("InvalidXml","Extra text at the end",g(e,s));"<"===e[s]&&s--}}}var d;return c?1==n.length?f("InvalidTag","Unclosed tag '"+n[0].tagName+"'.",g(e,n[0].tagStartPos)):!(n.length>0)||f("InvalidXml","Invalid '"+JSON.stringify(n.map((e=>e.tagName)),null,4).replace(/\r?\n/g,"")+"' found.",{line:1,col:1}):f("InvalidXml","Start tag expected.",1)};const c='"',u="'";function l(e,t){let n="",r="",s=!1;for(;t<e.length;t++){if(e[t]===c||e[t]===u)""===r?r=e[t]:r!==e[t]||(r="");else if(">"===e[t]&&""===r){s=!0;break}n+=e[t]}return""===r&&{value:n,index:t,tagClosed:s}}const d=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function p(e,t){const n=r.getAllMatches(e,d),s={};for(let e=0;e<n.length;e++){if(0===n[e][1].length)return f("InvalidAttr","Attribute '"+n[e][2]+"' has no space in starting.",y(n[e]));if(void 0!==n[e][3]&&void 0===n[e][4])return f("InvalidAttr","Attribute '"+n[e][2]+"' is without value.",y(n[e]));if(void 0===n[e][3]&&!t.allowBooleanAttributes)return f("InvalidAttr","boolean attribute '"+n[e][2]+"' is not allowed.",y(n[e]));const r=n[e][2];if(!m(r))return f("InvalidAttr","Attribute '"+r+"' is an invalid name.",y(n[e]));if(s.hasOwnProperty(r))return f("InvalidAttr","Attribute '"+r+"' is repeated.",y(n[e]));s[r]=1}return!0}function h(e,t){if(";"===e[++t])return-1;if("#"===e[t])return function(e,t){let n=/\d/;for("x"===e[t]&&(t++,n=/[\da-fA-F]/);t<e.length;t++){if(";"===e[t])return t;if(!e[t].match(n))break}return-1}(e,++t);let n=0;for(;t<e.length;t++,n++)if(!(e[t].match(/\w/)&&n<20)){if(";"===e[t])break;return-1}return t}function f(e,t,n){return{err:{code:e,msg:t,line:n.line||n,col:n.col}}}function m(e){return r.isName(e)}function g(e,t){const n=e.substring(0,t).split(/\r?\n/);return{line:n.length,col:n[n.length-1].length+1}}function y(e){return e.startIndex+e[1].length}},1192:(e,t,n)=>{"use strict";const r=n(2592),s={attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,cdataPropName:!1,format:!1,indentBy:"  ",suppressEmptyNode:!1,suppressUnpairedNode:!0,suppressBooleanAttributes:!0,tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},preserveOrder:!1,commentPropName:!1,unpairedTags:[],entities:[{regex:new RegExp("&","g"),val:"&amp;"},{regex:new RegExp(">","g"),val:"&gt;"},{regex:new RegExp("<","g"),val:"&lt;"},{regex:new RegExp("'","g"),val:"&apos;"},{regex:new RegExp('"',"g"),val:"&quot;"}],processEntities:!0,stopNodes:[],oneListGroup:!1};function o(e){this.options=Object.assign({},s,e),this.options.ignoreAttributes||this.options.attributesGroupName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=c),this.processTextOrObjNode=i,this.options.format?(this.indentate=a,this.tagEndChar=">\n",this.newLine="\n"):(this.indentate=function(){return""},this.tagEndChar=">",this.newLine="")}function i(e,t,n){const r=this.j2x(e,n+1);return void 0!==e[this.options.textNodeName]&&1===Object.keys(e).length?this.buildTextValNode(e[this.options.textNodeName],t,r.attrStr,n):this.buildObjectNode(r.val,t,r.attrStr,n)}function a(e){return this.options.indentBy.repeat(e)}function c(e){return!!e.startsWith(this.options.attributeNamePrefix)&&e.substr(this.attrPrefixLen)}o.prototype.build=function(e){return this.options.preserveOrder?r(e,this.options):(Array.isArray(e)&&this.options.arrayNodeName&&this.options.arrayNodeName.length>1&&(e={[this.options.arrayNodeName]:e}),this.j2x(e,0).val)},o.prototype.j2x=function(e,t){let n="",r="";for(let s in e)if(void 0===e[s]);else if(null===e[s])"?"===s[0]?r+=this.indentate(t)+"<"+s+"?"+this.tagEndChar:r+=this.indentate(t)+"<"+s+"/"+this.tagEndChar;else if(e[s]instanceof Date)r+=this.buildTextValNode(e[s],s,"",t);else if("object"!=typeof e[s]){const o=this.isAttribute(s);if(o)n+=this.buildAttrPairStr(o,""+e[s]);else if(s===this.options.textNodeName){let t=this.options.tagValueProcessor(s,""+e[s]);r+=this.replaceEntitiesValue(t)}else r+=this.buildTextValNode(e[s],s,"",t)}else if(Array.isArray(e[s])){const n=e[s].length;let o="";for(let i=0;i<n;i++){const n=e[s][i];void 0===n||(null===n?"?"===s[0]?r+=this.indentate(t)+"<"+s+"?"+this.tagEndChar:r+=this.indentate(t)+"<"+s+"/"+this.tagEndChar:"object"==typeof n?this.options.oneListGroup?o+=this.j2x(n,t+1).val:o+=this.processTextOrObjNode(n,s,t):o+=this.buildTextValNode(n,s,"",t))}this.options.oneListGroup&&(o=this.buildObjectNode(o,s,"",t)),r+=o}else if(this.options.attributesGroupName&&s===this.options.attributesGroupName){const t=Object.keys(e[s]),r=t.length;for(let o=0;o<r;o++)n+=this.buildAttrPairStr(t[o],""+e[s][t[o]])}else r+=this.processTextOrObjNode(e[s],s,t);return{attrStr:n,val:r}},o.prototype.buildAttrPairStr=function(e,t){return t=this.options.attributeValueProcessor(e,""+t),t=this.replaceEntitiesValue(t),this.options.suppressBooleanAttributes&&"true"===t?" "+e:" "+e+'="'+t+'"'},o.prototype.buildObjectNode=function(e,t,n,r){if(""===e)return"?"===t[0]?this.indentate(r)+"<"+t+n+"?"+this.tagEndChar:this.indentate(r)+"<"+t+n+this.closeTag(t)+this.tagEndChar;{let s="</"+t+this.tagEndChar,o="";return"?"===t[0]&&(o="?",s=""),n&&-1===e.indexOf("<")?this.indentate(r)+"<"+t+n+o+">"+e+s:!1!==this.options.commentPropName&&t===this.options.commentPropName&&0===o.length?this.indentate(r)+`\x3c!--${e}--\x3e`+this.newLine:this.indentate(r)+"<"+t+n+o+this.tagEndChar+e+this.indentate(r)+s}},o.prototype.closeTag=function(e){let t="";return-1!==this.options.unpairedTags.indexOf(e)?this.options.suppressUnpairedNode||(t="/"):t=this.options.suppressEmptyNode?"/":`></${e}`,t},o.prototype.buildTextValNode=function(e,t,n,r){if(!1!==this.options.cdataPropName&&t===this.options.cdataPropName)return this.indentate(r)+`<![CDATA[${e}]]>`+this.newLine;if(!1!==this.options.commentPropName&&t===this.options.commentPropName)return this.indentate(r)+`\x3c!--${e}--\x3e`+this.newLine;if("?"===t[0])return this.indentate(r)+"<"+t+n+"?"+this.tagEndChar;{let s=this.options.tagValueProcessor(t,e);return s=this.replaceEntitiesValue(s),""===s?this.indentate(r)+"<"+t+n+this.closeTag(t)+this.tagEndChar:this.indentate(r)+"<"+t+n+">"+s+"</"+t+this.tagEndChar}},o.prototype.replaceEntitiesValue=function(e){if(e&&e.length>0&&this.options.processEntities)for(let t=0;t<this.options.entities.length;t++){const n=this.options.entities[t];e=e.replace(n.regex,n.val)}return e},e.exports=o},2592:e=>{function t(e,i,a,c){let u="",l=!1;for(let d=0;d<e.length;d++){const p=e[d],h=n(p);let f="";if(f=0===a.length?h:`${a}.${h}`,h===i.textNodeName){let e=p[h];s(f,i)||(e=i.tagValueProcessor(h,e),e=o(e,i)),l&&(u+=c),u+=e,l=!1;continue}if(h===i.cdataPropName){l&&(u+=c),u+=`<![CDATA[${p[h][0][i.textNodeName]}]]>`,l=!1;continue}if(h===i.commentPropName){u+=c+`\x3c!--${p[h][0][i.textNodeName]}--\x3e`,l=!0;continue}if("?"===h[0]){const e=r(p[":@"],i),t="?xml"===h?"":c;let n=p[h][0][i.textNodeName];n=0!==n.length?" "+n:"",u+=t+`<${h}${n}${e}?>`,l=!0;continue}let m=c;""!==m&&(m+=i.indentBy);const g=c+`<${h}${r(p[":@"],i)}`,y=t(p[h],i,f,m);-1!==i.unpairedTags.indexOf(h)?i.suppressUnpairedNode?u+=g+">":u+=g+"/>":y&&0!==y.length||!i.suppressEmptyNode?y&&y.endsWith(">")?u+=g+`>${y}${c}</${h}>`:(u+=g+">",y&&""!==c&&(y.includes("/>")||y.includes("</"))?u+=c+i.indentBy+y+c:u+=y,u+=`</${h}>`):u+=g+"/>",l=!0}return u}function n(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function r(e,t){let n="";if(e&&!t.ignoreAttributes)for(let r in e){let s=t.attributeValueProcessor(r,e[r]);s=o(s,t),!0===s&&t.suppressBooleanAttributes?n+=` ${r.substr(t.attributeNamePrefix.length)}`:n+=` ${r.substr(t.attributeNamePrefix.length)}="${s}"`}return n}function s(e,t){let n=(e=e.substr(0,e.length-t.textNodeName.length-1)).substr(e.lastIndexOf(".")+1);for(let r in t.stopNodes)if(t.stopNodes[r]===e||t.stopNodes[r]==="*."+n)return!0;return!1}function o(e,t){if(e&&e.length>0&&t.processEntities)for(let n=0;n<t.entities.length;n++){const r=t.entities[n];e=e.replace(r.regex,r.val)}return e}e.exports=function(e,n){let r="";return n.format&&n.indentBy.length>0&&(r="\n"),t(e,n,"",r)}},4780:(e,t,n)=>{const r=n(7849);function s(e,t){let n="";for(;t<e.length&&"'"!==e[t]&&'"'!==e[t];t++)n+=e[t];if(n=n.trim(),-1!==n.indexOf(" "))throw new Error("External entites are not supported");const r=e[t++];let s="";for(;t<e.length&&e[t]!==r;t++)s+=e[t];return[n,s,t]}function o(e,t){return"!"===e[t+1]&&"-"===e[t+2]&&"-"===e[t+3]}function i(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"N"===e[t+3]&&"T"===e[t+4]&&"I"===e[t+5]&&"T"===e[t+6]&&"Y"===e[t+7]}function a(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"L"===e[t+3]&&"E"===e[t+4]&&"M"===e[t+5]&&"E"===e[t+6]&&"N"===e[t+7]&&"T"===e[t+8]}function c(e,t){return"!"===e[t+1]&&"A"===e[t+2]&&"T"===e[t+3]&&"T"===e[t+4]&&"L"===e[t+5]&&"I"===e[t+6]&&"S"===e[t+7]&&"T"===e[t+8]}function u(e,t){return"!"===e[t+1]&&"N"===e[t+2]&&"O"===e[t+3]&&"T"===e[t+4]&&"A"===e[t+5]&&"T"===e[t+6]&&"I"===e[t+7]&&"O"===e[t+8]&&"N"===e[t+9]}function l(e){if(r.isName(e))return e;throw new Error(`Invalid entity name ${e}`)}e.exports=function(e,t){const n={};if("O"!==e[t+3]||"C"!==e[t+4]||"T"!==e[t+5]||"Y"!==e[t+6]||"P"!==e[t+7]||"E"!==e[t+8])throw new Error("Invalid Tag instead of DOCTYPE");{t+=9;let r=1,d=!1,p=!1,h="";for(;t<e.length;t++)if("<"!==e[t]||p)if(">"===e[t]){if(p?"-"===e[t-1]&&"-"===e[t-2]&&(p=!1,r--):r--,0===r)break}else"["===e[t]?d=!0:h+=e[t];else{if(d&&i(e,t))t+=7,[entityName,val,t]=s(e,t+1),-1===val.indexOf("&")&&(n[l(entityName)]={regx:RegExp(`&${entityName};`,"g"),val});else if(d&&a(e,t))t+=8;else if(d&&c(e,t))t+=8;else if(d&&u(e,t))t+=9;else{if(!o)throw new Error("Invalid DOCTYPE");p=!0}r++,h=""}if(0!==r)throw new Error("Unclosed DOCTYPE")}return{entities:n,i:t}}},6745:(e,t)=>{const n={preserveOrder:!1,attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0,eNotation:!0},tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1,transformTagName:!1,transformAttributeName:!1,updateTag:function(e,t,n){return e}};t.buildOptions=function(e){return Object.assign({},n,e)},t.defaultOptions=n},1078:(e,t,n)=>{"use strict";const r=n(7849),s=n(6311),o=n(4780),i=n(4153);function a(e){const t=Object.keys(e);for(let n=0;n<t.length;n++){const r=t[n];this.lastEntities[r]={regex:new RegExp("&"+r+";","g"),val:e[r]}}}function c(e,t,n,r,s,o,i){if(void 0!==e&&(this.options.trimValues&&!r&&(e=e.trim()),e.length>0)){i||(e=this.replaceEntitiesValue(e));const r=this.options.tagValueProcessor(t,e,n,s,o);return null==r?e:typeof r!=typeof e||r!==e?r:this.options.trimValues||e.trim()===e?v(e,this.options.parseTagValue,this.options.numberParseOptions):e}}function u(e){if(this.options.removeNSPrefix){const t=e.split(":"),n="/"===e.charAt(0)?"/":"";if("xmlns"===t[0])return"";2===t.length&&(e=n+t[1])}return e}"<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g,r.nameRegexp);const l=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?","gm");function d(e,t,n){if(!this.options.ignoreAttributes&&"string"==typeof e){const n=r.getAllMatches(e,l),s=n.length,o={};for(let e=0;e<s;e++){const r=this.resolveNameSpace(n[e][1]);let s=n[e][4],i=this.options.attributeNamePrefix+r;if(r.length)if(this.options.transformAttributeName&&(i=this.options.transformAttributeName(i)),"__proto__"===i&&(i="#__proto__"),void 0!==s){this.options.trimValues&&(s=s.trim()),s=this.replaceEntitiesValue(s);const e=this.options.attributeValueProcessor(r,s,t);o[i]=null==e?s:typeof e!=typeof s||e!==s?e:v(s,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(o[i]=!0)}if(!Object.keys(o).length)return;if(this.options.attributesGroupName){const e={};return e[this.options.attributesGroupName]=o,e}return o}}const p=function(e){e=e.replace(/\r\n?/g,"\n");const t=new s("!xml");let n=t,r="",i="";for(let a=0;a<e.length;a++)if("<"===e[a])if("/"===e[a+1]){const t=y(e,">",a,"Closing Tag is not closed.");let s=e.substring(a+2,t).trim();if(this.options.removeNSPrefix){const e=s.indexOf(":");-1!==e&&(s=s.substr(e+1))}this.options.transformTagName&&(s=this.options.transformTagName(s)),n&&(r=this.saveTextToParentTag(r,n,i));const o=i.substring(i.lastIndexOf(".")+1);if(s&&-1!==this.options.unpairedTags.indexOf(s))throw new Error(`Unpaired tag can not be used as closing tag: </${s}>`);let c=0;o&&-1!==this.options.unpairedTags.indexOf(o)?(c=i.lastIndexOf(".",i.lastIndexOf(".")-1),this.tagsNodeStack.pop()):c=i.lastIndexOf("."),i=i.substring(0,c),n=this.tagsNodeStack.pop(),r="",a=t}else if("?"===e[a+1]){let t=w(e,a,!1,"?>");if(!t)throw new Error("Pi Tag is not closed.");if(r=this.saveTextToParentTag(r,n,i),this.options.ignoreDeclaration&&"?xml"===t.tagName||this.options.ignorePiTags);else{const e=new s(t.tagName);e.add(this.options.textNodeName,""),t.tagName!==t.tagExp&&t.attrExpPresent&&(e[":@"]=this.buildAttributesMap(t.tagExp,i,t.tagName)),this.addChild(n,e,i)}a=t.closeIndex+1}else if("!--"===e.substr(a+1,3)){const t=y(e,"--\x3e",a+4,"Comment is not closed.");if(this.options.commentPropName){const s=e.substring(a+4,t-2);r=this.saveTextToParentTag(r,n,i),n.add(this.options.commentPropName,[{[this.options.textNodeName]:s}])}a=t}else if("!D"===e.substr(a+1,2)){const t=o(e,a);this.docTypeEntities=t.entities,a=t.i}else if("!["===e.substr(a+1,2)){const t=y(e,"]]>",a,"CDATA is not closed.")-2,s=e.substring(a+9,t);if(r=this.saveTextToParentTag(r,n,i),this.options.cdataPropName)n.add(this.options.cdataPropName,[{[this.options.textNodeName]:s}]);else{let e=this.parseTextData(s,n.tagname,i,!0,!1,!0);null==e&&(e=""),n.add(this.options.textNodeName,e)}a=t+2}else{let o=w(e,a,this.options.removeNSPrefix),c=o.tagName,u=o.tagExp,l=o.attrExpPresent,d=o.closeIndex;this.options.transformTagName&&(c=this.options.transformTagName(c)),n&&r&&"!xml"!==n.tagname&&(r=this.saveTextToParentTag(r,n,i,!1));const p=n;if(p&&-1!==this.options.unpairedTags.indexOf(p.tagname)&&(n=this.tagsNodeStack.pop(),i=i.substring(0,i.lastIndexOf("."))),c!==t.tagname&&(i+=i?"."+c:c),this.isItStopNode(this.options.stopNodes,i,c)){let t="";if(u.length>0&&u.lastIndexOf("/")===u.length-1)a=o.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(c))a=o.closeIndex;else{const n=this.readStopNodeData(e,c,d+1);if(!n)throw new Error(`Unexpected end of ${c}`);a=n.i,t=n.tagContent}const r=new s(c);c!==u&&l&&(r[":@"]=this.buildAttributesMap(u,i,c)),t&&(t=this.parseTextData(t,c,i,!0,l,!0,!0)),i=i.substr(0,i.lastIndexOf(".")),r.add(this.options.textNodeName,t),this.addChild(n,r,i)}else{if(u.length>0&&u.lastIndexOf("/")===u.length-1){"/"===c[c.length-1]?(c=c.substr(0,c.length-1),u=c):u=u.substr(0,u.length-1),this.options.transformTagName&&(c=this.options.transformTagName(c));const e=new s(c);c!==u&&l&&(e[":@"]=this.buildAttributesMap(u,i,c)),this.addChild(n,e,i),i=i.substr(0,i.lastIndexOf("."))}else{const e=new s(c);this.tagsNodeStack.push(n),c!==u&&l&&(e[":@"]=this.buildAttributesMap(u,i,c)),this.addChild(n,e,i),n=e}r="",a=d}}else r+=e[a];return t.child};function h(e,t,n){const r=this.options.updateTag(t.tagname,n,t[":@"]);!1===r||("string"==typeof r?(t.tagname=r,e.addChild(t)):e.addChild(t))}const f=function(e){if(this.options.processEntities){for(let t in this.docTypeEntities){const n=this.docTypeEntities[t];e=e.replace(n.regx,n.val)}for(let t in this.lastEntities){const n=this.lastEntities[t];e=e.replace(n.regex,n.val)}if(this.options.htmlEntities)for(let t in this.htmlEntities){const n=this.htmlEntities[t];e=e.replace(n.regex,n.val)}e=e.replace(this.ampEntity.regex,this.ampEntity.val)}return e};function m(e,t,n,r){return e&&(void 0===r&&(r=0===Object.keys(t.child).length),void 0!==(e=this.parseTextData(e,t.tagname,n,!1,!!t[":@"]&&0!==Object.keys(t[":@"]).length,r))&&""!==e&&t.add(this.options.textNodeName,e),e=""),e}function g(e,t,n){const r="*."+n;for(const n in e){const s=e[n];if(r===s||t===s)return!0}return!1}function y(e,t,n,r){const s=e.indexOf(t,n);if(-1===s)throw new Error(r);return s+t.length-1}function w(e,t,n,r=">"){const s=function(e,t,n=">"){let r,s="";for(let o=t;o<e.length;o++){let t=e[o];if(r)t===r&&(r="");else if('"'===t||"'"===t)r=t;else if(t===n[0]){if(!n[1])return{data:s,index:o};if(e[o+1]===n[1])return{data:s,index:o}}else"\t"===t&&(t=" ");s+=t}}(e,t+1,r);if(!s)return;let o=s.data;const i=s.index,a=o.search(/\s/);let c=o,u=!0;if(-1!==a&&(c=o.substr(0,a).replace(/\s\s*$/,""),o=o.substr(a+1)),n){const e=c.indexOf(":");-1!==e&&(c=c.substr(e+1),u=c!==s.data.substr(e+1))}return{tagName:c,tagExp:o,closeIndex:i,attrExpPresent:u}}function _(e,t,n){const r=n;let s=1;for(;n<e.length;n++)if("<"===e[n])if("/"===e[n+1]){const o=y(e,">",n,`${t} is not closed`);if(e.substring(n+2,o).trim()===t&&(s--,0===s))return{tagContent:e.substring(r,n),i:o};n=o}else if("?"===e[n+1])n=y(e,"?>",n+1,"StopNode is not closed.");else if("!--"===e.substr(n+1,3))n=y(e,"--\x3e",n+3,"StopNode is not closed.");else if("!["===e.substr(n+1,2))n=y(e,"]]>",n,"StopNode is not closed.")-2;else{const r=w(e,n,">");r&&((r&&r.tagName)===t&&"/"!==r.tagExp[r.tagExp.length-1]&&s++,n=r.closeIndex)}}function v(e,t,n){if(t&&"string"==typeof e){const t=e.trim();return"true"===t||"false"!==t&&i(e,n)}return r.isExist(e)?e:""}e.exports=class{constructor(e){this.options=e,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={apos:{regex:/&(apos|#39|#x27);/g,val:"'"},gt:{regex:/&(gt|#62|#x3E);/g,val:">"},lt:{regex:/&(lt|#60|#x3C);/g,val:"<"},quot:{regex:/&(quot|#34|#x22);/g,val:'"'}},this.ampEntity={regex:/&(amp|#38|#x26);/g,val:"&"},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:" "},cent:{regex:/&(cent|#162);/g,val:"¢"},pound:{regex:/&(pound|#163);/g,val:"£"},yen:{regex:/&(yen|#165);/g,val:"¥"},euro:{regex:/&(euro|#8364);/g,val:"€"},copyright:{regex:/&(copy|#169);/g,val:"©"},reg:{regex:/&(reg|#174);/g,val:"®"},inr:{regex:/&(inr|#8377);/g,val:"₹"}},this.addExternalEntities=a,this.parseXml=p,this.parseTextData=c,this.resolveNameSpace=u,this.buildAttributesMap=d,this.isItStopNode=g,this.replaceEntitiesValue=f,this.readStopNodeData=_,this.saveTextToParentTag=m,this.addChild=h}}},8844:(e,t,n)=>{const{buildOptions:r}=n(6745),s=n(1078),{prettify:o}=n(6997),i=n(8501);e.exports=class{constructor(e){this.externalEntities={},this.options=r(e)}parse(e,t){if("string"==typeof e);else{if(!e.toString)throw new Error("XML data is accepted in String or Bytes[] form.");e=e.toString()}if(t){!0===t&&(t={});const n=i.validate(e,t);if(!0!==n)throw Error(`${n.err.msg}:${n.err.line}:${n.err.col}`)}const n=new s(this.options);n.addExternalEntities(this.externalEntities);const r=n.parseXml(e);return this.options.preserveOrder||void 0===r?r:o(r,this.options)}addEntity(e,t){if(-1!==t.indexOf("&"))throw new Error("Entity value can't have '&'");if(-1!==e.indexOf("&")||-1!==e.indexOf(";"))throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");if("&"===t)throw new Error("An entity with value '&' is not permitted");this.externalEntities[e]=t}}},6997:(e,t)=>{"use strict";function n(e,t,i){let a;const c={};for(let u=0;u<e.length;u++){const l=e[u],d=r(l);let p="";if(p=void 0===i?d:i+"."+d,d===t.textNodeName)void 0===a?a=l[d]:a+=""+l[d];else{if(void 0===d)continue;if(l[d]){let e=n(l[d],t,p);const r=o(e,t);l[":@"]?s(e,l[":@"],p,t):1!==Object.keys(e).length||void 0===e[t.textNodeName]||t.alwaysCreateTextNode?0===Object.keys(e).length&&(t.alwaysCreateTextNode?e[t.textNodeName]="":e=""):e=e[t.textNodeName],void 0!==c[d]&&c.hasOwnProperty(d)?(Array.isArray(c[d])||(c[d]=[c[d]]),c[d].push(e)):t.isArray(d,p,r)?c[d]=[e]:c[d]=e}}}return"string"==typeof a?a.length>0&&(c[t.textNodeName]=a):void 0!==a&&(c[t.textNodeName]=a),c}function r(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function s(e,t,n,r){if(t){const s=Object.keys(t),o=s.length;for(let i=0;i<o;i++){const o=s[i];r.isArray(o,n+"."+o,!0,!0)?e[o]=[t[o]]:e[o]=t[o]}}}function o(e,t){const{textNodeName:n}=t,r=Object.keys(e).length;return 0===r||!(1!==r||!e[n]&&"boolean"!=typeof e[n]&&0!==e[n])}t.prettify=function(e,t){return n(e,t)}},6311:e=>{"use strict";e.exports=class{constructor(e){this.tagname=e,this.child=[],this[":@"]={}}add(e,t){"__proto__"===e&&(e="#__proto__"),this.child.push({[e]:t})}addChild(e){"__proto__"===e.tagname&&(e.tagname="#__proto__"),e[":@"]&&Object.keys(e[":@"]).length>0?this.child.push({[e.tagname]:e.child,":@":e[":@"]}):this.child.push({[e.tagname]:e.child})}}},4153:e=>{const t=/^[-+]?0x[a-fA-F0-9]+$/,n=/^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const r={hex:!0,leadingZeros:!0,decimalPoint:".",eNotation:!0};e.exports=function(e,s={}){if(s=Object.assign({},r,s),!e||"string"!=typeof e)return e;let o=e.trim();if(void 0!==s.skipLike&&s.skipLike.test(o))return e;if(s.hex&&t.test(o))return Number.parseInt(o,16);{const t=n.exec(o);if(t){const n=t[1],r=t[2];let a=(i=t[3])&&-1!==i.indexOf(".")?("."===(i=i.replace(/0+$/,""))?i="0":"."===i[0]?i="0"+i:"."===i[i.length-1]&&(i=i.substr(0,i.length-1)),i):i;const c=t[4]||t[6];if(!s.leadingZeros&&r.length>0&&n&&"."!==o[2])return e;if(!s.leadingZeros&&r.length>0&&!n&&"."!==o[1])return e;{const t=Number(o),i=""+t;return-1!==i.search(/[eE]/)||c?s.eNotation?t:e:-1!==o.indexOf(".")?"0"===i&&""===a||i===a||n&&i==="-"+a?t:e:r?a===i||n+a===i?t:e:o===i||o===n+i?t:e}}return e}var i}},2361:e=>{"use strict";e.exports=require("events")},7147:e=>{"use strict";e.exports=require("fs")},2037:e=>{"use strict";e.exports=require("os")},1017:e=>{"use strict";e.exports=require("path")},7282:e=>{"use strict";e.exports=require("process")},5062:e=>{"use strict";e.exports=JSON.parse('{"name":"aws-crt","version":"1.15.20","description":"NodeJS/browser bindings to the aws-c-* libraries","homepage":"https://github.com/awslabs/aws-crt-nodejs","repository":{"type":"git","url":"git+https://github.com/awslabs/aws-crt-nodejs.git"},"contributors":["AWS Common Runtime Team <aws-sdk-common-runtime@amazon.com>"],"license":"Apache-2.0","main":"./dist/index.js","browser":"./dist.browser/browser.js","types":"./dist/index.d.ts","scripts":{"tsc":"node ./scripts/tsc.js","test":"npm run test:native","test:node":"npm run test:native","test:native":"npx jest --runInBand --verbose --config test/native/jest.config.js --forceExit","test:browser":"npx jest --runInBand --verbose --config test/browser/jest.config.js --forceExit","test:browser:ci":"npm run install:puppeteer && npm run test:browser","install:puppeteer":"npm install --save-dev jest-puppeteer puppeteer @types/puppeteer","prepare":"node ./scripts/tsc.js && node ./scripts/install.js","install":"node ./scripts/install.js"},"devDependencies":{"@types/crypto-js":"^3.1.43","@types/jest":"^27.0.1","@types/node":"^10.17.54","@types/prettier":"2.6.0","@types/puppeteer":"^5.4.7","@types/uuid":"^3.4.8","@types/ws":"^7.4.7","aws-sdk":"^2.848.0","cmake-js":"^6.3.2","https-proxy-agent":"^5.0.1","jest":"^27.2.1","jest-puppeteer":"^5.0.4","jest-runtime":"^27.2.1","puppeteer":"^3.3.0","tar":"^6.1.11","ts-jest":"^27.0.5","typedoc":"^0.22.18","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.7.4","uuid":"^8.3.2","yargs":"^17.2.1"},"dependencies":{"@aws-sdk/util-utf8-browser":"^3.109.0","@httptoolkit/websocket-stream":"^6.0.0","axios":"^0.24.0","buffer":"^6.0.3","cmake-js":"^6.3.2","crypto-js":"^4.0.0","mqtt":"^4.3.7","process":"^0.11.10","tar":"^6.1.11"}}')}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";n.r(r),n.d(r,{default:()=>Ap});var e={};n.r(e),n.d(e,{getUserAgentPrefix:()=>Re,isVirtualHostableS3Bucket:()=>Le,parseArn:()=>ze,partition:()=>ke,setPartitionInfo:()=>Oe,useDefaultPartitionInfo:()=>Ne});var t,s,o,i,a,c={};n.r(c),n.d(c,{aws:()=>e,booleanEquals:()=>Be,getAttr:()=>He,isSet:()=>Ve,isValidHostLabel:()=>Fe,not:()=>We,parseURL:()=>Ze,stringEquals:()=>et,substring:()=>tt,uriEncode:()=>nt}),function(e){e.HEADER="header",e.QUERY="query"}(t||(t={})),function(e){e.HTTP="http",e.HTTPS="https"}(s||(s={})),(a=o||(o={}))[a.HEADER=0]="HEADER",a[a.TRAILER=1]="TRAILER",function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(i||(i={}));class u{constructor(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.slice(-1)?`${e.protocol}:`:e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?`/${e.path}`:e.path:"/",this.username=e.username,this.password=e.password,this.fragment=e.fragment}static isInstance(e){if(!e)return!1;const t=e;return"method"in t&&"protocol"in t&&"hostname"in t&&"path"in t&&"object"==typeof t.query&&"object"==typeof t.headers}clone(){const e=new u({...this,headers:{...this.headers}});var t;return e.query&&(e.query=(t=e.query,Object.keys(t).reduce(((e,n)=>{const r=t[n];return{...e,[n]:Array.isArray(r)?[...r]:r}}),{}))),e}}class l{constructor(e){this.statusCode=e.statusCode,this.reason=e.reason,this.headers=e.headers||{},this.body=e.body}static isInstance(e){if(!e)return!1;const t=e;return"number"==typeof t.statusCode&&"object"==typeof t.headers}}const d={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},p=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{if(!u.isInstance(n.request))return t(n);const{request:r}=n,{handlerProtocol:s=""}=e.requestHandler.metadata||{};if(s.indexOf("h2")>=0&&!r.headers[":authority"])delete r.headers.host,r.headers[":authority"]="";else if(!r.headers.host){let e=r.hostname;null!=r.port&&(e+=`:${r.port}`),r.headers.host=e}return t(n)})(e),d)}}),h={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},f=e=>({applyToStack:e=>{e.add(((e,t)=>async n=>{try{const r=await e(n),{clientName:s,commandName:o,logger:i,dynamoDbDocumentClientOptions:a={}}=t,{overrideInputFilterSensitiveLog:c,overrideOutputFilterSensitiveLog:u}=a,l=c??t.inputFilterSensitiveLog,d=u??t.outputFilterSensitiveLog,{$metadata:p,...h}=r.output;return i?.info?.({clientName:s,commandName:o,input:l(n.input),output:d(h),metadata:p}),r}catch(e){const{clientName:r,commandName:s,logger:o,dynamoDbDocumentClientOptions:i={}}=t,{overrideInputFilterSensitiveLog:a}=i,c=a??t.inputFilterSensitiveLog;throw o?.error?.({clientName:r,commandName:s,input:c(n.input),error:e,metadata:e.$metadata}),e}}),h)}}),m="X-Amzn-Trace-Id",g={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"},y=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{const{request:r}=n;if(!u.isInstance(r)||"node"!==e.runtime||r.headers.hasOwnProperty(m))return t(n);const s=process.env.AWS_LAMBDA_FUNCTION_NAME,o=process.env._X_AMZN_TRACE_ID,i=e=>"string"==typeof e&&e.length>0;return i(s)&&i(o)&&(r.headers[m]=o),t({...n,request:r})})(e),g)}}),w=(e,t,n)=>{let r,s,o,i=!1;const a=async()=>{s||(s=e());try{r=await s,o=!0,i=!1}finally{s=void 0}return r};return void 0===t?async e=>(o&&!e?.forceRefresh||(r=await a()),r):async e=>(o&&!e?.forceRefresh||(r=await a()),i?r:n&&!n(r)?(i=!0,r):t(r)?(await a(),r):r)};n(4079);const _={},v={};for(let e=0;e<256;e++){let t=e.toString(16).toLowerCase();1===t.length&&(t=`0${t}`),_[e]=t,v[t]=e}function b(e){let t="";for(let n=0;n<e.byteLength;n++)t+=_[e[n]];return t}class E{constructor(e){if(this.bytes=e,8!==e.byteLength)throw new Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(`${e} is too large (or, if negative, too small) to represent as an Int64`);const t=new Uint8Array(8);for(let n=7,r=Math.abs(Math.round(e));n>-1&&r>0;n--,r/=256)t[n]=r;return e<0&&S(t),new E(t)}valueOf(){const e=this.bytes.slice(0),t=128&e[0];return t&&S(e),parseInt(b(e),16)*(t?-1:1)}toString(){return String(this.valueOf())}}function S(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,0===e[t]);t--);}class x{constructor(e,t){this.toUtf8=e,this.fromUtf8=t}format(e){const t=[];for(const n of Object.keys(e)){const r=this.fromUtf8(n);t.push(Uint8Array.from([r.byteLength]),r,this.formatHeaderValue(e[n]))}const n=new Uint8Array(t.reduce(((e,t)=>e+t.byteLength),0));let r=0;for(const e of t)n.set(e,r),r+=e.byteLength;return n}formatHeaderValue(e){switch(e.type){case"boolean":return Uint8Array.from([e.value?0:1]);case"byte":return Uint8Array.from([2,e.value]);case"short":const t=new DataView(new ArrayBuffer(3));return t.setUint8(0,3),t.setInt16(1,e.value,!1),new Uint8Array(t.buffer);case"integer":const n=new DataView(new ArrayBuffer(5));return n.setUint8(0,4),n.setInt32(1,e.value,!1),new Uint8Array(n.buffer);case"long":const r=new Uint8Array(9);return r[0]=5,r.set(e.value.bytes,1),r;case"binary":const s=new DataView(new ArrayBuffer(3+e.value.byteLength));s.setUint8(0,6),s.setUint16(1,e.value.byteLength,!1);const o=new Uint8Array(s.buffer);return o.set(e.value,3),o;case"string":const i=this.fromUtf8(e.value),a=new DataView(new ArrayBuffer(3+i.byteLength));a.setUint8(0,7),a.setUint16(1,i.byteLength,!1);const c=new Uint8Array(a.buffer);return c.set(i,3),c;case"timestamp":const u=new Uint8Array(9);return u[0]=8,u.set(E.fromNumber(e.value.valueOf()).bytes,1),u;case"uuid":if(!M.test(e.value))throw new Error(`Invalid UUID received: ${e.value}`);const l=new Uint8Array(17);return l[0]=9,l.set(function(e){if(e.length%2!=0)throw new Error("Hex encoded strings must have an even number length");const t=new Uint8Array(e.length/2);for(let n=0;n<e.length;n+=2){const r=e.slice(n,n+2).toLowerCase();if(!(r in v))throw new Error(`Cannot decode unrecognized sequence ${r} as hexadecimal`);t[n/2]=v[r]}return t}(e.value.replace(/\-/g,"")),1),l}}parse(e){const t={};let n=0;for(;n<e.byteLength;){const r=e.getUint8(n++),s=this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+n,r));switch(n+=r,e.getUint8(n++)){case 0:t[s]={type:C,value:!0};break;case 1:t[s]={type:C,value:!1};break;case 2:t[s]={type:T,value:e.getInt8(n++)};break;case 3:t[s]={type:A,value:e.getInt16(n,!1)},n+=2;break;case 4:t[s]={type:I,value:e.getInt32(n,!1)},n+=4;break;case 5:t[s]={type:k,value:new E(new Uint8Array(e.buffer,e.byteOffset+n,8))},n+=8;break;case 6:const r=e.getUint16(n,!1);n+=2,t[s]={type:O,value:new Uint8Array(e.buffer,e.byteOffset+n,r)},n+=r;break;case 7:const o=e.getUint16(n,!1);n+=2,t[s]={type:N,value:this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+n,o))},n+=o;break;case 8:t[s]={type:R,value:new Date(new E(new Uint8Array(e.buffer,e.byteOffset+n,8)).valueOf())},n+=8;break;case 9:const i=new Uint8Array(e.buffer,e.byteOffset+n,16);n+=16,t[s]={type:D,value:`${b(i.subarray(0,4))}-${b(i.subarray(4,6))}-${b(i.subarray(6,8))}-${b(i.subarray(8,10))}-${b(i.subarray(10))}`};break;default:throw new Error("Unrecognized header type tag")}}return t}}var P;!function(e){e[e.boolTrue=0]="boolTrue",e[e.boolFalse=1]="boolFalse",e[e.byte=2]="byte",e[e.short=3]="short",e[e.integer=4]="integer",e[e.long=5]="long",e[e.byteArray=6]="byteArray",e[e.string=7]="string",e[e.timestamp=8]="timestamp",e[e.uuid=9]="uuid"}(P||(P={}));const C="boolean",T="byte",A="short",I="integer",k="long",O="binary",N="string",R="timestamp",D="uuid",M=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;Symbol.asyncIterator,Symbol.asyncIterator,Symbol.asyncIterator,Symbol.asyncIterator;const $=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t},j=e=>"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||"[object ArrayBuffer]"===Object.prototype.toString.call(e),q=require("buffer"),U=(e,t=0,n=e.byteLength-t)=>{if(!j(e))throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof e} (${e})`);return q.Buffer.from(e,t,n)},F=(e,t)=>{if("string"!=typeof e)throw new TypeError(`The "input" argument must be of type string. Received type ${typeof e} (${e})`);return t?q.Buffer.from(e,t):q.Buffer.from(e)},L=e=>{const t=F(e,"utf8");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength/Uint8Array.BYTES_PER_ELEMENT)},z=e=>"string"==typeof e?L(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e),B=e=>U(e.buffer,e.byteOffset,e.byteLength).toString("utf8"),H="X-Amz-Date",V="X-Amz-Signature",W="X-Amz-Security-Token",K="authorization",G=H.toLowerCase(),Q=[K,G,"date"],X=V.toLowerCase(),J="x-amz-content-sha256",Y=W.toLowerCase(),Z={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},ee=/^proxy-/,te=/^sec-/,ne="AWS4-HMAC-SHA256",re="AWS4-HMAC-SHA256-PAYLOAD",se="aws4_request",oe={},ie=[],ae=(e,t,n)=>`${e}/${t}/${n}/${se}`,ce=(e,t,n)=>{const r=new e(t);return r.update(z(n)),r.digest()},ue=({headers:e},t,n)=>{const r={};for(const s of Object.keys(e).sort()){if(null==e[s])continue;const o=s.toLowerCase();(o in Z||t?.has(o)||ee.test(o)||te.test(o))&&(!n||n&&!n.has(o))||(r[o]=e[s].trim().replace(/\s+/g," "))}return r},le=e=>encodeURIComponent(e).replace(/[!'()*]/g,de),de=e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`,pe=async({headers:e,body:t},n)=>{for(const t of Object.keys(e))if(t.toLowerCase()===J)return e[t];if(null==t)return"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";if("string"==typeof t||ArrayBuffer.isView(t)||j(t)){const e=new n;return e.update(z(t)),b(await e.digest())}return"UNSIGNED-PAYLOAD"},he=({headers:e,query:t,...n})=>({...n,headers:{...e},query:t?fe(t):void 0}),fe=e=>Object.keys(e).reduce(((t,n)=>{const r=e[n];return{...t,[n]:Array.isArray(r)?[...r]:r}}),{}),me=e=>{e="function"==typeof e.clone?e.clone():he(e);for(const t of Object.keys(e.headers))Q.indexOf(t.toLowerCase())>-1&&delete e.headers[t];return e};class ge{constructor({applyChecksum:e,credentials:t,region:n,service:r,sha256:s,uriEscapePath:o=!0}){this.headerMarshaller=new x(B,L),this.service=r,this.sha256=s,this.uriEscapePath=o,this.applyChecksum="boolean"!=typeof e||e,this.regionProvider=$(n),this.credentialProvider=$(t)}async presign(e,t={}){const{signingDate:n=new Date,expiresIn:r=3600,unsignableHeaders:s,unhoistableHeaders:o,signableHeaders:i,signingRegion:a,signingService:c}=t,u=await this.credentialProvider();this.validateResolvedCredentials(u);const l=a??await this.regionProvider(),{longDate:d,shortDate:p}=ye(n);if(r>604800)return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");const h=ae(p,l,c??this.service),f=((e,t={})=>{const{headers:n,query:r={}}="function"==typeof e.clone?e.clone():he(e);for(const e of Object.keys(n)){const s=e.toLowerCase();"x-amz-"!==s.slice(0,6)||t.unhoistableHeaders?.has(s)||(r[e]=n[e],delete n[e])}return{...e,headers:n,query:r}})(me(e),{unhoistableHeaders:o});u.sessionToken&&(f.query[W]=u.sessionToken),f.query["X-Amz-Algorithm"]=ne,f.query["X-Amz-Credential"]=`${u.accessKeyId}/${h}`,f.query[H]=d,f.query["X-Amz-Expires"]=r.toString(10);const m=ue(f,s,i);return f.query["X-Amz-SignedHeaders"]=we(m),f.query[V]=await this.getSignature(d,h,this.getSigningKey(u,l,p,c),this.createCanonicalRequest(f,m,await pe(e,this.sha256))),f}async sign(e,t){return"string"==typeof e?this.signString(e,t):e.headers&&e.payload?this.signEvent(e,t):e.message?this.signMessage(e,t):this.signRequest(e,t)}async signEvent({headers:e,payload:t},{signingDate:n=new Date,priorSignature:r,signingRegion:s,signingService:o}){const i=s??await this.regionProvider(),{shortDate:a,longDate:c}=ye(n),u=ae(a,i,o??this.service),l=await pe({headers:{},body:t},this.sha256),d=new this.sha256;d.update(e);const p=b(await d.digest()),h=[re,c,u,r,p,l].join("\n");return this.signString(h,{signingDate:n,signingRegion:i,signingService:o})}async signMessage(e,{signingDate:t=new Date,signingRegion:n,signingService:r}){return this.signEvent({headers:this.headerMarshaller.format(e.message.headers),payload:e.message.body},{signingDate:t,signingRegion:n,signingService:r,priorSignature:e.priorSignature}).then((t=>({message:e.message,signature:t})))}async signString(e,{signingDate:t=new Date,signingRegion:n,signingService:r}={}){const s=await this.credentialProvider();this.validateResolvedCredentials(s);const o=n??await this.regionProvider(),{shortDate:i}=ye(t),a=new this.sha256(await this.getSigningKey(s,o,i,r));return a.update(z(e)),b(await a.digest())}async signRequest(e,{signingDate:t=new Date,signableHeaders:n,unsignableHeaders:r,signingRegion:s,signingService:o}={}){const i=await this.credentialProvider();this.validateResolvedCredentials(i);const a=s??await this.regionProvider(),c=me(e),{longDate:u,shortDate:l}=ye(t),d=ae(l,a,o??this.service);c.headers[G]=u,i.sessionToken&&(c.headers[Y]=i.sessionToken);const p=await pe(c,this.sha256);!((e,t)=>{e=e.toLowerCase();for(const n of Object.keys(t))if(e===n.toLowerCase())return!0;return!1})(J,c.headers)&&this.applyChecksum&&(c.headers[J]=p);const h=ue(c,r,n),f=await this.getSignature(u,d,this.getSigningKey(i,a,l,o),this.createCanonicalRequest(c,h,p));return c.headers[K]=`${ne} Credential=${i.accessKeyId}/${d}, SignedHeaders=${we(h)}, Signature=${f}`,c}createCanonicalRequest(e,t,n){const r=Object.keys(t).sort();return`${e.method}\n${this.getCanonicalPath(e)}\n${(({query:e={}})=>{const t=[],n={};for(const r of Object.keys(e).sort()){if(r.toLowerCase()===X)continue;t.push(r);const s=e[r];"string"==typeof s?n[r]=`${le(r)}=${le(s)}`:Array.isArray(s)&&(n[r]=s.slice(0).sort().reduce(((e,t)=>e.concat([`${le(r)}=${le(t)}`])),[]).join("&"))}return t.map((e=>n[e])).filter((e=>e)).join("&")})(e)}\n${r.map((e=>`${e}:${t[e]}`)).join("\n")}\n\n${r.join(";")}\n${n}`}async createStringToSign(e,t,n){const r=new this.sha256;r.update(z(n));const s=await r.digest();return`${ne}\n${e}\n${t}\n${b(s)}`}getCanonicalPath({path:e}){if(this.uriEscapePath){const t=[];for(const n of e.split("/"))0!==n?.length&&"."!==n&&(".."===n?t.pop():t.push(n));const n=`${e?.startsWith("/")?"/":""}${t.join("/")}${t.length>0&&e?.endsWith("/")?"/":""}`;return encodeURIComponent(n).replace(/%2F/g,"/")}return e}async getSignature(e,t,n,r){const s=await this.createStringToSign(e,t,r),o=new this.sha256(await n);return o.update(z(s)),b(await o.digest())}getSigningKey(e,t,n,r){return(async(e,t,n,r,s)=>{const o=`${n}:${r}:${s}:${b(await ce(e,t.secretAccessKey,t.accessKeyId))}:${t.sessionToken}`;if(o in oe)return oe[o];for(ie.push(o);ie.length>50;)delete oe[ie.shift()];let i=`AWS4${t.secretAccessKey}`;for(const t of[n,r,s,se])i=await ce(e,i,t);return oe[o]=i})(this.sha256,e,n,t,r||this.service)}validateResolvedCredentials(e){if("object"!=typeof e||"string"!=typeof e.accessKeyId||"string"!=typeof e.secretAccessKey)throw new Error("Resolved credential object is not valid")}}const ye=e=>{const t=(n=e,(e=>"number"==typeof e?new Date(1e3*e):"string"==typeof e?Number(e)?new Date(1e3*Number(e)):new Date(e):e)(n).toISOString().replace(/\.\d{3}Z$/,"Z")).replace(/[\-:]/g,"");var n;return{longDate:t,shortDate:t.slice(0,8)}},we=e=>Object.keys(e).sort().join(";"),_e=e=>{const t=e.credentials?ve(e.credentials):e.credentialDefaultProvider(e),{signingEscapePath:n=!0,systemClockOffset:r=e.systemClockOffset||0,sha256:s}=e;let o;return o=e.signer?$(e.signer):e.regionInfoProvider?()=>$(e.region)().then((async t=>[await e.regionInfoProvider(t,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},t])).then((([r,o])=>{const{signingRegion:i,signingService:a}=r;e.signingRegion=e.signingRegion||i||o,e.signingName=e.signingName||a||e.serviceId;const c={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:s,uriEscapePath:n};return new(e.signerConstructor||ge)(c)})):async r=>{const o=(r=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await $(e.region)(),properties:{}},r)).signingRegion,i=r.signingName;e.signingRegion=e.signingRegion||o,e.signingName=e.signingName||i||e.serviceId;const a={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:s,uriEscapePath:n};return new(e.signerConstructor||ge)(a)},{...e,systemClockOffset:r,signingEscapePath:n,credentials:t,signer:o}},ve=e=>"function"==typeof e?w(e,(e=>void 0!==e.expiration&&e.expiration.getTime()-Date.now()<3e5),(e=>void 0!==e.expiration)):$(e),be=e=>new Date(Date.now()+e),Ee=(e,t)=>{const n=Date.parse(e);return((e,t)=>Math.abs(be(t).getTime()-e)>=3e5)(n,t)?n-Date.now():t},Se=e=>l.isInstance(e)?e.headers?.date??e.headers?.Date:void 0,xe={name:"awsAuthMiddleware",tags:["SIGNATURE","AWSAUTH"],relation:"after",toMiddleware:"retryMiddleware",override:!0},Pe=e=>({applyToStack:t=>{t.addRelativeTo((e=>(t,n)=>async function(r){if(!u.isInstance(r.request))return t(r);const s=n.endpointV2?.properties?.authSchemes?.[0],o="sigv4a"===s?.name?s?.signingRegionSet?.join(","):void 0,i=await e.signer(s),a=await t({...r,request:await i.sign(r.request,{signingDate:be(e.systemClockOffset),signingRegion:o||n.signing_region,signingService:n.signing_service})}).catch((t=>{const n=t.ServerTime??Se(t.$response);throw n&&(e.systemClockOffset=Ee(n,e.systemClockOffset)),t})),c=Se(a.response);return c&&(e.systemClockOffset=Ee(c,e.systemClockOffset)),a})(e),xe)}});function Ce(e){return{...e,customUserAgent:"string"==typeof e.customUserAgent?[[e.customUserAgent]]:e.customUserAgent}}const Te=JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}');let Ae=Te,Ie="";const ke=e=>{const{partitions:t}=Ae;for(const n of t){const{regions:t,outputs:r}=n;for(const[n,s]of Object.entries(t))if(n===e)return{...r,...s}}for(const n of t){const{regionRegex:t,outputs:r}=n;if(new RegExp(t).test(e))return{...r}}const n=t.find((e=>"aws"===e.id));if(!n)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...n.outputs}},Oe=(e,t="")=>{Ae=e,Ie=t},Ne=()=>{Oe(Te,"")},Re=()=>Ie,De="endpoints";function Me(e){return"object"!=typeof e||null==e?e:"ref"in e?`$${Me(e.ref)}`:"fn"in e?`${e.fn}(${(e.argv||[]).map(Me).join(", ")})`:JSON.stringify(e,null,2)}class $e extends Error{constructor(e){super(e),this.name="EndpointError"}}const je=new RegExp("^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$"),qe=e=>je.test(e)||e.startsWith("[")&&e.endsWith("]"),Ue=new RegExp("^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$"),Fe=(e,t=!1)=>{if(!t)return Ue.test(e);const n=e.split(".");for(const e of n)if(!Fe(e))return!1;return!0},Le=(e,t=!1)=>{if(t){for(const t of e.split("."))if(!Le(t))return!1;return!0}return!(!Fe(e)||e.length<3||e.length>63||e!==e.toLowerCase()||qe(e))},ze=e=>{const t=e.split(":");if(t.length<6)return null;const[n,r,s,o,i,...a]=t;return"arn"!==n||""===r||""===s||""===a[0]?null:{partition:r,service:s,region:o,accountId:i,resourceId:a[0].includes("/")?a[0].split("/"):a}},Be=(e,t)=>e===t,He=(e,t)=>(e=>{const t=e.split("."),n=[];for(const r of t){const t=r.indexOf("[");if(-1!==t){if(r.indexOf("]")!==r.length-1)throw new $e(`Path: '${e}' does not end with ']'`);const s=r.slice(t+1,-1);if(Number.isNaN(parseInt(s)))throw new $e(`Invalid array index: '${s}' in path: '${e}'`);0!==t&&n.push(r.slice(0,t)),n.push(s)}else n.push(r)}return n})(t).reduce(((n,r)=>{if("object"!=typeof n)throw new $e(`Index '${r}' in '${t}' not found in '${JSON.stringify(e)}'`);return Array.isArray(n)?n[parseInt(r)]:n[r]}),e),Ve=e=>null!=e,We=e=>!e;var Ke,Ge,Qe,Xe,Je;!function(e){e.HEADER="header",e.QUERY="query"}(Ke||(Ke={})),function(e){e.HTTP="http",e.HTTPS="https"}(Ge||(Ge={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(Qe||(Qe={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(Xe||(Xe={})),function(e){e.AAAA="AAAA",e.A="A"}(Je||(Je={}));const Ye={[Ge.HTTP]:80,[Ge.HTTPS]:443},Ze=e=>{const t=(()=>{try{if(e instanceof URL)return e;if("object"==typeof e&&"hostname"in e){const{hostname:t,port:n,protocol:r="",path:s="",query:o={}}=e,i=new URL(`${r}//${t}${n?`:${n}`:""}${s}`);return i.search=Object.entries(o).map((([e,t])=>`${e}=${t}`)).join("&"),i}return new URL(e)}catch(e){return null}})();if(!t)return console.error(`Unable to parse ${JSON.stringify(e)} as a whatwg URL.`),null;const n=t.href,{host:r,hostname:s,pathname:o,protocol:i,search:a}=t;if(a)return null;const c=i.slice(0,-1);if(!Object.values(Ge).includes(c))return null;const u=qe(s);return{scheme:c,authority:`${r}${n.includes(`${r}:${Ye[c]}`)||"string"==typeof e&&e.includes(`${r}:${Ye[c]}`)?`:${Ye[c]}`:""}`,path:o,normalizedPath:o.endsWith("/")?o:`${o}/`,isIp:u}},et=(e,t)=>e===t,tt=(e,t,n,r)=>t>=n||e.length<n?null:r?e.substring(e.length-n,e.length-t):e.substring(t,n),nt=e=>encodeURIComponent(e).replace(/[!*'()]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`)),rt=(e,t)=>{const n=[],r={...t.endpointParams,...t.referenceRecord};let s=0;for(;s<e.length;){const t=e.indexOf("{",s);if(-1===t){n.push(e.slice(s));break}n.push(e.slice(s,t));const o=e.indexOf("}",t);if(-1===o){n.push(e.slice(t));break}"{"===e[t+1]&&"}"===e[o+1]&&(n.push(e.slice(t+1,o)),s=o+2);const i=e.substring(t+1,o);if(i.includes("#")){const[e,t]=i.split("#");n.push(He(r[e],t))}else n.push(r[i]);s=o+1}return n.join("")},st=(e,t,n)=>{if("string"==typeof e)return rt(e,n);if(e.fn)return ot(e,n);if(e.ref)return(({ref:e},t)=>({...t.endpointParams,...t.referenceRecord}[e]))(e,n);throw new $e(`'${t}': ${String(e)} is not a string, function or reference.`)},ot=({fn:e,argv:t},n)=>{const r=t.map((e=>["boolean","number"].includes(typeof e)?e:st(e,"arg",n)));return e.split(".").reduce(((e,t)=>e[t]),c)(...r)},it=({assign:e,...t},n)=>{if(e&&e in n.referenceRecord)throw new $e(`'${e}' is already defined in Reference Record.`);const r=ot(t,n);return n.logger?.debug?.(De,`evaluateCondition: ${Me(t)} = ${Me(r)}`),{result:""===r||!!r,...null!=e&&{toAssign:{name:e,value:r}}}},at=(e=[],t)=>{const n={};for(const r of e){const{result:e,toAssign:s}=it(r,{...t,referenceRecord:{...t.referenceRecord,...n}});if(!e)return{result:e};s&&(n[s.name]=s.value,t.logger?.debug?.(De,`assign: ${s.name} := ${Me(s.value)}`))}return{result:!0,referenceRecord:n}},ct=(e,t)=>Object.entries(e).reduce(((e,[n,r])=>({...e,[n]:r.map((e=>{const r=st(e,"Header value entry",t);if("string"!=typeof r)throw new $e(`Header '${n}' value '${r}' is not a string`);return r}))})),{}),ut=(e,t)=>{if(Array.isArray(e))return e.map((e=>ut(e,t)));switch(typeof e){case"string":return rt(e,t);case"object":if(null===e)throw new $e(`Unexpected endpoint property: ${e}`);return lt(e,t);case"boolean":return e;default:throw new $e("Unexpected endpoint property type: "+typeof e)}},lt=(e,t)=>Object.entries(e).reduce(((e,[n,r])=>({...e,[n]:ut(r,t)})),{}),dt=(e,t)=>{const n=st(e,"Endpoint URL",t);if("string"==typeof n)try{return new URL(n)}catch(e){throw console.error(`Failed to construct URL with ${n}`,e),e}throw new $e("Endpoint URL must be a string, got "+typeof n)},pt=(e,t)=>{const{conditions:n,endpoint:r}=e,{result:s,referenceRecord:o}=at(n,t);if(!s)return;const i={...t,referenceRecord:{...t.referenceRecord,...o}},{url:a,properties:c,headers:u}=r;return t.logger?.debug?.(De,`Resolving endpoint from template: ${Me(r)}`),{...null!=u&&{headers:ct(u,i)},...null!=c&&{properties:lt(c,i)},url:dt(a,i)}},ht=(e,t)=>{const{conditions:n,error:r}=e,{result:s,referenceRecord:o}=at(n,t);if(s)throw new $e(st(r,"Error",{...t,referenceRecord:{...t.referenceRecord,...o}}))},ft=(e,t)=>{const{conditions:n,rules:r}=e,{result:s,referenceRecord:o}=at(n,t);if(s)return mt(r,{...t,referenceRecord:{...t.referenceRecord,...o}})},mt=(e,t)=>{for(const n of e)if("endpoint"===n.type){const e=pt(n,t);if(e)return e}else if("error"===n.type)ht(n,t);else{if("tree"!==n.type)throw new $e(`Unknown endpoint rule: ${n}`);{const e=ft(n,t);if(e)return e}}throw new $e("Rules evaluation failed")},gt=(e,t)=>{const{endpointParams:n,logger:r}=t,{parameters:s,rules:o}=e;t.logger?.debug?.(`${De} Initial EndpointParams: ${Me(n)}`);const i=Object.entries(s).filter((([,e])=>null!=e.default)).map((([e,t])=>[e,t.default]));if(i.length>0)for(const[e,t]of i)n[e]=n[e]??t;const a=Object.entries(s).filter((([,e])=>e.required)).map((([e])=>e));for(const e of a)if(null==n[e])throw new $e(`Missing required parameter: '${e}'`);const c=mt(o,{endpointParams:n,logger:r,referenceRecord:{}});if(t.endpointParams?.Endpoint)try{const e=new URL(t.endpointParams.Endpoint),{protocol:n,port:r}=e;c.url.protocol=n,c.url.port=r}catch(e){}return t.logger?.debug?.(`${De} Resolved endpoint: ${Me(c)}`),c},yt="user-agent",wt="x-amz-user-agent",_t=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,vt=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,bt=e=>{const t=e[0].split("/").map((e=>e.replace(_t,"-"))).join("/"),n=e[1]?.replace(vt,"-"),r=t.indexOf("/"),s=t.substring(0,r);let o=t.substring(r+1);return"api"===s&&(o=o.toLowerCase()),[s,o,n].filter((e=>e&&e.length>0)).reduce(((e,t,n)=>{switch(n){case 0:return t;case 1:return`${e}/${t}`;default:return`${e}#${t}`}}),"")},Et={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},St=e=>({applyToStack:t=>{var n;t.add((n=e,(e,t)=>async r=>{const{request:s}=r;if(!u.isInstance(s))return e(r);const{headers:o}=s,i=t?.userAgent?.map(bt)||[],a=(await n.defaultUserAgentProvider()).map(bt),c=n?.customUserAgent?.map(bt)||[],l=Re(),d=(l?[l]:[]).concat([...a,...i,...c]).join(" "),p=[...a.filter((e=>e.startsWith("aws-sdk-"))),...c].join(" ");return"browser"!==n.runtime?(p&&(o[wt]=o[wt]?`${o[yt]} ${p}`:p),o[yt]=d):o[wt]=d,e({...r,request:s})}),Et)}});var xt;!function(e){e.ENV="env",e.CONFIG="shared config entry"}(xt||(xt={}));const Pt=(e,t,n)=>{if(t in e){if("true"===e[t])return!0;if("false"===e[t])return!1;throw new Error(`Cannot load ${n} "${t}". Expected "true" or "false", got ${e[t]}.`)}},Ct={environmentVariableSelector:e=>Pt(e,"AWS_USE_DUALSTACK_ENDPOINT",xt.ENV),configFileSelector:e=>Pt(e,"use_dualstack_endpoint",xt.CONFIG),default:!1},Tt={environmentVariableSelector:e=>Pt(e,"AWS_USE_FIPS_ENDPOINT",xt.ENV),configFileSelector:e=>Pt(e,"use_fips_endpoint",xt.CONFIG),default:!1},At={environmentVariableSelector:e=>e.AWS_REGION,configFileSelector:e=>e.region,default:()=>{throw new Error("Region is missing")}},It={preferredFile:"credentials"},kt=e=>"string"==typeof e&&(e.startsWith("fips-")||e.endsWith("-fips")),Ot=e=>kt(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e,Nt=e=>{const{region:t,useFipsEndpoint:n}=e;if(!t)throw new Error("Region is missing");return{...e,region:async()=>{if("string"==typeof t)return Ot(t);const e=await t();return Ot(e)},useFipsEndpoint:async()=>{const e="string"==typeof t?t:await t();return!!kt(e)||("function"!=typeof n?Promise.resolve(!!n):n())}}},Rt="content-length",Dt={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},Mt=e=>({applyToStack:t=>{var n;t.add((n=e.bodyLengthChecker,e=>async t=>{const r=t.request;if(u.isInstance(r)){const{body:e,headers:t}=r;if(e&&-1===Object.keys(t).map((e=>e.toLowerCase())).indexOf(Rt))try{const t=n(e);r.headers={...r.headers,[Rt]:String(t)}}catch(e){}}return e({...t,request:r})}),Dt)}}),$t={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},jt={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function qt(e,t,n){return{applyToStack:r=>{r.add(((e,t)=>(n,r)=>async r=>{const{response:s}=await n(r);try{return{response:s,output:await t(s,e)}}catch(e){if(Object.defineProperty(e,"$response",{value:s}),!("$metadata"in e)){const t="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";e.message+="\n  "+t}throw e}})(e,n),$t),r.add(((e,t)=>(n,r)=>async s=>{const o=r.endpointV2?.url&&e.urlParser?async()=>e.urlParser(r.endpointV2.url):e.endpoint;if(!o)throw new Error("No valid endpoint provider available.");const i=await t(s.input,{...e,endpoint:o});return n({...s,request:i})})(e,t),jt)}}}const Ut=/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/,Ft=/(\d+\.){3}\d+/,Lt=/\.\./,zt=(e,t,n)=>{const r=async()=>{const r=n[e]??n[t];return"function"==typeof r?r():r};return"endpoint"===e||"endpoint"===t?async()=>{const e=await r();if(e&&"object"==typeof e){if("url"in e)return e.url.href;if("hostname"in e){const{protocol:t,hostname:n,port:r,path:s}=e;return`${t}//${n}${r?":"+r:""}${s}`}}return e}:r},Bt=async(e,t,n)=>{const r={},s=t?.getEndpointParameterInstructions?.()||{};for(const[t,o]of Object.entries(s))switch(o.type){case"staticContextParams":r[t]=o.value;break;case"contextParams":r[t]=e[o.name];break;case"clientContextParams":case"builtInParams":r[t]=await zt(o.name,t,n)();break;default:throw new Error("Unrecognized endpoint parameter instruction: "+JSON.stringify(o))}return 0===Object.keys(s).length&&Object.assign(r,n),"s3"===String(n.serviceId).toLowerCase()&&await(async e=>{const t=e?.Bucket||"";if("string"==typeof e.Bucket&&(e.Bucket=t.replace(/#/g,encodeURIComponent("#")).replace(/\?/g,encodeURIComponent("?"))),(e=>{const[t,n,r,s,o,i]=e.split(":"),a="arn"===t&&e.split(":").length>=6,c=5===[t,n,r,o,i].filter(Boolean).length;if(a&&!c)throw new Error(`Invalid ARN: ${e} was an invalid ARN.`);return!!("arn"===t&&n&&r&&o&&i)})(t)){if(!0===e.ForcePathStyle)throw new Error("Path-style addressing cannot be used with ARN buckets")}else n=t,(!Ut.test(n)||Ft.test(n)||Lt.test(n)||-1!==t.indexOf(".")&&!String(e.Endpoint).startsWith("http:")||t.toLowerCase()!==t||t.length<3)&&(e.ForcePathStyle=!0);var n;return e.DisableMultiRegionAccessPoints&&(e.disableMultiRegionAccessPoints=!0,e.DisableMRAP=!0),e})(r),r},Ht={step:"serialize",tags:["ENDPOINT_PARAMETERS","ENDPOINT_V2","ENDPOINT"],name:"endpointV2Middleware",override:!0,relation:"before",toMiddleware:jt.name},Vt=(e,t)=>({applyToStack:n=>{n.addRelativeTo((({config:e,instructions:t})=>(n,r)=>async s=>{const o=await(async(e,t,n,r)=>{const s=await Bt(e,t,n);if("function"!=typeof n.endpointProvider)throw new Error("config.endpointProvider is not set.");return n.endpointProvider(s,r)})(s.input,{getEndpointParameterInstructions:()=>t},{...e},r);r.endpointV2=o,r.authSchemes=o.properties?.authSchemes;const i=r.authSchemes?.[0];return i&&(r.signing_region=i.signingRegion,r.signing_service=i.signingName),n({...s})})({config:e,instructions:t}),Ht)}}),Wt=e=>{if("string"==typeof e)return Wt(new URL(e));const{hostname:t,pathname:n,port:r,protocol:s,search:o}=e;let i;return o&&(i=function(e){const t={};if(e=e.replace(/^\?/,""))for(const n of e.split("&")){let[e,r=null]=n.split("=");e=decodeURIComponent(e),r&&(r=decodeURIComponent(r)),e in t?Array.isArray(t[e])?t[e].push(r):t[e]=[t[e],r]:t[e]=r}return t}(o)),{hostname:t,port:r?parseInt(r):void 0,protocol:s,path:n,query:i}},Kt=e=>{const t=e.tls??!0,{endpoint:n}=e,r=null!=n?async()=>(e=>"object"==typeof e?"url"in e?Wt(e.url):e:Wt(e))(await $(n)()):void 0,s=!!n;return{...e,endpoint:r,tls:t,isCustomEndpoint:s,useDualstackEndpoint:$(e.useDualstackEndpoint??!1),useFipsEndpoint:$(e.useFipsEndpoint??!1)}};var Gt,Qt;(Qt=Gt||(Gt={})).STANDARD="standard",Qt.ADAPTIVE="adaptive";const Xt=Gt.STANDARD,Jt=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],Yt=["TimeoutError","RequestTimeout","RequestTimeoutException"],Zt=[500,502,503,504],en=["ECONNRESET","ECONNREFUSED","EPIPE","ETIMEDOUT"],tn=e=>429===e.$metadata?.httpStatusCode||Jt.includes(e.name)||1==e.$retryable?.throttling,nn=e=>Yt.includes(e.name)||en.includes(e?.code||"")||Zt.includes(e.$metadata?.httpStatusCode||0);class rn{constructor(e){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=e?.beta??.7,this.minCapacity=e?.minCapacity??1,this.minFillRate=e?.minFillRate??.5,this.scaleConstant=e?.scaleConstant??.4,this.smooth=e?.smooth??.8;const t=this.getCurrentTimeInSeconds();this.lastThrottleTime=t,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(e){if(this.enabled){if(this.refillTokenBucket(),e>this.currentCapacity){const t=(e-this.currentCapacity)/this.fillRate*1e3;await new Promise((e=>setTimeout(e,t)))}this.currentCapacity=this.currentCapacity-e}}refillTokenBucket(){const e=this.getCurrentTimeInSeconds();if(!this.lastTimestamp)return void(this.lastTimestamp=e);const t=(e-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+t),this.lastTimestamp=e}updateClientSendingRate(e){let t;if(this.updateMeasuredRate(),tn(e)){const e=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=e,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),t=this.cubicThrottle(e),this.enableTokenBucket()}else this.calculateTimeWindow(),t=this.cubicSuccess(this.getCurrentTimeInSeconds());const n=Math.min(t,2*this.measuredTxRate);this.updateTokenBucketRate(n)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(e){return this.getPrecise(e*this.beta)}cubicSuccess(e){return this.getPrecise(this.scaleConstant*Math.pow(e-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(e){this.refillTokenBucket(),this.fillRate=Math.max(e,this.minFillRate),this.maxCapacity=Math.max(e,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){const e=this.getCurrentTimeInSeconds(),t=Math.floor(2*e)/2;if(this.requestCount++,t>this.lastTxRateBucket){const e=this.requestCount/(t-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(e*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=t}}getPrecise(e){return parseFloat(e.toFixed(8))}}const sn=({retryDelay:e,retryCount:t,retryCost:n})=>({getRetryCount:()=>t,getRetryDelay:()=>Math.min(2e4,e),getRetryCost:()=>n});class on{constructor(e){this.maxAttempts=e,this.mode=Gt.STANDARD,this.capacity=500,this.retryBackoffStrategy=(()=>{let e=100;return{computeNextBackoffDelay:t=>Math.floor(Math.min(2e4,Math.random()*2**t*e)),setDelayBase:t=>{e=t}}})(),this.maxAttemptsProvider="function"==typeof e?e:async()=>e}async acquireInitialRetryToken(e){return sn({retryDelay:100,retryCount:0})}async refreshRetryTokenForRetry(e,t){const n=await this.getMaxAttempts();if(this.shouldRetry(e,t,n)){const n=t.errorType;this.retryBackoffStrategy.setDelayBase("THROTTLING"===n?500:100);const r=this.retryBackoffStrategy.computeNextBackoffDelay(e.getRetryCount()),s=t.retryAfterHint?Math.max(t.retryAfterHint.getTime()-Date.now()||0,r):r,o=this.getCapacityCost(n);return this.capacity-=o,sn({retryDelay:s,retryCount:e.getRetryCount()+1,retryCost:o})}throw new Error("No retry token available")}recordSuccess(e){this.capacity=Math.max(500,this.capacity+(e.getRetryCost()??1))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch(e){return console.warn("Max attempts provider could not resolve. Using default of 3"),3}}shouldRetry(e,t,n){return e.getRetryCount()+1<n&&this.capacity>=this.getCapacityCost(t.errorType)&&this.isRetryableError(t.errorType)}getCapacityCost(e){return"TRANSIENT"===e?10:5}isRetryableError(e){return"THROTTLING"===e||"TRANSIENT"===e}}class an{constructor(e,t){this.maxAttemptsProvider=e,this.mode=Gt.ADAPTIVE;const{rateLimiter:n}=t??{};this.rateLimiter=n??new rn,this.standardRetryStrategy=new on(e)}async acquireInitialRetryToken(e){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(e)}async refreshRetryTokenForRetry(e,t){return this.rateLimiter.updateClientSendingRate(t),this.standardRetryStrategy.refreshRetryTokenForRetry(e,t)}recordSuccess(e){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(e)}}const cn="AWS_MAX_ATTEMPTS",un="max_attempts",ln={environmentVariableSelector:e=>{const t=e[cn];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Environment variable ${cn} mast be a number, got "${t}"`);return n},configFileSelector:e=>{const t=e[un];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Shared config file entry ${un} mast be a number, got "${t}"`);return n},default:3},dn=e=>{const{retryStrategy:t}=e,n=$(e.maxAttempts??3);return{...e,maxAttempts:n,retryStrategy:async()=>t||(await $(e.retryMode)()===Gt.ADAPTIVE?new an(n):new on(n))}},pn={environmentVariableSelector:e=>e.AWS_RETRY_MODE,configFileSelector:e=>e.retry_mode,default:Xt},hn=require("crypto");var fn=n.n(hn);const mn=new Uint8Array(256);let gn=mn.length;function yn(){return gn>mn.length-16&&(fn().randomFillSync(mn),gn=0),mn.slice(gn,gn+=16)}const wn=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,_n=[];for(let e=0;e<256;++e)_n.push((e+256).toString(16).substr(1));const vn=function(e,t=0){const n=(_n[e[t+0]]+_n[e[t+1]]+_n[e[t+2]]+_n[e[t+3]]+"-"+_n[e[t+4]]+_n[e[t+5]]+"-"+_n[e[t+6]]+_n[e[t+7]]+"-"+_n[e[t+8]]+_n[e[t+9]]+"-"+_n[e[t+10]]+_n[e[t+11]]+_n[e[t+12]]+_n[e[t+13]]+_n[e[t+14]]+_n[e[t+15]]).toLowerCase();if(!function(e){return"string"==typeof e&&wn.test(e)}(n))throw TypeError("Stringified UUID is invalid");return n},bn=function(e,t,n){const r=(e=e||{}).random||(e.rng||yn)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=r[e];return t}return vn(r)},En=e=>{const t={errorType:Sn(e)},n=Cn(e.$response);return n&&(t.retryAfterHint=n),t},Sn=e=>tn(e)?"THROTTLING":nn(e)?"TRANSIENT":(e=>{if(void 0!==e.$metadata?.httpStatusCode){const t=e.$metadata.httpStatusCode;return 500<=t&&t<=599&&!nn(e)}return!1})(e)?"SERVER_ERROR":"CLIENT_ERROR",xn={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},Pn=e=>({applyToStack:t=>{t.add((e=>(t,n)=>async r=>{let s=await e.retryStrategy();const o=await e.maxAttempts();if(!(e=>void 0!==e.acquireInitialRetryToken&&void 0!==e.refreshRetryTokenForRetry&&void 0!==e.recordSuccess)(s))return s?.mode&&(n.userAgent=[...n.userAgent||[],["cfg/retry-mode",s.mode]]),s.retry(t,r);{let e=await s.acquireInitialRetryToken(n.partition_id),a=new Error,c=0,l=0;const{request:d}=r;for(u.isInstance(d)&&(d.headers["amz-sdk-invocation-id"]=bn());;)try{u.isInstance(d)&&(d.headers["amz-sdk-request"]=`attempt=${c+1}; max=${o}`);const{response:n,output:i}=await t(r);return s.recordSuccess(e),i.$metadata.attempts=c+1,i.$metadata.totalRetryDelay=l,{response:n,output:i}}catch(t){const n=En(t);a=(i=t)instanceof Error?i:i instanceof Object?Object.assign(new Error,i):"string"==typeof i?new Error(i):new Error(`AWS SDK error wrapper for ${i}`);try{e=await s.refreshRetryTokenForRetry(e,n)}catch(e){throw a.$metadata||(a.$metadata={}),a.$metadata.attempts=c+1,a.$metadata.totalRetryDelay=l,a}c=e.getRetryCount();const r=e.getRetryDelay();l+=r,await new Promise((e=>setTimeout(e,r)))}}var i})(e),xn)}}),Cn=e=>{if(!l.isInstance(e))return;const t=Object.keys(e.headers).find((e=>"retry-after"===e.toLowerCase()));if(!t)return;const n=e.headers[t],r=Number(n);return Number.isNaN(r)?new Date(n):new Date(1e3*r)};class Tn{trace(){}debug(){}info(){}warn(){}error(){}}const An=()=>{let e=[],t=[];const n=new Set,r=n=>(e.forEach((e=>{n.add(e.middleware,{...e})})),t.forEach((e=>{n.addRelativeTo(e.middleware,{...e})})),n),s=e=>{const t=[];return e.before.forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...s(e))})),t.push(e),e.after.reverse().forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...s(e))})),t},o=(n=!1)=>{const r=[],o=[],i={};e.forEach((e=>{const t={...e,before:[],after:[]};t.name&&(i[t.name]=t),r.push(t)})),t.forEach((e=>{const t={...e,before:[],after:[]};t.name&&(i[t.name]=t),o.push(t)})),o.forEach((e=>{if(e.toMiddleware){const t=i[e.toMiddleware];if(void 0===t){if(n)return;throw new Error(`${e.toMiddleware} is not found when adding ${e.name||"anonymous"} middleware ${e.relation} ${e.toMiddleware}`)}"after"===e.relation&&t.after.push(e),"before"===e.relation&&t.before.push(e)}}));const a=(c=r,c.sort(((e,t)=>In[t.step]-In[e.step]||kn[t.priority||"normal"]-kn[e.priority||"normal"]))).map(s).reduce(((e,t)=>(e.push(...t),e)),[]);var c;return a},i={add:(t,r={})=>{const{name:s,override:o}=r,i={step:"initialize",priority:"normal",middleware:t,...r};if(s){if(n.has(s)){if(!o)throw new Error(`Duplicate middleware name '${s}'`);const t=e.findIndex((e=>e.name===s)),n=e[t];if(n.step!==i.step||n.priority!==i.priority)throw new Error(`"${s}" middleware with ${n.priority} priority in ${n.step} step cannot be overridden by same-name middleware with ${i.priority} priority in ${i.step} step.`);e.splice(t,1)}n.add(s)}e.push(i)},addRelativeTo:(e,r)=>{const{name:s,override:o}=r,i={middleware:e,...r};if(s){if(n.has(s)){if(!o)throw new Error(`Duplicate middleware name '${s}'`);const e=t.findIndex((e=>e.name===s)),n=t[e];if(n.toMiddleware!==i.toMiddleware||n.relation!==i.relation)throw new Error(`"${s}" middleware ${n.relation} "${n.toMiddleware}" middleware cannot be overridden by same-name middleware ${i.relation} "${i.toMiddleware}" middleware.`);t.splice(e,1)}n.add(s)}t.push(i)},clone:()=>r(An()),use:e=>{e.applyToStack(i)},remove:r=>"string"==typeof r?(r=>{let s=!1;const o=e=>!e.name||e.name!==r||(s=!0,n.delete(r),!1);return e=e.filter(o),t=t.filter(o),s})(r):(r=>{let s=!1;const o=e=>e.middleware!==r||(s=!0,e.name&&n.delete(e.name),!1);return e=e.filter(o),t=t.filter(o),s})(r),removeByTag:r=>{let s=!1;const o=e=>{const{tags:t,name:o}=e;return!t||!t.includes(r)||(o&&n.delete(o),s=!0,!1)};return e=e.filter(o),t=t.filter(o),s},concat:e=>{const t=r(An());return t.use(e),t},applyToStack:r,identify:()=>o(!0).map((e=>e.name+": "+(e.tags||[]).join(","))),resolve:(e,t)=>{for(const n of o().map((e=>e.middleware)).reverse())e=n(e,t);return e}};return i},In={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},kn={high:3,normal:2,low:1};class On{constructor(e){this.middlewareStack=An(),this.config=e}send(e,t,n){const r="function"!=typeof t?t:void 0,s="function"==typeof t?t:n,o=e.resolveMiddleware(this.middlewareStack,this.config,r);if(!s)return o(e).then((e=>e.output));o(e).then((e=>s(null,e.output)),(e=>s(e))).catch((()=>{}))}destroy(){this.config.requestHandler.destroy&&this.config.requestHandler.destroy()}}const Nn=/^[A-Za-z0-9+/]*={0,2}$/,Rn=e=>{if(3*e.length%4!=0)throw new TypeError("Incorrect padding on base64 string.");if(!Nn.exec(e))throw new TypeError("Invalid base64 string.");const t=F(e,"base64");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)},Dn=e=>U(e.buffer,e.byteOffset,e.byteLength).toString("base64");class Mn extends Uint8Array{static fromString(e,t="utf-8"){if("string"==typeof e)return function(e,t){return"base64"===t?Mn.mutate(Rn(e)):Mn.mutate(L(e))}(e,t);throw new Error(`Unsupported conversion from ${typeof e} to Uint8ArrayBlobAdapter.`)}static mutate(e){return Object.setPrototypeOf(e,Mn.prototype),e}transformToString(e="utf-8"){return function(e,t="utf-8"){return"base64"===t?Dn(e):B(e)}(this,e)}}const $n=require("stream"),jn=require("http"),qn=require("https"),Un=["ECONNRESET","EPIPE","ETIMEDOUT"],Fn=e=>{const t={};for(const n of Object.keys(e)){const r=e[n];t[n]=Array.isArray(r)?r.join(","):r}return t};class Ln{constructor(e){this.metadata={handlerProtocol:"http/1.1"},this.configProvider=new Promise(((t,n)=>{"function"==typeof e?e().then((e=>{t(this.resolveDefaultConfig(e))})).catch(n):t(this.resolveDefaultConfig(e))}))}resolveDefaultConfig(e){const{requestTimeout:t,connectionTimeout:n,socketTimeout:r,httpAgent:s,httpsAgent:o}=e||{};return{connectionTimeout:n,requestTimeout:t??r,httpAgent:s||new jn.Agent({keepAlive:!0,maxSockets:50}),httpsAgent:o||new qn.Agent({keepAlive:!0,maxSockets:50})}}destroy(){this.config?.httpAgent?.destroy(),this.config?.httpsAgent?.destroy()}async handle(e,{abortSignal:t}={}){return this.config||(this.config=await this.configProvider),new Promise(((n,r)=>{let s;const o=async e=>{await s,r(e)};if(!this.config)throw new Error("Node HTTP request handler config is not resolved");if(t?.aborted){const e=new Error("Request aborted");return e.name="AbortError",void o(e)}const i="https:"===e.protocol,a=function(e){const t=[];for(let n of Object.keys(e).sort()){const r=e[n];if(n=le(n),Array.isArray(r))for(let e=0,s=r.length;e<s;e++)t.push(`${n}=${le(r[e])}`);else{let e=n;(r||"string"==typeof r)&&(e+=`=${le(r)}`),t.push(e)}}return t.join("&")}(e.query||{});let c;null==e.username&&null==e.password||(c=`${e.username??""}:${e.password??""}`);let u=e.path;a&&(u+=`?${a}`),e.fragment&&(u+=`#${e.fragment}`);const d={headers:e.headers,host:e.hostname,method:e.method,path:u,port:e.port,agent:i?this.config.httpsAgent:this.config.httpAgent,auth:c},p=(i?qn.request:jn.request)(d,(e=>{(async e=>{await s,n(e)})({response:new l({statusCode:e.statusCode||-1,reason:e.statusMessage,headers:Fn(e.headers),body:e})})}));p.on("error",(e=>{Un.includes(e.code)?o(Object.assign(e,{name:"TimeoutError"})):o(e)})),((e,t,n=0)=>{if(!n)return;const r=setTimeout((()=>{e.destroy(),t(Object.assign(new Error(`Socket timed out without establishing a connection within ${n} ms`),{name:"TimeoutError"}))}),n);e.on("socket",(e=>{e.connecting?e.on("connect",(()=>{clearTimeout(r)})):clearTimeout(r)}))})(p,o,this.config.connectionTimeout),((e,t,n=0)=>{e.setTimeout(n,(()=>{e.destroy(),t(Object.assign(new Error(`Connection timed out after ${n} ms`),{name:"TimeoutError"}))}))})(p,o,this.config.requestTimeout),t&&(t.onabort=()=>{p.abort();const e=new Error("Request aborted");e.name="AbortError",o(e)});const h=d.agent;"object"==typeof h&&"keepAlive"in h&&((e,{keepAlive:t,keepAliveMsecs:n})=>{!0===t&&e.on("socket",(e=>{e.setKeepAlive(t,n||0)}))})(p,{keepAlive:h.keepAlive,keepAliveMsecs:h.keepAliveMsecs}),s=async function(e,t,n=1e3){const r=t.headers??{},s=r.Expect||r.expect;let o=-1,i=!1;"100-continue"===s&&await Promise.race([new Promise((e=>{o=Number(setTimeout(e,Math.max(1e3,n)))})),new Promise((t=>{e.on("continue",(()=>{clearTimeout(o),t()})),e.on("error",(()=>{i=!0,clearTimeout(o),t()}))}))]),i||function(e,t){t instanceof $n.Readable?t.pipe(e):t?e.end(Buffer.from(t)):e.end()}(e,t.body)}(p,e,this.config.requestTimeout).catch(r)}))}}require("http2"),Symbol.iterator;class zn extends $n.Writable{constructor(){super(...arguments),this.bufferedBytes=[]}_write(e,t,n){this.bufferedBytes.push(e),n()}}const Bn=e=>new Promise(((t,n)=>{const r=new zn;e.pipe(r),e.on("error",(e=>{r.end(),n(e)})),r.on("error",n),r.on("finish",(function(){const e=new Uint8Array(Buffer.concat(this.bufferedBytes));t(e)}))})),Hn=require("util"),Vn=async(e=new Uint8Array,t)=>{if(e instanceof Uint8Array)return Mn.mutate(e);if(!e)return Mn.mutate(new Uint8Array);const n=t.streamCollector(e);return Mn.mutate(await n)};class Wn{constructor(){this.middlewareStack=An()}}const Kn="***SensitiveInformation***",Gn=e=>{if(null!=e){if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return String(t)!==String(e)&&ir.warn(or(`Expected number but observed string: ${e}`)),t}if("number"==typeof e)return e;throw new TypeError(`Expected number, got ${typeof e}: ${e}`)}},Qn=Math.ceil(2**127*(2-2**-23)),Xn=e=>Jn(e,32),Jn=(e,t)=>{const n=(e=>{if(null!=e){if(Number.isInteger(e)&&!Number.isNaN(e))return e;throw new TypeError(`Expected integer, got ${typeof e}: ${e}`)}})(e);if(void 0!==n&&Yn(n,t)!==n)throw new TypeError(`Expected ${t}-bit integer, got ${e}`);return n},Yn=(e,t)=>{switch(t){case 32:return Int32Array.of(e)[0];case 16:return Int16Array.of(e)[0];case 8:return Int8Array.of(e)[0]}},Zn=(e,t)=>{if(null==e){if(t)throw new TypeError(`Expected a non-null value for ${t}`);throw new TypeError("Expected a non-null value")}return e},er=e=>{if(null==e)return;if("object"==typeof e&&!Array.isArray(e))return e;const t=Array.isArray(e)?"array":typeof e;throw new TypeError(`Expected object, got ${t}: ${e}`)},tr=e=>{if(null!=e){if("string"==typeof e)return e;if(["boolean","number","bigint"].includes(typeof e))return ir.warn(or(`Expected string, got ${typeof e}: ${e}`)),String(e);throw new TypeError(`Expected string, got ${typeof e}: ${e}`)}},nr=/(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g,rr=e=>{const t=e.match(nr);if(null===t||t[0].length!==e.length)throw new TypeError("Expected real number, got implicit NaN");return parseFloat(e)},sr=e=>Xn("string"==typeof e?rr(e):e),or=e=>String(new TypeError(e).stack||e).split("\n").slice(0,5).filter((e=>!e.includes("stackTraceWarning"))).join("\n"),ir={warn:console.warn},ar=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],cr=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/),ur=e=>{if(null==e)return;if("string"!=typeof e)throw new TypeError("RFC-3339 date-times must be expressed as strings");const t=cr.exec(e);if(!t)throw new TypeError("Invalid RFC-3339 date-time value");const[n,r,s,o,i,a,c,u,l]=t,d=(e=>(e=>Jn(e,16))("string"==typeof e?rr(e):e))(yr(r)),p=fr(s,"month",1,12),h=fr(o,"day",1,31),f=lr(d,p,h,{hours:i,minutes:a,seconds:c,fractionalMilliseconds:u});return"Z"!=l.toUpperCase()&&f.setTime(f.getTime()-gr(l)),f},lr=(e,t,n,r)=>{const s=t-1;return pr(e,s,n),new Date(Date.UTC(e,s,n,fr(r.hours,"hour",0,23),fr(r.minutes,"minute",0,59),fr(r.seconds,"seconds",0,60),mr(r.fractionalMilliseconds)))},dr=[31,28,31,30,31,30,31,31,30,31,30,31],pr=(e,t,n)=>{let r=dr[t];if(1===t&&hr(e)&&(r=29),n>r)throw new TypeError(`Invalid day for ${ar[t]} in ${e}: ${n}`)},hr=e=>e%4==0&&(e%100!=0||e%400==0),fr=(e,t,n,r)=>{const s=(e=>(e=>Jn(e,8))("string"==typeof e?rr(e):e))(yr(e));if(s<n||s>r)throw new TypeError(`${t} must be between ${n} and ${r}, inclusive`);return s},mr=e=>null==e?0:1e3*(e=>(e=>{const t=Gn(e);if(void 0!==t&&!Number.isNaN(t)&&t!==1/0&&t!==-1/0&&Math.abs(t)>Qn)throw new TypeError(`Expected 32-bit float, got ${e}`);return t})("string"==typeof e?rr(e):e))("0."+e),gr=e=>{const t=e[0];let n=1;if("+"==t)n=1;else{if("-"!=t)throw new TypeError(`Offset direction, ${t}, must be "+" or "-"`);n=-1}return n*(60*Number(e.substring(1,3))+Number(e.substring(4,6)))*60*1e3},yr=e=>{let t=0;for(;t<e.length-1&&"0"===e.charAt(t);)t++;return 0===t?e:e.slice(t)};class wr extends Error{constructor(e){super(e.message),Object.setPrototypeOf(this,wr.prototype),this.name=e.name,this.$fault=e.$fault,this.$metadata=e.$metadata}}const _r=(e,t={})=>{Object.entries(t).filter((([,e])=>void 0!==e)).forEach((([t,n])=>{null!=e[t]&&""!==e[t]||(e[t]=n)}));const n=e.message||e.Message||"UnknownError";return e.message=n,delete e.Message,e},vr=e=>({output:t,parsedBody:n,errorCode:r})=>{(({output:e,parsedBody:t,exceptionCtor:n,errorCode:r})=>{const s=br(e),o=s.httpStatusCode?s.httpStatusCode+"":void 0,i=new n({name:t?.code||t?.Code||r||o||"UnknownError",$fault:"client",$metadata:s});throw _r(i,t)})({output:t,parsedBody:n,exceptionCtor:e,errorCode:r})},br=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Er=e=>{switch(e){case"standard":case"cross-region":return{retryMode:"standard",connectionTimeout:3100};case"in-region":return{retryMode:"standard",connectionTimeout:1100};case"mobile":return{retryMode:"standard",connectionTimeout:3e4};default:return{}}};let Sr=!1;const xr=e=>{e&&!Sr&&parseInt(e.substring(1,e.indexOf(".")))<14&&(Sr=!0)};function Pr(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}const Cr=e=>{const t="#text";for(const n in e)e.hasOwnProperty(n)&&void 0!==e[n][t]?e[n]=e[n][t]:"object"==typeof e[n]&&null!==e[n]&&(e[n]=Cr(e[n]));return e},Tr=function(){const e=Object.getPrototypeOf(this).constructor,t=new(Function.bind.apply(String,[null,...arguments]));return Object.setPrototypeOf(t,e.prototype),t};function Ar(e,t,n){let r,s,o;if(void 0===t&&void 0===n)r={},o=e;else{if(r=e,"function"==typeof t)return s=t,o=n,kr(r,s,o);o=t}for(const e of Object.keys(o))Array.isArray(o[e])?Or(r,null,o,e):r[e]=o[e];return r}Tr.prototype=Object.create(String.prototype,{constructor:{value:Tr,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf(Tr,String);const Ir=(e,t)=>{const n={};for(const r in t)Or(n,e,t,r);return n},kr=(e,t,n)=>Ar(e,Object.entries(n).reduce(((e,[n,r])=>(Array.isArray(r)?e[n]=r:e[n]="function"==typeof r?[t,r()]:[t,r],e)),{})),Or=(e,t,n,r)=>{if(null!==t){let s=n[r];"function"==typeof s&&(s=[,s]);const[o=Nr,i=Rr,a=r]=s;return void(("function"==typeof o&&o(t[a])||"function"!=typeof o&&o)&&(e[r]=i(t[a])))}let[s,o]=n[r];if("function"==typeof o){let t;const n=void 0===s&&null!=(t=o()),i="function"==typeof s&&!!s(void 0)||"function"!=typeof s&&!!s;n?e[r]=t:i&&(e[r]=o())}else{const t=void 0===s&&null!=o,n="function"==typeof s&&!!s(o)||"function"!=typeof s&&!!s;(t||n)&&(e[r]=o)}},Nr=e=>null!=e,Rr=e=>e,Dr=(e,t,n,r,s,o)=>{if(null==t||void 0===t[n])throw new Error("No value provided for input HTTP label: "+n+".");{const t=r();if(t.length<=0)throw new Error("Empty value provided for input HTTP label: "+n+".");e=e.replace(s,o?t.split("/").map((e=>Pr(e))).join("/"):Pr(t))}return e},Mr=e=>{if(e!=e)return"NaN";switch(e){case 1/0:return"Infinity";case-1/0:return"-Infinity";default:return e}},$r=e=>{if(null==e)return{};if(Array.isArray(e))return e.filter((e=>null!=e));if("object"==typeof e){const t={};for(const n of Object.keys(e))null!=e[n]&&(t[n]=$r(e[n]));return t}return e};class jr extends wr{constructor(e){super(e),Object.setPrototypeOf(this,jr.prototype)}}class qr extends jr{constructor(e){super({name:"ExpiredTokenException",$fault:"client",...e}),this.name="ExpiredTokenException",this.$fault="client",Object.setPrototypeOf(this,qr.prototype)}}class Ur extends jr{constructor(e){super({name:"MalformedPolicyDocumentException",$fault:"client",...e}),this.name="MalformedPolicyDocumentException",this.$fault="client",Object.setPrototypeOf(this,Ur.prototype)}}class Fr extends jr{constructor(e){super({name:"PackedPolicyTooLargeException",$fault:"client",...e}),this.name="PackedPolicyTooLargeException",this.$fault="client",Object.setPrototypeOf(this,Fr.prototype)}}class Lr extends jr{constructor(e){super({name:"RegionDisabledException",$fault:"client",...e}),this.name="RegionDisabledException",this.$fault="client",Object.setPrototypeOf(this,Lr.prototype)}}class zr extends jr{constructor(e){super({name:"IDPRejectedClaimException",$fault:"client",...e}),this.name="IDPRejectedClaimException",this.$fault="client",Object.setPrototypeOf(this,zr.prototype)}}class Br extends jr{constructor(e){super({name:"InvalidIdentityTokenException",$fault:"client",...e}),this.name="InvalidIdentityTokenException",this.$fault="client",Object.setPrototypeOf(this,Br.prototype)}}class Hr extends jr{constructor(e){super({name:"IDPCommunicationErrorException",$fault:"client",...e}),this.name="IDPCommunicationErrorException",this.$fault="client",Object.setPrototypeOf(this,Hr.prototype)}}const Vr=e=>({...e,...e.SecretAccessKey&&{SecretAccessKey:Kn}}),Wr=e=>({...e,...e.Credentials&&{Credentials:Vr(e.Credentials)}}),Kr=e=>({...e,...e.WebIdentityToken&&{WebIdentityToken:Kn}}),Gr=e=>({...e,...e.Credentials&&{Credentials:Vr(e.Credentials)}});var Qr=n(6932);const Xr=async(e,t)=>{const n=e.body,r=ps(n.Error,t),s=new qr({$metadata:_s(e),...r});return _r(s,n)},Jr=async(e,t)=>{const n=e.body,r=hs(n.Error,t),s=new Hr({$metadata:_s(e),...r});return _r(s,n)},Yr=async(e,t)=>{const n=e.body,r=fs(n.Error,t),s=new zr({$metadata:_s(e),...r});return _r(s,n)},Zr=async(e,t)=>{const n=e.body,r=ms(n.Error,t),s=new Br({$metadata:_s(e),...r});return _r(s,n)},es=async(e,t)=>{const n=e.body,r=gs(n.Error,t),s=new Ur({$metadata:_s(e),...r});return _r(s,n)},ts=async(e,t)=>{const n=e.body,r=ys(n.Error,t),s=new Fr({$metadata:_s(e),...r});return _r(s,n)},ns=async(e,t)=>{const n=e.body,r=ws(n.Error,t),s=new Lr({$metadata:_s(e),...r});return _r(s,n)},rs=(e,t)=>{const n={};if(null!=e.RoleArn&&(n.RoleArn=e.RoleArn),null!=e.RoleSessionName&&(n.RoleSessionName=e.RoleSessionName),null!=e.PolicyArns){const r=os(e.PolicyArns,t);0===e.PolicyArns?.length&&(n.PolicyArns=[]),Object.entries(r).forEach((([e,t])=>{n[`PolicyArns.${e}`]=t}))}if(null!=e.Policy&&(n.Policy=e.Policy),null!=e.DurationSeconds&&(n.DurationSeconds=e.DurationSeconds),null!=e.Tags){const r=us(e.Tags,t);0===e.Tags?.length&&(n.Tags=[]),Object.entries(r).forEach((([e,t])=>{n[`Tags.${e}`]=t}))}if(null!=e.TransitiveTagKeys){const r=cs(e.TransitiveTagKeys,t);0===e.TransitiveTagKeys?.length&&(n.TransitiveTagKeys=[]),Object.entries(r).forEach((([e,t])=>{n[`TransitiveTagKeys.${e}`]=t}))}return null!=e.ExternalId&&(n.ExternalId=e.ExternalId),null!=e.SerialNumber&&(n.SerialNumber=e.SerialNumber),null!=e.TokenCode&&(n.TokenCode=e.TokenCode),null!=e.SourceIdentity&&(n.SourceIdentity=e.SourceIdentity),n},ss=(e,t)=>{const n={};if(null!=e.RoleArn&&(n.RoleArn=e.RoleArn),null!=e.RoleSessionName&&(n.RoleSessionName=e.RoleSessionName),null!=e.WebIdentityToken&&(n.WebIdentityToken=e.WebIdentityToken),null!=e.ProviderId&&(n.ProviderId=e.ProviderId),null!=e.PolicyArns){const r=os(e.PolicyArns,t);0===e.PolicyArns?.length&&(n.PolicyArns=[]),Object.entries(r).forEach((([e,t])=>{n[`PolicyArns.${e}`]=t}))}return null!=e.Policy&&(n.Policy=e.Policy),null!=e.DurationSeconds&&(n.DurationSeconds=e.DurationSeconds),n},os=(e,t)=>{const n={};let r=1;for(const s of e){if(null===s)continue;const e=is(s,t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n},is=(e,t)=>{const n={};return null!=e.arn&&(n.arn=e.arn),n},as=(e,t)=>{const n={};return null!=e.Key&&(n.Key=e.Key),null!=e.Value&&(n.Value=e.Value),n},cs=(e,t)=>{const n={};let r=1;for(const t of e)null!==t&&(n[`member.${r}`]=t,r++);return n},us=(e,t)=>{const n={};let r=1;for(const t of e){if(null===t)continue;const e=as(t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n},ls=(e,t)=>{const n={};return void 0!==e.AssumedRoleId&&(n.AssumedRoleId=tr(e.AssumedRoleId)),void 0!==e.Arn&&(n.Arn=tr(e.Arn)),n},ds=(e,t)=>{const n={};return void 0!==e.AccessKeyId&&(n.AccessKeyId=tr(e.AccessKeyId)),void 0!==e.SecretAccessKey&&(n.SecretAccessKey=tr(e.SecretAccessKey)),void 0!==e.SessionToken&&(n.SessionToken=tr(e.SessionToken)),void 0!==e.Expiration&&(n.Expiration=Zn(ur(e.Expiration))),n},ps=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},hs=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},fs=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},ms=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},gs=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},ys=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},ws=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},_s=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),vs=vr(jr),bs=async(e,t,n,r,s)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),l={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==r&&(l.hostname=r),void 0!==s&&(l.body=s),new u(l)},Es={"content-type":"application/x-www-form-urlencoded"},Ss=(e,t)=>((e,t)=>Vn(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>{if(e.length){const t=new Qr.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});t.addEntity("#xD","\r"),t.addEntity("#10","\n");const n=t.parse(e),r="#text",s=Object.keys(n)[0],o=n[s];return o[r]&&(o[s]=o[r],delete o[r]),Cr(o)}return{}})),xs=async(e,t)=>{const n=await Ss(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n},Ps=e=>Object.entries(e).map((([e,t])=>Pr(e)+"="+Pr(t))).join("&"),Cs=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class Ts extends Wn{static getEndpointParameterInstructions(){return{UseGlobalEndpoint:{type:"builtInParams",name:"useGlobalEndpoint"},UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,Ts.getEndpointParameterInstructions())),this.middlewareStack.use(Pe(t));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"STSClient",commandName:"AssumeRoleCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:Wr},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n=Es;let r;return r=Ps({...rs(e,t),Action:"AssumeRole",Version:"2011-06-15"}),bs(t,n,"/",void 0,r)})(e,t)}deserialize(e,t){return(async(e,t)=>{if(e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await xs(e.body,t)},r=Cs(e,n.body);switch(r){case"ExpiredTokenException":case"com.amazonaws.sts#ExpiredTokenException":throw await Xr(n,t);case"MalformedPolicyDocument":case"com.amazonaws.sts#MalformedPolicyDocumentException":throw await es(n,t);case"PackedPolicyTooLarge":case"com.amazonaws.sts#PackedPolicyTooLargeException":throw await ts(n,t);case"RegionDisabledException":case"com.amazonaws.sts#RegionDisabledException":throw await ns(n,t);default:const s=n.body;return vs({output:e,parsedBody:s.Error,errorCode:r})}})(e,t);let n={};return n=((e,t)=>{const n={};return void 0!==e.Credentials&&(n.Credentials=ds(e.Credentials,t)),void 0!==e.AssumedRoleUser&&(n.AssumedRoleUser=ls(e.AssumedRoleUser)),void 0!==e.PackedPolicySize&&(n.PackedPolicySize=sr(e.PackedPolicySize)),void 0!==e.SourceIdentity&&(n.SourceIdentity=tr(e.SourceIdentity)),n})((await Ss(e.body,t)).AssumeRoleResult,t),{$metadata:_s(e),...n}})(e,t)}}class As extends Wn{static getEndpointParameterInstructions(){return{UseGlobalEndpoint:{type:"builtInParams",name:"useGlobalEndpoint"},UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,As.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"STSClient",commandName:"AssumeRoleWithWebIdentityCommand",inputFilterSensitiveLog:Kr,outputFilterSensitiveLog:Gr},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n=Es;let r;return r=Ps({...ss(e,t),Action:"AssumeRoleWithWebIdentity",Version:"2011-06-15"}),bs(t,n,"/",void 0,r)})(e,t)}deserialize(e,t){return(async(e,t)=>{if(e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await xs(e.body,t)},r=Cs(e,n.body);switch(r){case"ExpiredTokenException":case"com.amazonaws.sts#ExpiredTokenException":throw await Xr(n,t);case"IDPCommunicationError":case"com.amazonaws.sts#IDPCommunicationErrorException":throw await Jr(n,t);case"IDPRejectedClaim":case"com.amazonaws.sts#IDPRejectedClaimException":throw await Yr(n,t);case"InvalidIdentityToken":case"com.amazonaws.sts#InvalidIdentityTokenException":throw await Zr(n,t);case"MalformedPolicyDocument":case"com.amazonaws.sts#MalformedPolicyDocumentException":throw await es(n,t);case"PackedPolicyTooLarge":case"com.amazonaws.sts#PackedPolicyTooLargeException":throw await ts(n,t);case"RegionDisabledException":case"com.amazonaws.sts#RegionDisabledException":throw await ns(n,t);default:const s=n.body;return vs({output:e,parsedBody:s.Error,errorCode:r})}})(e,t);let n={};return n=((e,t)=>{const n={};return void 0!==e.Credentials&&(n.Credentials=ds(e.Credentials,t)),void 0!==e.SubjectFromWebIdentityToken&&(n.SubjectFromWebIdentityToken=tr(e.SubjectFromWebIdentityToken)),void 0!==e.AssumedRoleUser&&(n.AssumedRoleUser=ls(e.AssumedRoleUser)),void 0!==e.PackedPolicySize&&(n.PackedPolicySize=sr(e.PackedPolicySize)),void 0!==e.Provider&&(n.Provider=tr(e.Provider)),void 0!==e.Audience&&(n.Audience=tr(e.Audience)),void 0!==e.SourceIdentity&&(n.SourceIdentity=tr(e.SourceIdentity)),n})((await Ss(e.body,t)).AssumeRoleWithWebIdentityResult,t),{$metadata:_s(e),...n}})(e,t)}}const Is="us-east-1",ks=e=>"function"!=typeof e?void 0===e?Is:e:async()=>{try{return await e()}catch(e){return Is}},Os=(e,t)=>{let n,r;return async(s,o)=>{if(r=s,!n){const{logger:s,region:o,requestHandler:i}=e;n=new t({logger:s,credentialDefaultProvider:()=>async()=>r,region:ks(o||e.region),...i?{requestHandler:i}:{}})}const{Credentials:i}=await n.send(new Ts(o));if(!i||!i.AccessKeyId||!i.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRole call with role ${o.RoleArn}`);return{accessKeyId:i.AccessKeyId,secretAccessKey:i.SecretAccessKey,sessionToken:i.SessionToken,expiration:i.Expiration}}},Ns=(e,t)=>{let n;return async r=>{if(!n){const{logger:r,region:s,requestHandler:o}=e;n=new t({logger:r,region:ks(s||e.region),...o?{requestHandler:o}:{}})}const{Credentials:s}=await n.send(new As(r));if(!s||!s.AccessKeyId||!s.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${r.RoleArn}`);return{accessKeyId:s.AccessKeyId,secretAccessKey:s.SecretAccessKey,sessionToken:s.SessionToken,expiration:s.Expiration}}};class Rs extends Error{constructor(e,t=!0){super(e),this.tryNextLink=t,this.name="ProviderError",Object.setPrototypeOf(this,Rs.prototype)}static from(e,t=!0){return Object.assign(new this(e.message,t),e)}}class Ds extends Rs{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="CredentialsProviderError",Object.setPrototypeOf(this,Ds.prototype)}}const Ms=()=>async()=>{const e=process.env.AWS_ACCESS_KEY_ID,t=process.env.AWS_SECRET_ACCESS_KEY,n=process.env.AWS_SESSION_TOKEN,r=process.env.AWS_CREDENTIAL_EXPIRATION;if(e&&t)return{accessKeyId:e,secretAccessKey:t,...n&&{sessionToken:n},...r&&{expiration:new Date(r)}};throw new Ds("Unable to find environment variable credentials.")};var $s=n(2037),js=n(1017);const qs=()=>{const{HOME:e,USERPROFILE:t,HOMEPATH:n,HOMEDRIVE:r=`C:${js.sep}`}=process.env;return e||t||(n?`${r}${n}`:(0,$s.homedir)())},Us="AWS_PROFILE",Fs=e=>e.profile||process.env[Us]||"default",Ls=e=>{const t=(0,hn.createHash)("sha1").update(e).digest("hex");return(0,js.join)(qs(),".aws","sso","cache",`${t}.json`)};var zs=n(7147);const{readFile:Bs}=zs.promises,Hs=async e=>{const t=Ls(e),n=await Bs(t,"utf8");return JSON.parse(n)},Vs=()=>process.env.AWS_CONFIG_FILE||(0,js.join)(qs(),".aws","config"),Ws=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,js.join)(qs(),".aws","credentials"),Ks=/^profile\s(["'])?([^\1]+)\1$/,Gs=e=>Object.entries(e).filter((([e])=>Ks.test(e))).reduce(((e,[t,n])=>({...e,[Ks.exec(t)[2]]:n})),{...e.default&&{default:e.default}}),Qs=["__proto__","profile __proto__"],Xs=e=>{const t={};let n;for(let r of e.split(/\r?\n/))if(r=r.split(/(^|\s)[;#]/)[0].trim(),"["===r[0]&&"]"===r[r.length-1]){if(n=r.substring(1,r.length-1),Qs.includes(n))throw new Error(`Found invalid profile name "${n}"`)}else if(n){const e=r.indexOf("="),s=0,o=r.length-1;if(-1!==e&&e!==s&&e!==o){const[s,o]=[r.substring(0,e).trim(),r.substring(e+1).trim()];t[n]=t[n]||{},t[n][s]=o}}return t},{readFile:Js}=zs.promises,Ys={},Zs=(e,t)=>(Ys[e]&&!t?.ignoreCache||(Ys[e]=Js(e,"utf8")),Ys[e]),eo=()=>({}),to=async(e={})=>{const{filepath:t=Ws(),configFilepath:n=Vs()}=e,r=await Promise.all([Zs(n,{ignoreCache:e.ignoreCache}).then(Xs).then(Gs).catch(eo),Zs(t,{ignoreCache:e.ignoreCache}).then(Xs).catch(eo)]);return{configFile:r[0],credentialsFile:r[1]}},no=/^sso-session\s(["'])?([^\1]+)\1$/,ro=e=>Object.entries(e).filter((([e])=>no.test(e))).reduce(((e,[t,n])=>({...e,[no.exec(t)[2]]:n})),{}),so=()=>({}),oo=async(e={})=>Zs(e.configFilepath??Vs()).then(Xs).then(ro).catch(so),io=async e=>{const t=await to(e);return((...e)=>{const t={};for(const n of e)for(const[e,r]of Object.entries(n))void 0!==t[e]?Object.assign(t[e],r):t[e]=r;return t})(t.configFile,t.credentialsFile)},ao=require("url");function co(e){return new Promise(((t,n)=>{const r=(0,jn.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});r.on("error",(e=>{n(Object.assign(new Rs("Unable to connect to instance metadata service"),e)),r.destroy()})),r.on("timeout",(()=>{n(new Rs("TimeoutError from instance metadata service")),r.destroy()})),r.on("response",(e=>{const{statusCode:s=400}=e;(s<200||300<=s)&&(n(Object.assign(new Rs("Error response received from instance metadata service"),{statusCode:s})),r.destroy());const o=[];e.on("data",(e=>{o.push(e)})),e.on("end",(()=>{t(q.Buffer.concat(o)),r.destroy()}))})),r.end()}))}const uo=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.AccessKeyId&&"string"==typeof e.SecretAccessKey&&"string"==typeof e.Token&&"string"==typeof e.Expiration,lo=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration)}),po=({maxRetries:e=0,timeout:t=1e3})=>({maxRetries:e,timeout:t}),ho=(e,t)=>{let n=e();for(let r=0;r<t;r++)n=n.catch(e);return n},fo="AWS_CONTAINER_CREDENTIALS_FULL_URI",mo="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",go="AWS_CONTAINER_AUTHORIZATION_TOKEN",yo=(e={})=>{const{timeout:t,maxRetries:n}=po(e);return()=>ho((async()=>{const e=await bo(),n=JSON.parse(await wo(t,e));if(!uo(n))throw new Ds("Invalid response received from instance metadata service.");return lo(n)}),n)},wo=async(e,t)=>(process.env[go]&&(t.headers={...t.headers,Authorization:process.env[go]}),(await co({...t,timeout:e})).toString()),_o={localhost:!0,"127.0.0.1":!0},vo={"http:":!0,"https:":!0},bo=async()=>{if(process.env[mo])return{hostname:"169.254.170.2",path:process.env[mo]};if(process.env[fo]){const e=(0,ao.parse)(process.env[fo]);if(!e.hostname||!(e.hostname in _o))throw new Ds(`${e.hostname} is not a valid container metadata service hostname`,!1);if(!e.protocol||!(e.protocol in vo))throw new Ds(`${e.protocol} is not a valid container metadata service protocol`,!1);return{...e,port:e.port?parseInt(e.port,10):void 0}}throw new Ds(`The container metadata credential provider cannot be used unless the ${mo} or ${fo} environment variable is set`,!1)};function Eo(...e){return()=>{let t=Promise.reject(new Rs("No providers in chain"));for(const n of e)t=t.catch((e=>{if(e?.tryNextLink)return n();throw e}));return t}}const So=({environmentVariableSelector:e,configFileSelector:t,default:n},r={})=>{return w(Eo((s=e,async()=>{try{const e=s(process.env);if(void 0===e)throw new Error;return e}catch(e){throw new Ds(e.message||`Cannot load config from environment variables with getter: ${s}`)}}),((e,{preferredFile:t="config",...n}={})=>async()=>{const r=Fs(n),{configFile:s,credentialsFile:o}=await to(n),i=o[r]||{},a=s[r]||{},c="config"===t?{...i,...a}:{...a,...i};try{const t=e(c);if(void 0===t)throw new Error;return t}catch(t){throw new Ds(t.message||`Cannot load config for profile ${r} in SDK configuration files with getter: ${e}`)}})(t,r),(e=>{return"function"==typeof e?async()=>await e():(t=e,()=>Promise.resolve(t));var t})(n)));var s};var xo;!function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(xo||(xo={}));const Po={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:e=>e.ec2_metadata_service_endpoint,default:void 0};var Co;!function(e){e.IPv4="IPv4",e.IPv6="IPv6"}(Co||(Co={}));const To={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:e=>e.ec2_metadata_service_endpoint_mode,default:Co.IPv4},Ao=async()=>Wt(await Io()||await ko()),Io=async()=>So(Po)(),ko=async()=>{const e=await So(To)();switch(e){case Co.IPv4:return xo.IPv4;case Co.IPv6:return xo.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(Co)}`)}},Oo=(e,t)=>{const n=300+Math.floor(300*Math.random()),r=new Date(Date.now()+1e3*n);t.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html");const s=e.originalExpiration??e.expiration;return{...e,...s?{originalExpiration:s}:{},expiration:r}},No="/latest/meta-data/iam/security-credentials/",Ro=(e={})=>((e,t={})=>{const n=t?.logger||console;let r;return async()=>{let t;try{t=await e(),t.expiration&&t.expiration.getTime()<Date.now()&&(t=Oo(t,n))}catch(e){if(!r)throw e;n.warn("Credential renew failed: ",e),t=Oo(r,n)}return r=t,t}})(Do(e),{logger:e.logger}),Do=e=>{let t=!1;const{timeout:n,maxRetries:r}=po(e),s=async(e,n)=>{const r=(await ho((async()=>{let e;try{e=await $o(n)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e}),e)).trim();return ho((async()=>{let e;try{e=await jo(r,n)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e}),e)};return async()=>{const e=await Ao();if(t)return s(r,{...e,timeout:n});{let o;try{o=(await Mo({...e,timeout:n})).toString()}catch(o){if(400===o?.statusCode)throw Object.assign(o,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===o.message||[403,404,405].includes(o.statusCode))&&(t=!0),s(r,{...e,timeout:n})}return s(r,{...e,headers:{"x-aws-ec2-metadata-token":o},timeout:n})}}},Mo=async e=>co({...e,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),$o=async e=>(await co({...e,path:No})).toString(),jo=async(e,t)=>{const n=JSON.parse((await co({...t,path:No+e})).toString());if(!uo(n))throw new Ds("Invalid response received from instance metadata service.");return lo(n)},qo=require("child_process"),Uo=(e={})=>async()=>{const t=await io(e);return(async(e,t)=>{const n=t[e];if(!t[e])throw new Ds(`Profile ${e} could not be found in shared credentials file.`);{const t=n.credential_process;if(void 0===t)throw new Ds(`Profile ${e} did not contain credential_process.`);{const n=(0,Hn.promisify)(qo.exec);try{const{stdout:r}=await n(t);let s;try{s=JSON.parse(r.trim())}catch{throw Error(`Profile ${e} credential_process returned invalid JSON.`)}return((e,t)=>{if(1!==t.Version)throw Error(`Profile ${e} credential_process did not return Version 1.`);if(void 0===t.AccessKeyId||void 0===t.SecretAccessKey)throw Error(`Profile ${e} credential_process returned invalid credentials.`);if(t.Expiration){const n=new Date;if(new Date(t.Expiration)<n)throw Error(`Profile ${e} credential_process returned expired credentials.`)}return{accessKeyId:t.AccessKeyId,secretAccessKey:t.SecretAccessKey,...t.SessionToken&&{sessionToken:t.SessionToken},...t.Expiration&&{expiration:new Date(t.Expiration)}}})(e,s)}catch(e){throw new Ds(e.message)}}}})(Fs(e),t)},Fo=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);var Lo=n(7282);const zo=({serviceId:e,clientVersion:t})=>{const r=[["aws-sdk-js",t],["ua","2.0"],[`os/${(0,$s.platform)()}`,(0,$s.release)()],["lang/js"],["md/nodejs",`${Lo.versions.node}`]],s=(()=>{try{return n(8687)?["md/crt-avail"]:null}catch(e){return null}})();s&&r.push(s),e&&r.push([`api/${e}`,t]),Lo.env.AWS_EXECUTION_ENV&&r.push([`exec-env/${Lo.env.AWS_EXECUTION_ENV}`]);const o=So({environmentVariableSelector:e=>e.AWS_SDK_UA_APP_ID,configFileSelector:e=>e["sdk-ua-app-id"],default:void 0})();let i;return async()=>{if(!i){const e=await o;i=e?[...r,[`app/${e}`]]:[...r]}return i}};class Bo{constructor(e,t){this.algorithmIdentifier=e,this.secret=t,this.reset()}update(e,t){this.hash.update(z(Ho(e,t)))}digest(){return Promise.resolve(this.hash.digest())}reset(){this.hash=this.secret?(0,hn.createHmac)(this.algorithmIdentifier,Ho(this.secret)):(0,hn.createHash)(this.algorithmIdentifier)}}function Ho(e,t){return q.Buffer.isBuffer(e)?e:"string"==typeof e?F(e,t):ArrayBuffer.isView(e)?U(e.buffer,e.byteOffset,e.byteLength):U(e)}const Vo=e=>{if(!e)return 0;if("string"==typeof e)return Buffer.from(e).length;if("number"==typeof e.byteLength)return e.byteLength;if("number"==typeof e.size)return e.size;if("string"==typeof e.path||Buffer.isBuffer(e.path))return(0,zs.lstatSync)(e.path).size;if("number"==typeof e.fd)return(0,zs.fstatSync)(e.fd).size;throw new Error(`Body Length computation failed for ${e}`)},Wo="required",Ko="fn",Go="argv",Qo="ref",Xo="PartitionResult",Jo="tree",Yo="error",Zo="endpoint",ei={[Wo]:!1,type:"String"},ti={[Wo]:!0,default:!1,type:"Boolean"},ni={[Qo]:"Endpoint"},ri={[Ko]:"booleanEquals",[Go]:[{[Qo]:"UseFIPS"},!0]},si={[Ko]:"booleanEquals",[Go]:[{[Qo]:"UseDualStack"},!0]},oi={},ii={[Ko]:"booleanEquals",[Go]:[!0,{[Ko]:"getAttr",[Go]:[{[Qo]:Xo},"supportsFIPS"]}]},ai={[Ko]:"booleanEquals",[Go]:[!0,{[Ko]:"getAttr",[Go]:[{[Qo]:Xo},"supportsDualStack"]}]},ci=[ni],ui=[ri],li=[si],di={version:"1.0",parameters:{Region:ei,UseDualStack:ti,UseFIPS:ti,Endpoint:ei},rules:[{conditions:[{[Ko]:"aws.partition",[Go]:[{[Qo]:"Region"}],assign:Xo}],type:Jo,rules:[{conditions:[{[Ko]:"isSet",[Go]:ci},{[Ko]:"parseURL",[Go]:ci,assign:"url"}],type:Jo,rules:[{conditions:ui,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Yo},{type:Jo,rules:[{conditions:li,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Yo},{endpoint:{url:ni,properties:oi,headers:oi},type:Zo}]}]},{conditions:[ri,si],type:Jo,rules:[{conditions:[ii,ai],type:Jo,rules:[{endpoint:{url:"https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:oi,headers:oi},type:Zo}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Yo}]},{conditions:ui,type:Jo,rules:[{conditions:[ii],type:Jo,rules:[{type:Jo,rules:[{endpoint:{url:"https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}",properties:oi,headers:oi},type:Zo}]}]},{error:"FIPS is enabled but this partition does not support FIPS",type:Yo}]},{conditions:li,type:Jo,rules:[{conditions:[ai],type:Jo,rules:[{endpoint:{url:"https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:oi,headers:oi},type:Zo}]},{error:"DualStack is enabled but this partition does not support DualStack",type:Yo}]},{endpoint:{url:"https://portal.sso.{Region}.{PartitionResult#dnsSuffix}",properties:oi,headers:oi},type:Zo}]}]},pi=(e,t={})=>gt(di,{endpointParams:e,logger:t.logger}),hi="AWS_REGION",fi="AWS_DEFAULT_REGION",mi=["in-region","cross-region","mobile","standard","legacy"],gi={environmentVariableSelector:e=>e.AWS_DEFAULTS_MODE,configFileSelector:e=>e.defaults_mode,default:"legacy"},yi=({region:e=So(At),defaultsMode:t=So(gi)}={})=>w((async()=>{const n="function"==typeof t?await t():t;switch(n?.toLowerCase()){case"auto":return wi(e);case"in-region":case"cross-region":case"mobile":case"standard":case"legacy":return Promise.resolve(n?.toLocaleLowerCase());case void 0:return Promise.resolve("legacy");default:throw new Error(`Invalid parameter for "defaultsMode", expect ${mi.join(", ")}, got ${n}`)}})),wi=async e=>{if(e){const t="function"==typeof e?await e():e,n=await _i();return n?t===n?"in-region":"cross-region":"standard"}return"standard"},_i=async()=>{if(process.env.AWS_EXECUTION_ENV&&(process.env[hi]||process.env[fi]))return process.env[hi]??process.env[fi];if(!process.env.AWS_EC2_METADATA_DISABLED)try{const e=await Ao();return(await co({...e,path:"/latest/meta-data/placement/region"})).toString()}catch(e){}};class vi extends On{constructor(e){const t=(n=(e=>{xr(process.version);const t=yi(e),n=()=>t().then(Er),r=(e=>({apiVersion:"2019-06-10",base64Decoder:e?.base64Decoder??Rn,base64Encoder:e?.base64Encoder??Dn,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??pi,logger:e?.logger??new Tn,serviceId:e?.serviceId??"SSO",urlParser:e?.urlParser??Wt,utf8Decoder:e?.utf8Decoder??L,utf8Encoder:e?.utf8Encoder??B}))(e);return{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??Vo,defaultUserAgentProvider:e?.defaultUserAgentProvider??zo({serviceId:r.serviceId,clientVersion:"3.369.0"}),maxAttempts:e?.maxAttempts??So(ln),region:e?.region??So(At,It),requestHandler:e?.requestHandler??new Ln(n),retryMode:e?.retryMode??So({...pn,default:async()=>(await n()).retryMode||Xt}),sha256:e?.sha256??Bo.bind(null,"sha256"),streamCollector:e?.streamCollector??Bn,useDualstackEndpoint:e?.useDualstackEndpoint??So(Ct),useFipsEndpoint:e?.useFipsEndpoint??So(Tt)}})(e),{...n,useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,defaultSigningName:"awsssoportal"});var n;const r=Nt(t),s=Kt(r),o=Ce(dn(s));super(o),this.config=o,this.middlewareStack.use(Pn(this.config)),this.middlewareStack.use(Mt(this.config)),this.middlewareStack.use(p(this.config)),this.middlewareStack.use(f(this.config)),this.middlewareStack.use(y(this.config)),this.middlewareStack.use(St(this.config))}destroy(){super.destroy()}}class bi extends wr{constructor(e){super(e),Object.setPrototypeOf(this,bi.prototype)}}class Ei extends bi{constructor(e){super({name:"InvalidRequestException",$fault:"client",...e}),this.name="InvalidRequestException",this.$fault="client",Object.setPrototypeOf(this,Ei.prototype)}}class Si extends bi{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Si.prototype)}}class xi extends bi{constructor(e){super({name:"TooManyRequestsException",$fault:"client",...e}),this.name="TooManyRequestsException",this.$fault="client",Object.setPrototypeOf(this,xi.prototype)}}class Pi extends bi{constructor(e){super({name:"UnauthorizedException",$fault:"client",...e}),this.name="UnauthorizedException",this.$fault="client",Object.setPrototypeOf(this,Pi.prototype)}}const Ci=e=>({...e,...e.accessToken&&{accessToken:Kn}}),Ti=e=>({...e,...e.secretAccessKey&&{secretAccessKey:Kn},...e.sessionToken&&{sessionToken:Kn}}),Ai=e=>({...e,...e.roleCredentials&&{roleCredentials:Ti(e.roleCredentials)}}),Ii=vr(bi),ki=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{message:tr});Object.assign(n,s);const o=new Ei({$metadata:Di(e),...n});return _r(o,e.body)},Oi=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{message:tr});Object.assign(n,s);const o=new Si({$metadata:Di(e),...n});return _r(o,e.body)},Ni=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{message:tr});Object.assign(n,s);const o=new xi({$metadata:Di(e),...n});return _r(o,e.body)},Ri=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{message:tr});Object.assign(n,s);const o=new Pi({$metadata:Di(e),...n});return _r(o,e.body)},Di=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Mi=e=>!(null==e||""===e||Object.getOwnPropertyNames(e).includes("length")&&0==e.length||Object.getOwnPropertyNames(e).includes("size")&&0==e.size),$i=(e,t)=>((e,t)=>Vn(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),ji=async(e,t)=>{const n=await $i(e,t);return n.message=n.message??n.Message,n},qi=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=(s=e.headers,"x-amzn-errortype",Object.keys(s).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var s;return void 0!==r?n(e.headers[r]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class Ui extends Wn{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,Ui.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"SSOClient",commandName:"GetRoleCredentialsCommand",inputFilterSensitiveLog:Ci,outputFilterSensitiveLog:Ai},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint(),i=Ar({},Mi,{"x-amz-sso_bearer_token":e.accessToken}),a=`${o?.endsWith("/")?o.slice(0,-1):o||""}/federation/credentials`,c=Ar({role_name:[,Zn(e.roleName,"roleName")],account_id:[,Zn(e.accountId,"accountId")]});return new u({protocol:r,hostname:n,port:s,method:"GET",headers:i,path:a,query:c,body:void 0})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await ji(e.body,t)},r=qi(e,n.body);switch(r){case"InvalidRequestException":case"com.amazonaws.sso#InvalidRequestException":throw await ki(n,t);case"ResourceNotFoundException":case"com.amazonaws.sso#ResourceNotFoundException":throw await Oi(n,t);case"TooManyRequestsException":case"com.amazonaws.sso#TooManyRequestsException":throw await Ni(n,t);case"UnauthorizedException":case"com.amazonaws.sso#UnauthorizedException":throw await Ri(n,t);default:const s=n.body;return Ii({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=Ar({$metadata:Di(e)}),r=Zn(er(await $i(e.body,t)),"body"),s=Ir(r,{roleCredentials:$r});return Object.assign(n,s),n})(e,t)}}class Fi extends Rs{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="TokenProviderError",Object.setPrototypeOf(this,Fi.prototype)}}const Li="To refresh this SSO session run 'aws sso login' with the corresponding profile.";class zi extends wr{constructor(e){super(e),Object.setPrototypeOf(this,zi.prototype)}}class Bi extends zi{constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,Bi.prototype),this.error=e.error,this.error_description=e.error_description}}class Hi extends zi{constructor(e){super({name:"AuthorizationPendingException",$fault:"client",...e}),this.name="AuthorizationPendingException",this.$fault="client",Object.setPrototypeOf(this,Hi.prototype),this.error=e.error,this.error_description=e.error_description}}class Vi extends zi{constructor(e){super({name:"ExpiredTokenException",$fault:"client",...e}),this.name="ExpiredTokenException",this.$fault="client",Object.setPrototypeOf(this,Vi.prototype),this.error=e.error,this.error_description=e.error_description}}class Wi extends zi{constructor(e){super({name:"InternalServerException",$fault:"server",...e}),this.name="InternalServerException",this.$fault="server",Object.setPrototypeOf(this,Wi.prototype),this.error=e.error,this.error_description=e.error_description}}class Ki extends zi{constructor(e){super({name:"InvalidClientException",$fault:"client",...e}),this.name="InvalidClientException",this.$fault="client",Object.setPrototypeOf(this,Ki.prototype),this.error=e.error,this.error_description=e.error_description}}class Gi extends zi{constructor(e){super({name:"InvalidGrantException",$fault:"client",...e}),this.name="InvalidGrantException",this.$fault="client",Object.setPrototypeOf(this,Gi.prototype),this.error=e.error,this.error_description=e.error_description}}class Qi extends zi{constructor(e){super({name:"InvalidRequestException",$fault:"client",...e}),this.name="InvalidRequestException",this.$fault="client",Object.setPrototypeOf(this,Qi.prototype),this.error=e.error,this.error_description=e.error_description}}class Xi extends zi{constructor(e){super({name:"InvalidScopeException",$fault:"client",...e}),this.name="InvalidScopeException",this.$fault="client",Object.setPrototypeOf(this,Xi.prototype),this.error=e.error,this.error_description=e.error_description}}class Ji extends zi{constructor(e){super({name:"SlowDownException",$fault:"client",...e}),this.name="SlowDownException",this.$fault="client",Object.setPrototypeOf(this,Ji.prototype),this.error=e.error,this.error_description=e.error_description}}class Yi extends zi{constructor(e){super({name:"UnauthorizedClientException",$fault:"client",...e}),this.name="UnauthorizedClientException",this.$fault="client",Object.setPrototypeOf(this,Yi.prototype),this.error=e.error,this.error_description=e.error_description}}class Zi extends zi{constructor(e){super({name:"UnsupportedGrantTypeException",$fault:"client",...e}),this.name="UnsupportedGrantTypeException",this.$fault="client",Object.setPrototypeOf(this,Zi.prototype),this.error=e.error,this.error_description=e.error_description}}const ea=vr(zi),ta=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Bi({$metadata:pa(e),...n});return _r(o,e.body)},na=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Hi({$metadata:pa(e),...n});return _r(o,e.body)},ra=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Vi({$metadata:pa(e),...n});return _r(o,e.body)},sa=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Wi({$metadata:pa(e),...n});return _r(o,e.body)},oa=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Ki({$metadata:pa(e),...n});return _r(o,e.body)},ia=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Gi({$metadata:pa(e),...n});return _r(o,e.body)},aa=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Qi({$metadata:pa(e),...n});return _r(o,e.body)},ca=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Xi({$metadata:pa(e),...n});return _r(o,e.body)},ua=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Ji({$metadata:pa(e),...n});return _r(o,e.body)},la=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Yi({$metadata:pa(e),...n});return _r(o,e.body)},da=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{error:tr,error_description:tr});Object.assign(n,s);const o=new Zi({$metadata:pa(e),...n});return _r(o,e.body)},pa=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),ha=(e,t)=>((e,t)=>Vn(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),fa=async(e,t)=>{const n=await ha(e,t);return n.message=n.message??n.Message,n},ma=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=(s=e.headers,"x-amzn-errortype",Object.keys(s).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var s;return void 0!==r?n(e.headers[r]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class ga extends Wn{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,ga.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"SSOOIDCClient",commandName:"CreateTokenCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint(),i=`${o?.endsWith("/")?o.slice(0,-1):o||""}/token`;let a;return a=JSON.stringify(Ir(e,{clientId:[],clientSecret:[],code:[],deviceCode:[],grantType:[],redirectUri:[],refreshToken:[],scope:e=>$r(e)})),new u({protocol:r,hostname:n,port:s,method:"POST",headers:{"content-type":"application/json"},path:i,body:a})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await fa(e.body,t)},r=ma(e,n.body);switch(r){case"AccessDeniedException":case"com.amazonaws.ssooidc#AccessDeniedException":throw await ta(n,t);case"AuthorizationPendingException":case"com.amazonaws.ssooidc#AuthorizationPendingException":throw await na(n,t);case"ExpiredTokenException":case"com.amazonaws.ssooidc#ExpiredTokenException":throw await ra(n,t);case"InternalServerException":case"com.amazonaws.ssooidc#InternalServerException":throw await sa(n,t);case"InvalidClientException":case"com.amazonaws.ssooidc#InvalidClientException":throw await oa(n,t);case"InvalidGrantException":case"com.amazonaws.ssooidc#InvalidGrantException":throw await ia(n,t);case"InvalidRequestException":case"com.amazonaws.ssooidc#InvalidRequestException":throw await aa(n,t);case"InvalidScopeException":case"com.amazonaws.ssooidc#InvalidScopeException":throw await ca(n,t);case"SlowDownException":case"com.amazonaws.ssooidc#SlowDownException":throw await ua(n,t);case"UnauthorizedClientException":case"com.amazonaws.ssooidc#UnauthorizedClientException":throw await la(n,t);case"UnsupportedGrantTypeException":case"com.amazonaws.ssooidc#UnsupportedGrantTypeException":throw await da(n,t);default:const s=n.body;return ea({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=Ar({$metadata:pa(e)}),r=Zn(er(await ha(e.body,t)),"body"),s=Ir(r,{accessToken:tr,expiresIn:Xn,idToken:tr,refreshToken:tr,tokenType:tr});return Object.assign(n,s),n})(e,t)}}const ya="required",wa="fn",_a="argv",va="ref",ba="PartitionResult",Ea="tree",Sa="error",xa="endpoint",Pa={[ya]:!1,type:"String"},Ca={[ya]:!0,default:!1,type:"Boolean"},Ta={[va]:"Endpoint"},Aa={[wa]:"booleanEquals",[_a]:[{[va]:"UseFIPS"},!0]},Ia={[wa]:"booleanEquals",[_a]:[{[va]:"UseDualStack"},!0]},ka={},Oa={[wa]:"booleanEquals",[_a]:[!0,{[wa]:"getAttr",[_a]:[{[va]:ba},"supportsFIPS"]}]},Na={[wa]:"booleanEquals",[_a]:[!0,{[wa]:"getAttr",[_a]:[{[va]:ba},"supportsDualStack"]}]},Ra=[Ta],Da=[Aa],Ma=[Ia],$a={version:"1.0",parameters:{Region:Pa,UseDualStack:Ca,UseFIPS:Ca,Endpoint:Pa},rules:[{conditions:[{[wa]:"aws.partition",[_a]:[{[va]:"Region"}],assign:ba}],type:Ea,rules:[{conditions:[{[wa]:"isSet",[_a]:Ra},{[wa]:"parseURL",[_a]:Ra,assign:"url"}],type:Ea,rules:[{conditions:Da,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Sa},{type:Ea,rules:[{conditions:Ma,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Sa},{endpoint:{url:Ta,properties:ka,headers:ka},type:xa}]}]},{conditions:[Aa,Ia],type:Ea,rules:[{conditions:[Oa,Na],type:Ea,rules:[{endpoint:{url:"https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:ka,headers:ka},type:xa}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Sa}]},{conditions:Da,type:Ea,rules:[{conditions:[Oa],type:Ea,rules:[{type:Ea,rules:[{endpoint:{url:"https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}",properties:ka,headers:ka},type:xa}]}]},{error:"FIPS is enabled but this partition does not support FIPS",type:Sa}]},{conditions:Ma,type:Ea,rules:[{conditions:[Na],type:Ea,rules:[{endpoint:{url:"https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:ka,headers:ka},type:xa}]},{error:"DualStack is enabled but this partition does not support DualStack",type:Sa}]},{endpoint:{url:"https://oidc.{Region}.{PartitionResult#dnsSuffix}",properties:ka,headers:ka},type:xa}]}]},ja=(e,t={})=>gt($a,{endpointParams:e,logger:t.logger});class qa extends On{constructor(e){const t=(n=(e=>{xr(process.version);const t=yi(e),n=()=>t().then(Er),r=(e=>({apiVersion:"2019-06-10",base64Decoder:e?.base64Decoder??Rn,base64Encoder:e?.base64Encoder??Dn,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??ja,logger:e?.logger??new Tn,serviceId:e?.serviceId??"SSO OIDC",urlParser:e?.urlParser??Wt,utf8Decoder:e?.utf8Decoder??L,utf8Encoder:e?.utf8Encoder??B}))(e);return{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??Vo,defaultUserAgentProvider:e?.defaultUserAgentProvider??zo({serviceId:r.serviceId,clientVersion:"3.369.0"}),maxAttempts:e?.maxAttempts??So(ln),region:e?.region??So(At,It),requestHandler:e?.requestHandler??new Ln(n),retryMode:e?.retryMode??So({...pn,default:async()=>(await n()).retryMode||Xt}),sha256:e?.sha256??Bo.bind(null,"sha256"),streamCollector:e?.streamCollector??Bn,useDualstackEndpoint:e?.useDualstackEndpoint??So(Ct),useFipsEndpoint:e?.useFipsEndpoint??So(Tt)}})(e),{...n,useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,defaultSigningName:"awsssooidc"});var n;const r=Nt(t),s=Kt(r),o=Ce(dn(s));super(o),this.config=o,this.middlewareStack.use(Pn(this.config)),this.middlewareStack.use(Mt(this.config)),this.middlewareStack.use(p(this.config)),this.middlewareStack.use(f(this.config)),this.middlewareStack.use(y(this.config)),this.middlewareStack.use(St(this.config))}destroy(){super.destroy()}}const Ua={},Fa=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new Fi(`Token is expired. ${Li}`,!1)},La=(e,t,n=!1)=>{if(void 0===t)throw new Fi(`Value not present for '${e}' in SSO Token${n?". Cannot refresh":""}. ${Li}`,!1)},{writeFile:za}=zs.promises,Ba=new Date(0),Ha=(e={})=>async()=>{const t=await io(e),n=Fs(e),r=t[n];if(!r)throw new Fi(`Profile '${n}' could not be found in shared credentials file.`,!1);if(!r.sso_session)throw new Fi(`Profile '${n}' is missing required property 'sso_session'.`);const s=r.sso_session,o=(await oo(e))[s];if(!o)throw new Fi(`Sso session '${s}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!o[e])throw new Fi(`Sso session '${s}' is missing required property '${e}'.`,!1);o.sso_start_url;const i=o.sso_region;let a;try{a=await Hs(s)}catch(e){throw new Fi(`The SSO session token associated with profile=${n} was not found or is invalid. ${Li}`,!1)}La("accessToken",a.accessToken),La("expiresAt",a.expiresAt);const{accessToken:c,expiresAt:u}=a,l={token:c,expiration:new Date(u)};if(l.expiration.getTime()-Date.now()>3e5)return l;if(Date.now()-Ba.getTime()<3e4)return Fa(l),l;La("clientId",a.clientId,!0),La("clientSecret",a.clientSecret,!0),La("refreshToken",a.refreshToken,!0);try{Ba.setTime(Date.now());const e=await((e,t)=>{const n=(e=>{if(Ua[e])return Ua[e];const t=new qa({region:e});return Ua[e]=t,t})(t);return n.send(new ga({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))})(a,i);La("accessToken",e.accessToken),La("expiresIn",e.expiresIn);const t=new Date(Date.now()+1e3*e.expiresIn);try{await((e,t)=>{const n=Ls(e),r=JSON.stringify(t,null,2);return za(n,r)})(s,{...a,accessToken:e.accessToken,expiresAt:t.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:t}}catch(e){return Fa(l),l}},Va=!1,Wa=async({ssoStartUrl:e,ssoSession:t,ssoAccountId:n,ssoRegion:r,ssoRoleName:s,ssoClient:o,profile:i})=>{let a;const c="To refresh this SSO session run aws sso login with the corresponding profile.";if(t)try{const e=await Ha({profile:i})();a={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new Ds(e.message,Va)}else try{a=await Hs(e)}catch(e){throw new Ds(`The SSO session associated with this profile is invalid. ${c}`,Va)}if(new Date(a.expiresAt).getTime()-Date.now()<=9e5)throw new Ds(`The SSO session associated with this profile has expired. ${c}`,Va);const{accessToken:u}=a,l=o||new vi({region:r});let d;try{d=await l.send(new Ui({accountId:n,roleName:s,accessToken:u}))}catch(e){throw Ds.from(e,Va)}const{roleCredentials:{accessKeyId:p,secretAccessKey:h,sessionToken:f,expiration:m}={}}=d;if(!(p&&h&&f&&m))throw new Ds("SSO returns an invalid temporary credential.",Va);return{accessKeyId:p,secretAccessKey:h,sessionToken:f,expiration:new Date(m)}},Ka=e=>{const{sso_start_url:t,sso_account_id:n,sso_region:r,sso_role_name:s}=e;if(!(t&&n&&r&&s))throw new Ds(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,!1);return e},Ga=(e={})=>async()=>{const{ssoStartUrl:t,ssoAccountId:n,ssoRegion:r,ssoRoleName:s,ssoClient:o,ssoSession:i}=e,a=Fs(e);if(t||n||r||s||i){if(t&&n&&r&&s)return Wa({ssoStartUrl:t,ssoSession:i,ssoAccountId:n,ssoRegion:r,ssoRoleName:s,ssoClient:o,profile:a});throw new Ds('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"')}{const n=(await io(e))[a];if(!n)throw new Ds(`Profile ${a} was not found.`);if(!Fo(n))throw new Ds(`Profile ${a} is not configured with SSO credentials.`);if(n?.sso_session){const s=(await oo(e))[n.sso_session],o=` configurations in profile ${a} and sso-session ${n.sso_session}`;if(r&&r!==s.sso_region)throw new Ds("Conflicting SSO region"+o,!1);if(t&&t!==s.sso_start_url)throw new Ds("Conflicting SSO start_url"+o,!1);n.sso_region=s.sso_region,n.sso_start_url=s.sso_start_url}const{sso_start_url:s,sso_account_id:i,sso_region:c,sso_role_name:u,sso_session:l}=Ka(n);return Wa({ssoStartUrl:s,ssoSession:l,ssoAccountId:i,ssoRegion:c,ssoRoleName:u,ssoClient:o,profile:a})}},Qa=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1,Xa=e=>Promise.resolve({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token}),Ja=(e={})=>async()=>{const t=e?.webIdentityTokenFile??process.env.AWS_WEB_IDENTITY_TOKEN_FILE,n=e?.roleArn??process.env.AWS_ROLE_ARN,r=e?.roleSessionName??process.env.AWS_ROLE_SESSION_NAME;if(!t||!n)throw new Ds("Web identity configuration not specified");return(e=>()=>{const{roleArn:t,roleSessionName:n,webIdentityToken:r,providerId:s,policyArns:o,policy:i,durationSeconds:a,roleAssumerWithWebIdentity:c}=e;if(!c)throw new Ds(`Role Arn '${t}' needs to be assumed with web identity, but no role assumption callback was provided.`,!1);return c({RoleArn:t,RoleSessionName:n??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:r,ProviderId:s,PolicyArns:o,Policy:i,DurationSeconds:a})})({...e,webIdentityToken:(0,zs.readFileSync)(t,{encoding:"ascii"}),roleArn:n,roleSessionName:r})()},Ya=async(e,t,n,r={})=>{const s=t[e];if(Object.keys(r).length>0&&Qa(s))return Xa(s);if(o=s,Boolean(o)&&"object"==typeof o&&"string"==typeof o.role_arn&&["undefined","string"].indexOf(typeof o.role_session_name)>-1&&["undefined","string"].indexOf(typeof o.external_id)>-1&&["undefined","string"].indexOf(typeof o.mfa_serial)>-1&&((e=>"string"==typeof e.source_profile&&void 0===e.credential_source)(o)||(e=>"string"==typeof e.credential_source&&void 0===e.source_profile)(o)))return(async(e,t,n,r={})=>{const s=t[e];if(!n.roleAssumer)throw new Ds(`Profile ${e} requires a role to be assumed, but no role assumption callback was provided.`,!1);const{source_profile:o}=s;if(o&&o in r)throw new Ds(`Detected a cycle attempting to resolve credentials for profile ${Fs(n)}. Profiles visited: `+Object.keys(r).join(", "),!1);const i=o?Ya(o,t,n,{...r,[o]:!0}):((e,t)=>{const n={EcsContainer:yo,Ec2InstanceMetadata:Ro,Environment:Ms};if(e in n)return n[e]();throw new Ds(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`)})(s.credential_source,e)(),a={RoleArn:s.role_arn,RoleSessionName:s.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:s.external_id},{mfa_serial:c}=s;if(c){if(!n.mfaCodeProvider)throw new Ds(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,!1);a.SerialNumber=c,a.TokenCode=await n.mfaCodeProvider(c)}const u=await i;return n.roleAssumer(u,a)})(e,t,n,r);var o;if(Qa(s))return Xa(s);if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1)(s))return(async(e,t)=>Ja({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity})())(s,n);if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(s))return(async(e,t)=>Uo({...e,profile:t})())(n,e);if(Fo(s))return(e=>{const{sso_start_url:t,sso_account_id:n,sso_session:r,sso_region:s,sso_role_name:o}=Ka(e);return Ga({ssoStartUrl:t,ssoAccountId:n,ssoSession:r,ssoRegion:s,ssoRoleName:o})()})(s);throw new Ds(`Profile ${e} could not be found or parsed in shared credentials file.`)},Za=(e={})=>w(Eo(...e.profile||process.env[Us]?[]:[Ms()],Ga(e),((e={})=>async()=>{const t=await io(e);return Ya(Fs(e),t,e)})(e),Uo(e),Ja(e),(e=>process.env[mo]||process.env[fo]?yo(e):process.env.AWS_EC2_METADATA_DISABLED?async()=>{throw new Ds("EC2 Instance Metadata Service access disabled")}:Ro(e))(e),(async()=>{throw new Ds("Could not load credentials from any providers",!1)})),(e=>void 0!==e.expiration&&e.expiration.getTime()-Date.now()<3e5),(e=>void 0!==e.expiration)),ec="required",tc="type",nc="fn",rc="argv",sc="ref",oc="booleanEquals",ic="tree",ac="stringEquals",cc="sigv4",uc="us-east-1",lc="endpoint",dc="https://sts.{Region}.{PartitionResult#dnsSuffix}",pc="error",hc="getAttr",fc={[ec]:!1,[tc]:"String"},mc={[ec]:!0,default:!1,[tc]:"Boolean"},gc={[sc]:"Endpoint"},yc={[nc]:"isSet",[rc]:[{[sc]:"Region"}]},wc={[sc]:"Region"},_c={[nc]:"aws.partition",[rc]:[wc],assign:"PartitionResult"},vc={[sc]:"UseFIPS"},bc={[sc]:"UseDualStack"},Ec={url:"https://sts.amazonaws.com",properties:{authSchemes:[{name:cc,signingName:"sts",signingRegion:uc}]},headers:{}},Sc={},xc={conditions:[{[nc]:ac,[rc]:[wc,"aws-global"]}],[lc]:Ec,[tc]:lc},Pc={[nc]:oc,[rc]:[vc,!0]},Cc={[nc]:oc,[rc]:[bc,!0]},Tc={[nc]:oc,[rc]:[!0,{[nc]:hc,[rc]:[{[sc]:"PartitionResult"},"supportsFIPS"]}]},Ac={[sc]:"PartitionResult"},Ic={[nc]:oc,[rc]:[!0,{[nc]:hc,[rc]:[Ac,"supportsDualStack"]}]},kc=[{[nc]:"isSet",[rc]:[gc]}],Oc=[Pc],Nc=[Cc],Rc={version:"1.0",parameters:{Region:fc,UseDualStack:mc,UseFIPS:mc,Endpoint:fc,UseGlobalEndpoint:mc},rules:[{conditions:[{[nc]:oc,[rc]:[{[sc]:"UseGlobalEndpoint"},!0]},{[nc]:"not",[rc]:kc},yc,_c,{[nc]:oc,[rc]:[vc,!1]},{[nc]:oc,[rc]:[bc,!1]}],[tc]:ic,rules:[{conditions:[{[nc]:ac,[rc]:[wc,"ap-northeast-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"ap-south-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"ap-southeast-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"ap-southeast-2"]}],endpoint:Ec,[tc]:lc},xc,{conditions:[{[nc]:ac,[rc]:[wc,"ca-central-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"eu-central-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"eu-north-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"eu-west-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"eu-west-2"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"eu-west-3"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"sa-east-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,uc]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"us-east-2"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"us-west-1"]}],endpoint:Ec,[tc]:lc},{conditions:[{[nc]:ac,[rc]:[wc,"us-west-2"]}],endpoint:Ec,[tc]:lc},{endpoint:{url:dc,properties:{authSchemes:[{name:cc,signingName:"sts",signingRegion:"{Region}"}]},headers:Sc},[tc]:lc}]},{conditions:kc,[tc]:ic,rules:[{conditions:Oc,error:"Invalid Configuration: FIPS and custom endpoint are not supported",[tc]:pc},{[tc]:ic,rules:[{conditions:Nc,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",[tc]:pc},{endpoint:{url:gc,properties:Sc,headers:Sc},[tc]:lc}]}]},{[tc]:ic,rules:[{conditions:[yc],[tc]:ic,rules:[{conditions:[_c],[tc]:ic,rules:[{conditions:[Pc,Cc],[tc]:ic,rules:[{conditions:[Tc,Ic],[tc]:ic,rules:[{[tc]:ic,rules:[{endpoint:{url:"https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Sc,headers:Sc},[tc]:lc}]}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",[tc]:pc}]},{conditions:Oc,[tc]:ic,rules:[{conditions:[Tc],[tc]:ic,rules:[{[tc]:ic,rules:[{conditions:[{[nc]:ac,[rc]:["aws-us-gov",{[nc]:hc,[rc]:[Ac,"name"]}]}],endpoint:{url:"https://sts.{Region}.amazonaws.com",properties:Sc,headers:Sc},[tc]:lc},{endpoint:{url:"https://sts-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Sc,headers:Sc},[tc]:lc}]}]},{error:"FIPS is enabled but this partition does not support FIPS",[tc]:pc}]},{conditions:Nc,[tc]:ic,rules:[{conditions:[Ic],[tc]:ic,rules:[{[tc]:ic,rules:[{endpoint:{url:"https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Sc,headers:Sc},[tc]:lc}]}]},{error:"DualStack is enabled but this partition does not support DualStack",[tc]:pc}]},{[tc]:ic,rules:[xc,{endpoint:{url:dc,properties:Sc,headers:Sc},[tc]:lc}]}]}]},{error:"Invalid Configuration: Missing Region",[tc]:pc}]}]},Dc=(e,t={})=>gt(Rc,{endpointParams:e,logger:t.logger});class Mc extends On{constructor(e){const t=(n=(e=>{xr(process.version);const t=yi(e),n=()=>t().then(Er),r=(e=>({apiVersion:"2011-06-15",base64Decoder:e?.base64Decoder??Rn,base64Encoder:e?.base64Encoder??Dn,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Dc,logger:e?.logger??new Tn,serviceId:e?.serviceId??"STS",urlParser:e?.urlParser??Wt,utf8Decoder:e?.utf8Decoder??L,utf8Encoder:e?.utf8Encoder??B}))(e);return{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??Vo,credentialDefaultProvider:e?.credentialDefaultProvider??(s=Za,e=>s({roleAssumer:Os(e,e.stsClientCtor),roleAssumerWithWebIdentity:Ns(e,e.stsClientCtor),...e})),defaultUserAgentProvider:e?.defaultUserAgentProvider??zo({serviceId:r.serviceId,clientVersion:"3.369.0"}),maxAttempts:e?.maxAttempts??So(ln),region:e?.region??So(At,It),requestHandler:e?.requestHandler??new Ln(n),retryMode:e?.retryMode??So({...pn,default:async()=>(await n()).retryMode||Xt}),sha256:e?.sha256??Bo.bind(null,"sha256"),streamCollector:e?.streamCollector??Bn,useDualstackEndpoint:e?.useDualstackEndpoint??So(Ct),useFipsEndpoint:e?.useFipsEndpoint??So(Tt)};var s})(e),{...n,useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,useGlobalEndpoint:n.useGlobalEndpoint??!1,defaultSigningName:"sts"});var n;const r=Nt(t),s=Kt(r),o=Ce(((e,{stsClientCtor:t})=>_e({...e,stsClientCtor:t}))(dn(s),{stsClientCtor:Mc}));super(o),this.config=o,this.middlewareStack.use(Pn(this.config)),this.middlewareStack.use(Mt(this.config)),this.middlewareStack.use(p(this.config)),this.middlewareStack.use(f(this.config)),this.middlewareStack.use(y(this.config)),this.middlewareStack.use(St(this.config))}destroy(){super.destroy()}}const $c=(e,t)=>t?class extends e{constructor(e){super(e);for(const e of t)this.middlewareStack.use(e)}}:e,jc=(e={},t)=>Os(e,$c(Mc,t)),qc=(e={},t)=>Ns(e,$c(Mc,t)),Uc=e=>t=>e({roleAssumer:jc(t),roleAssumerWithWebIdentity:qc(t),...t}),Fc="required",Lc="fn",zc="argv",Bc="ref",Hc="isSet",Vc="tree",Wc="error",Kc="endpoint",Gc="PartitionResult",Qc="stringEquals",Xc={[Fc]:!1,type:"String"},Jc={[Fc]:!0,default:!1,type:"Boolean"},Yc={[Bc]:"Endpoint"},Zc={[Lc]:"booleanEquals",[zc]:[{[Bc]:"UseFIPS"},!0]},eu={[Lc]:"booleanEquals",[zc]:[{[Bc]:"UseDualStack"},!0]},tu={},nu={[Bc]:"Region"},ru={[Lc]:"booleanEquals",[zc]:[!0,{[Lc]:"getAttr",[zc]:[{[Bc]:Gc},"supportsFIPS"]}]},su={[Lc]:"booleanEquals",[zc]:[!0,{[Lc]:"getAttr",[zc]:[{[Bc]:Gc},"supportsDualStack"]}]},ou=[Zc],iu=[eu],au=[nu],cu={version:"1.0",parameters:{Region:Xc,UseDualStack:Jc,UseFIPS:Jc,Endpoint:Xc},rules:[{conditions:[{[Lc]:Hc,[zc]:[Yc]}],type:Vc,rules:[{conditions:ou,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Wc},{type:Vc,rules:[{conditions:iu,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Wc},{endpoint:{url:Yc,properties:tu,headers:tu},type:Kc}]}]},{type:Vc,rules:[{conditions:[{[Lc]:Hc,[zc]:au}],type:Vc,rules:[{conditions:[{[Lc]:"aws.partition",[zc]:au,assign:Gc}],type:Vc,rules:[{conditions:[Zc,eu],type:Vc,rules:[{conditions:[ru,su],type:Vc,rules:[{type:Vc,rules:[{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:tu,headers:tu},type:Kc}]}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Wc}]},{conditions:ou,type:Vc,rules:[{conditions:[ru],type:Vc,rules:[{type:Vc,rules:[{conditions:[{[Lc]:Qc,[zc]:[nu,"us-gov-east-1"]}],endpoint:{url:"https://cloudtrail.us-gov-east-1.amazonaws.com",properties:tu,headers:tu},type:Kc},{conditions:[{[Lc]:Qc,[zc]:[nu,"us-gov-west-1"]}],endpoint:{url:"https://cloudtrail.us-gov-west-1.amazonaws.com",properties:tu,headers:tu},type:Kc},{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dnsSuffix}",properties:tu,headers:tu},type:Kc}]}]},{error:"FIPS is enabled but this partition does not support FIPS",type:Wc}]},{conditions:iu,type:Vc,rules:[{conditions:[su],type:Vc,rules:[{type:Vc,rules:[{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:tu,headers:tu},type:Kc}]}]},{error:"DualStack is enabled but this partition does not support DualStack",type:Wc}]},{type:Vc,rules:[{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dnsSuffix}",properties:tu,headers:tu},type:Kc}]}]}]},{error:"Invalid Configuration: Missing Region",type:Wc}]}]},uu=(e,t={})=>gt(cu,{endpointParams:e,logger:t.logger});class lu extends On{constructor(e){const t=(n=(e=>{xr(process.version);const t=yi(e),n=()=>t().then(Er),r=(e=>({apiVersion:"2013-11-01",base64Decoder:e?.base64Decoder??Rn,base64Encoder:e?.base64Encoder??Dn,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??uu,logger:e?.logger??new Tn,serviceId:e?.serviceId??"CloudTrail",urlParser:e?.urlParser??Wt,utf8Decoder:e?.utf8Decoder??L,utf8Encoder:e?.utf8Encoder??B}))(e);return{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??Vo,credentialDefaultProvider:e?.credentialDefaultProvider??Uc(Za),defaultUserAgentProvider:e?.defaultUserAgentProvider??zo({serviceId:r.serviceId,clientVersion:"3.369.0"}),maxAttempts:e?.maxAttempts??So(ln),region:e?.region??So(At,It),requestHandler:e?.requestHandler??new Ln(n),retryMode:e?.retryMode??So({...pn,default:async()=>(await n()).retryMode||Xt}),sha256:e?.sha256??Bo.bind(null,"sha256"),streamCollector:e?.streamCollector??Bn,useDualstackEndpoint:e?.useDualstackEndpoint??So(Ct),useFipsEndpoint:e?.useFipsEndpoint??So(Tt)}})(e),{...n,useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,defaultSigningName:"cloudtrail"});var n;const r=Nt(t),s=Kt(r),o=dn(s),i=Ce(_e(o));super(i),this.config=i,this.middlewareStack.use(Pn(this.config)),this.middlewareStack.use(Mt(this.config)),this.middlewareStack.use(p(this.config)),this.middlewareStack.use(f(this.config)),this.middlewareStack.use(y(this.config)),this.middlewareStack.use(Pe(this.config)),this.middlewareStack.use(St(this.config))}destroy(){super.destroy()}}class du extends wr{constructor(e){super(e),Object.setPrototypeOf(this,du.prototype)}}class pu extends du{constructor(e){super({name:"OperationNotPermittedException",$fault:"client",...e}),this.name="OperationNotPermittedException",this.$fault="client",Object.setPrototypeOf(this,pu.prototype),this.Message=e.Message}}class hu extends du{constructor(e){super({name:"UnsupportedOperationException",$fault:"client",...e}),this.name="UnsupportedOperationException",this.$fault="client",Object.setPrototypeOf(this,hu.prototype),this.Message=e.Message}}class fu extends du{constructor(e){super({name:"InvalidMaxResultsException",$fault:"client",...e}),this.name="InvalidMaxResultsException",this.$fault="client",Object.setPrototypeOf(this,fu.prototype),this.Message=e.Message}}class mu extends du{constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),this.name="InvalidNextTokenException",this.$fault="client",Object.setPrototypeOf(this,mu.prototype),this.Message=e.Message}}class gu extends du{constructor(e){super({name:"InvalidTimeRangeException",$fault:"client",...e}),this.name="InvalidTimeRangeException",this.$fault="client",Object.setPrototypeOf(this,gu.prototype),this.Message=e.Message}}class yu extends du{constructor(e){super({name:"InvalidEventCategoryException",$fault:"client",...e}),this.name="InvalidEventCategoryException",this.$fault="client",Object.setPrototypeOf(this,yu.prototype),this.Message=e.Message}}class wu extends du{constructor(e){super({name:"InvalidLookupAttributesException",$fault:"client",...e}),this.name="InvalidLookupAttributesException",this.$fault="client",Object.setPrototypeOf(this,wu.prototype),this.Message=e.Message}}const _u=async(e,t)=>{const n=e.body,r=$r(n),s=new yu({$metadata:Tu(e),...r});return _r(s,n)},vu=async(e,t)=>{const n=e.body,r=$r(n),s=new wu({$metadata:Tu(e),...r});return _r(s,n)},bu=async(e,t)=>{const n=e.body,r=$r(n),s=new fu({$metadata:Tu(e),...r});return _r(s,n)},Eu=async(e,t)=>{const n=e.body,r=$r(n),s=new mu({$metadata:Tu(e),...r});return _r(s,n)},Su=async(e,t)=>{const n=e.body,r=$r(n),s=new gu({$metadata:Tu(e),...r});return _r(s,n)},xu=async(e,t)=>{const n=e.body,r=$r(n),s=new pu({$metadata:Tu(e),...r});return _r(s,n)},Pu=async(e,t)=>{const n=e.body,r=$r(n),s=new hu({$metadata:Tu(e),...r});return _r(s,n)},Cu=(e,t)=>Ir(e,{AccessKeyId:tr,CloudTrailEvent:tr,EventId:tr,EventName:tr,EventSource:tr,EventTime:e=>Zn((e=>{if(null==e)return;let t;if("number"==typeof e)t=e;else{if("string"!=typeof e)throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");t=(e=>Gn("string"==typeof e?rr(e):e))(e)}if(Number.isNaN(t)||t===1/0||t===-1/0)throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");return new Date(Math.round(1e3*t))})(Gn(e))),ReadOnly:tr,Resources:$r,Username:tr}),Tu=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Au=vr(du);const Iu=(e,t)=>((e,t)=>Vn(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),ku=async(e,t)=>{const n=await Iu(e,t);return n.message=n.message??n.Message,n},Ou=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=(s=e.headers,"x-amzn-errortype",Object.keys(s).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var s;return void 0!==r?n(e.headers[r]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class Nu extends Wn{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,Nu.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"CloudTrailClient",commandName:"LookupEventsCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n={"content-type":"application/x-amz-json-1.1","x-amz-target":`CloudTrail_20131101.${"LookupEvents"}`};let r;return r=JSON.stringify(((e,t)=>Ir(e,{EndTime:e=>Math.round(e.getTime()/1e3),EventCategory:[],LookupAttributes:$r,MaxResults:[],NextToken:[],StartTime:e=>Math.round(e.getTime()/1e3)}))(e)),(async(e,t,n,r,s)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),l={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==r&&(l.hostname=r),void 0!==s&&(l.body=s),new u(l)})(t,n,"/",void 0,r)})(e,t)}deserialize(e,t){return(async(e,t)=>{if(e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await ku(e.body,t)},r=Ou(e,n.body);switch(r){case"InvalidEventCategoryException":case"com.amazonaws.cloudtrail#InvalidEventCategoryException":throw await _u(n,t);case"InvalidLookupAttributesException":case"com.amazonaws.cloudtrail#InvalidLookupAttributesException":throw await vu(n,t);case"InvalidMaxResultsException":case"com.amazonaws.cloudtrail#InvalidMaxResultsException":throw await bu(n,t);case"InvalidNextTokenException":case"com.amazonaws.cloudtrail#InvalidNextTokenException":throw await Eu(n,t);case"InvalidTimeRangeException":case"com.amazonaws.cloudtrail#InvalidTimeRangeException":throw await Su(n,t);case"OperationNotPermittedException":case"com.amazonaws.cloudtrail#OperationNotPermittedException":throw await xu(n,t);case"UnsupportedOperationException":case"com.amazonaws.cloudtrail#UnsupportedOperationException":throw await Pu(n,t);default:const s=n.body;return Au({output:e,parsedBody:s,errorCode:r})}})(e,t);let n={};return n=((e,t)=>Ir(e,{Events:e=>((e,t)=>{const n=(e||[]).filter((e=>null!=e)).map((e=>Cu(e)));return n})(e),NextToken:tr}))(await Iu(e.body,t)),{$metadata:Tu(e),...n}})(e,t)}}var Ru=function(e){var t=JSON.parse(e.CloudTrailEvent).userIdentity.arn.split("/").slice(1),n=t[0],r=t[1];this.iamRole=n,this.stsSession=r,this.eventTime=e.EventTime},Du=function(){function e(){this.cloudTrailClient=new lu({})}return e.prototype.retrieveQuickSightUserEvents=function(e){return t=this,n=void 0,s=function(){var t,n,r,s;return function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(o){switch(o.label){case 0:t=[],n=null,o.label=1;case 1:return r=new Nu({LookupAttributes:[{AttributeKey:"EventSource",AttributeValue:"quicksight.amazonaws.com"}],StartTime:e,NextToken:n}),[4,this.cloudTrailClient.send(r)];case 2:s=o.sent(),n=s.NextToken,s.Events.forEach((function(e){return t.push(new Ru(e))})),o.label=3;case 3:if(n)return[3,1];o.label=4;case 4:return[2,t]}}))},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,a)}c((s=s.apply(t,n||[])).next())}));var t,n,r,s},e.prototype.getLastAccessDate=function(e,t){var n=t.filter((function(t){return e.iamRole===t.iamRole&&e.stsSession===t.stsSession}));if(0===n.length)return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," no CloudTrail events found")),new Date(0);var r=n.sort((function(e,t){return e.eventTime<=t.eventTime?1:-1}))[0];return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," latest event: ").concat(JSON.stringify(r,null,1))),r.eventTime},e}();const Mu="required",$u="fn",ju="argv",qu="ref",Uu="isSet",Fu="tree",Lu="error",zu="endpoint",Bu="PartitionResult",Hu="getAttr",Vu={[Mu]:!1,type:"String"},Wu={[Mu]:!0,default:!1,type:"Boolean"},Ku={[qu]:"Endpoint"},Gu={[$u]:"booleanEquals",[ju]:[{[qu]:"UseFIPS"},!0]},Qu={[$u]:"booleanEquals",[ju]:[{[qu]:"UseDualStack"},!0]},Xu={},Ju={[$u]:"booleanEquals",[ju]:[!0,{[$u]:Hu,[ju]:[{[qu]:Bu},"supportsFIPS"]}]},Yu={[qu]:Bu},Zu={[$u]:"booleanEquals",[ju]:[!0,{[$u]:Hu,[ju]:[Yu,"supportsDualStack"]}]},el=[Gu],tl=[Qu],nl=[{[qu]:"Region"}],rl={version:"1.0",parameters:{Region:Vu,UseDualStack:Wu,UseFIPS:Wu,Endpoint:Vu},rules:[{conditions:[{[$u]:Uu,[ju]:[Ku]}],type:Fu,rules:[{conditions:el,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Lu},{type:Fu,rules:[{conditions:tl,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Lu},{endpoint:{url:Ku,properties:Xu,headers:Xu},type:zu}]}]},{type:Fu,rules:[{conditions:[{[$u]:Uu,[ju]:nl}],type:Fu,rules:[{conditions:[{[$u]:"aws.partition",[ju]:nl,assign:Bu}],type:Fu,rules:[{conditions:[Gu,Qu],type:Fu,rules:[{conditions:[Ju,Zu],type:Fu,rules:[{type:Fu,rules:[{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Xu,headers:Xu},type:zu}]}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Lu}]},{conditions:el,type:Fu,rules:[{conditions:[Ju],type:Fu,rules:[{type:Fu,rules:[{conditions:[{[$u]:"stringEquals",[ju]:["aws-us-gov",{[$u]:Hu,[ju]:[Yu,"name"]}]}],endpoint:{url:"https://monitoring.{Region}.amazonaws.com",properties:Xu,headers:Xu},type:zu},{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Xu,headers:Xu},type:zu}]}]},{error:"FIPS is enabled but this partition does not support FIPS",type:Lu}]},{conditions:tl,type:Fu,rules:[{conditions:[Zu],type:Fu,rules:[{type:Fu,rules:[{endpoint:{url:"https://monitoring.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Xu,headers:Xu},type:zu}]}]},{error:"DualStack is enabled but this partition does not support DualStack",type:Lu}]},{type:Fu,rules:[{endpoint:{url:"https://monitoring.{Region}.{PartitionResult#dnsSuffix}",properties:Xu,headers:Xu},type:zu}]}]}]},{error:"Invalid Configuration: Missing Region",type:Lu}]}]},sl=(e,t={})=>gt(rl,{endpointParams:e,logger:t.logger});class ol extends On{constructor(e){const t=(n=(e=>{xr(process.version);const t=yi(e),n=()=>t().then(Er),r=(e=>({apiVersion:"2010-08-01",base64Decoder:e?.base64Decoder??Rn,base64Encoder:e?.base64Encoder??Dn,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??sl,logger:e?.logger??new Tn,serviceId:e?.serviceId??"CloudWatch",urlParser:e?.urlParser??Wt,utf8Decoder:e?.utf8Decoder??L,utf8Encoder:e?.utf8Encoder??B}))(e);return{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??Vo,credentialDefaultProvider:e?.credentialDefaultProvider??Uc(Za),defaultUserAgentProvider:e?.defaultUserAgentProvider??zo({serviceId:r.serviceId,clientVersion:"3.369.0"}),maxAttempts:e?.maxAttempts??So(ln),region:e?.region??So(At,It),requestHandler:e?.requestHandler??new Ln(n),retryMode:e?.retryMode??So({...pn,default:async()=>(await n()).retryMode||Xt}),sha256:e?.sha256??Bo.bind(null,"sha256"),streamCollector:e?.streamCollector??Bn,useDualstackEndpoint:e?.useDualstackEndpoint??So(Ct),useFipsEndpoint:e?.useFipsEndpoint??So(Tt)}})(e),{...n,useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,defaultSigningName:"monitoring"});var n;const r=Nt(t),s=Kt(r),o=dn(s),i=Ce(_e(o));super(i),this.config=i,this.middlewareStack.use(Pn(this.config)),this.middlewareStack.use(Mt(this.config)),this.middlewareStack.use(p(this.config)),this.middlewareStack.use(f(this.config)),this.middlewareStack.use(y(this.config)),this.middlewareStack.use(Pe(this.config)),this.middlewareStack.use(St(this.config))}destroy(){super.destroy()}}class il extends wr{constructor(e){super(e),Object.setPrototypeOf(this,il.prototype)}}class al extends il{constructor(e){super({name:"InternalServiceFault",$fault:"server",...e}),this.name="InternalServiceFault",this.$fault="server",Object.setPrototypeOf(this,al.prototype),this.Message=e.Message}}class cl extends il{constructor(e){super({name:"InvalidParameterCombinationException",$fault:"client",...e}),this.name="InvalidParameterCombinationException",this.$fault="client",Object.setPrototypeOf(this,cl.prototype)}}class ul extends il{constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,ul.prototype)}}class ll extends il{constructor(e){super({name:"MissingRequiredParameterException",$fault:"client",...e}),this.name="MissingRequiredParameterException",this.$fault="client",Object.setPrototypeOf(this,ll.prototype)}}const dl=async(e,t)=>{const n=e.body,r=vl(n.Error,t),s=new al({$metadata:xl(e),...r});return _r(s,n)},pl=async(e,t)=>{const n=e.body,r=bl(n.Error,t),s=new cl({$metadata:xl(e),...r});return _r(s,n)},hl=async(e,t)=>{const n=e.body,r=El(n.Error,t),s=new ul({$metadata:xl(e),...r});return _r(s,n)},fl=async(e,t)=>{const n=e.body,r=Sl(n.Error,t),s=new ll({$metadata:xl(e),...r});return _r(s,n)},ml=(e,t)=>{const n={};return null!=e.Name&&(n.Name=e.Name),null!=e.Value&&(n.Value=e.Value),n},gl=(e,t)=>{const n={};if(null!=e.MetricName&&(n.MetricName=e.MetricName),null!=e.Dimensions){const t=((e,t)=>{const n={};let r=1;for(const t of e){if(null===t)continue;const e=ml(t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n})(e.Dimensions);0===e.Dimensions?.length&&(n.Dimensions=[]),Object.entries(t).forEach((([e,t])=>{n[`Dimensions.${e}`]=t}))}if(null!=e.Timestamp&&(n.Timestamp=e.Timestamp.toISOString().split(".")[0]+"Z"),null!=e.Value&&(n.Value=Mr(e.Value)),null!=e.StatisticValues){const r=wl(e.StatisticValues,t);Object.entries(r).forEach((([e,t])=>{n[`StatisticValues.${e}`]=t}))}if(null!=e.Values){const r=_l(e.Values,t);0===e.Values?.length&&(n.Values=[]),Object.entries(r).forEach((([e,t])=>{n[`Values.${e}`]=t}))}if(null!=e.Counts){const t=((e,t)=>{const n={};let r=1;for(const t of e)null!==t&&(n[`member.${r}`]=Mr(t),r++);return n})(e.Counts);0===e.Counts?.length&&(n.Counts=[]),Object.entries(t).forEach((([e,t])=>{n[`Counts.${e}`]=t}))}return null!=e.Unit&&(n.Unit=e.Unit),null!=e.StorageResolution&&(n.StorageResolution=e.StorageResolution),n},yl=(e,t)=>{const n={};if(null!=e.Namespace&&(n.Namespace=e.Namespace),null!=e.MetricData){const r=((e,t)=>{const n={};let r=1;for(const s of e){if(null===s)continue;const e=gl(s,t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n})(e.MetricData,t);0===e.MetricData?.length&&(n.MetricData=[]),Object.entries(r).forEach((([e,t])=>{n[`MetricData.${e}`]=t}))}return n},wl=(e,t)=>{const n={};return null!=e.SampleCount&&(n.SampleCount=Mr(e.SampleCount)),null!=e.Sum&&(n.Sum=Mr(e.Sum)),null!=e.Minimum&&(n.Minimum=Mr(e.Minimum)),null!=e.Maximum&&(n.Maximum=Mr(e.Maximum)),n},_l=(e,t)=>{const n={};let r=1;for(const t of e)null!==t&&(n[`member.${r}`]=Mr(t),r++);return n},vl=(e,t)=>{const n={};return void 0!==e.Message&&(n.Message=tr(e.Message)),n},bl=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},El=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},Sl=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},xl=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Pl=vr(il),Cl={"content-type":"application/x-www-form-urlencoded"},Tl=async(e,t)=>{const n=await((e,t)=>((e,t)=>Vn(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>{if(e.length){const t=new Qr.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});t.addEntity("#xD","\r"),t.addEntity("#10","\n");const n=t.parse(e),r="#text",s=Object.keys(n)[0],o=n[s];return o[r]&&(o[s]=o[r],delete o[r]),Cr(o)}return{}})))(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n},Al=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class Il extends Wn{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,Il.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"CloudWatchClient",commandName:"PutMetricDataCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n=Cl;let r;return s={...yl(e,t),Action:"PutMetricData",Version:"2010-08-01"},r=Object.entries(s).map((([e,t])=>Pr(e)+"="+Pr(t))).join("&"),(async(e,t,n,r,s)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),l={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==r&&(l.hostname=r),void 0!==s&&(l.body=s),new u(l)})(t,n,"/",void 0,r);var s})(e,t)}deserialize(e,t){return(async(e,t)=>e.statusCode>=300?(async(e,t)=>{const n={...e,body:await Tl(e.body,t)},r=Al(e,n.body);switch(r){case"InternalServiceError":case"com.amazonaws.cloudwatch#InternalServiceFault":throw await dl(n,t);case"InvalidParameterCombination":case"com.amazonaws.cloudwatch#InvalidParameterCombinationException":throw await pl(n,t);case"InvalidParameterValue":case"com.amazonaws.cloudwatch#InvalidParameterValueException":throw await hl(n,t);case"MissingParameter":case"com.amazonaws.cloudwatch#MissingRequiredParameterException":throw await fl(n,t);default:const s=n.body;return Pl({output:e,parsedBody:s.Error,errorCode:r})}})(e,t):(await Vn(e.body,t),{$metadata:xl(e)}))(e,t)}}var kl=function(){function e(){this.metricData=[],this.cloudWatchClient=new ol({})}return e.prototype.queueMetric=function(e){this.metricData.push(e)},e.prototype.emitQueuedMetrics=function(){return e=this,t=void 0,r=function(){var e;return function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(t){switch(t.label){case 0:return e=new Il({Namespace:process.env.AWS_LAMBDA_FUNCTION_NAME,MetricData:this.metricData}),console.debug("Emitting metrics:\n".concat(JSON.stringify(e.input,null,2))),[4,this.cloudWatchClient.send(e)];case 1:return t.sent(),this.metricData=[],[2]}}))},new((n=void 0)||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}));var e,t,n,r},e}();const Ol="required",Nl="fn",Rl="argv",Dl="ref",Ml="PartitionResult",$l="tree",jl="error",ql="endpoint",Ul={[Ol]:!1,type:"String"},Fl={[Ol]:!0,default:!1,type:"Boolean"},Ll={[Dl]:"Endpoint"},zl={[Nl]:"booleanEquals",[Rl]:[{[Dl]:"UseFIPS"},!0]},Bl={[Nl]:"booleanEquals",[Rl]:[{[Dl]:"UseDualStack"},!0]},Hl={},Vl={[Nl]:"booleanEquals",[Rl]:[!0,{[Nl]:"getAttr",[Rl]:[{[Dl]:Ml},"supportsFIPS"]}]},Wl={[Nl]:"booleanEquals",[Rl]:[!0,{[Nl]:"getAttr",[Rl]:[{[Dl]:Ml},"supportsDualStack"]}]},Kl=[Ll],Gl=[zl],Ql=[Bl],Xl={version:"1.0",parameters:{Region:Ul,UseDualStack:Fl,UseFIPS:Fl,Endpoint:Ul},rules:[{conditions:[{[Nl]:"aws.partition",[Rl]:[{[Dl]:"Region"}],assign:Ml}],type:$l,rules:[{conditions:[{[Nl]:"isSet",[Rl]:Kl},{[Nl]:"parseURL",[Rl]:Kl,assign:"url"}],type:$l,rules:[{conditions:Gl,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:jl},{type:$l,rules:[{conditions:Ql,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:jl},{endpoint:{url:Ll,properties:Hl,headers:Hl},type:ql}]}]},{conditions:[zl,Bl],type:$l,rules:[{conditions:[Vl,Wl],type:$l,rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Hl,headers:Hl},type:ql}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:jl}]},{conditions:Gl,type:$l,rules:[{conditions:[Vl],type:$l,rules:[{type:$l,rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Hl,headers:Hl},type:ql}]}]},{error:"FIPS is enabled but this partition does not support FIPS",type:jl}]},{conditions:Ql,type:$l,rules:[{conditions:[Wl],type:$l,rules:[{endpoint:{url:"https://email.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Hl,headers:Hl},type:ql}]},{error:"DualStack is enabled but this partition does not support DualStack",type:jl}]},{endpoint:{url:"https://email.{Region}.{PartitionResult#dnsSuffix}",properties:Hl,headers:Hl},type:ql}]}]},Jl=(e,t={})=>gt(Xl,{endpointParams:e,logger:t.logger});class Yl extends On{constructor(e){const t=(n=(e=>{xr(process.version);const t=yi(e),n=()=>t().then(Er),r=(e=>({apiVersion:"2010-12-01",base64Decoder:e?.base64Decoder??Rn,base64Encoder:e?.base64Encoder??Dn,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Jl,logger:e?.logger??new Tn,serviceId:e?.serviceId??"SES",urlParser:e?.urlParser??Wt,utf8Decoder:e?.utf8Decoder??L,utf8Encoder:e?.utf8Encoder??B}))(e);return{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??Vo,credentialDefaultProvider:e?.credentialDefaultProvider??Uc(Za),defaultUserAgentProvider:e?.defaultUserAgentProvider??zo({serviceId:r.serviceId,clientVersion:"3.369.0"}),maxAttempts:e?.maxAttempts??So(ln),region:e?.region??So(At,It),requestHandler:e?.requestHandler??new Ln(n),retryMode:e?.retryMode??So({...pn,default:async()=>(await n()).retryMode||Xt}),sha256:e?.sha256??Bo.bind(null,"sha256"),streamCollector:e?.streamCollector??Bn,useDualstackEndpoint:e?.useDualstackEndpoint??So(Ct),useFipsEndpoint:e?.useFipsEndpoint??So(Tt)}})(e),{...n,useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,defaultSigningName:"ses"});var n;const r=Nt(t),s=Kt(r),o=dn(s),i=Ce(_e(o));super(i),this.config=i,this.middlewareStack.use(Pn(this.config)),this.middlewareStack.use(Mt(this.config)),this.middlewareStack.use(p(this.config)),this.middlewareStack.use(f(this.config)),this.middlewareStack.use(y(this.config)),this.middlewareStack.use(Pe(this.config)),this.middlewareStack.use(St(this.config))}destroy(){super.destroy()}}class Zl extends wr{constructor(e){super(e),Object.setPrototypeOf(this,Zl.prototype)}}class ed extends Zl{constructor(e){super({name:"AccountSendingPausedException",$fault:"client",...e}),this.name="AccountSendingPausedException",this.$fault="client",Object.setPrototypeOf(this,ed.prototype)}}class td extends Zl{constructor(e){super({name:"ConfigurationSetDoesNotExistException",$fault:"client",...e}),this.name="ConfigurationSetDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,td.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class nd extends Zl{constructor(e){super({name:"ConfigurationSetSendingPausedException",$fault:"client",...e}),this.name="ConfigurationSetSendingPausedException",this.$fault="client",Object.setPrototypeOf(this,nd.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class rd extends Zl{constructor(e){super({name:"MailFromDomainNotVerifiedException",$fault:"client",...e}),this.name="MailFromDomainNotVerifiedException",this.$fault="client",Object.setPrototypeOf(this,rd.prototype)}}class sd extends Zl{constructor(e){super({name:"MessageRejected",$fault:"client",...e}),this.name="MessageRejected",this.$fault="client",Object.setPrototypeOf(this,sd.prototype)}}const od=async(e,t)=>{const n=e.body,r=fd(n.Error,t),s=new ed({$metadata:_d(e),...r});return _r(s,n)},id=async(e,t)=>{const n=e.body,r=md(n.Error,t),s=new td({$metadata:_d(e),...r});return _r(s,n)},ad=async(e,t)=>{const n=e.body,r=gd(n.Error,t),s=new nd({$metadata:_d(e),...r});return _r(s,n)},cd=async(e,t)=>{const n=e.body,r=yd(n.Error,t),s=new rd({$metadata:_d(e),...r});return _r(s,n)},ud=async(e,t)=>{const n=e.body,r=wd(n.Error,t),s=new sd({$metadata:_d(e),...r});return _r(s,n)},ld=(e,t)=>{const n={};let r=1;for(const t of e)null!==t&&(n[`member.${r}`]=t,r++);return n},dd=(e,t)=>{const n={};return null!=e.Data&&(n.Data=e.Data),null!=e.Charset&&(n.Charset=e.Charset),n},pd=(e,t)=>{const n={};return null!=e.Name&&(n.Name=e.Name),null!=e.Value&&(n.Value=e.Value),n},hd=(e,t)=>{const n={};if(null!=e.Source&&(n.Source=e.Source),null!=e.Destination){const t=((e,t)=>{const n={};if(null!=e.ToAddresses){const t=ld(e.ToAddresses);0===e.ToAddresses?.length&&(n.ToAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`ToAddresses.${e}`]=t}))}if(null!=e.CcAddresses){const t=ld(e.CcAddresses);0===e.CcAddresses?.length&&(n.CcAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`CcAddresses.${e}`]=t}))}if(null!=e.BccAddresses){const t=ld(e.BccAddresses);0===e.BccAddresses?.length&&(n.BccAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`BccAddresses.${e}`]=t}))}return n})(e.Destination);Object.entries(t).forEach((([e,t])=>{n[`Destination.${e}`]=t}))}if(null!=e.Message){const t=((e,t)=>{const n={};if(null!=e.Subject){const t=dd(e.Subject);Object.entries(t).forEach((([e,t])=>{n[`Subject.${e}`]=t}))}if(null!=e.Body){const t=((e,t)=>{const n={};if(null!=e.Text){const t=dd(e.Text);Object.entries(t).forEach((([e,t])=>{n[`Text.${e}`]=t}))}if(null!=e.Html){const t=dd(e.Html);Object.entries(t).forEach((([e,t])=>{n[`Html.${e}`]=t}))}return n})(e.Body);Object.entries(t).forEach((([e,t])=>{n[`Body.${e}`]=t}))}return n})(e.Message);Object.entries(t).forEach((([e,t])=>{n[`Message.${e}`]=t}))}if(null!=e.ReplyToAddresses){const t=ld(e.ReplyToAddresses);0===e.ReplyToAddresses?.length&&(n.ReplyToAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`ReplyToAddresses.${e}`]=t}))}if(null!=e.ReturnPath&&(n.ReturnPath=e.ReturnPath),null!=e.SourceArn&&(n.SourceArn=e.SourceArn),null!=e.ReturnPathArn&&(n.ReturnPathArn=e.ReturnPathArn),null!=e.Tags){const t=((e,t)=>{const n={};let r=1;for(const t of e){if(null===t)continue;const e=pd(t);Object.entries(e).forEach((([e,t])=>{n[`member.${r}.${e}`]=t})),r++}return n})(e.Tags);0===e.Tags?.length&&(n.Tags=[]),Object.entries(t).forEach((([e,t])=>{n[`Tags.${e}`]=t}))}return null!=e.ConfigurationSetName&&(n.ConfigurationSetName=e.ConfigurationSetName),n},fd=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},md=(e,t)=>{const n={};return void 0!==e.ConfigurationSetName&&(n.ConfigurationSetName=tr(e.ConfigurationSetName)),void 0!==e.message&&(n.message=tr(e.message)),n},gd=(e,t)=>{const n={};return void 0!==e.ConfigurationSetName&&(n.ConfigurationSetName=tr(e.ConfigurationSetName)),void 0!==e.message&&(n.message=tr(e.message)),n},yd=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},wd=(e,t)=>{const n={};return void 0!==e.message&&(n.message=tr(e.message)),n},_d=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),vd=vr(Zl),bd={"content-type":"application/x-www-form-urlencoded"},Ed=(e,t)=>((e,t)=>Vn(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>{if(e.length){const t=new Qr.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});t.addEntity("#xD","\r"),t.addEntity("#10","\n");const n=t.parse(e),r="#text",s=Object.keys(n)[0],o=n[s];return o[r]&&(o[s]=o[r],delete o[r]),Cr(o)}return{}})),Sd=async(e,t)=>{const n=await Ed(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n},xd=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class Pd extends Wn{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,Pd.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"SESClient",commandName:"SendEmailCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const n=bd;let r;return s={...hd(e),Action:"SendEmail",Version:"2010-12-01"},r=Object.entries(s).map((([e,t])=>Pr(e)+"="+Pr(t))).join("&"),(async(e,t,n,r,s)=>{const{hostname:o,protocol:i="https",port:a,path:c}=await e.endpoint(),l={protocol:i,hostname:o,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==r&&(l.hostname=r),void 0!==s&&(l.body=s),new u(l)})(t,n,"/",void 0,r);var s})(e,t)}deserialize(e,t){return(async(e,t)=>{if(e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await Sd(e.body,t)},r=xd(e,n.body);switch(r){case"AccountSendingPausedException":case"com.amazonaws.ses#AccountSendingPausedException":throw await od(n,t);case"ConfigurationSetDoesNotExist":case"com.amazonaws.ses#ConfigurationSetDoesNotExistException":throw await id(n,t);case"ConfigurationSetSendingPausedException":case"com.amazonaws.ses#ConfigurationSetSendingPausedException":throw await ad(n,t);case"MailFromDomainNotVerifiedException":case"com.amazonaws.ses#MailFromDomainNotVerifiedException":throw await cd(n,t);case"MessageRejected":case"com.amazonaws.ses#MessageRejected":throw await ud(n,t);default:const s=n.body;return vd({output:e,parsedBody:s.Error,errorCode:r})}})(e,t);let n={};return n=((e,t)=>{const n={};return void 0!==e.MessageId&&(n.MessageId=tr(e.MessageId)),n})((await Ed(e.body,t)).SendEmailResult),{$metadata:_d(e),...n}})(e,t)}}var Cd,Td=function(){function e(){this.sesClient=new Yl({}),this.noLastAccessDate=new Date(0).toLocaleString()}return e.prototype.notifyUser=function(e){return t=this,n=void 0,s=function(){var t,n,r,s;return function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(o){switch(o.label){case 0:return console.debug("Notifying ".concat(JSON.stringify(e,null,1))),t=e.lastAccess.toLocaleString()===this.noLastAccessDate?"not in the last ".concat(process.env.deleteDays," days"):e.lastAccess.toLocaleDateString(),n="I: QuickSight user ".concat(e.username," in account ").concat(process.env.accountAlias," will be deleted"),r='In order to <a href="https://aws.amazon.com/quicksight/pricing/">control costs ($24/month/user)</a>,\n    your AWS QuickSight user \''.concat(e.username,"' \n    will be deleted when you have not accessed QuickSight in ").concat(process.env.deleteDays," days. \n    CloudTrail records indicate that your last access was ").concat(t,".<br /><br />\n    \n    You can keep your user by logging in and taking actions in QuickSight. \n    Alternatively, you can do nothing, and your user will be automatically deleted. \n    Never fear, you simply log back into QuickSight and enter your e-mail, and your user gets recreated. \n    No dashboards or other resources will be deleted at this time (we may clean those up in the future, with notification, of course).<br /><br />\n    \n    Account Number: ").concat(process.env.awsAccountId,"<br />\n    Account Alias: ").concat(process.env.accountAlias,"<br />\n    Assumed Role: ").concat(e.iamRole,"<br />\n    Email: ").concat(e.email,'<br /><br />\n  \n    For further assistance, contact <a href="mailto:').concat(process.env.contact,'">').concat(process.env.contact,"</a>. Thank you and have a fantastically fun-filled day 🥳.\n    "),s=new Pd({Source:"".concat(process.env.accountAlias," Cloud Account Administrator<").concat(process.env.from,">"),Destination:{ToAddresses:[e.email],CcAddresses:JSON.parse(process.env.cc)},ReplyToAddresses:[process.env.replyTo],SourceArn:process.env.sesArn,Message:{Subject:{Data:n},Body:{Html:{Data:r}}}}),[4,this.sesClient.send(s)];case 1:return o.sent(),[2]}}))},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,a)}c((s=s.apply(t,n||[])).next())}));var t,n,r,s},e}(),Ad=function(e){this.arn=e.Arn,this.email=e.Email,this.role=Cd[e.Role],this.username=e.UserName,this.invalid="N/A"===this.username;var t=this.username.split("/"),n=t[0],r=t[1];this.iamRole=n,this.stsSession=r};!function(e){e.READER="READER",e.AUTHOR="AUTHOR",e.ADMIN="ADMIN"}(Cd||(Cd={}));const Id="required",kd="fn",Od="argv",Nd="ref",Rd="isSet",Dd="tree",Md="error",$d="endpoint",jd="PartitionResult",qd={[Id]:!1,type:"String"},Ud={[Id]:!0,default:!1,type:"Boolean"},Fd={[Nd]:"Endpoint"},Ld={[kd]:"booleanEquals",[Od]:[{[Nd]:"UseFIPS"},!0]},zd={[kd]:"booleanEquals",[Od]:[{[Nd]:"UseDualStack"},!0]},Bd={},Hd={[kd]:"booleanEquals",[Od]:[!0,{[kd]:"getAttr",[Od]:[{[Nd]:jd},"supportsFIPS"]}]},Vd={[kd]:"booleanEquals",[Od]:[!0,{[kd]:"getAttr",[Od]:[{[Nd]:jd},"supportsDualStack"]}]},Wd=[Ld],Kd=[zd],Gd=[{[Nd]:"Region"}],Qd={version:"1.0",parameters:{Region:qd,UseDualStack:Ud,UseFIPS:Ud,Endpoint:qd},rules:[{conditions:[{[kd]:Rd,[Od]:[Fd]}],type:Dd,rules:[{conditions:Wd,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Md},{type:Dd,rules:[{conditions:Kd,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Md},{endpoint:{url:Fd,properties:Bd,headers:Bd},type:$d}]}]},{type:Dd,rules:[{conditions:[{[kd]:Rd,[Od]:Gd}],type:Dd,rules:[{conditions:[{[kd]:"aws.partition",[Od]:Gd,assign:jd}],type:Dd,rules:[{conditions:[Ld,zd],type:Dd,rules:[{conditions:[Hd,Vd],type:Dd,rules:[{type:Dd,rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Bd,headers:Bd},type:$d}]}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Md}]},{conditions:Wd,type:Dd,rules:[{conditions:[Hd],type:Dd,rules:[{type:Dd,rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Bd,headers:Bd},type:$d}]}]},{error:"FIPS is enabled but this partition does not support FIPS",type:Md}]},{conditions:Kd,type:Dd,rules:[{conditions:[Vd],type:Dd,rules:[{type:Dd,rules:[{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Bd,headers:Bd},type:$d}]}]},{error:"DualStack is enabled but this partition does not support DualStack",type:Md}]},{type:Dd,rules:[{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dnsSuffix}",properties:Bd,headers:Bd},type:$d}]}]}]},{error:"Invalid Configuration: Missing Region",type:Md}]}]},Xd=(e,t={})=>gt(Qd,{endpointParams:e,logger:t.logger});class Jd extends On{constructor(e){const t=(n=(e=>{xr(process.version);const t=yi(e),n=()=>t().then(Er),r=(e=>({apiVersion:"2018-04-01",base64Decoder:e?.base64Decoder??Rn,base64Encoder:e?.base64Encoder??Dn,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Xd,logger:e?.logger??new Tn,serviceId:e?.serviceId??"QuickSight",urlParser:e?.urlParser??Wt,utf8Decoder:e?.utf8Decoder??L,utf8Encoder:e?.utf8Encoder??B}))(e);return{...r,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??Vo,credentialDefaultProvider:e?.credentialDefaultProvider??Uc(Za),defaultUserAgentProvider:e?.defaultUserAgentProvider??zo({serviceId:r.serviceId,clientVersion:"3.369.0"}),maxAttempts:e?.maxAttempts??So(ln),region:e?.region??So(At,It),requestHandler:e?.requestHandler??new Ln(n),retryMode:e?.retryMode??So({...pn,default:async()=>(await n()).retryMode||Xt}),sha256:e?.sha256??Bo.bind(null,"sha256"),streamCollector:e?.streamCollector??Bn,useDualstackEndpoint:e?.useDualstackEndpoint??So(Ct),useFipsEndpoint:e?.useFipsEndpoint??So(Tt)}})(e),{...n,useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,defaultSigningName:"quicksight"});var n;const r=Nt(t),s=Kt(r),o=dn(s),i=Ce(_e(o));super(i),this.config=i,this.middlewareStack.use(Pn(this.config)),this.middlewareStack.use(Mt(this.config)),this.middlewareStack.use(p(this.config)),this.middlewareStack.use(f(this.config)),this.middlewareStack.use(y(this.config)),this.middlewareStack.use(Pe(this.config)),this.middlewareStack.use(St(this.config))}destroy(){super.destroy()}}class Yd extends wr{constructor(e){super(e),Object.setPrototypeOf(this,Yd.prototype)}}class Zd extends Yd{constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,Zd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}var ep,tp,np;!function(e){e.visit=(e,t)=>void 0!==e.AmazonElasticsearchParameters?t.AmazonElasticsearchParameters(e.AmazonElasticsearchParameters):void 0!==e.AthenaParameters?t.AthenaParameters(e.AthenaParameters):void 0!==e.AuroraParameters?t.AuroraParameters(e.AuroraParameters):void 0!==e.AuroraPostgreSqlParameters?t.AuroraPostgreSqlParameters(e.AuroraPostgreSqlParameters):void 0!==e.AwsIotAnalyticsParameters?t.AwsIotAnalyticsParameters(e.AwsIotAnalyticsParameters):void 0!==e.JiraParameters?t.JiraParameters(e.JiraParameters):void 0!==e.MariaDbParameters?t.MariaDbParameters(e.MariaDbParameters):void 0!==e.MySqlParameters?t.MySqlParameters(e.MySqlParameters):void 0!==e.OracleParameters?t.OracleParameters(e.OracleParameters):void 0!==e.PostgreSqlParameters?t.PostgreSqlParameters(e.PostgreSqlParameters):void 0!==e.PrestoParameters?t.PrestoParameters(e.PrestoParameters):void 0!==e.RdsParameters?t.RdsParameters(e.RdsParameters):void 0!==e.RedshiftParameters?t.RedshiftParameters(e.RedshiftParameters):void 0!==e.S3Parameters?t.S3Parameters(e.S3Parameters):void 0!==e.ServiceNowParameters?t.ServiceNowParameters(e.ServiceNowParameters):void 0!==e.SnowflakeParameters?t.SnowflakeParameters(e.SnowflakeParameters):void 0!==e.SparkParameters?t.SparkParameters(e.SparkParameters):void 0!==e.SqlServerParameters?t.SqlServerParameters(e.SqlServerParameters):void 0!==e.TeradataParameters?t.TeradataParameters(e.TeradataParameters):void 0!==e.TwitterParameters?t.TwitterParameters(e.TwitterParameters):void 0!==e.AmazonOpenSearchParameters?t.AmazonOpenSearchParameters(e.AmazonOpenSearchParameters):void 0!==e.ExasolParameters?t.ExasolParameters(e.ExasolParameters):void 0!==e.DatabricksParameters?t.DatabricksParameters(e.DatabricksParameters):t._(e.$unknown[0],e.$unknown[1])}(ep||(ep={}));class rp extends Yd{constructor(e){super({name:"InternalFailureException",$fault:"server",...e}),this.name="InternalFailureException",this.$fault="server",Object.setPrototypeOf(this,rp.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class sp extends Yd{constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,sp.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class op extends Yd{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,op.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class ip extends Yd{constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),this.name="ThrottlingException",this.$fault="client",Object.setPrototypeOf(this,ip.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class ap extends Yd{constructor(e){super({name:"ResourceUnavailableException",$fault:"server",...e}),this.name="ResourceUnavailableException",this.$fault="server",Object.setPrototypeOf(this,ap.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class cp extends Yd{constructor(e){super({name:"PreconditionNotMetException",$fault:"client",...e}),this.name="PreconditionNotMetException",this.$fault="client",Object.setPrototypeOf(this,cp.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}(tp||(tp={})).visit=(e,t)=>void 0!==e.ProjectOperation?t.ProjectOperation(e.ProjectOperation):void 0!==e.FilterOperation?t.FilterOperation(e.FilterOperation):void 0!==e.CreateColumnsOperation?t.CreateColumnsOperation(e.CreateColumnsOperation):void 0!==e.RenameColumnOperation?t.RenameColumnOperation(e.RenameColumnOperation):void 0!==e.CastColumnTypeOperation?t.CastColumnTypeOperation(e.CastColumnTypeOperation):void 0!==e.TagColumnOperation?t.TagColumnOperation(e.TagColumnOperation):void 0!==e.UntagColumnOperation?t.UntagColumnOperation(e.UntagColumnOperation):void 0!==e.OverrideDatasetParameterOperation?t.OverrideDatasetParameterOperation(e.OverrideDatasetParameterOperation):t._(e.$unknown[0],e.$unknown[1]),function(e){e.visit=(e,t)=>void 0!==e.RelationalTable?t.RelationalTable(e.RelationalTable):void 0!==e.CustomSql?t.CustomSql(e.CustomSql):void 0!==e.S3Source?t.S3Source(e.S3Source):t._(e.$unknown[0],e.$unknown[1])}(np||(np={}));class up extends Yd{constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),this.name="InvalidNextTokenException",this.$fault="client",Object.setPrototypeOf(this,up.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}const lp=vr(Yd),dp=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{Message:tr,RequestId:tr});Object.assign(n,s);const o=new Zd({$metadata:_p(e),...n});return _r(o,e.body)},pp=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{Message:tr,RequestId:tr});Object.assign(n,s);const o=new rp({$metadata:_p(e),...n});return _r(o,e.body)},hp=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{Message:tr,RequestId:tr});Object.assign(n,s);const o=new up({$metadata:_p(e),...n});return _r(o,e.body)},fp=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{Message:tr,RequestId:tr});Object.assign(n,s);const o=new sp({$metadata:_p(e),...n});return _r(o,e.body)},mp=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{Message:tr,RequestId:tr});Object.assign(n,s);const o=new cp({$metadata:_p(e),...n});return _r(o,e.body)},gp=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{Message:tr,RequestId:tr,ResourceType:tr});Object.assign(n,s);const o=new op({$metadata:_p(e),...n});return _r(o,e.body)},yp=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{Message:tr,RequestId:tr,ResourceType:tr});Object.assign(n,s);const o=new ap({$metadata:_p(e),...n});return _r(o,e.body)},wp=async(e,t)=>{const n=Ar({}),r=e.body,s=Ir(r,{Message:tr,RequestId:tr});Object.assign(n,s);const o=new ip({$metadata:_p(e),...n});return _r(o,e.body)},_p=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),vp=(e,t)=>((e,t)=>Vn(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),bp=async(e,t)=>{const n=await vp(e,t);return n.message=n.message??n.Message,n},Ep=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=(s=e.headers,"x-amzn-errortype",Object.keys(s).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var s;return void 0!==r?n(e.headers[r]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0};class Sp extends Wn{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,Sp.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"QuickSightClient",commandName:"ListUsersCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint();let i=`${o?.endsWith("/")?o.slice(0,-1):o||""}/accounts/{AwsAccountId}/namespaces/{Namespace}/users`;i=Dr(i,e,"AwsAccountId",(()=>e.AwsAccountId),"{AwsAccountId}",!1),i=Dr(i,e,"Namespace",(()=>e.Namespace),"{Namespace}",!1);const a=Ar({"next-token":[,e.NextToken],"max-results":[()=>void 0!==e.MaxResults,()=>e.MaxResults.toString()]});return new u({protocol:r,hostname:n,port:s,method:"GET",headers:{},path:i,query:a,body:void 0})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await bp(e.body,t)},r=Ep(e,n.body);switch(r){case"AccessDeniedException":case"com.amazonaws.quicksight#AccessDeniedException":throw await dp(n,t);case"InternalFailureException":case"com.amazonaws.quicksight#InternalFailureException":throw await pp(n,t);case"InvalidNextTokenException":case"com.amazonaws.quicksight#InvalidNextTokenException":throw await hp(n,t);case"InvalidParameterValueException":case"com.amazonaws.quicksight#InvalidParameterValueException":throw await fp(n,t);case"PreconditionNotMetException":case"com.amazonaws.quicksight#PreconditionNotMetException":throw await mp(n,t);case"ResourceNotFoundException":case"com.amazonaws.quicksight#ResourceNotFoundException":throw await gp(n,t);case"ResourceUnavailableException":case"com.amazonaws.quicksight#ResourceUnavailableException":throw await yp(n,t);case"ThrottlingException":case"com.amazonaws.quicksight#ThrottlingException":throw await wp(n,t);default:const s=n.body;return lp({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=Ar({$metadata:_p(e)}),r=Zn(er(await vp(e.body,t)),"body"),s=Ir(r,{NextToken:tr,RequestId:tr,UserList:$r});return Object.assign(n,s),Ar(n,{Status:[,e.statusCode]}),n})(e,t)}}class xp extends Wn{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,n){this.middlewareStack.use(qt(t,this.serialize,this.deserialize)),this.middlewareStack.use(Vt(t,xp.getEndpointParameterInstructions()));const r=e.concat(this.middlewareStack),{logger:s}=t,o={logger:s,clientName:"QuickSightClient",commandName:"DeleteUserCommand",inputFilterSensitiveLog:e=>e,outputFilterSensitiveLog:e=>e},{requestHandler:i}=t;return r.resolve((e=>i.handle(e.request,n||{})),o)}serialize(e,t){return(async(e,t)=>{const{hostname:n,protocol:r="https",port:s,path:o}=await t.endpoint();let i=`${o?.endsWith("/")?o.slice(0,-1):o||""}/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}`;return i=Dr(i,e,"UserName",(()=>e.UserName),"{UserName}",!1),i=Dr(i,e,"AwsAccountId",(()=>e.AwsAccountId),"{AwsAccountId}",!1),i=Dr(i,e,"Namespace",(()=>e.Namespace),"{Namespace}",!1),new u({protocol:r,hostname:n,port:s,method:"DELETE",headers:{},path:i,body:void 0})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const n={...e,body:await bp(e.body,t)},r=Ep(e,n.body);switch(r){case"AccessDeniedException":case"com.amazonaws.quicksight#AccessDeniedException":throw await dp(n,t);case"InternalFailureException":case"com.amazonaws.quicksight#InternalFailureException":throw await pp(n,t);case"InvalidParameterValueException":case"com.amazonaws.quicksight#InvalidParameterValueException":throw await fp(n,t);case"PreconditionNotMetException":case"com.amazonaws.quicksight#PreconditionNotMetException":throw await mp(n,t);case"ResourceNotFoundException":case"com.amazonaws.quicksight#ResourceNotFoundException":throw await gp(n,t);case"ResourceUnavailableException":case"com.amazonaws.quicksight#ResourceUnavailableException":throw await yp(n,t);case"ThrottlingException":case"com.amazonaws.quicksight#ThrottlingException":throw await wp(n,t);default:const s=n.body;return lp({output:e,parsedBody:s,errorCode:r})}})(e,t);const n=Ar({$metadata:_p(e)}),r=Zn(er(await vp(e.body,t)),"body"),s=Ir(r,{RequestId:tr});return Object.assign(n,s),Ar(n,{Status:[,e.statusCode]}),n})(e,t)}}var Pp=function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},Cp=function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},Tp=function(){function e(){this.awsAccountId=process.env.awsAccountId,this.quickSightClient=new Jd({})}return e.prototype.retrieveUsers=function(){return Pp(this,void 0,void 0,(function(){var t,n,r,s;return Cp(this,(function(o){switch(o.label){case 0:t=[],n="",o.label=1;case 1:return r=new Sp({AwsAccountId:this.awsAccountId,Namespace:e.namespace,NextToken:n}),[4,this.quickSightClient.send(r)];case 2:s=o.sent(),n=s.NextToken,s.UserList.forEach((function(e){return t.push(new Ad(e))})),o.label=3;case 3:if(n)return[3,1];o.label=4;case 4:return[2,t]}}))}))},e.prototype.deleteUser=function(t){return Pp(this,void 0,void 0,(function(){var n;return Cp(this,(function(r){switch(r.label){case 0:return console.debug("Deleting ".concat(JSON.stringify(t,null,1))),n=new xp({AwsAccountId:this.awsAccountId,Namespace:e.namespace,UserName:t.username}),[4,this.quickSightClient.send(n)];case 1:return r.sent(),[2]}}))}))},e.namespace="default",e}();const Ap=function(){return e=void 0,t=void 0,r=function(){var e,t,n,r,s,o,i,a,c,u,l,d,p,h,f,m,g,y,w,_;return function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(v){switch(v.label){case 0:return e=process.env,t=e.deleteDays,n=e.notifyDays,r="true"===process.env.enableNotification,s=new Date,o=new Date,s.setDate(s.getDate()-parseInt(t)),o.setDate(o.getDate()-parseInt(n)),console.info("Notifying users with last access date on: ".concat(o.toLocaleDateString()," (").concat(n," days ago).")),console.info("Deleting users with last access date on or before: ".concat(s.toLocaleDateString()," (").concat(t," days ago).")),console.info("Notification enabled? ".concat(r,".")),i=new Tp,a=new Du,c=new Td,u=new kl,[4,i.retrieveUsers()];case 1:return l=v.sent(),[4,a.retrieveQuickSightUserEvents(s)];case 2:for(d=v.sent(),p=0,h=l;p<h.length;p++)(_=h[p]).lastAccess=a.getLastAccessDate(_,d);console.debug("QuickSight Users:\n".concat(JSON.stringify(l,null,2))),u.queueMetric({MetricName:"PriorQuickSightUsersCount",Value:l.length}),f=0,m=0,g=0,y=0,w=l,v.label=3;case 3:return y<w.length?(_=w[y]).invalid?(console.warn("Invalid user: ".concat(JSON.stringify(_))),f++,[3,8]):[3,4]:[3,9];case 4:return _.lastAccess<s?(m++,[4,i.deleteUser(_)]):[3,6];case 5:return v.sent(),[3,8];case 6:return r&&_.role!==Cd.READER&&_.lastAccess.toLocaleDateString()===o.toLocaleDateString()?(g++,[4,c.notifyUser(_)]):[3,8];case 7:v.sent(),v.label=8;case 8:return y++,[3,3];case 9:return u.queueMetric({MetricName:"InvalidUsersCount",Value:f}),u.queueMetric({MetricName:"UsersDeletedCount",Value:m}),u.queueMetric({MetricName:"NotificationsSentCount",Value:g}),u.queueMetric({MetricName:"RemainingQuickSightUsersCount",Value:l.length-m}),[4,u.emitQueuedMetrics()];case 10:return v.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(s,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}));var e,t,n,r}})(),module.exports=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,